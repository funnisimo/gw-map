{"version":3,"file":"gw-dig.min.js","sources":["../js/site/digSite.js","../js/site/utils.js","../js/site/gridSite.js","../js/site/mapSite.js","../js/types.js","../js/room.js","../js/hall.js","../js/lake.js","../js/bridge.js","../js/stairs.js","../js/loop.js","../js/log/logger.js","../js/blueprint/buildStep.js","../js/blueprint/blueprint.js","../js/log/consoleLogger.js","../js/digger.js","../js/blueprint/data.js","../js/blueprint/builder.js","../js/horde/machineHorde.js","../js/dungeon.js"],"sourcesContent":["var _a, _b;\nimport * as GWM from 'gw-map';\nexport const NOTHING = GWM.tile.get('NULL').index;\nexport const FLOOR = GWM.tile.get('FLOOR').index;\nexport const DOOR = GWM.tile.get('DOOR').index;\nexport const SECRET_DOOR = (_b = (_a = GWM.tile.get('DOOR_SECRET')) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\nexport const WALL = GWM.tile.get('WALL').index;\nexport const DEEP = GWM.tile.get('LAKE').index;\nexport const SHALLOW = GWM.tile.get('SHALLOW').index;\nexport const BRIDGE = GWM.tile.get('BRIDGE').index;\nexport const UP_STAIRS = GWM.tile.get('UP_STAIRS').index;\nexport const DOWN_STAIRS = GWM.tile.get('DOWN_STAIRS').index;\nexport const IMPREGNABLE = GWM.tile.get('IMPREGNABLE').index;\nexport const TILEMAP = {\n    [NOTHING]: 'NULL',\n    [FLOOR]: 'FLOOR',\n    [DOOR]: 'DOOR',\n    [WALL]: 'WALL',\n    [IMPREGNABLE]: 'IMPREGNABLE',\n    [DEEP]: 'LAKE',\n    [SHALLOW]: 'SHALLOW',\n    [BRIDGE]: 'BRIDGE',\n    [UP_STAIRS]: 'UP_STAIRS',\n    [DOWN_STAIRS]: 'DOWN_STAIRS',\n};\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\n// import * as TYPES from './types';\nconst DIRS = GWU.xy.DIRS;\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n//                 attachDoor(map, room, opts, x, y, oppDir);\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(site, x, y) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    solutionDir = GWU.xy.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.xy.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.xy.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\nexport function chooseRandomDoorSites(site) {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n    const DOORS = [[], [], [], []];\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n    const h = site.height;\n    const w = site.width;\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.xy.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.xy.DIRS[dir][0];\n                    newY = j + GWU.xy.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (k = 0; k < 10 && site.hasXY(newX, newY) && !doorSiteFailed; k++) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.xy.DIRS[dir][0];\n                        newY += GWU.xy.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n    let doorSites = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = site.rng.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.xy.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n//     const site = new SITE.GridSite(map);\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n//         if (roomGrid[x][y]) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.xy.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorIndexes = site.rng.sequence(mapDoors.length);\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = site.rng.sequence(4);\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n//             //     return [x0, y0] as GWU.xy.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\nexport function copySite(dest, source, offsetX = 0, offsetY = 0) {\n    GWU.xy.forRect(dest.width, dest.height, (x, y) => {\n        const otherX = x - offsetX;\n        const otherY = y - offsetY;\n        const v = source.getTileIndex(otherX, otherY);\n        if (!v)\n            return;\n        dest.setTile(x, y, v);\n    });\n}\nexport function fillCostGrid(source, costGrid) {\n    costGrid.update((_v, x, y) => source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n}\nexport function siteDisruptedByXY(site, x, y, options = {}) {\n    var _a, _b, _c;\n    (_a = options.offsetX) !== null && _a !== void 0 ? _a : (options.offsetX = 0);\n    (_b = options.offsetY) !== null && _b !== void 0 ? _b : (options.offsetY = 0);\n    (_c = options.machine) !== null && _c !== void 0 ? _c : (options.machine = 0);\n    if (GWU.xy.arcCount(x, y, (i, j) => {\n        return site.isPassable(i, j);\n    }) <= 1)\n        return false;\n    const blockingGrid = GWU.grid.alloc(site.width, site.height);\n    blockingGrid[x][y] = 1;\n    const result = siteDisruptedBy(site, blockingGrid, options);\n    GWU.grid.free(blockingGrid);\n    return result;\n}\nexport function siteDisruptedBy(site, blockingGrid, options = {}) {\n    var _a, _b, _c;\n    (_a = options.offsetX) !== null && _a !== void 0 ? _a : (options.offsetX = 0);\n    (_b = options.offsetY) !== null && _b !== void 0 ? _b : (options.offsetY = 0);\n    (_c = options.machine) !== null && _c !== void 0 ? _c : (options.machine = 0);\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const blockingX = i + options.offsetX;\n        const blockingY = j + options.offsetY;\n        if (blockingGrid.get(blockingX, blockingY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        }\n        else if (site.isPassable(i, j) &&\n            (site.getMachine(i, j) == 0 ||\n                site.getMachine(i, j) == options.machine)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (options.updateWalkable) {\n        if (!options.updateWalkable(walkableGrid)) {\n            return true;\n        }\n    }\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function siteDisruptedSize(site, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        }\n        else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    if (disrupts)\n        return disrupts;\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                }\n                else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\nexport function computeDistanceMap(site, distanceMap, originX, originY, maxDistance) {\n    const costGrid = GWU.grid.alloc(site.width, site.height);\n    fillCostGrid(site, costGrid);\n    GWU.path.calculateDistances(distanceMap, originX, originY, costGrid, false, maxDistance + 1 // max distance is the same as max size of this blueprint\n    );\n    GWU.grid.free(costGrid);\n}\nexport function clearInteriorFlag(site, machine) {\n    for (let i = 0; i < site.width; i++) {\n        for (let j = 0; j < site.height; j++) {\n            if (site.getMachine(i, j) == machine &&\n                !site.hasCellFlag(i, j, GWM.flags.Cell.IS_WIRED | GWM.flags.Cell.IS_CIRCUIT_BREAKER)) {\n                site.setMachine(i, j, 0);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as Utils from './utils';\nimport * as DIG from './digSite';\nexport class GridSite {\n    constructor(width, height) {\n        this.rng = GWU.rng.random;\n        this.tiles = GWU.grid.alloc(width, height);\n        this.doors = GWU.grid.alloc(width, height);\n    }\n    free() {\n        GWU.grid.free(this.tiles);\n        GWU.grid.free(this.doors);\n    }\n    clear() {\n        this.tiles.fill(0);\n        this.doors.fill(0);\n    }\n    dump() {\n        this.tiles.dump();\n    }\n    drawInto(buffer) {\n        buffer.blackOut();\n        this.tiles.forEach((t, x, y) => {\n            const tile = GWM.tile.get(t);\n            buffer.drawSprite(x, y, tile.sprite);\n        });\n    }\n    setSeed(seed) {\n        this.rng.seed(seed);\n    }\n    get width() {\n        return this.tiles.width;\n    }\n    get height() {\n        return this.tiles.height;\n    }\n    hasXY(x, y) {\n        return this.tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.tiles.isBoundaryXY(x, y);\n    }\n    isPassable(x, y) {\n        return (this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y));\n    }\n    isNothing(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.NOTHING;\n    }\n    isDiggable(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.NOTHING;\n    }\n    isFloor(x, y) {\n        return this.tiles.get(x, y) == DIG.FLOOR;\n    }\n    isDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.DOOR;\n    }\n    isSecretDoor(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.SECRET_DOOR;\n    }\n    isBridge(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.BRIDGE;\n    }\n    isWall(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.WALL || v === DIG.IMPREGNABLE;\n    }\n    blocksMove(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y) || this.isDeep(x, y);\n    }\n    blocksDiagonal(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksPathing(x, y) {\n        return (this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y));\n    }\n    blocksVision(x, y) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n    blocksItems(x, y) {\n        return this.blocksPathing(x, y) || this.blocksPathing(x, y);\n    }\n    blocksEffects(x, y) {\n        return this.isWall(x, y);\n    }\n    isStairs(x, y) {\n        const v = this.tiles.get(x, y);\n        return v === DIG.UP_STAIRS || v === DIG.DOWN_STAIRS;\n    }\n    isDeep(x, y) {\n        return this.tiles.get(x, y) === DIG.DEEP;\n    }\n    isShallow(x, y) {\n        return this.tiles.get(x, y) === DIG.SHALLOW;\n    }\n    isAnyLiquid(x, y) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n    isSet(x, y) {\n        return (this.tiles.get(x, y) || 0) > 0;\n    }\n    getTileIndex(x, y) {\n        return this.tiles.get(x, y) || 0;\n    }\n    setTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        if (!this.tiles.hasXY(x, y))\n            return false;\n        this.tiles[x][y] = tile;\n        return true;\n    }\n    clearCell(x, y, tile) {\n        return this.setTile(x, y, tile);\n    }\n    hasTile(x, y, tile) {\n        if (tile instanceof GWM.tile.Tile) {\n            tile = tile.index;\n        }\n        if (typeof tile === 'string') {\n            const obj = GWM.tile.tiles[tile];\n            if (!obj)\n                throw new Error('Failed to find tie: ' + tile);\n            tile = obj.index;\n        }\n        return this.tiles.hasXY(x, y) && this.tiles[x][y] == tile;\n    }\n    getMachine(_x, _y) {\n        return 0;\n    }\n    updateDoorDirs() {\n        this.doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x, y) {\n        return this.doors[x][y];\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as Utils from './utils';\nconst Flags = GWM.flags.Cell;\nexport class MapSnapshot {\n    constructor(site, snap) {\n        this.needsAnalysis = true;\n        this.isUsed = false;\n        this.site = site;\n        this.snapshot = snap;\n        this.needsAnalysis = this.site.needsAnalysis;\n        this.isUsed = true;\n    }\n    restore() {\n        this.site.snapshots.revertMapTo(this.snapshot);\n        this.site.needsAnalysis = this.needsAnalysis;\n        this.cancel();\n    }\n    cancel() {\n        this.site.snapshots.release(this.snapshot);\n    }\n}\nexport class MapSite {\n    constructor(map) {\n        this.machineCount = 0;\n        this.needsAnalysis = true;\n        this.map = map;\n        this.doors = GWU.grid.alloc(map.width, map.height);\n        this.snapshots = new GWM.map.SnapshotManager(map);\n    }\n    get rng() {\n        return this.map.rng;\n    }\n    get depth() {\n        return this.map.properties.depth || 0;\n    }\n    // get seed() {\n    //     return this.map.seed;\n    // }\n    // set seed(v: number) {\n    //     this.map.seed = v;\n    // }\n    setSeed(seed) {\n        this.map.seed = seed;\n    }\n    get width() {\n        return this.map.width;\n    }\n    get height() {\n        return this.map.height;\n    }\n    free() {\n        GWU.grid.free(this.doors);\n    }\n    dump() {\n        this.map.dump();\n    }\n    drawInto(buffer) {\n        this.map.drawInto(buffer);\n    }\n    hasXY(x, y) {\n        return this.map.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.map.isBoundaryXY(x, y);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.map.cell(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).clearCellFlag(flag);\n    }\n    hasTile(x, y, tile) {\n        return this.map.cell(x, y).hasTile(tile);\n    }\n    setTile(x, y, tile, opts) {\n        this.needsAnalysis = true;\n        return this.map.setTile(x, y, tile, opts);\n    }\n    clearCell(x, y, tile) {\n        this.needsAnalysis = true;\n        this.map.clearTiles(x, y, tile);\n        return true;\n    }\n    getTileIndex(x, y) {\n        if (!this.hasXY(x, y))\n            return 0;\n        const cell = this.map.cell(x, y);\n        const tile = cell.highestPriorityTile();\n        return tile.index;\n    }\n    clear() {\n        this.needsAnalysis = true;\n        this.map.cells.forEach((c) => c.clear());\n    }\n    hasItem(x, y) {\n        return this.map.cell(x, y).hasItem();\n    }\n    makeItem(id, makeOptions) {\n        return GWM.item.make(id, makeOptions);\n    }\n    makeRandomItem(tags, makeOptions) {\n        tags.rng = this.rng;\n        return GWM.item.makeRandom(tags, makeOptions);\n    }\n    addItem(x, y, item) {\n        this.needsAnalysis = true;\n        return this.map.addItem(x, y, item);\n    }\n    hasActor(x, y) {\n        return this.map.hasActor(x, y);\n    }\n    spawnHorde(horde, x, y, opts = {}) {\n        return horde.spawn(this.map, x, y, opts);\n    }\n    blocksMove(x, y) {\n        return this.map.cell(x, y).blocksMove();\n    }\n    blocksVision(x, y) {\n        return this.map.cell(x, y).blocksVision();\n    }\n    blocksDiagonal(x, y) {\n        return this.map\n            .cell(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_DIAGONAL);\n    }\n    blocksPathing(x, y) {\n        const info = this.map.cell(x, y);\n        return (info.hasEntityFlag(GWM.flags.Entity.L_BLOCKS_MOVE) ||\n            info.hasTileFlag(GWM.tile.flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksItems(x, y) {\n        return this.map\n            .cell(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_ITEMS);\n    }\n    blocksEffects(x, y) {\n        return this.map\n            .cell(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isWall(x, y) {\n        return this.map.cell(x, y).isWall();\n    }\n    isStairs(x, y) {\n        return this.map.cell(x, y).isStairs();\n    }\n    isSet(x, y) {\n        return this.hasXY(x, y) && !this.map.cell(x, y).isNull();\n    }\n    isDiggable(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.isNull())\n            return true;\n        if (cell.isWall())\n            return true;\n        return false;\n    }\n    isNothing(x, y) {\n        return this.hasXY(x, y) && this.map.cell(x, y).isNull();\n    }\n    isFloor(x, y) {\n        return this.isPassable(x, y);\n    }\n    isBridge(x, y) {\n        return this.map.cell(x, y).hasTileFlag(GWM.tile.flags.Tile.T_BRIDGE);\n    }\n    isDoor(x, y) {\n        return this.map.cell(x, y).hasTileFlag(GWM.tile.flags.Tile.T_IS_DOOR);\n    }\n    isSecretDoor(x, y) {\n        return this.map\n            .cell(x, y)\n            .hasEntityFlag(GWM.flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    isDeep(x, y) {\n        return this.map\n            .cell(x, y)\n            .hasTileFlag(GWM.tile.flags.Tile.T_DEEP_WATER);\n    }\n    isShallow(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (!!cell.depthTile(GWM.flags.Depth.LIQUID) &&\n            !cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isAnyLiquid(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.map.cell(x, y);\n        return (cell.hasDepthTile(GWM.flags.Depth.LIQUID) ||\n            cell.hasTileFlag(GWM.tile.flags.Tile.T_IS_DEEP_LIQUID));\n    }\n    isOccupied(x, y) {\n        return this.hasItem(x, y) || this.hasActor(x, y);\n    }\n    isPassable(x, y) {\n        const info = this.map.cell(x, y);\n        return !(info.blocksMove() || info.blocksPathing());\n    }\n    // tileBlocksMove(tile: number): boolean {\n    //     return GWM.tile.get(tile).blocksMove();\n    // }\n    snapshot() {\n        return new MapSnapshot(this, this.snapshots.takeNew());\n    }\n    getChokeCount(x, y) {\n        return this.map.cell(x, y).chokeCount;\n    }\n    setChokeCount(x, y, count) {\n        this.map.cell(x, y).chokeCount = count;\n    }\n    analyze() {\n        if (this.needsAnalysis) {\n            GWM.map.analyze(this.map);\n        }\n        this.needsAnalysis = false;\n    }\n    buildEffect(effect, x, y) {\n        this.needsAnalysis = true;\n        return effect.trigger({ map: this.map, x, y }, { rng: this.rng });\n    }\n    nextMachineId() {\n        return ++this.map.machineCount;\n    }\n    getMachine(x, y) {\n        return this.map.cell(x, y).machineId;\n    }\n    setMachine(x, y, id, isRoom = true) {\n        this.needsAnalysis = true;\n        this.map.cell(x, y).machineId = id;\n        if (id == 0) {\n            this.map.clearCellFlag(x, y, Flags.IS_IN_MACHINE);\n        }\n        else {\n            this.map.setCellFlag(x, y, isRoom ? Flags.IS_IN_ROOM_MACHINE : Flags.IS_IN_AREA_MACHINE);\n        }\n    }\n    updateDoorDirs() {\n        this.doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x, y) {\n        return this.doors[x][y];\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Hall extends GWU.xy.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\nexport function makeHall(loc, dirIndex, hallLength, hallWidth = 1) {\n    const dir = GWU.xy.DIRS[dirIndex];\n    const x = Math.min(loc[0], loc[0] + dir[0] * (hallLength - 1));\n    const y = Math.min(loc[1], loc[1] + dir[1] * (hallLength - 1));\n    const width = Math.abs(dir[0] * hallLength) || hallWidth;\n    const height = Math.abs(dir[1] * hallLength) || hallWidth;\n    return new Hall(x, y, width, height);\n}\nexport class Room extends GWU.xy.Bounds {\n    constructor(x, y, width, height) {\n        super(x, y, width, height);\n        this.doors = [];\n        this.hall = null;\n    }\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d)\n                    return;\n                if (d[0] < 0 || d[1] < 0)\n                    return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.xy.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\nexport function checkConfig(config, expected = {}) {\n    config = config || {};\n    expected = expected || {};\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error('Missing required config for room digger: ' + key);\n            }\n        }\n        else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        }\n        else if (Array.isArray(expect)) {\n            have = have || expect;\n        }\n        else {\n            // just set the value\n            have = have || expect;\n        }\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n    return config;\n}\nexport class RoomDigger {\n    constructor(config, expected = {}) {\n        this.options = {};\n        this.doors = [];\n        this._setOptions(config, expected);\n    }\n    _setOptions(config, expected = {}) {\n        this.options = checkConfig(config, expected);\n    }\n    create(site) {\n        const result = this.carve(site);\n        if (result) {\n            if (!result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n}\nexport var rooms = {};\nexport class ChoiceRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n    _setOptions(config, expected = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = (rng) => rng.item(choices);\n        }\n        else if (typeof choices == 'object') {\n            this.randomRoom = (rng) => rng.weighted(choices);\n        }\n        else {\n            throw new Error('Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }');\n        }\n    }\n    carve(site) {\n        let id = this.randomRoom(site.rng);\n        const room = rooms[id];\n        if (!room) {\n            GWU.ERROR('Missing room digger choice: ' + id);\n        }\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\nexport function choiceRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\nexport class Cavern extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n        const blob = new GWU.blob.Blob({\n            rng: site.rng,\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n        const bounds = blob.carve(blobGrid.width, blobGrid.height, (x, y) => (blobGrid[x][y] = 1));\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v)\n                site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\nexport function cavern(config, site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        const room = new TYPES.Room(Math.min(roomX, roomX2), Math.min(roomY, roomY2), Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n        room.doors[GWU.xy.DOWN] = [Math.floor(site.width / 2), site.height - 2];\n        return room;\n    }\n}\nexport function brogueEntrance(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\nexport class Cross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const roomWidth = width;\n        const roomWidth2 = Math.max(3, Math.floor((width * site.rng.range(25, 75)) / 100)); // [4,20]\n        const roomHeight = Math.max(3, Math.floor((height * site.rng.range(25, 75)) / 100)); // [2,5]\n        const roomHeight2 = height;\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 = roomX + site.rng.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY = roomY2 +\n            site.rng.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) => site.setTile(x, y, tile));\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(roomX, roomY2, Math.max(roomWidth, roomWidth2), Math.max(roomHeight, roomHeight2));\n    }\n}\nexport function cross(config, site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        let minorWidth = Math.max(3, Math.floor((width * site.rng.range(25, 50)) / 100)); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(3, Math.floor((height * site.rng.range(25, 50)) / 100)); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.xy.forRect(x, y, width, minorHeight, (x, y) => site.setTile(x, y, tile));\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x2, y2, minorWidth, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(Math.min(x, x2), Math.min(y, y2), Math.max(width, minorWidth), Math.max(height, minorHeight));\n    }\n}\nexport function symmetricalCross(config, site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\nexport class Rectangular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n    carve(site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\nexport function rectangular(config, site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\nexport class Circular extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function circular(config, site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\nexport class BrogueDonut extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n    carve(site) {\n        const radius = this.options.radius.value(site.rng);\n        const ringMinWidth = this.options.ringMinWidth.value(site.rng);\n        const holeMinSize = this.options.holeMinSize.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        if (radius > ringMinWidth + holeMinSize &&\n            site.rng.chance(this.options.holeChance.value(site.rng))) {\n            GWU.xy.forCircle(x, y, site.rng.range(holeMinSize, radius - holeMinSize), (x, y) => site.setTile(x, y, 0));\n        }\n        return new TYPES.Room(x - radius, y - radius, radius * 2 + 1, radius * 2 + 1);\n    }\n}\nexport function brogueDonut(config, site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n    carve(site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value(site.rng);\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || SITE.FLOOR;\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n        GWU.xy.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n        for (i = 0; i < chunkCount;) {\n            x = site.rng.range(minX, maxX);\n            y = site.rng.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX)\n                    continue;\n                if (x + 2 > maxX)\n                    continue;\n                if (y - 2 < minY)\n                    continue;\n                if (y + 2 > maxY)\n                    continue;\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n                GWU.xy.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\nexport function chunkyRoom(config, site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\nexport function install(id, room) {\n    rooms[id] = room;\n    return room;\n}\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\nconst DIRS = GWU.xy.DIRS;\nexport function isDoorLoc(site, loc, dir) {\n    if (!site.hasXY(loc[0], loc[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1]))\n        return false; // must be a wall/diggable space\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1]))\n        return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1]))\n        return false; // must have floor in opposite direction\n    return true;\n}\nexport function pickWidth(width, rng) {\n    return GWU.clamp(_pickWidth(width, rng), 1, 3);\n}\nfunction _pickWidth(width, rng) {\n    if (!width)\n        return 1;\n    if (typeof width === 'number')\n        return width;\n    rng = rng !== null && rng !== void 0 ? rng : GWU.rng.random;\n    if (Array.isArray(width)) {\n        width = rng.weighted(width) + 1;\n    }\n    else if (typeof width === 'string') {\n        width = GWU.range.make(width).value(rng);\n    }\n    else if (width instanceof GWU.range.Range) {\n        width = width.value(rng);\n    }\n    else {\n        const weights = width;\n        width = Number.parseInt(rng.weighted(weights));\n    }\n    return width;\n}\nexport function pickLength(dir, lengths, rng) {\n    if (dir == GWU.xy.UP || dir == GWU.xy.DOWN) {\n        return lengths[1].value(rng);\n    }\n    else {\n        return lengths[0].value(rng);\n    }\n}\nexport function pickHallDirection(site, doors, lengths) {\n    // Pick a direction.\n    let dir = GWU.xy.NO_DIRECTION;\n    if (dir == GWU.xy.NO_DIRECTION) {\n        const dirs = site.rng.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.xy.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\nexport function pickHallExits(site, x, y, dir, obliqueChance) {\n    let newX, newY;\n    const allowObliqueHallwayExit = site.rng.chance(obliqueChance);\n    const hallDoors = [\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n        if ((dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)) {\n            // do nothing\n        }\n        else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\nexport class HallDigger {\n    constructor(options = {}) {\n        this.config = {\n            width: 1,\n            length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n            tile: SITE.FLOOR,\n            obliqueChance: 15,\n            chance: 100,\n        };\n        this._setOptions(options);\n    }\n    _setOptions(options = {}) {\n        if (options.width) {\n            this.config.width = options.width;\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n    create(site, doors = []) {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n        if (!site.rng.chance(this.config.chance))\n            return null;\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.xy.NO_DIRECTION)\n            return null;\n        if (!doors[dir])\n            return null;\n        const width = pickWidth(this.config.width, site.rng);\n        const length = pickLength(dir, this.config.length, site.rng);\n        const doorLoc = doors[dir];\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        }\n        else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n    _digLine(site, door, dir, length) {\n        let x = door[0];\n        let y = door[1];\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n        x -= dir[0];\n        y -= dir[1];\n        return [x, y];\n    }\n    dig(site, dir, door, length) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = TYPES.makeHall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n    digWide(site, dir, door, length, width) {\n        const DIR = GWU.xy.DIRS[dir];\n        const lower = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher = [door[0] + DIR[1], door[1] + DIR[0]];\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n        const hall = TYPES.makeHall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        // hall.width = width;\n        return hall;\n    }\n}\nexport function dig(config, site, doors) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\nexport var halls = {};\nexport function install(id, hall) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Lakes {\n    constructor(options = {}) {\n        this.options = {\n            height: 15,\n            width: 30,\n            minSize: 5,\n            tries: 20,\n            count: 1,\n            canDisrupt: false,\n            wreathTile: SITE.SHALLOW,\n            wreathChance: 50,\n            wreathSize: 1,\n            tile: SITE.DEEP,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let i, j, k;\n        let x, y;\n        let lakeMaxHeight, lakeMaxWidth, lakeMinSize, tries, maxCount, canDisrupt;\n        let count = 0;\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = site.rng.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || SITE.SHALLOW;\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || SITE.DEEP;\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n            const width = Math.round(((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const height = Math.round(((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                maxCount) + lakeMinSize;\n            const blob = new GWU.blob.Blob({\n                rng: site.rng,\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                birthParameters: 'ffffftttt',\n                survivalParameters: 'ffffttttt',\n            });\n            const bounds = blob.carve(lakeGrid.width, lakeGrid.height, (x, y) => (lakeGrid[x][y] = 1));\n            // lakeGrid.dump();\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = site.rng.range(1 - bounds.x, lakeGrid.width - bounds.width - bounds.x - 2);\n                y = site.rng.range(1 - bounds.y, lakeGrid.height - bounds.height - bounds.y - 2);\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n                                if (hasWreath) {\n                                    GWU.xy.forCircle(sx, sy, wreathSize, (i, j) => {\n                                        if (site.isPassable(i, j)\n                                        // SITE.isFloor(map, i, j) ||\n                                        // SITE.isDoor(map, i, j)\n                                        ) {\n                                            site.setTile(i, j, wreathTile);\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (success) {\n                ++count;\n            }\n            else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n    isDisruptedBy(site, lakeGrid, lakeToMapX = 0, lakeToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            }\n            else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Bridges {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 20,\n            maxLength: 5,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        costGrid.update((_v, x, y) => site.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION);\n        const seq = site.rng.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (\n            // map.hasXY(x, y) &&\n            // map.get(x, y) &&\n            site.isPassable(x, y) &&\n                !site.isAnyLiquid(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n                    // if (!map.hasXY(newX, newY)) continue;\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (site.isAnyLiquid(newX, newY)) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (!site.isAnyLiquid(newX, newY)) {\n                                break;\n                            }\n                        }\n                    }\n                    if (\n                    // map.get(newX, newY) &&\n                    site.isPassable(newX, newY) &&\n                        j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, newX, newY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[newX][newY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[x][y] > minDistance &&\n                            pathGrid[x][y] < GWU.path.NO_PATH) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n                            while (x !== newX || y !== newY) {\n                                if (this.isBridgeCandidate(site, x, y, bridgeDir)) {\n                                    site.setTile(x, y, SITE.BRIDGE); // map[x][y] = SITE.BRIDGE;\n                                    costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                }\n                                else {\n                                    site.setTile(x, y, SITE.FLOOR); // map[x][y] = SITE.FLOOR;\n                                    costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n    isBridgeCandidate(site, x, y, bridgeDir) {\n        if (site.isBridge(x, y))\n            return true;\n        if (!site.isAnyLiquid(x, y))\n            return false;\n        if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0]))\n            return false;\n        if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0]))\n            return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class Stairs {\n    constructor(options = {}) {\n        this.options = {\n            up: true,\n            down: true,\n            minDistance: 10,\n            start: false,\n            upTile: SITE.UP_STAIRS,\n            downTile: SITE.DOWN_STAIRS,\n            wall: SITE.IMPREGNABLE,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance = this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n        const locations = {};\n        let upLoc = null;\n        let downLoc = null;\n        const isValidLoc = this.isStairXY.bind(this, site);\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n            }\n            else {\n                start = site.rng.matchingLocNear(GWU.xy.x(start), GWU.xy.y(start), isValidLoc);\n            }\n            locations.start = start;\n        }\n        if (Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(GWU.xy.x(up), GWU.xy.y(up), isValidLoc);\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(GWU.xy.x(down), GWU.xy.y(down), isValidLoc);\n        }\n        else if (Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(GWU.xy.x(up), GWU.xy.y(up), isValidLoc);\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.xy.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)) {\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(GWU.xy.x(down), GWU.xy.y(down), isValidLoc);\n            if (needUp) {\n                upLoc = site.rng.matchingLoc(site.width, site.height, (x, y) => {\n                    if (GWU.xy.distanceBetween(x, y, downLoc[0], downLoc[1]) < minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needUp) {\n            upLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(site.width, site.height, (x, y) => {\n                    if (\n                    // @ts-ignore\n                    GWU.xy.distanceBetween(x, y, upLoc[0], upLoc[1]) <\n                        minDistance)\n                        return false;\n                    return isValidLoc(x, y);\n                });\n            }\n        }\n        else if (needDown) {\n            downLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n        }\n        if (upLoc) {\n            locations.up = upLoc.slice();\n            this.setupStairs(site, upLoc[0], upLoc[1], this.options.upTile);\n            if (this.options.start === 'up')\n                locations.start = locations.up;\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice();\n            this.setupStairs(site, downLoc[0], downLoc[1], this.options.downTile);\n            if (this.options.start === 'down')\n                locations.start = locations.down;\n        }\n        return upLoc || downLoc ? locations : null;\n    }\n    hasXY(site, x, y) {\n        if (x < 0 || y < 0)\n            return false;\n        if (x >= site.width || y >= site.height)\n            return false;\n        return true;\n    }\n    isStairXY(site, x, y) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y))\n            return false;\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.xy.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1]))\n                return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1]))\n                return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            }\n            else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n    setupStairs(site, x, y, tile) {\n        const indexes = site.rng.sequence(4);\n        let dir = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.xy.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1]))\n                    break;\n            }\n            dir = null;\n        }\n        if (!dir)\n            GWU.ERROR('No stair direction found!');\n        site.setTile(x, y, tile);\n        const dirIndex = GWU.xy.CLOCK_DIRS.findIndex(\n        // @ts-ignore\n        (d) => d[0] == dir[0] && d[1] == dir[1]);\n        const wall = this.options.wall;\n        for (let i = 0; i < GWU.xy.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex)\n                continue;\n            const d = GWU.xy.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wall);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nexport class LoopDigger {\n    constructor(options = {}) {\n        this.options = {\n            minDistance: 100,\n            maxLength: 1,\n            doorChance: 50,\n        };\n        Object.assign(this.options, options);\n    }\n    create(site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n        const minDistance = Math.min(this.options.minDistance, Math.floor(Math.max(site.width, site.height) / 2));\n        const maxLength = this.options.maxLength;\n        const pathGrid = GWU.grid.alloc(site.width, site.height);\n        const costGrid = GWU.grid.alloc(site.width, site.height);\n        const dirCoords = [\n            [1, 0],\n            [0, 1],\n        ];\n        SITE.fillCostGrid(site, costGrid);\n        function isValidTunnelStart(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return false;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return false;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return false;\n            return true;\n        }\n        function isValidTunnelEnd(x, y, dir) {\n            if (!site.hasXY(x, y))\n                return false;\n            if (!site.hasXY(x + dir[1], y + dir[0]))\n                return false;\n            if (!site.hasXY(x - dir[1], y - dir[0]))\n                return false;\n            if (site.isSet(x, y))\n                return true;\n            if (site.isSet(x + dir[1], y + dir[0]))\n                return true;\n            if (site.isSet(x - dir[1], y - dir[0]))\n                return true;\n            return false;\n        }\n        let count = 0;\n        const seq = site.rng.sequence(site.width * site.height);\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir))\n                        continue;\n                    j = maxLength;\n                    // check up/left\n                    if (site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])) {\n                        // just can't build directly into a door\n                        if (!site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])) {\n                            continue;\n                        }\n                    }\n                    else if (site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])) {\n                        if (!site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v);\n                    }\n                    else {\n                        continue; // not valid start for tunnel\n                    }\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n                    if (j < maxLength) {\n                        GWU.path.calculateDistances(pathGrid, startX, startY, costGrid, false);\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (pathGrid[endX][endY] > minDistance &&\n                            pathGrid[endX][endY] < 30000) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, SITE.FLOOR);\n                                    costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = site.rng.chance(this.options.doorChance)\n                                ? SITE.DOOR\n                                : SITE.FLOOR;\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        GWU.grid.free(pathGrid);\n        GWU.grid.free(costGrid);\n        return count;\n    }\n}\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site, opts = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","export class NullLogger {\n    onDigFirstRoom() { }\n    onRoomCandidate() { }\n    onRoomFailed() { }\n    onRoomSuccess() { }\n    onLoopsAdded() { }\n    onLakesAdded() { }\n    onBridgesAdded() { }\n    onStairsAdded() { }\n    onBuildError() { }\n    onBlueprintPick() { }\n    onBlueprintCandidates() { }\n    onBlueprintStart() { }\n    onBlueprintInterior() { }\n    onBlueprintFail() { }\n    onBlueprintSuccess() { }\n    onStepStart() { }\n    onStepCandidates() { }\n    onStepInstanceSuccess() { }\n    onStepInstanceFail() { }\n    onStepSuccess() { }\n    onStepFail() { }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nconst Fl = GWU.flag.fl;\nexport var StepFlags;\n(function (StepFlags) {\n    StepFlags[StepFlags[\"BS_OUTSOURCE_ITEM_TO_MACHINE\"] = Fl(1)] = \"BS_OUTSOURCE_ITEM_TO_MACHINE\";\n    StepFlags[StepFlags[\"BS_BUILD_VESTIBULE\"] = Fl(2)] = \"BS_BUILD_VESTIBULE\";\n    StepFlags[StepFlags[\"BS_ADOPT_ITEM\"] = Fl(3)] = \"BS_ADOPT_ITEM\";\n    StepFlags[StepFlags[\"BS_BUILD_AT_ORIGIN\"] = Fl(4)] = \"BS_BUILD_AT_ORIGIN\";\n    StepFlags[StepFlags[\"BS_PERMIT_BLOCKING\"] = Fl(5)] = \"BS_PERMIT_BLOCKING\";\n    StepFlags[StepFlags[\"BS_TREAT_AS_BLOCKING\"] = Fl(6)] = \"BS_TREAT_AS_BLOCKING\";\n    StepFlags[StepFlags[\"BS_NEAR_ORIGIN\"] = Fl(7)] = \"BS_NEAR_ORIGIN\";\n    StepFlags[StepFlags[\"BS_FAR_FROM_ORIGIN\"] = Fl(8)] = \"BS_FAR_FROM_ORIGIN\";\n    StepFlags[StepFlags[\"BS_IN_VIEW_OF_ORIGIN\"] = Fl(9)] = \"BS_IN_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BS_IN_PASSABLE_VIEW_OF_ORIGIN\"] = Fl(10)] = \"BS_IN_PASSABLE_VIEW_OF_ORIGIN\";\n    StepFlags[StepFlags[\"BS_HORDE_TAKES_ITEM\"] = Fl(11)] = \"BS_HORDE_TAKES_ITEM\";\n    StepFlags[StepFlags[\"BS_HORDE_SLEEPING\"] = Fl(12)] = \"BS_HORDE_SLEEPING\";\n    StepFlags[StepFlags[\"BS_HORDE_FLEEING\"] = Fl(13)] = \"BS_HORDE_FLEEING\";\n    StepFlags[StepFlags[\"BS_HORDES_DORMANT\"] = Fl(14)] = \"BS_HORDES_DORMANT\";\n    StepFlags[StepFlags[\"BS_ITEM_IS_KEY\"] = Fl(15)] = \"BS_ITEM_IS_KEY\";\n    StepFlags[StepFlags[\"BS_ITEM_IDENTIFIED\"] = Fl(16)] = \"BS_ITEM_IDENTIFIED\";\n    StepFlags[StepFlags[\"BS_ITEM_PLAYER_AVOIDS\"] = Fl(17)] = \"BS_ITEM_PLAYER_AVOIDS\";\n    StepFlags[StepFlags[\"BS_EVERYWHERE\"] = Fl(18)] = \"BS_EVERYWHERE\";\n    StepFlags[StepFlags[\"BS_ALTERNATIVE\"] = Fl(19)] = \"BS_ALTERNATIVE\";\n    StepFlags[StepFlags[\"BS_ALTERNATIVE_2\"] = Fl(20)] = \"BS_ALTERNATIVE_2\";\n    StepFlags[StepFlags[\"BS_BUILD_IN_WALLS\"] = Fl(21)] = \"BS_BUILD_IN_WALLS\";\n    StepFlags[StepFlags[\"BS_BUILD_ANYWHERE_ON_LEVEL\"] = Fl(22)] = \"BS_BUILD_ANYWHERE_ON_LEVEL\";\n    StepFlags[StepFlags[\"BS_REPEAT_UNTIL_NO_PROGRESS\"] = Fl(23)] = \"BS_REPEAT_UNTIL_NO_PROGRESS\";\n    StepFlags[StepFlags[\"BS_IMPREGNABLE\"] = Fl(24)] = \"BS_IMPREGNABLE\";\n    StepFlags[StepFlags[\"BS_NO_BLOCK_ORIGIN\"] = Fl(25)] = \"BS_NO_BLOCK_ORIGIN\";\n    // TODO - BS_ALLOW_IN_HALLWAY instead?\n    StepFlags[StepFlags[\"BS_NOT_IN_HALLWAY\"] = Fl(27)] = \"BS_NOT_IN_HALLWAY\";\n    StepFlags[StepFlags[\"BS_ALLOW_BOUNDARY\"] = Fl(28)] = \"BS_ALLOW_BOUNDARY\";\n    StepFlags[StepFlags[\"BS_SKELETON_KEY\"] = Fl(29)] = \"BS_SKELETON_KEY\";\n    StepFlags[StepFlags[\"BS_KEY_DISPOSABLE\"] = Fl(30)] = \"BS_KEY_DISPOSABLE\";\n})(StepFlags || (StepFlags = {}));\nexport class BuildStep {\n    // public next: null = null;\n    // public id = 'n/a';\n    constructor(cfg = {}) {\n        var _a;\n        this.tile = -1;\n        this.flags = 0;\n        this.pad = 0;\n        this.item = null;\n        this.horde = null;\n        this.effect = null;\n        this.chance = 0;\n        this.tile = (_a = cfg.tile) !== null && _a !== void 0 ? _a : -1;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        if (typeof cfg.item === 'string') {\n            this.item = { tags: cfg.item };\n        }\n        else {\n            this.item = cfg.item || null;\n        }\n        if (cfg.horde) {\n            if (typeof cfg.horde === 'string') {\n                this.horde = { tags: cfg.horde };\n            }\n            else if (cfg.horde === true) {\n                this.horde = { random: true };\n            }\n            else {\n                this.horde = cfg.horde;\n            }\n        }\n        if (cfg.effect) {\n            this.effect = GWM.effect.from(cfg.effect);\n        }\n        if (this.item && this.flags & StepFlags.BS_ADOPT_ITEM) {\n            throw new Error('Cannot have blueprint step with item and BS_ADOPT_ITEM.');\n        }\n        if (this.buildAtOrigin && this.count.hi > 1) {\n            throw new Error('Cannot have count > 1 for step with BS_BUILD_AT_ORIGIN.');\n        }\n        if (this.buildAtOrigin && this.repeatUntilNoProgress) {\n            throw new Error('Cannot have BS_BUILD_AT_ORIGIN and BS_REPEAT_UNTIL_NO_PROGRESS together in a build step.');\n        }\n        if (this.hordeTakesItem && !this.horde) {\n            throw new Error('Cannot have BS_HORDE_TAKES_ITEM without a horde configured.');\n        }\n    }\n    get allowBoundary() {\n        return !!(this.flags & StepFlags.BS_ALLOW_BOUNDARY);\n    }\n    get notInHallway() {\n        return !!(this.flags & StepFlags.BS_NOT_IN_HALLWAY);\n    }\n    get buildInWalls() {\n        return !!(this.flags & StepFlags.BS_BUILD_IN_WALLS);\n    }\n    get buildAnywhere() {\n        return !!(this.flags & StepFlags.BS_BUILD_ANYWHERE_ON_LEVEL);\n    }\n    get repeatUntilNoProgress() {\n        return !!(this.flags & StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS);\n    }\n    get permitBlocking() {\n        return !!(this.flags & StepFlags.BS_PERMIT_BLOCKING);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags &\n            (StepFlags.BS_TREAT_AS_BLOCKING | StepFlags.BS_NO_BLOCK_ORIGIN));\n    }\n    get noBlockOrigin() {\n        return !!(this.flags & StepFlags.BS_NO_BLOCK_ORIGIN);\n    }\n    get adoptItem() {\n        return !!(this.flags & StepFlags.BS_ADOPT_ITEM);\n    }\n    get itemIsKey() {\n        return !!(this.flags & StepFlags.BS_ITEM_IS_KEY);\n    }\n    get keyIsDisposable() {\n        return !!(this.flags & StepFlags.BS_KEY_DISPOSABLE);\n    }\n    get outsourceItem() {\n        return !!(this.flags & StepFlags.BS_OUTSOURCE_ITEM_TO_MACHINE);\n    }\n    get impregnable() {\n        return !!(this.flags & StepFlags.BS_IMPREGNABLE);\n    }\n    get buildVestibule() {\n        return !!(this.flags & StepFlags.BS_BUILD_VESTIBULE);\n    }\n    get hordeTakesItem() {\n        return !!(this.flags & StepFlags.BS_HORDE_TAKES_ITEM);\n    }\n    get generateEverywhere() {\n        return !!(this.flags &\n            StepFlags.BS_EVERYWHERE &\n            ~StepFlags.BS_BUILD_AT_ORIGIN);\n    }\n    get buildAtOrigin() {\n        return !!(this.flags & StepFlags.BS_BUILD_AT_ORIGIN);\n    }\n    get buildsInstances() {\n        return !!(this.effect ||\n            this.tile != -1 ||\n            this.item ||\n            this.horde ||\n            this.adoptItem);\n    }\n    makeItem(data) {\n        if (!this.item)\n            return null;\n        if (this.item.id) {\n            return data.site.makeItem(this.item.id, this.item.make);\n        }\n        return data.site.makeRandomItem(this.item, this.item.make);\n    }\n    // cellIsCandidate(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     x: number,\n    //     y: number,\n    //     distanceBound: [number, number]\n    // ) {\n    //     return cellIsCandidate(builder, blueprint, this, x, y, distanceBound);\n    // }\n    // distanceBound(builder: BuildData): [number, number] {\n    //     return calcDistanceBound(builder, this);\n    // }\n    // updateViewMap(builder: BuildData): void {\n    //     updateViewMap(builder, this);\n    // }\n    // build(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     adoptedItem: GWM.item.Item | null\n    // ): boolean {\n    //     return buildStep(builder, blueprint, this, adoptedItem);\n    // }\n    markCandidates(data, candidates, distanceBound = [0, 10000]) {\n        updateViewMap(data, this);\n        const blueprint = data.blueprint;\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            const candidateType = cellIsCandidate(data, blueprint, this, i, j, distanceBound);\n            if (candidateType === CandidateType.OK) {\n                count++;\n            }\n            return candidateType;\n        });\n        return count;\n    }\n    makePersonalSpace(_data, x, y, candidates) {\n        let count = 0;\n        if (this.pad < 1)\n            return 0; // do not mark occupied\n        // or...\n        // if (this.buildEverywhere) return 0;  // do not mark occupied\n        for (let i = x - this.pad; i <= x + this.pad; i++) {\n            for (let j = y - this.pad; j <= y + this.pad; j++) {\n                if (candidates.hasXY(i, j)) {\n                    if (candidates[i][j] == 1) {\n                        candidates[i][j] = 0;\n                        ++count;\n                    }\n                    // builder.occupied[i][j] = 1;\n                }\n            }\n        }\n        return count;\n    }\n    toString() {\n        let parts = [];\n        if (this.tile) {\n            parts.push('tile: ' + this.tile);\n        }\n        if (this.effect) {\n            parts.push('effect: ' + JSON.stringify(this.effect));\n        }\n        if (this.item) {\n            parts.push('item: ' + JSON.stringify(this.item));\n        }\n        if (this.horde) {\n            parts.push('horde: ' + JSON.stringify(this.horde));\n        }\n        if (this.pad > 1) {\n            parts.push('pad: ' + this.pad);\n        }\n        if (this.count.lo > 1 || this.count.hi > 1) {\n            parts.push('count: ' + this.count.toString());\n        }\n        if (this.chance) {\n            parts.push('chance: ' + this.chance);\n        }\n        if (this.flags) {\n            parts.push('flags: ' + GWU.flag.toString(StepFlags, this.flags));\n        }\n        return '{ ' + parts.join(', ') + ' }';\n    }\n}\nexport function updateViewMap(builder, buildStep) {\n    if (buildStep.flags &\n        (StepFlags.BS_IN_VIEW_OF_ORIGIN |\n            StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN)) {\n        const site = builder.site;\n        if (buildStep.flags & StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN) {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y) || site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        else {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        builder.viewMap[builder.originX][builder.originY] = 1;\n    }\n}\nexport function calcDistanceBound(builder, buildStep) {\n    const distanceBound = [0, 10000];\n    if (buildStep.flags & StepFlags.BS_NEAR_ORIGIN) {\n        distanceBound[1] = builder.distance25;\n    }\n    if (buildStep.flags & StepFlags.BS_FAR_FROM_ORIGIN) {\n        distanceBound[0] = builder.distance75;\n    }\n    return distanceBound;\n}\nexport var CandidateType;\n(function (CandidateType) {\n    CandidateType[CandidateType[\"NOT_CANDIDATE\"] = 0] = \"NOT_CANDIDATE\";\n    CandidateType[CandidateType[\"OK\"] = 1] = \"OK\";\n    CandidateType[CandidateType[\"IN_HALLWAY\"] = 2] = \"IN_HALLWAY\";\n    CandidateType[CandidateType[\"ON_BOUNDARY\"] = 3] = \"ON_BOUNDARY\";\n    CandidateType[CandidateType[\"MUST_BE_ORIGIN\"] = 4] = \"MUST_BE_ORIGIN\";\n    CandidateType[CandidateType[\"NOT_ORIGIN\"] = 5] = \"NOT_ORIGIN\";\n    CandidateType[CandidateType[\"OCCUPIED\"] = 6] = \"OCCUPIED\";\n    CandidateType[CandidateType[\"NOT_IN_VIEW\"] = 7] = \"NOT_IN_VIEW\";\n    CandidateType[CandidateType[\"TOO_FAR\"] = 8] = \"TOO_FAR\";\n    CandidateType[CandidateType[\"TOO_CLOSE\"] = 9] = \"TOO_CLOSE\";\n    CandidateType[CandidateType[\"INVALID_WALL\"] = 10] = \"INVALID_WALL\";\n    CandidateType[CandidateType[\"BLOCKED\"] = 11] = \"BLOCKED\";\n    CandidateType[CandidateType[\"FAILED\"] = 12] = \"FAILED\";\n})(CandidateType || (CandidateType = {}));\nexport function cellIsCandidate(builder, blueprint, buildStep, x, y, distanceBound) {\n    const site = builder.site;\n    // No building in the hallway if it's prohibited.\n    // This check comes before the origin check, so an area machine will fail altogether\n    // if its origin is in a hallway and the feature that must be built there does not permit as much.\n    if (buildStep.notInHallway &&\n        GWU.xy.arcCount(x, y, (i, j) => site.hasXY(i, j) && site.isPassable(i, j)) > 1) {\n        return CandidateType.IN_HALLWAY;\n    }\n    // if (buildStep.noBlockOrigin) {\n    //     let ok = true;\n    //     GWU.xy.eachNeighbor(\n    //         x,\n    //         y,\n    //         (nx, ny) => {\n    //             if (nx === builder.originX && ny === builder.originY) {\n    //                 ok = false;\n    //             }\n    //         },\n    //         true\n    //     );\n    //     if (!ok) return false;\n    // }\n    // No building along the perimeter of the level if it's prohibited.\n    if ((x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1) &&\n        !buildStep.allowBoundary) {\n        return CandidateType.ON_BOUNDARY;\n    }\n    // The origin is a candidate if the feature is flagged to be built at the origin.\n    // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n    if (buildStep.buildAtOrigin) {\n        if (x == builder.originX && y == builder.originY)\n            return CandidateType.OK;\n        return CandidateType.MUST_BE_ORIGIN;\n    }\n    else if (blueprint.isRoom &&\n        x == builder.originX &&\n        y == builder.originY) {\n        return CandidateType.NOT_ORIGIN;\n    }\n    // No building in another feature's personal space!\n    if (builder.occupied[x][y]) {\n        return CandidateType.OCCUPIED;\n    }\n    // Must be in the viewmap if the appropriate flag is set.\n    if (buildStep.flags &\n        (StepFlags.BS_IN_VIEW_OF_ORIGIN |\n            StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n        !builder.viewMap[x][y]) {\n        return CandidateType.NOT_IN_VIEW;\n    }\n    // Do a distance check if the feature requests it.\n    let distance = 10000;\n    if (site.isWall(x, y)) {\n        // Distance is calculated for walls too.\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (!builder.distanceMap.hasXY(i, j))\n                return;\n            if (!site.blocksPathing(i, j) &&\n                distance > builder.distanceMap[i][j] + 1) {\n                distance = builder.distanceMap[i][j] + 1;\n            }\n        }, true);\n    }\n    else {\n        distance = builder.distanceMap[x][y];\n    }\n    if (distance > distanceBound[1])\n        return CandidateType.TOO_FAR; // distance exceeds max\n    if (distance < distanceBound[0])\n        return CandidateType.TOO_CLOSE;\n    if (buildStep.buildInWalls) {\n        // If we're supposed to build in a wall...\n        const cellMachine = site.getMachine(x, y);\n        if (!builder.interior[x][y] &&\n            (!cellMachine || cellMachine == builder.machineNumber) &&\n            site.isWall(x, y)) {\n            let ok = false;\n            // ...and this location is a wall that's not already machined...\n            GWU.xy.eachNeighbor(x, y, (newX, newY) => {\n                if (!site.hasXY(newX, newY))\n                    return;\n                if (!builder.interior[newX][newY] &&\n                    !buildStep.buildAnywhere) {\n                    return;\n                }\n                // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                const neighborMachine = site.getMachine(newX, newY);\n                if (!site.blocksPathing(newX, newY) &&\n                    (!neighborMachine ||\n                        neighborMachine == builder.machineNumber) &&\n                    !(newX == builder.originX && newY == builder.originY)) {\n                    ok = true;\n                }\n            }, true);\n            return ok ? CandidateType.OK : CandidateType.INVALID_WALL;\n        }\n        return CandidateType.NOT_CANDIDATE;\n    }\n    else if (site.isWall(x, y)) {\n        // Can't build in a wall unless instructed to do so.\n        return CandidateType.INVALID_WALL;\n    }\n    else if (buildStep.buildAnywhere) {\n        if ((buildStep.item && site.blocksItems(x, y)) ||\n            site.hasCellFlag(x, y, GWM.flags.Cell.IS_CHOKEPOINT |\n                GWM.flags.Cell.IS_IN_LOOP |\n                GWM.flags.Cell.IS_IN_MACHINE)) {\n            return CandidateType.BLOCKED;\n        }\n        else {\n            return CandidateType.OK;\n        }\n    }\n    else if (builder.interior[x][y]) {\n        return CandidateType.OK;\n    }\n    return CandidateType.FAILED;\n}\n// export function buildStep(\n//     builder: BuildData,\n//     blueprint: Blueprint,\n//     buildStep: BuildStep,\n//     adoptedItem: GWM.item.Item | null\n// ): boolean {\n//     let wantCount = 0;\n//     let builtCount = 0;\n//     const site = builder.site;\n//     const candidates = GWU.grid.alloc(site.width, site.height);\n//     // Figure out the distance bounds.\n//     const distanceBound = calcDistanceBound(builder, buildStep);\n//     buildStep.updateViewMap(builder);\n//     // If the StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n//     // Make a master map of candidate locations for this feature.\n//     let qualifyingTileCount = markCandidates(\n//         candidates,\n//         builder,\n//         blueprint,\n//         buildStep,\n//         distanceBound\n//     );\n//     if (!buildStep.generateEverywhere) {\n//         wantCount = buildStep.count.value();\n//     }\n//     if (!qualifyingTileCount || qualifyingTileCount < buildStep.count.lo) {\n//         console.log(\n//             ' - Only %s qualifying tiles - want at least %s.',\n//             qualifyingTileCount,\n//             buildStep.count.lo\n//         );\n//         GWU.grid.free(candidates);\n//         return false;\n//     }\n//     let x = 0,\n//         y = 0;\n//     let success = true;\n//     let didSomething = false;\n//     do {\n//         success = true;\n//         // Find a location for the feature.\n//         if (buildStep.buildAtOrigin) {\n//             // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n//             x = builder.originX;\n//             y = builder.originY;\n//         } else {\n//             // Pick our candidate location randomly, and also strike it from\n//             // the candidates map so that subsequent instances of this same feature can't choose it.\n//             [x, y] = site.rng.matchingLoc(\n//                 candidates.width,\n//                 candidates.height,\n//                 (x, y) => candidates[x][y] > 0\n//             );\n//         }\n//         // Don't waste time trying the same place again whether or not this attempt succeeds.\n//         candidates[x][y] = 0;\n//         qualifyingTileCount--;\n//         // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n//         if (buildStep.effect) {\n//             success = site.fireEffect(buildStep.effect, x, y);\n//             didSomething = success;\n//         }\n//         // Now try to place the terrain tile, if any.\n//         if (success && buildStep.tile !== -1) {\n//             const tile = GWM.tile.get(buildStep.tile);\n//             if (\n//                 !(buildStep.flags & StepFlags.BS_PERMIT_BLOCKING) &&\n//                 (tile.blocksMove() ||\n//                     buildStep.flags & StepFlags.BS_TREAT_AS_BLOCKING)\n//             ) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y, {\n//                     machine: site.machineCount,\n//                 });\n//             }\n//             if (success) {\n//                 success = site.setTile(x, y, tile);\n//                 didSomething = didSomething || success;\n//             }\n//         }\n//         // Generate an actor, if necessary\n//         // Generate an item, if necessary\n//         if (success && buildStep.item) {\n//             const item = site.makeRandomItem(buildStep.item);\n//             if (!item) {\n//                 success = false;\n//             }\n//             if (buildStep.flags & StepFlags.BS_ITEM_IS_KEY) {\n//                 item.key = GWM.entity.makeKeyInfo(\n//                     x,\n//                     y,\n//                     !!(buildStep.flags & StepFlags.BS_KEY_DISPOSABLE)\n//                 );\n//             }\n//             if (buildStep.flags & StepFlags.BS_OUTSOURCE_ITEM_TO_MACHINE) {\n//                 success = builder.buildRandom(\n//                     Flags.BP_ADOPT_ITEM,\n//                     -1,\n//                     -1,\n//                     item\n//                 );\n//                 if (success) {\n//                     didSomething = true;\n//                 }\n//             } else {\n//                 success = site.addItem(x, y, item);\n//                 didSomething = didSomething || success;\n//             }\n//         } else if (success && buildStep.flags & StepFlags.BS_ADOPT_ITEM) {\n//             // adopt item if necessary\n//             if (!adoptedItem) {\n//                 GWU.grid.free(candidates);\n//                 throw new Error(\n//                     'Failed to build blueprint because there is no adopted item.'\n//                 );\n//             }\n//             if (buildStep.flags & StepFlags.BS_TREAT_AS_BLOCKING) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y);\n//             }\n//             if (success) {\n//                 success = site.addItem(x, y, adoptedItem);\n//                 if (success) {\n//                     didSomething = true;\n//                 } else {\n//                     console.log('- failed to add item', x, y);\n//                 }\n//             } else {\n//                 // console.log('- blocks map', x, y);\n//             }\n//         }\n//         if (success && didSomething) {\n//             // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n//             qualifyingTileCount -= makePersonalSpace(\n//                 builder,\n//                 x,\n//                 y,\n//                 candidates,\n//                 buildStep.pad\n//             );\n//             builtCount++; // we've placed an instance\n//             // Mark the feature location as part of the machine, in case it is not already inside of it.\n//             if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n//                 site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n//             }\n//             // Mark the feature location as impregnable if requested.\n//             if (buildStep.flags & StepFlags.BS_IMPREGNABLE) {\n//                 site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n//             }\n//         }\n//         // Finished with this instance!\n//     } while (\n//         qualifyingTileCount > 0 &&\n//         (buildStep.generateEverywhere ||\n//             builtCount < wantCount ||\n//             buildStep.flags & StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS)\n//     );\n//     if (success && buildStep.flags & StepFlags.BS_BUILD_VESTIBULE) {\n//         // Generate a door guard machine.\n//         // Try to create a sub-machine that qualifies.\n//         success = builder.buildRandom(\n//             Flags.BP_VESTIBULE,\n//             builder.originX,\n//             builder.originY\n//         );\n//         if (!success) {\n//             // console.log(\n//             //     `Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`\n//             // );\n//             // failure! abort!\n//             GWU.grid.free(candidates);\n//             return false;\n//         }\n//         ++builtCount;\n//     }\n//     //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n//     //DEBUG logBuffer(candidates);\n//     success = builtCount > 0;\n//     GWU.grid.free(candidates);\n//     return success;\n// }\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nconst Fl = GWU.flag.fl;\nexport var Flags;\n(function (Flags) {\n    Flags[Flags[\"BP_ROOM\"] = Fl(0)] = \"BP_ROOM\";\n    Flags[Flags[\"BP_VESTIBULE\"] = Fl(1)] = \"BP_VESTIBULE\";\n    Flags[Flags[\"BP_REWARD\"] = Fl(2)] = \"BP_REWARD\";\n    Flags[Flags[\"BP_ADOPT_ITEM\"] = Fl(3)] = \"BP_ADOPT_ITEM\";\n    Flags[Flags[\"BP_PURGE_PATHING_BLOCKERS\"] = Fl(4)] = \"BP_PURGE_PATHING_BLOCKERS\";\n    Flags[Flags[\"BP_PURGE_INTERIOR\"] = Fl(5)] = \"BP_PURGE_INTERIOR\";\n    Flags[Flags[\"BP_PURGE_LIQUIDS\"] = Fl(6)] = \"BP_PURGE_LIQUIDS\";\n    Flags[Flags[\"BP_SURROUND_WITH_WALLS\"] = Fl(7)] = \"BP_SURROUND_WITH_WALLS\";\n    Flags[Flags[\"BP_IMPREGNABLE\"] = Fl(8)] = \"BP_IMPREGNABLE\";\n    Flags[Flags[\"BP_OPEN_INTERIOR\"] = Fl(9)] = \"BP_OPEN_INTERIOR\";\n    Flags[Flags[\"BP_MAXIMIZE_INTERIOR\"] = Fl(10)] = \"BP_MAXIMIZE_INTERIOR\";\n    Flags[Flags[\"BP_REDESIGN_INTERIOR\"] = Fl(11)] = \"BP_REDESIGN_INTERIOR\";\n    Flags[Flags[\"BP_TREAT_AS_BLOCKING\"] = Fl(12)] = \"BP_TREAT_AS_BLOCKING\";\n    Flags[Flags[\"BP_REQUIRE_BLOCKING\"] = Fl(13)] = \"BP_REQUIRE_BLOCKING\";\n    Flags[Flags[\"BP_NO_INTERIOR_FLAG\"] = Fl(14)] = \"BP_NO_INTERIOR_FLAG\";\n    Flags[Flags[\"BP_NOT_IN_HALLWAY\"] = Fl(15)] = \"BP_NOT_IN_HALLWAY\";\n})(Flags || (Flags = {}));\nexport class Blueprint {\n    constructor(opts = {}) {\n        this.tags = [];\n        this.flags = 0;\n        this.steps = [];\n        this.id = 'n/a';\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n        if (opts.size) {\n            this.size = GWU.range.make(opts.size);\n            if (this.size.lo <= 0)\n                this.size.lo = 1;\n            if (this.size.hi < this.size.lo)\n                this.size.hi = this.size.lo;\n        }\n        else {\n            this.size = GWU.range.make([1, 1]); // Anything bigger makes weird things happen\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n        }\n        if (opts.id) {\n            this.id = opts.id;\n        }\n        if (this.flags & Flags.BP_ADOPT_ITEM) {\n            if (!this.steps.some((step) => {\n                if (step.adoptItem)\n                    return true;\n                if (step.hordeTakesItem && !step.item)\n                    return true;\n                return false;\n            })) {\n                throw new Error('Blueprint calls for BP_ADOPT_ITEM, but has no adoptive step.');\n            }\n        }\n    }\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n    get notInHallway() {\n        return !!(this.flags & Flags.BP_NOT_IN_HALLWAY);\n    }\n    qualifies(requiredFlags, tags) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want)))\n                return false;\n        }\n        if (\n        // Must have the required flags:\n        ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags) {\n            return false;\n        }\n        return true;\n    }\n    pickComponents(rng) {\n        const alternativeFlags = [\n            STEP.StepFlags.BS_ALTERNATIVE,\n            STEP.StepFlags.BS_ALTERNATIVE_2,\n        ];\n        const keepFeature = new Array(this.steps.length).fill(true);\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = rng.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        }\n                        else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n    fillInterior(builder) {\n        const interior = builder.interior;\n        const site = builder.site;\n        interior.fill(0);\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n            // Now map out the interior into interior[][].\n            // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n            // same or lower choke value, ignoring any tiles that are already part of a machine.\n            // If we get false from this, try again. If we've tried too many times already, abort.\n            return addTileToInteriorAndIterate(builder, builder.originX, builder.originY);\n        }\n        else if (this.isVestiblue) {\n            return computeVestibuleInterior(builder, this);\n            // success\n        }\n        else {\n            // Find a location and map out the interior for a non-room machine.\n            // The strategy here is simply to pick a random location on the map,\n            // expand it along a pathing map by one space in all directions until the size reaches\n            // the chosen size, and then make sure the resulting space qualifies.\n            // If not, try again. If we've tried too many times already, abort.\n            let distanceMap = builder.distanceMap;\n            SITE.computeDistanceMap(site, distanceMap, builder.originX, builder.originY, this.size.hi);\n            const seq = site.rng.sequence(site.width * site.height);\n            let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n            let goalSize = this.size.value(); // Keeps track of the goal size.\n            for (let k = 0; k < 1000 && qualifyingTileCount < goalSize; k++) {\n                for (let n = 0; n < seq.length && qualifyingTileCount < goalSize; n++) {\n                    const i = Math.floor(seq[n] / site.height);\n                    const j = seq[n] % site.height;\n                    if (distanceMap[i][j] == k) {\n                        interior[i][j] = 1;\n                        qualifyingTileCount++;\n                        if (site.isOccupied(i, j) ||\n                            site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)) {\n                            // Abort if we've entered another machine or engulfed another machine's item or monster.\n                            return 0;\n                        }\n                    }\n                }\n            }\n            // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n            // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n            return qualifyingTileCount;\n        }\n    }\n}\nexport function markCandidates(buildData) {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    const blueprint = buildData.blueprint;\n    candidates.fill(0);\n    // Find a location and map out the machine interior.\n    if (blueprint.isRoom) {\n        // If it's a room machine, count up the gates of appropriate\n        // choke size and remember where they are. The origin of the room will be the gate location.\n        candidates.update((_v, x, y) => {\n            return site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE) &&\n                blueprint.size.contains(site.getChokeCount(x, y))\n                ? 1\n                : 0;\n        });\n    }\n    else if (blueprint.isVestiblue) {\n        //  Door machines must have locations passed in. We can't pick one ourselves.\n        throw new Error('ERROR: Attempted to build a vestiblue without a location being provided.');\n    }\n    else {\n        candidates.update((_v, x, y) => {\n            if (!site.isPassable(x, y))\n                return 0;\n            if (blueprint.notInHallway) {\n                const count = GWU.xy.arcCount(x, y, (i, j) => site.isPassable(i, j));\n                return count <= 1 ? 1 : 0;\n            }\n            return 1;\n        });\n    }\n    return candidates.count((v) => v == 1);\n}\nexport function pickCandidateLoc(buildData) {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    const randSite = site.rng.matchingLoc(site.width, site.height, (x, y) => candidates[x][y] == 1);\n    if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n        // If no suitable sites, abort.\n        return null;\n    }\n    return randSite;\n}\n// // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n// export function computeInterior(\n//     builder: BuildData,\n//     blueprint: Blueprint\n// ): boolean {\n//     let failsafe = blueprint.isRoom ? 10 : 20;\n//     let tryAgain;\n//     const interior = builder.interior;\n//     const site = builder.site;\n//     do {\n//         tryAgain = false;\n//         if (--failsafe <= 0) {\n//             // console.log(\n//             //     `Failed to build blueprint ${blueprint.id}; failed repeatedly to find a suitable blueprint location.`\n//             // );\n//             return false;\n//         }\n//         let count = fillInterior(builder, blueprint);\n//         // Now make sure the interior map satisfies the machine's qualifications.\n//         if (!count) {\n//             console.debug('- no interior');\n//             tryAgain = true;\n//         } else if (!blueprint.size.contains(count)) {\n//             console.debug('- too small');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.treatAsBlocking &&\n//             SITE.siteDisruptedBy(site, interior, { machine: site.machineCount })\n//         ) {\n//             console.debug('- blocks');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.requireBlocking &&\n//             SITE.siteDisruptedSize(site, interior) < 100\n//         ) {\n//             console.debug('- does not block');\n//             tryAgain = true;\n//         }\n//         // Now loop if necessary.\n//     } while (tryAgain);\n//     // console.log(tryAgain, failsafe);\n//     return true;\n// }\nexport function computeVestibuleInterior(builder, blueprint) {\n    let success = true;\n    const site = builder.site;\n    const interior = builder.interior;\n    interior.fill(0);\n    if (blueprint.size.hi == 1) {\n        interior[builder.originX][builder.originY] = 1;\n        return 1;\n    }\n    // If this is a wall - it is really an error (maybe manually trying a build location?)\n    const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n    if (doorChokeCount > 10000) {\n        return 0;\n    }\n    const vestibuleLoc = [-1, -1];\n    let vestibuleChokeCount = doorChokeCount;\n    GWU.xy.eachNeighbor(builder.originX, builder.originY, (x, y) => {\n        const count = site.getChokeCount(x, y);\n        if (count == doorChokeCount)\n            return;\n        if (count > 10000)\n            return;\n        if (count < 0)\n            return;\n        vestibuleLoc[0] = x;\n        vestibuleLoc[1] = y;\n        vestibuleChokeCount = count;\n    }, true);\n    const roomSize = vestibuleChokeCount - doorChokeCount;\n    if (blueprint.size.contains(roomSize)) {\n        // The room entirely fits within the vestibule desired size\n        const count = interior.floodFill(vestibuleLoc[0], vestibuleLoc[1], (_v, i, j) => {\n            if (site.isOccupied(i, j)) {\n                success = false;\n            }\n            return site.getChokeCount(i, j) === vestibuleChokeCount;\n        }, 1);\n        if (success && blueprint.size.contains(count))\n            return roomSize;\n    }\n    let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n    const wantSize = blueprint.size.value(site.rng); // Keeps track of the goal size.\n    const distMap = builder.distanceMap;\n    SITE.computeDistanceMap(site, distMap, builder.originX, builder.originY, blueprint.size.hi);\n    const cells = site.rng.sequence(site.width * site.height);\n    success = true;\n    for (let k = 0; k < 1000 && qualifyingTileCount < wantSize; k++) {\n        for (let i = 0; i < cells.length && qualifyingTileCount < wantSize; ++i) {\n            const x = Math.floor(cells[i] / site.height);\n            const y = cells[i] % site.height;\n            const dist = distMap[x][y];\n            if (dist != k)\n                continue;\n            if (site.isOccupied(x, y)) {\n                success = false;\n                qualifyingTileCount = wantSize;\n            }\n            if (site.getChokeCount(x, y) <= doorChokeCount)\n                continue;\n            interior[x][y] = 1;\n            qualifyingTileCount += 1;\n        }\n    }\n    return qualifyingTileCount;\n}\n// Assumes (startX, startY) is in the machine.\n// Returns true if everything went well, and false if we ran into a machine component\n// that was already there, as we don't want to build a machine around it.\nfunction addTileToInteriorAndIterate(builder, startX, startY) {\n    let goodSoFar = true;\n    const interior = builder.interior;\n    const site = builder.site;\n    let count = 1;\n    interior[startX][startY] = 1;\n    const startChokeCount = site.getChokeCount(startX, startY);\n    for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n        const newX = startX + GWU.xy.DIRS[dir][0];\n        const newY = startY + GWU.xy.DIRS[dir][1];\n        if (!site.hasXY(newX, newY))\n            continue;\n        if (interior[newX][newY])\n            continue; // already done\n        if (site.isOccupied(newX, newY) ||\n            (site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_IN_MACHINE) &&\n                !site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_GATE_SITE))) {\n            // Abort if there's an item in the room.\n            // Items haven't been populated yet, so the only way this could happen is if another machine\n            // previously placed an item here.\n            // Also abort if we're touching another machine at any point other than a gate tile.\n            return 0;\n        }\n        if (site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n            !site.hasCellFlag(newX, newY, GWM.flags.Cell.IS_IN_MACHINE)) {\n            let additional = addTileToInteriorAndIterate(builder, newX, newY);\n            if (additional <= 0)\n                return 0;\n            count += additional;\n        }\n    }\n    return count;\n}\nexport function maximizeInterior(data, minimumInteriorNeighbors = 1) {\n    const interior = data.interior;\n    const site = data.site;\n    let interiorNeighborCount = 0;\n    // let openNeighborCount = 0;\n    let madeChange = true;\n    let interiorCount = 0;\n    let maxInteriorCount = data.blueprint.size.hi;\n    let gen = 0;\n    while (madeChange && interiorCount < maxInteriorCount) {\n        madeChange = false;\n        interiorCount = 0;\n        ++gen;\n        interior.forEach((i, x, y) => {\n            if (!i)\n                return;\n            ++interiorCount;\n            if (i != gen)\n                return;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j) || interior[i][j])\n                    return;\n                if (interior.isBoundaryXY(i, j))\n                    return;\n                interiorNeighborCount = 0;\n                let ok = true;\n                GWU.xy.eachNeighbor(i, j, (x2, y2) => {\n                    if (interior[x2][y2]) {\n                        ++interiorNeighborCount;\n                    }\n                    else if (!site.isWall(x2, y2)) {\n                        ok = false; // non-interior and not wall\n                    }\n                    else if (site.getMachine(x2, y2)) {\n                        ok = false; // in another machine\n                    }\n                }, false // 8 dirs\n                );\n                if (!ok || interiorNeighborCount < minimumInteriorNeighbors)\n                    return;\n                interior[i][j] = gen + 1;\n                ++interiorCount;\n                if (site.blocksPathing(i, j)) {\n                    site.clearCell(i, j, 'FLOOR');\n                }\n                madeChange = true;\n            }, true // 4 dirs\n            );\n        });\n    }\n    interior.update((v) => (v > 0 ? 1 : 0));\n}\nexport function prepareInterior(builder) {\n    const interior = builder.interior;\n    const site = builder.site;\n    const blueprint = builder.blueprint;\n    // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n    if (blueprint.maximizeInterior) {\n        maximizeInterior(builder, 1);\n    }\n    else if (blueprint.openInterior) {\n        maximizeInterior(builder, 4);\n    }\n    // If requested, cleanse the interior -- no interesting terrain allowed.\n    if (blueprint.purgeInterior) {\n        interior.forEach((v, x, y) => {\n            if (v)\n                site.clearCell(x, y, SITE.FLOOR);\n        });\n    }\n    else {\n        if (blueprint.purgeBlockers) {\n            // If requested, purge pathing blockers -- no traps allowed.\n            interior.forEach((v, x, y) => {\n                if (!v)\n                    return;\n                if (site.blocksPathing(x, y)) {\n                    site.clearCell(x, y, SITE.FLOOR);\n                }\n            });\n        }\n        // If requested, purge the liquid layer in the interior -- no liquids allowed.\n        if (blueprint.purgeLiquids) {\n            interior.forEach((v, x, y) => {\n                if (v && site.isAnyLiquid(x, y)) {\n                    site.clearCell(x, y, SITE.FLOOR);\n                }\n            });\n        }\n    }\n    // Surround with walls if requested.\n    if (blueprint.surroundWithWalls) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE))\n                return;\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return; // Not valid x,y\n                if (interior[i][j])\n                    return; // is part of machine\n                if (site.isWall(i, j))\n                    return; // is already a wall (of some sort)\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_GATE_SITE))\n                    return; // is a door site\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE))\n                    return; // is part of a machine\n                if (site.blocksPathing(i, j))\n                    return; // is a blocker for the player (water?)\n                site.clearCell(i, j, SITE.WALL);\n            }, false // all 8 directions\n            );\n        });\n    }\n    // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n    // Then zero out any portion of the interior that is still wall.\n    // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n    //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n    // }\n    // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n    if (blueprint.makeImpregnable) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.hasCellFlag(x, y, GWM.flags.Cell.IS_GATE_SITE))\n                return;\n            site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n            GWU.xy.eachNeighbor(x, y, (i, j) => {\n                if (!interior.hasXY(i, j))\n                    return;\n                if (interior[i][j])\n                    return;\n                if (site.hasCellFlag(i, j, GWM.flags.Cell.IS_GATE_SITE))\n                    return;\n                site.setCellFlag(i, j, GWM.flags.Cell.IMPREGNABLE);\n            }, false);\n        });\n    }\n    // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n    const machineNumber = builder.machineNumber;\n    interior.forEach((v, x, y) => {\n        if (!v)\n            return;\n        if (!blueprint.noInteriorFlag) {\n            site.setMachine(x, y, machineNumber, blueprint.isRoom);\n        }\n        // secret doors mess up machines\n        // TODO - is this still true?\n        if (site.isSecretDoor(x, y)) {\n            site.setTile(x, y, SITE.DOOR);\n        }\n    });\n}\n// export function expandMachineInterior(\n//     builder: BuildData,\n//     minimumInteriorNeighbors = 1\n// ) {\n//     let madeChange;\n//     const interior = builder.interior;\n//     const site = builder.site;\n//     do {\n//         madeChange = false;\n//         interior.forEach((_v, x, y) => {\n//             // if (v && site.isDoor(x, y)) {\n//             //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n//             //     return;\n//             // }\n//             if (site.hasCellFlag(x, y, GWM.flags.Cell.IS_IN_MACHINE)) return;\n//             if (!site.blocksPathing(x, y)) return;\n//             let nbcount = 0;\n//             GWU.xy.eachNeighbor(\n//                 x,\n//                 y,\n//                 (i, j) => {\n//                     if (!interior.hasXY(i, j)) return; // Not in map\n//                     if (interior.isBoundaryXY(i, j)) return; // Not on boundary\n//                     if (interior[i][j] && !site.blocksPathing(i, j)) {\n//                         ++nbcount; // in machine and open tile\n//                     }\n//                 },\n//                 false\n//             );\n//             if (nbcount < minimumInteriorNeighbors) return;\n//             nbcount = 0;\n//             GWU.xy.eachNeighbor(\n//                 x,\n//                 y,\n//                 (i, j) => {\n//                     if (!interior.hasXY(i, j)) return; // not on map\n//                     if (interior[i][j]) return; // already part of machine\n//                     if (\n//                         !site.isWall(i, j) ||\n//                         site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)\n//                     ) {\n//                         ++nbcount; // tile is not a wall or is in a machine\n//                     }\n//                 },\n//                 false\n//             );\n//             if (nbcount) return;\n//             // Eliminate this obstruction; welcome its location into the machine.\n//             madeChange = true;\n//             interior[x][y] = 1;\n//             if (site.blocksPathing(x, y)) {\n//                 site.setTile(x, y, SITE.FLOOR);\n//             }\n//             GWU.xy.eachNeighbor(x, y, (i, j) => {\n//                 if (!interior.hasXY(i, j)) return;\n//                 if (site.isSet(i, j)) return;\n//                 site.setTile(i, j, SITE.WALL);\n//             });\n//         });\n//     } while (madeChange);\n// }\n///////////////////////////\n// INSTALL\nexport const blueprints = {};\nexport function install(id, blueprint) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\nexport function random(requiredFlags, depth, rng) {\n    const matches = Object.values(blueprints).filter((b) => b.qualifies(requiredFlags) && b.frequency(depth));\n    rng = rng || GWU.rng.random;\n    return rng.item(matches);\n}\nexport function get(id) {\n    if (id instanceof Blueprint)\n        return id;\n    return blueprints[id];\n}\nexport function make(config) {\n    // if (!config.id) throw new Error('id is required to make Blueprint.');\n    return new Blueprint(config);\n}\n","import * as GWU from 'gw-utils';\nimport { Flags } from '../blueprint/blueprint';\nimport { StepFlags } from '../blueprint/buildStep';\nexport class ConsoleLogger {\n    onDigFirstRoom(site) {\n        console.group('dig first room');\n        site.dump();\n        console.groupEnd();\n    }\n    onRoomCandidate(room, roomSite) {\n        console.group('room candidate: ' + room.toString());\n        roomSite.dump();\n        console.groupEnd();\n    }\n    onRoomFailed(_site, _room, _roomSite, error) {\n        console.log('Room Failed - ', error);\n    }\n    onRoomSuccess(site, room) {\n        console.group('Added Room - ' + room.toString());\n        site.dump();\n        console.groupEnd();\n    }\n    onLoopsAdded(_site) {\n        console.log('loops added');\n    }\n    onLakesAdded(_site) {\n        console.log('lakes added');\n    }\n    onBridgesAdded(_site) {\n        console.log('bridges added');\n    }\n    onStairsAdded(_site) {\n        console.log('stairs added');\n    }\n    //\n    onBuildError(error) {\n        console.log(`onBuildError - error: ${error}`);\n    }\n    onBlueprintPick(data, flags, depth) {\n        console.log(`onBlueprintPick - ${data.blueprint.id}, depth = ${depth}, matchingFlags = ${GWU.flag.toString(Flags, flags)}`);\n    }\n    onBlueprintCandidates(data) {\n        const label = `onBlueprintCandidates - ${data.blueprint.id}`;\n        console.group(label);\n        data.candidates.dump();\n        console.groupEnd();\n    }\n    onBlueprintStart(data) {\n        console.group(`onBlueprintStart - ${data.blueprint.id} @ ${data.originX},${data.originY} : stepCount: ${data.blueprint.steps.length}, size: [${data.blueprint.size.toString()}], flags: ${GWU.flag.toString(Flags, data.blueprint.flags)}`);\n    }\n    onBlueprintInterior(data) {\n        console.group(`onBlueprintInterior - ${data.blueprint.id}`);\n        data.interior.dump();\n        console.groupEnd();\n    }\n    onBlueprintFail(data, error) {\n        console.log(`onBlueprintFail - ${data.blueprint.id} @ ${data.originX},${data.originY} : error: ${error}`);\n        console.groupEnd();\n    }\n    onBlueprintSuccess(data) {\n        console.log(`onBlueprintSuccess - ${data.blueprint.id} @ ${data.originX},${data.originY}`);\n        console.groupEnd();\n    }\n    onStepStart(data, step) {\n        console.group(`onStepStart - ${data.blueprint.id}[${data.blueprint.steps.indexOf(step) + 1}/${data.blueprint.steps.length}] @ ${data.originX},${data.originY} : count: [${step.count.toString()}], flags: ${GWU.flag.toString(StepFlags, step.flags)}`);\n        console.log(step.toString());\n    }\n    onStepCandidates(data, step, candidates, wantCount) {\n        const haveCount = candidates.count((v) => v == 1);\n        console.log(`onStepCandidates - ${data.blueprint.id}[${data.blueprint.steps.indexOf(step) + 1}/${data.blueprint.steps.length}] @ ${data.originX},${data.originY} : wantCount: ${wantCount}, have: ${haveCount}`);\n        candidates.dump();\n        if (haveCount == 0) {\n            console.log('No candidates - check interior');\n            data.interior.dump();\n        }\n    }\n    onStepInstanceSuccess(_data, _step, x, y) {\n        console.log(`onStepInstance @ ${x},${y}`);\n    }\n    onStepInstanceFail(_data, _step, x, y, error) {\n        console.log(`onStepInstanceFail @ ${x},${y} - error: ${error}`);\n    }\n    onStepSuccess(data, step) {\n        console.log(`onStepSuccess - ${data.blueprint.id}[${data.blueprint.steps.indexOf(step) + 1}/${data.blueprint.steps.length}] @ ${data.originX},${data.originY} : count: [${step.count.toString()}], flags: ${GWU.flag.toString(StepFlags, step.flags)}`);\n        console.groupEnd();\n    }\n    onStepFail(data, step, error) {\n        console.log(`onStepFail - ${data.blueprint.id}[${data.blueprint.steps.indexOf(step) + 1}/${data.blueprint.steps.length}] @ ${data.originX},${data.originY} : error : ${error}`);\n        console.groupEnd();\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nimport * as LOGGER from './log/logger';\nimport { ConsoleLogger } from './log/consoleLogger';\nexport class Digger {\n    constructor(options = {}) {\n        var _a, _b;\n        this.seed = 0;\n        this.rooms = { fails: 20 };\n        this.doors = { chance: 15 };\n        this.halls = { chance: 15 };\n        this.loops = {};\n        this.lakes = {};\n        this.bridges = {};\n        this.stairs = {};\n        this.boundary = true;\n        this.startLoc = [-1, -1];\n        this.endLoc = [-1, -1];\n        this.seed = options.seed || 0;\n        GWU.object.setOptions(this.rooms, options.rooms);\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        }\n        else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.object.setOptions(this.doors, options.doors);\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        }\n        else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.object.setOptions(this.halls, options.halls);\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        }\n        else {\n            if (options.loops === true)\n                options.loops = {};\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                (_a = options.loops.doorChance) !== null && _a !== void 0 ? _a : (_b = options.doors) === null || _b === void 0 ? void 0 : _b.chance;\n            GWU.object.setOptions(this.loops, options.loops);\n        }\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        }\n        else {\n            if (options.lakes === true)\n                options.lakes = {};\n            GWU.object.setOptions(this.lakes, options.lakes);\n        }\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        }\n        else {\n            if (options.bridges === true)\n                options.bridges = {};\n            GWU.object.setOptions(this.bridges, options.bridges);\n        }\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        }\n        else {\n            if (options.stairs === true)\n                options.stairs = {};\n            GWU.object.setOptions(this.stairs, options.stairs);\n        }\n        this.startLoc = options.startLoc || [-1, -1];\n        this.endLoc = options.endLoc || [-1, -1];\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        }\n        else if (options.log) {\n            this.log = options.log;\n        }\n        else {\n            this.log = new LOGGER.NullLogger();\n        }\n    }\n    _makeRoomSite(width, height) {\n        const site = new SITE.GridSite(width, height);\n        site.rng = this.site.rng;\n        return site;\n    }\n    _createSite(a, b) {\n        if (a instanceof GWM.map.Map) {\n            this.site = new SITE.MapSite(a);\n        }\n        else if (b) {\n            this.site = new SITE.GridSite(a, b);\n        }\n        else {\n            throw new Error('Invlaid digger arguments.');\n        }\n    }\n    create(...args) {\n        this._createSite(args[0], args[1]);\n        const result = this._create(this.site);\n        const cb = args[2] || null;\n        if (cb) {\n            GWU.xy.forRect(this.site.width, this.site.height, (x, y) => {\n                const t = this.site.getTileIndex(x, y);\n                if (t)\n                    cb(x, y, t);\n            });\n        }\n        this.site.free();\n        return result;\n    }\n    _create(site) {\n        this.start(site);\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site))\n                break;\n        }\n        if (!tries)\n            throw new Error('Failed to place first room!');\n        site.updateDoorDirs();\n        this.log.onDigFirstRoom(site);\n        // site.dump();\n        // console.log('- rng.number', site.rng.number());\n        let fails = 0;\n        let count = 1;\n        const maxFails = this.rooms.fails || 20;\n        while (fails < maxFails) {\n            if (this.addRoom(site)) {\n                fails = 0;\n                site.updateDoorDirs();\n                site.rng.shuffle(this.seq);\n                // site.dump();\n                // console.log('- rng.number', site.rng.number());\n                if (this.rooms.count && ++count >= this.rooms.count) {\n                    break; // we are done\n                }\n            }\n            else {\n                ++fails;\n            }\n        }\n        if (this.loops) {\n            this.addLoops(site, this.loops);\n            this.log.onLoopsAdded(site);\n        }\n        if (this.lakes) {\n            this.addLakes(site, this.lakes);\n            this.log.onLakesAdded(site);\n        }\n        if (this.bridges) {\n            this.addBridges(site, this.bridges);\n            this.log.onBridgesAdded(site);\n        }\n        if (this.stairs) {\n            this.addStairs(site, this.stairs);\n            this.log.onStairsAdded(site);\n        }\n        this.finish(site);\n        return true;\n    }\n    start(site) {\n        const seed = this.seed || GWU.rng.random.number();\n        site.setSeed(seed);\n        site.clear();\n        this.seq = site.rng.sequence(site.width * site.height);\n        if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n            this.startLoc[0] = Math.floor(site.width / 2);\n            this.startLoc[1] = site.height - 2;\n        }\n    }\n    getDigger(id) {\n        if (!id)\n            throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger)\n            return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n    addFirstRoom(site) {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.first || this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        if (room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.startLoc)) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n    addRoom(site) {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n        let digger = this.getDigger(this.rooms.digger || 'DEFAULT');\n        let room = digger.create(roomSite);\n        // attach hall?\n        if (room && this.halls.chance) {\n            let hall = HALL.dig(this.halls, roomSite, room.doors);\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n        // console.log('potential room');\n        // roomSite.dump();\n        if (room) {\n            this.log.onRoomCandidate(room, roomSite);\n            if (this._attachRoom(site, roomSite, room)) {\n                this.log.onRoomSuccess(site, room);\n            }\n            else {\n                this.log.onRoomFailed(site, room, roomSite, 'Did not fit.');\n                room = null;\n            }\n        }\n        roomSite.free();\n        return room;\n    }\n    _attachRoom(site, roomSite, room) {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        let i = 0;\n        const len = this.seq.length;\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (i = 0; i < len; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n            const dir = site.getDoorDir(x, y);\n            if (dir != GWU.xy.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door)\n                    continue;\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n                if (door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, room, offsetX, offsetY)) {\n                    // TYPES.Room fits here.\n                    SITE.copySite(site, roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _attachRoomAtLoc(site, roomSite, room, attachLoc) {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = site.rng.sequence(4);\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1)\n                continue;\n            const offX = x - door[0];\n            const offY = y - door[1];\n            if (this._roomFitsAt(site, roomSite, room, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n                // TYPES.Room fits here.\n                SITE.copySite(site, roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n                //     return [x0, y0] as GWU.xy.Loc;\n                // });\n                return true;\n            }\n        }\n        return false;\n    }\n    _roomFitsAt(map, roomGrid, room, roomToSiteX, roomToSiteY) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n        const hall = room.hall || room;\n        const left = Math.min(room.left, hall.left);\n        const top = Math.min(room.top, hall.top);\n        const right = Math.max(room.right, hall.right);\n        const bottom = Math.max(room.bottom, hall.bottom);\n        for (xRoom = left; xRoom <= right; xRoom++) {\n            for (yRoom = top; yRoom <= bottom; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    if (!map.hasXY(xSite, ySite) ||\n                        map.isBoundaryXY(xSite, ySite)) {\n                        return false;\n                    }\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n    _attachDoor(site, room, x, y, dir) {\n        const opts = this.doors;\n        let isDoor = false;\n        if (opts.chance && site.rng.chance(opts.chance)) {\n            isDoor = true;\n        }\n        const tile = isDoor ? opts.tile || SITE.DOOR : SITE.FLOOR;\n        site.setTile(x, y, tile); // Door site.\n        // most cases...\n        if (!room.hall || room.hall.width == 1 || room.hall.height == 1) {\n            return;\n        }\n        if (dir === GWU.xy.UP || dir === GWU.xy.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (site.isNothing(x - k, y)) {\n                    if (site.isSet(x - k, y - 1) && site.isSet(x - k, y + 1)) {\n                        site.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x + k, y)) {\n                    if (site.isSet(x + k, y - 1) && site.isSet(x + k, y + 1)) {\n                        site.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n        else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n                if (site.isNothing(x, y - k)) {\n                    if (site.isSet(x - 1, y - k) && site.isSet(x + 1, y - k)) {\n                        site.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x, y + k)) {\n                    if (site.isSet(x - 1, y + k) && site.isSet(x + 1, y + k)) {\n                        site.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n    addLoops(site, opts) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n    addLakes(site, opts) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n    addBridges(site, opts) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n    addStairs(site, opts) {\n        const digger = new STAIRS.Stairs(opts);\n        return digger.create(site);\n    }\n    finish(site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n    _removeDiagonalOpenings(site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (!site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)) {\n                            if (site.rng.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            }\n                            else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, SITE.FLOOR); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n    _finishDoors(site) {\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y))\n                return;\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                if (\n                // TODO - isPassable\n                (site.isFloor(x + 1, y) || site.isFloor(x - 1, y)) &&\n                    (site.isFloor(x, y + 1) || site.isFloor(x, y - 1))) {\n                    // If there's passable terrain to the left or right, and there's passable terrain\n                    // above or below, then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                }\n                else if ((site.blocksPathing(x + 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x - 1, y) ? 1 : 0) +\n                    (site.blocksPathing(x, y + 1) ? 1 : 0) +\n                    (site.blocksPathing(x, y - 1) ? 1 : 0) >=\n                    3) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n    _finishWalls(site) {\n        const boundaryTile = this.boundary ? SITE.IMPREGNABLE : SITE.WALL;\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                }\n                else {\n                    site.setTile(x, y, SITE.WALL);\n                }\n            }\n        });\n    }\n}\nexport function digMap(map, options = {}) {\n    const digger = new Digger(options);\n    return digger.create(map);\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nexport class BuildData {\n    constructor(site, blueprint) {\n        this.originX = -1;\n        this.originY = -1;\n        this.distance25 = -1;\n        this.distance75 = -1;\n        this.machineNumber = 0;\n        this.depth = 0;\n        this.seed = 0;\n        this.site = site;\n        this.blueprint = blueprint;\n        this.interior = GWU.grid.alloc(site.width, site.height);\n        this.occupied = GWU.grid.alloc(site.width, site.height);\n        this.viewMap = GWU.grid.alloc(site.width, site.height);\n        this.distanceMap = GWU.grid.alloc(site.width, site.height);\n        this.candidates = GWU.grid.alloc(site.width, site.height);\n    }\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.distanceMap);\n        GWU.grid.free(this.candidates);\n    }\n    get rng() {\n        return this.site.rng;\n    }\n    reset(originX, originY) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.fill(0);\n        // this.candidates.fill(0);\n        this.originX = originX;\n        this.originY = originY;\n        this.distance25 = 0;\n        this.distance75 = 0;\n        if (this.seed) {\n            this.site.setSeed(this.seed);\n        }\n    }\n    calcDistances(maxSize) {\n        this.distanceMap.fill(0);\n        SITE.computeDistanceMap(this.site, this.distanceMap, this.originX, this.originY, maxSize);\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n        this.interior.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const dist = this.distanceMap[x][y];\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            }\n            else {\n                distance25 -= distances[i];\n            }\n        }\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            }\n            else {\n                distance75 -= distances[i];\n            }\n        }\n        this.distance25 = distance25;\n        this.distance75 = distance75;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\nimport * as STEP from './buildStep';\nimport { BuildData } from './data';\nimport { NullLogger } from '../log/logger';\nimport { ConsoleLogger } from '../log/consoleLogger';\nimport { MapSite } from '../site';\nexport class Builder {\n    constructor(options = {}) {\n        this.blueprints = null;\n        if (options.blueprints) {\n            if (!Array.isArray(options.blueprints)) {\n                options.blueprints = Object.values(options.blueprints);\n            }\n            this.blueprints = options.blueprints.map((v) => BLUE.get(v));\n        }\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        }\n        else {\n            this.log = options.log || new NullLogger();\n        }\n    }\n    _pickRandom(requiredFlags, depth, rng) {\n        rng = rng || GWU.rng.random;\n        const blueprints = this.blueprints || Object.values(BLUE.blueprints);\n        const weights = blueprints.map((b) => {\n            if (!b.qualifies(requiredFlags))\n                return 0;\n            return b.frequency(depth);\n        });\n        const index = rng.weighted(weights);\n        return blueprints[index] || null;\n    }\n    buildRandom(site, requiredMachineFlags = BLUE.Flags.BP_ROOM, x = -1, y = -1, adoptedItem = null) {\n        if (site instanceof GWM.map.Map) {\n            site = new MapSite(site);\n        }\n        const depth = site.depth;\n        let tries = 0;\n        while (tries < 10) {\n            const blueprint = this._pickRandom(requiredMachineFlags, depth, site.rng);\n            if (!blueprint) {\n                this.log.onBuildError(`Failed to find matching blueprint: requiredMachineFlags : ${GWU.flag.toString(BLUE.Flags, requiredMachineFlags)}, depth: ${depth}`);\n                return null;\n            }\n            const data = new BuildData(site, blueprint);\n            data.site.analyze();\n            this.log.onBlueprintPick(data, requiredMachineFlags, depth);\n            if (this._buildAt(data, x, y, adoptedItem)) {\n                return { x, y };\n            }\n            ++tries;\n        }\n        // console.log(\n        //     'Failed to build random blueprint matching flags: ' +\n        //         GWU.flag.toString(BLUE.Flags, requiredMachineFlags) +\n        //         ' tried : ' +\n        //         tries.join(', ')\n        // );\n        return null;\n    }\n    build(site, blueprint, x = -1, y = -1, adoptedItem = null) {\n        if (site instanceof GWM.map.Map) {\n            site = new MapSite(site);\n        }\n        if (typeof blueprint === 'string') {\n            const id = blueprint;\n            blueprint = BLUE.blueprints[id];\n            if (!blueprint)\n                throw new Error('Failed to find blueprint - ' + id);\n        }\n        const data = new BuildData(site, blueprint);\n        data.site.analyze();\n        return this._buildAt(data, x, y, adoptedItem);\n    }\n    _buildAt(data, x = -1, y = -1, adoptedItem = null) {\n        if (x >= 0 && y >= 0) {\n            return this._build(data, x, y, adoptedItem);\n        }\n        let count = this._markCandidates(data);\n        if (!count) {\n            return null;\n        }\n        let tries = 20; // TODO - Make property of Blueprint\n        while (count-- && tries--) {\n            const loc = BLUE.pickCandidateLoc(data) || false;\n            if (loc) {\n                if (this._build(data, loc[0], loc[1], adoptedItem)) {\n                    return { x: loc[0], y: loc[1] };\n                }\n            }\n        }\n        this.log.onBlueprintFail(data, 'No suitable locations found to build blueprint.');\n        return null;\n    }\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    _build(data, originX, originY, adoptedItem = null) {\n        data.reset(originX, originY);\n        this.log.onBlueprintStart(data, adoptedItem);\n        if (!this._computeInterior(data)) {\n            return null;\n        }\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const snapshot = data.site.snapshot();\n        data.machineNumber = data.site.nextMachineId(); // Reserve this machine number, starting with 1.\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        BLUE.prepareInterior(data);\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        data.calcDistances(data.blueprint.size.hi);\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n        const components = data.blueprint.pickComponents(data.site.rng);\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n            if (!this._buildStep(data, component, adoptedItem)) {\n                // failure! abort!\n                // Restore the map to how it was before we touched it.\n                this.log.onBlueprintFail(data, `Failed to build step ${index + 1}.`);\n                snapshot.restore();\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return null;\n            }\n        }\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (data.blueprint.noInteriorFlag) {\n            SITE.clearInteriorFlag(data.site, data.machineNumber);\n        }\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n        this.log.onBlueprintSuccess(data);\n        snapshot.cancel();\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return { x: originX, y: originY };\n    }\n    _markCandidates(data) {\n        const count = BLUE.markCandidates(data);\n        if (count <= 0) {\n            this.log.onBlueprintFail(data, 'No suitable candidate locations found.');\n            return 0;\n        }\n        this.log.onBlueprintCandidates(data);\n        return count;\n    }\n    _computeInterior(data) {\n        let fail = null;\n        let count = data.blueprint.fillInterior(data);\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (!count) {\n            fail = 'Interior error.';\n        }\n        else if (!data.blueprint.size.contains(count)) {\n            fail = `Interior wrong size - have: ${count}, want: ${data.blueprint.size.toString()}`;\n        }\n        else if (data.blueprint.treatAsBlocking &&\n            SITE.siteDisruptedBy(data.site, data.interior, {\n                machine: data.site.machineCount,\n            })) {\n            fail = 'Interior blocks map.';\n        }\n        else if (data.blueprint.requireBlocking &&\n            SITE.siteDisruptedSize(data.site, data.interior) < 100) {\n            fail = 'Interior does not block enough cells.';\n        }\n        if (!fail) {\n            this.log.onBlueprintInterior(data);\n            return true;\n        }\n        this.log.onBlueprintFail(data, fail);\n        return false;\n    }\n    _buildStep(data, buildStep, adoptedItem) {\n        let wantCount = 0;\n        let builtCount = 0;\n        const site = data.site;\n        this.log.onStepStart(data, buildStep, adoptedItem);\n        // console.log(\n        //     'buildComponent',\n        //     blueprint.id,\n        //     blueprint.steps.indexOf(buildStep)\n        // );\n        // Figure out the distance bounds.\n        const distanceBound = STEP.calcDistanceBound(data, buildStep);\n        // If the StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n        // Make a master map of candidate locations for this feature.\n        let qualifyingTileCount = 0;\n        if (buildStep.buildVestibule) {\n            // Generate a door guard machine.\n            // Try to create a sub-machine that qualifies.\n            let success = this.buildRandom(data.site, BLUE.Flags.BP_VESTIBULE, data.originX, data.originY);\n            if (!success) {\n                this.log.onStepFail(data, buildStep, 'Failed to build vestibule');\n                return false;\n            }\n        }\n        // If we are just building a vestibule, then we can exit here...\n        if (!buildStep.buildsInstances) {\n            this.log.onStepSuccess(data, buildStep);\n            return true;\n        }\n        const candidates = GWU.grid.alloc(site.width, site.height);\n        let didSomething = false;\n        do {\n            didSomething = false;\n            if (buildStep.buildAtOrigin) {\n                candidates[data.originX][data.originY] = 1;\n                qualifyingTileCount = 1;\n                wantCount = 1;\n            }\n            else {\n                qualifyingTileCount = buildStep.markCandidates(data, candidates, distanceBound);\n                if (buildStep.generateEverywhere ||\n                    buildStep.repeatUntilNoProgress) {\n                    wantCount = qualifyingTileCount;\n                }\n                else {\n                    wantCount = buildStep.count.value(site.rng);\n                }\n                this.log.onStepCandidates(data, buildStep, candidates, wantCount);\n                // get rid of all error/invalid codes\n                candidates.update((v) => (v == 1 ? 1 : 0));\n                if (!qualifyingTileCount ||\n                    qualifyingTileCount < buildStep.count.lo) {\n                    this.log.onStepFail(data, buildStep, `Only ${qualifyingTileCount} qualifying tiles - want ${buildStep.count.toString()}.`);\n                    return false;\n                }\n            }\n            let x = 0, y = 0;\n            while (qualifyingTileCount > 0 && builtCount < wantCount) {\n                // Find a location for the feature.\n                if (buildStep.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = data.originX;\n                    y = data.originY;\n                }\n                else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = data.rng.matchingLoc(candidates.width, candidates.height, (x, y) => candidates[x][y] == 1);\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n                const snapshot = data.site.snapshot();\n                if (this._buildStepInstance(data, buildStep, x, y, adoptedItem)) {\n                    // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                    qualifyingTileCount -= buildStep.makePersonalSpace(data, x, y, candidates);\n                    builtCount++; // we've placed an instance\n                    didSomething = true;\n                    snapshot.cancel(); // This snapshot is useless b/c we made changes...\n                }\n                else {\n                    snapshot.restore(); // need to undo any changes...\n                }\n                // Finished with this instance!\n            }\n        } while (didSomething && buildStep.repeatUntilNoProgress);\n        GWU.grid.free(candidates);\n        if (!buildStep.count.contains(builtCount) &&\n            !buildStep.generateEverywhere &&\n            !buildStep.repeatUntilNoProgress) {\n            this.log.onStepFail(data, buildStep, `Failed to build enough instances - want: ${buildStep.count.toString()}, built: ${builtCount}`);\n            return false;\n        }\n        this.log.onStepSuccess(data, buildStep);\n        return true;\n    }\n    _buildStepInstance(data, buildStep, x, y, adoptedItem = null) {\n        let success = true;\n        let didSomething = true;\n        const site = data.site;\n        if (success && buildStep.treatAsBlocking) {\n            // Yes, check for blocking.\n            const options = {\n                machine: site.machineCount,\n            };\n            if (buildStep.noBlockOrigin) {\n                options.updateWalkable = (g) => {\n                    g[data.originX][data.originY] = 1;\n                    return true;\n                };\n            }\n            if (SITE.siteDisruptedByXY(site, x, y, options)) {\n                this.log.onStepInstanceFail(data, buildStep, x, y, 'instance blocks map');\n                success = false;\n            }\n        }\n        // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n        if (success && buildStep.effect) {\n            success = site.buildEffect(buildStep.effect, x, y);\n            didSomething = success;\n            if (!success) {\n                this.log.onStepInstanceFail(data, buildStep, x, y, 'Failed to build effect - ' +\n                    JSON.stringify(buildStep.effect));\n            }\n        }\n        // Now try to place the terrain tile, if any.\n        if (success && buildStep.tile !== -1) {\n            const tile = GWM.tile.get(buildStep.tile);\n            if (!tile) {\n                success = false;\n                this.log.onStepInstanceFail(data, buildStep, x, y, 'failed to find tile - ' + buildStep.tile);\n            }\n            else if (!buildStep.permitBlocking &&\n                tile.blocksMove() &&\n                !buildStep.treatAsBlocking // already did treatAsBlocking\n            ) {\n                if (SITE.siteDisruptedByXY(site, x, y, {\n                    machine: site.machineCount,\n                })) {\n                    this.log.onStepInstanceFail(data, buildStep, x, y, 'tile blocks site');\n                    success = false;\n                }\n            }\n            if (success) {\n                success = site.setTile(x, y, tile);\n                didSomething = didSomething || success;\n                if (!success) {\n                    this.log.onStepInstanceFail(data, buildStep, x, y, 'failed to set tile - ' + tile.id);\n                }\n            }\n        }\n        let torch = adoptedItem;\n        // Generate an item, if necessary\n        if (success && buildStep.item) {\n            const item = buildStep.makeItem(data);\n            if (!item) {\n                success = false;\n                this.log.onStepInstanceFail(data, buildStep, x, y, 'Failed to make random item - ' +\n                    JSON.stringify(buildStep.item));\n            }\n            else {\n                if (buildStep.itemIsKey) {\n                    item.key = GWM.entity.makeKeyInfo(x, y, !!buildStep.keyIsDisposable);\n                }\n                if (buildStep.outsourceItem) {\n                    const result = this.buildRandom(data.site, BLUE.Flags.BP_ADOPT_ITEM, -1, -1, item);\n                    if (result) {\n                        didSomething = true;\n                    }\n                    else {\n                        this.log.onStepInstanceFail(data, buildStep, x, y, 'Failed to build machine to adopt item - ' +\n                            item.kind.id);\n                        success = false;\n                    }\n                }\n                else if (buildStep.hordeTakesItem) {\n                    torch = item;\n                }\n                else {\n                    success = site.addItem(x, y, item);\n                    didSomething = didSomething || success;\n                    if (!success) {\n                        this.log.onStepInstanceFail(data, buildStep, x, y, 'Failed to add item to site - ' + item.kind.id);\n                    }\n                }\n            }\n        }\n        else if (success && buildStep.adoptItem) {\n            // adopt item if necessary\n            if (!adoptedItem) {\n                throw new Error('Failed to build blueprint because there is no adopted item.');\n            }\n            if (success) {\n                success = site.addItem(x, y, adoptedItem);\n                if (success) {\n                    didSomething = true;\n                }\n                else {\n                    this.log.onStepInstanceFail(data, buildStep, x, y, 'Failed to add adopted item to site - ' +\n                        adoptedItem.kind.id);\n                }\n            }\n        }\n        let torchBearer = null;\n        if (success && buildStep.horde) {\n            let horde;\n            if (buildStep.horde.random) {\n                horde = GWM.horde.random({ rng: site.rng });\n            }\n            else if (buildStep.horde.id) {\n                horde = GWM.horde.from(buildStep.horde.id);\n            }\n            else {\n                buildStep.horde.rng = site.rng;\n                horde = GWM.horde.random(buildStep.horde);\n            }\n            if (!horde) {\n                success = false;\n                this.log.onStepInstanceFail(data, buildStep, x, y, 'Failed to pick horde - ' + JSON.stringify(buildStep.horde));\n            }\n            else {\n                const leader = site.spawnHorde(horde, x, y, {\n                    machine: site.machineCount,\n                });\n                if (!leader) {\n                    success = false;\n                    this.log.onStepInstanceFail(data, buildStep, x, y, 'Failed to build horde - ' + horde);\n                }\n                else {\n                    // What to do now?\n                    didSomething = true;\n                    // leader adopts item...\n                    if (torch && buildStep.hordeTakesItem) {\n                        torchBearer = leader;\n                        if (!torchBearer.pickupItem(torch, {\n                            admin: true,\n                        })) {\n                            success = false;\n                        }\n                    }\n                    if (buildStep.horde.effect) {\n                        const info = GWM.effect.from(buildStep.horde.effect);\n                        site.buildEffect(info, x, y);\n                    }\n                }\n            }\n        }\n        if (success && didSomething) {\n            // Mark the feature location as part of the machine, in case it is not already inside of it.\n            if (!data.blueprint.noInteriorFlag) {\n                site.setMachine(x, y, data.machineNumber, data.blueprint.isRoom);\n            }\n            // Mark the feature location as impregnable if requested.\n            if (buildStep.impregnable) {\n                site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n            }\n            this.log.onStepInstanceSuccess(data, buildStep, x, y);\n        }\n        else if (didSomething) {\n            // roll back any changes?\n        }\n        return success && didSomething;\n    }\n}\n////////////////////////////////////////////////////\n// TODO - Change this!!!\n// const blue = BLUE.get(id | blue);\n// const result =  blue.buildAt(map, x, y);\n//\nexport function build(blueprint, map, x, y, opts) {\n    const builder = new Builder(opts);\n    const site = new MapSite(map);\n    return builder.build(site, blueprint, x, y);\n}\n","import * as GWM from 'gw-map';\nimport * as BLUE from '../blueprint';\nexport class MachineHorde extends GWM.horde.Horde {\n    constructor(config) {\n        super(config);\n        this.machine = null;\n        this.machine = config.blueprint || null;\n    }\n    _addLeader(leader, map, x, y, opts) {\n        if (this.machine) {\n            BLUE.build(this.machine, map, x, y);\n        }\n        if (!super._addLeader(leader, map, x, y, opts))\n            return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as LEVEL from './digger';\nexport class Dungeon {\n    constructor(options = {}) {\n        this.config = {\n            levels: 1,\n            width: 80,\n            height: 34,\n            rooms: { count: 20, digger: 'DEFAULT' },\n            halls: {},\n            loops: {},\n            lakes: {},\n            bridges: {},\n            stairs: {},\n            boundary: true,\n        };\n        this.seeds = [];\n        this.stairLocs = [];\n        GWU.object.setOptions(this.config, options);\n        if (this.config.seed) {\n            GWU.rng.random.seed(this.config.seed);\n        }\n        this.initSeeds();\n        this.initStairLocs();\n    }\n    get levels() {\n        return this.config.levels;\n    }\n    initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.rng.random.number(2 ** 32);\n        }\n    }\n    initStairLocs() {\n        let startLoc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n        const minDistance = this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n        for (let i = 0; i < this.config.levels; ++i) {\n            const endLoc = GWU.rng.random.matchingLoc(this.config.width, this.config.height, (x, y) => {\n                return (GWU.xy.distanceBetween(startLoc[0], startLoc[1], x, y) >\n                    minDistance);\n            });\n            this.stairLocs.push([\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ]);\n            startLoc = endLoc;\n        }\n    }\n    getLevel(id, cb) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n        const stairOpts = Object.assign({}, this.config.stairs);\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        }\n        else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n        const rooms = Object.assign({}, this.config.rooms);\n        if (id === 0 && rooms.entrance) {\n            rooms.first = rooms.entrance;\n        }\n        const levelOpts = {\n            seed: this.seeds[id],\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n            rooms: rooms,\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n            width: this.config.width,\n            height: this.config.height,\n        };\n        return this.makeLevel(id, levelOpts, cb);\n        // TODO - Update startLoc, endLoc\n    }\n    makeLevel(id, opts, cb) {\n        const digger = new LEVEL.Digger(opts);\n        const result = digger.create(this.config.width, this.config.height, cb);\n        if (!GWU.xy.equalsXY(digger.endLoc, opts.endLoc) ||\n            !GWU.xy.equalsXY(digger.startLoc, opts.startLoc)) {\n            this.stairLocs[id] = [digger.startLoc, digger.endLoc];\n        }\n        return result;\n    }\n}\n"],"names":["_a","_b","NOTHING","GWM","tile","get","index","FLOOR","DOOR","SECRET_DOOR","WALL","DEEP","SHALLOW","BRIDGE","UP_STAIRS","DOWN_STAIRS","IMPREGNABLE","TILEMAP","[object Object]","DIRS","GWU","xy","directionOfDoorSite","site","x","y","dir","solutionDir","newX","newY","oppX","oppY","NO_DIRECTION","hasXY","isFloor","chooseRandomDoorSites","i","j","k","doorSiteFailed","DOORS","h","height","w","width","isDiggable","isSet","push","doorSites","loc","rng","item","copySite","dest","source","offsetX","offsetY","forRect","otherX","otherY","v","getTileIndex","setTile","fillCostGrid","costGrid","update","_v","isPassable","path","OBSTRUCTION","siteDisruptedByXY","options","_c","machine","arcCount","blockingGrid","grid","alloc","result","siteDisruptedBy","free","walkableGrid","disrupts","blockingX","blockingY","isStairs","getMachine","updateWalkable","first","floodFill","siteDisruptedSize","blockingToMapX","blockingToMapY","lakeX","lakeY","nextId","minSize","disrupted","Math","min","computeDistanceMap","distanceMap","originX","originY","maxDistance","calculateDistances","clearInteriorFlag","hasCellFlag","flags","Cell","IS_WIRED","IS_CIRCUIT_BREAKER","setMachine","GridSite","this","random","tiles","doors","fill","dump","buffer","blackOut","forEach","t","drawSprite","sprite","seed","isBoundaryXY","isDoor","isBridge","isShallow","DIG.NOTHING","DIG.FLOOR","DIG.DOOR","DIG.SECRET_DOOR","DIG.BRIDGE","DIG.WALL","DIG.IMPREGNABLE","isNothing","isWall","isDeep","blocksPathing","DIG.UP_STAIRS","DIG.DOWN_STAIRS","DIG.DEEP","DIG.SHALLOW","Tile","obj","Error","_x","_y","Utils.directionOfDoorSite","Flags","MapSnapshot","snap","needsAnalysis","isUsed","snapshot","snapshots","revertMapTo","cancel","release","MapSite","map","machineCount","SnapshotManager","depth","properties","drawInto","flag","cell","setCellFlag","clearCellFlag","hasTile","opts","clearTiles","highestPriorityTile","cells","c","clear","hasItem","id","makeOptions","make","tags","makeRandom","addItem","hasActor","horde","spawn","blocksMove","blocksVision","hasEntityFlag","Entity","L_BLOCKS_DIAGONAL","info","L_BLOCKS_MOVE","hasTileFlag","T_PATHING_BLOCKER","L_BLOCKS_ITEMS","L_BLOCKS_EFFECTS","isNull","T_BRIDGE","T_IS_DOOR","L_SECRETLY_PASSABLE","T_DEEP_WATER","depthTile","Depth","LIQUID","T_IS_DEEP_LIQUID","hasDepthTile","takeNew","chokeCount","count","analyze","effect","trigger","machineId","isRoom","IS_IN_MACHINE","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","Hall","Bounds","super","dx","dy","d","makeHall","dirIndex","hallLength","hallWidth","abs","Room","hall","cx","floor","cy","translate","checkConfig","config","expected","Object","entries","key","expect","have","undefined","Array","isArray","range","RoomDigger","_setOptions","carve","length","every","SITE.chooseRandomDoorSites","rooms","ChoiceRoom","choices","randomRoom","weighted","room","ERROR","create","Cavern","value","SITE.FLOOR","blobGrid","minWidth","maxWidth","minHeight","maxHeight","bounds","blob","Blob","rounds","percentSeeded","birthParameters","survivalParameters","destX","destY","TYPES.Room","BrogueEntrance","roomWidth","roomHeight","roomWidth2","roomHeight2","roomX","roomY","roomX2","roomY2","max","DOWN","Cross","SymmetricalCross","minorWidth","minorHeight","x2","y2","Rectangular","Circular","radius","forCircle","BrogueDonut","ringMinWidth","holeMinSize","holeChance","chance","ChunkyRoom","chunkCount","minX","maxX","minY","maxY","left","right","top","bottom","install","isDoorLoc","pickWidth","clamp","Range","weights","Number","parseInt","_pickWidth","pickLength","lengths","UP","pickHallDirection","dirs","sequence","hi","door","pickHallExits","obliqueChance","allowObliqueHallwayExit","hallDoors","dir2","HallDigger","l","doorLoc","dig","digWide","DIR","_digLine","TYPES.makeHall","lower","higher","actual","startX","startY","halls","Lakes","tries","canDisrupt","wreathTile","SITE.SHALLOW","wreathChance","wreathSize","SITE.DEEP","assign","lakeMaxHeight","lakeMaxWidth","lakeMinSize","maxCount","hasWreath","lakeGrid","attempts","round","success","isDisruptedBy","sx","sy","lakeToMapX","lakeToMapY","Bridges","minDistance","maxLength","pathGrid","dirCoords","seq","isAnyLiquid","bridgeDir","NO_PATH","isBridgeCandidate","SITE.BRIDGE","Stairs","up","down","start","upTile","SITE.UP_STAIRS","downTile","SITE.DOWN_STAIRS","wall","SITE.IMPREGNABLE","needUp","needDown","locations","upLoc","downLoc","isValidLoc","isStairXY","bind","matchingLoc","matchingLocNear","distanceBetween","slice","setupStairs","indexes","x0","y0","CLOCK_DIRS","findIndex","r","LoopDigger","doorChance","endX","endY","isValidTunnelStart","isValidTunnelEnd","SITE.fillCostGrid","SITE.DOOR","NullLogger","Fl","fl","StepFlags","CandidateType","BuildStep","cfg","pad","from","BS_ADOPT_ITEM","buildAtOrigin","repeatUntilNoProgress","hordeTakesItem","allowBoundary","BS_ALLOW_BOUNDARY","notInHallway","BS_NOT_IN_HALLWAY","buildInWalls","BS_BUILD_IN_WALLS","buildAnywhere","BS_BUILD_ANYWHERE_ON_LEVEL","BS_REPEAT_UNTIL_NO_PROGRESS","permitBlocking","BS_PERMIT_BLOCKING","treatAsBlocking","BS_TREAT_AS_BLOCKING","BS_NO_BLOCK_ORIGIN","noBlockOrigin","adoptItem","itemIsKey","BS_ITEM_IS_KEY","keyIsDisposable","BS_KEY_DISPOSABLE","outsourceItem","BS_OUTSOURCE_ITEM_TO_MACHINE","impregnable","BS_IMPREGNABLE","buildVestibule","BS_BUILD_VESTIBULE","BS_HORDE_TAKES_ITEM","generateEverywhere","BS_EVERYWHERE","BS_BUILD_AT_ORIGIN","buildsInstances","data","makeItem","makeRandomItem","candidates","distanceBound","updateViewMap","blueprint","candidateType","cellIsCandidate","OK","_data","parts","JSON","stringify","lo","toString","join","builder","buildStep","BS_IN_VIEW_OF_ORIGIN","BS_IN_PASSABLE_VIEW_OF_ORIGIN","fov","FOV","isBlocked","calculate","viewMap","calcDistanceBound","BS_NEAR_ORIGIN","distance25","BS_FAR_FROM_ORIGIN","distance75","IN_HALLWAY","ON_BOUNDARY","MUST_BE_ORIGIN","NOT_ORIGIN","occupied","OCCUPIED","NOT_IN_VIEW","distance","eachNeighbor","TOO_FAR","TOO_CLOSE","cellMachine","interior","machineNumber","ok","neighborMachine","INVALID_WALL","NOT_CANDIDATE","blocksItems","IS_CHOKEPOINT","IS_IN_LOOP","BLOCKED","FAILED","Blueprint","steps","split","trim","frequency","size","STEP.BuildStep","BP_ADOPT_ITEM","some","step","BP_ROOM","isReward","BP_REWARD","isVestiblue","BP_VESTIBULE","adoptsItem","BP_TREAT_AS_BLOCKING","requireBlocking","BP_REQUIRE_BLOCKING","purgeInterior","BP_PURGE_INTERIOR","purgeBlockers","BP_PURGE_PATHING_BLOCKERS","purgeLiquids","BP_PURGE_LIQUIDS","surroundWithWalls","BP_SURROUND_WITH_WALLS","makeImpregnable","BP_IMPREGNABLE","maximizeInterior","BP_MAXIMIZE_INTERIOR","openInterior","BP_OPEN_INTERIOR","noInteriorFlag","BP_NO_INTERIOR_FLAG","BP_NOT_IN_HALLWAY","requiredFlags","want","includes","alternativeFlags","STEP.StepFlags","BS_ALTERNATIVE","BS_ALTERNATIVE_2","keepFeature","totalFreq","randIndex","filter","_f","addTileToInteriorAndIterate","computeVestibuleInterior","SITE.computeDistanceMap","qualifyingTileCount","goalSize","n","isOccupied","markCandidates","buildData","IS_GATE_SITE","contains","getChokeCount","pickCandidateLoc","randSite","doorChokeCount","vestibuleLoc","vestibuleChokeCount","roomSize","wantSize","distMap","startChokeCount","additional","minimumInteriorNeighbors","interiorNeighborCount","madeChange","interiorCount","maxInteriorCount","gen","clearCell","prepareInterior","SITE.WALL","isSecretDoor","blueprints","ConsoleLogger","console","group","groupEnd","roomSite","_site","_room","_roomSite","error","log","label","indexOf","wantCount","haveCount","_step","Digger","fails","loops","lakes","bridges","stairs","boundary","startLoc","endLoc","object","setOptions","LOGGER.NullLogger","SITE.GridSite","a","b","Map","SITE.MapSite","args","_createSite","_create","cb","addFirstRoom","updateDoorDirs","onDigFirstRoom","maxFails","addRoom","shuffle","addLoops","onLoopsAdded","addLakes","onLakesAdded","addBridges","onBridgesAdded","addStairs","onStairsAdded","finish","number","setSeed","ROOM.RoomDigger","digger","ROOM.rooms","ROOM.ChoiceRoom","_makeRoomSite","getDigger","_attachRoomAtLoc","HALL.dig","onRoomCandidate","_attachRoom","onRoomSuccess","onRoomFailed","len","getDoorDir","oppDir","_roomFitsAt","SITE.copySite","_attachDoor","attachLoc","offX","offY","roomGrid","roomToSiteX","roomToSiteY","xRoom","yRoom","xSite","ySite","didSomething","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","_removeDiagonalOpenings","_finishWalls","_finishDoors","x1","y1","diagonalCornerRemoved","blocksDiagonal","boundaryTile","BuildData","maxSize","distances","dist","Builder","values","BLUE.get","BLUE.blueprints","qualifies","requiredMachineFlags","BLUE.Flags","adoptedItem","_pickRandom","onBuildError","onBlueprintPick","_buildAt","_build","_markCandidates","BLUE.pickCandidateLoc","onBlueprintFail","reset","onBlueprintStart","_computeInterior","nextMachineId","BLUE.prepareInterior","calcDistances","components","pickComponents","component","_buildStep","restore","SITE.clearInteriorFlag","onBlueprintSuccess","BLUE.markCandidates","onBlueprintCandidates","fail","fillInterior","SITE.siteDisruptedBy","SITE.siteDisruptedSize","onBlueprintInterior","builtCount","onStepStart","STEP.calcDistanceBound","buildRandom","onStepFail","onStepSuccess","onStepCandidates","_buildStepInstance","makePersonalSpace","g","SITE.siteDisruptedByXY","onStepInstanceFail","buildEffect","torch","entity","makeKeyInfo","kind","torchBearer","leader","spawnHorde","pickupItem","admin","onStepInstanceSuccess","build","matches","MachineHorde","Horde","BLUE.build","_addLeader","levels","seeds","stairLocs","initSeeds","initStairLocs","stairDistance","stairOpts","goesUp","startTile","endTile","entrance","levelOpts","makeLevel","LEVEL.Digger","equalsXY"],"mappings":"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"}