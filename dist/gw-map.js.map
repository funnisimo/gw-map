{"version":3,"file":"gw-map.js","sources":["../js/flags.js","../js/light.js","../js/tile.js","../js/activation.js","../js/cell.js","../js/map.js","../js/tiles.js"],"sourcesContent":["import { flag as Flag } from \"gw-utils\";\nexport var Layer;\n(function (Layer) {\n    Layer[Layer[\"GROUND\"] = 0] = \"GROUND\";\n    Layer[Layer[\"LIQUID\"] = 1] = \"LIQUID\";\n    Layer[Layer[\"SURFACE\"] = 2] = \"SURFACE\";\n    Layer[Layer[\"GAS\"] = 3] = \"GAS\";\n    Layer[Layer[\"ITEM\"] = 4] = \"ITEM\";\n    Layer[Layer[\"ACTOR\"] = 5] = \"ACTOR\";\n    Layer[Layer[\"PLAYER\"] = 6] = \"PLAYER\";\n    Layer[Layer[\"FX\"] = 7] = \"FX\";\n    Layer[Layer[\"UI\"] = 8] = \"UI\";\n})(Layer || (Layer = {}));\nconst Fl = Flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Activation;\n(function (Activation) {\n    Activation[Activation[\"DFF_SUBSEQ_ALWAYS\"] = Fl(0)] = \"DFF_SUBSEQ_ALWAYS\";\n    Activation[Activation[\"DFF_SUBSEQ_EVERYWHERE\"] = Fl(1)] = \"DFF_SUBSEQ_EVERYWHERE\";\n    Activation[Activation[\"DFF_TREAT_AS_BLOCKING\"] = Fl(2)] = \"DFF_TREAT_AS_BLOCKING\";\n    Activation[Activation[\"DFF_PERMIT_BLOCKING\"] = Fl(3)] = \"DFF_PERMIT_BLOCKING\";\n    Activation[Activation[\"DFF_ACTIVATE_DORMANT_MONSTER\"] = Fl(4)] = \"DFF_ACTIVATE_DORMANT_MONSTER\";\n    Activation[Activation[\"DFF_BLOCKED_BY_OTHER_LAYERS\"] = Fl(6)] = \"DFF_BLOCKED_BY_OTHER_LAYERS\";\n    Activation[Activation[\"DFF_SUPERPRIORITY\"] = Fl(7)] = \"DFF_SUPERPRIORITY\";\n    Activation[Activation[\"DFF_AGGRAVATES_MONSTERS\"] = Fl(8)] = \"DFF_AGGRAVATES_MONSTERS\";\n    Activation[Activation[\"DFF_RESURRECT_ALLY\"] = Fl(9)] = \"DFF_RESURRECT_ALLY\";\n    Activation[Activation[\"DFF_EMIT_EVENT\"] = Fl(10)] = \"DFF_EMIT_EVENT\";\n    Activation[Activation[\"DFF_NO_REDRAW_CELL\"] = Fl(11)] = \"DFF_NO_REDRAW_CELL\";\n    Activation[Activation[\"DFF_ABORT_IF_BLOCKS_MAP\"] = Fl(12)] = \"DFF_ABORT_IF_BLOCKS_MAP\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ITEMS\"] = Fl(13)] = \"DFF_BLOCKED_BY_ITEMS\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ACTORS\"] = Fl(14)] = \"DFF_BLOCKED_BY_ACTORS\";\n    Activation[Activation[\"DFF_ALWAYS_FIRE\"] = Fl(15)] = \"DFF_ALWAYS_FIRE\";\n    Activation[Activation[\"DFF_NO_MARK_FIRED\"] = Fl(16)] = \"DFF_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Activation[Activation[\"DFF_PROTECTED\"] = Fl(19)] = \"DFF_PROTECTED\";\n    Activation[Activation[\"DFF_SPREAD_CIRCLE\"] = Fl(20)] = \"DFF_SPREAD_CIRCLE\";\n    Activation[Activation[\"DFF_SPREAD_LINE\"] = Fl(21)] = \"DFF_SPREAD_LINE\";\n    Activation[Activation[\"DFF_NULL_SURFACE\"] = Fl(22)] = \"DFF_NULL_SURFACE\";\n    Activation[Activation[\"DFF_NULL_LIQUID\"] = Fl(23)] = \"DFF_NULL_LIQUID\";\n    Activation[Activation[\"DFF_NULL_GAS\"] = Fl(24)] = \"DFF_NULL_GAS\";\n    Activation[Activation[\"DFF_EVACUATE_CREATURES\"] = Fl(25)] = \"DFF_EVACUATE_CREATURES\";\n    Activation[Activation[\"DFF_EVACUATE_ITEMS\"] = Fl(26)] = \"DFF_EVACUATE_ITEMS\";\n    Activation[Activation[\"DFF_BUILD_IN_WALLS\"] = Fl(27)] = \"DFF_BUILD_IN_WALLS\";\n    Activation[Activation[\"DFF_MUST_TOUCH_WALLS\"] = Fl(28)] = \"DFF_MUST_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_NO_TOUCH_WALLS\"] = Fl(29)] = \"DFF_NO_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_ONLY_IF_EMPTY\"] = Activation.DFF_BLOCKED_BY_ITEMS | Activation.DFF_BLOCKED_BY_ACTORS] = \"DFF_ONLY_IF_EMPTY\";\n    Activation[Activation[\"DFF_NULLIFY_CELL\"] = Activation.DFF_NULL_SURFACE | Activation.DFF_NULL_LIQUID | Activation.DFF_NULL_GAS] = \"DFF_NULLIFY_CELL\";\n})(Activation || (Activation = {}));\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_OBSTRUCTS_PASSABILITY\"] = Fl(0)] = \"T_OBSTRUCTS_PASSABILITY\";\n    Tile[Tile[\"T_OBSTRUCTS_VISION\"] = Fl(1)] = \"T_OBSTRUCTS_VISION\";\n    Tile[Tile[\"T_OBSTRUCTS_ITEMS\"] = Fl(2)] = \"T_OBSTRUCTS_ITEMS\";\n    Tile[Tile[\"T_OBSTRUCTS_SURFACE\"] = Fl(3)] = \"T_OBSTRUCTS_SURFACE\";\n    Tile[Tile[\"T_OBSTRUCTS_GAS\"] = Fl(4)] = \"T_OBSTRUCTS_GAS\";\n    Tile[Tile[\"T_OBSTRUCTS_LIQUID\"] = Fl(5)] = \"T_OBSTRUCTS_LIQUID\";\n    Tile[Tile[\"T_OBSTRUCTS_TILE_EFFECTS\"] = Fl(6)] = \"T_OBSTRUCTS_TILE_EFFECTS\";\n    Tile[Tile[\"T_OBSTRUCTS_DIAGONAL_MOVEMENT\"] = Fl(7)] = \"T_OBSTRUCTS_DIAGONAL_MOVEMENT\";\n    Tile[Tile[\"T_GAS\"] = Fl(9)] = \"T_GAS\";\n    Tile[Tile[\"T_BRIDGE\"] = Fl(10)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(11)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(12)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(13)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(14)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(15)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(16)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_CAUSES_POISON\"] = Fl(18)] = \"T_CAUSES_POISON\";\n    Tile[Tile[\"T_CAUSES_DAMAGE\"] = Fl(19)] = \"T_CAUSES_DAMAGE\";\n    Tile[Tile[\"T_CAUSES_NAUSEA\"] = Fl(20)] = \"T_CAUSES_NAUSEA\";\n    Tile[Tile[\"T_CAUSES_PARALYSIS\"] = Fl(21)] = \"T_CAUSES_PARALYSIS\";\n    Tile[Tile[\"T_CAUSES_CONFUSION\"] = Fl(22)] = \"T_CAUSES_CONFUSION\";\n    Tile[Tile[\"T_CAUSES_HEALING\"] = Fl(23)] = \"T_CAUSES_HEALING\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(24)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_CAUSES_EXPLOSIVE_DAMAGE\"] = Fl(25)] = \"T_CAUSES_EXPLOSIVE_DAMAGE\";\n    Tile[Tile[\"T_SACRED\"] = Fl(26)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(27)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(28)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(29)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(30)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_OBSTRUCTS_VISION |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    Tile[Tile[\"T_OBSTRUCTS_EVERYTHING\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_OBSTRUCTS_VISION |\n        Tile.T_OBSTRUCTS_ITEMS |\n        Tile.T_OBSTRUCTS_GAS |\n        Tile.T_OBSTRUCTS_SURFACE |\n        Tile.T_OBSTRUCTS_LIQUID |\n        Tile.T_OBSTRUCTS_DIAGONAL_MOVEMENT] = \"T_OBSTRUCTS_EVERYTHING\";\n    Tile[Tile[\"T_HARMFUL_TERRAIN\"] = Tile.T_CAUSES_POISON |\n        Tile.T_IS_FIRE |\n        Tile.T_CAUSES_DAMAGE |\n        Tile.T_CAUSES_PARALYSIS |\n        Tile.T_CAUSES_CONFUSION |\n        Tile.T_CAUSES_EXPLOSIVE_DAMAGE] = \"T_HARMFUL_TERRAIN\";\n    Tile[Tile[\"T_RESPIRATION_IMMUNITIES\"] = Tile.T_CAUSES_DAMAGE |\n        Tile.T_CAUSES_CONFUSION |\n        Tile.T_CAUSES_PARALYSIS |\n        Tile.T_CAUSES_NAUSEA] = \"T_RESPIRATION_IMMUNITIES\";\n    Tile[Tile[\"T_IS_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_LIQUID\";\n    Tile[Tile[\"T_STAIR_BLOCKERS\"] = Tile.T_OBSTRUCTS_ITEMS |\n        Tile.T_OBSTRUCTS_SURFACE |\n        Tile.T_OBSTRUCTS_GAS |\n        Tile.T_OBSTRUCTS_LIQUID |\n        Tile.T_OBSTRUCTS_TILE_EFFECTS] = \"T_STAIR_BLOCKERS\";\n})(Tile || (Tile = {}));\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    TileMech[TileMech[\"TM_IS_SECRET\"] = Fl(0)] = \"TM_IS_SECRET\";\n    TileMech[TileMech[\"TM_PROMOTES_WITH_KEY\"] = Fl(1)] = \"TM_PROMOTES_WITH_KEY\";\n    TileMech[TileMech[\"TM_PROMOTES_WITHOUT_KEY\"] = Fl(2)] = \"TM_PROMOTES_WITHOUT_KEY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_STEP\"] = Fl(3)] = \"TM_PROMOTES_ON_STEP\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_ITEM_REMOVE\"] = Fl(4)] = \"TM_PROMOTES_ON_ITEM_REMOVE\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_PLAYER_ENTRY\"] = Fl(5)] = \"TM_PROMOTES_ON_PLAYER_ENTRY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_SACRIFICE_ENTRY\"] = Fl(6)] = \"TM_PROMOTES_ON_SACRIFICE_ENTRY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_ELECTRICITY\"] = Fl(7)] = \"TM_PROMOTES_ON_ELECTRICITY\";\n    TileMech[TileMech[\"TM_ALLOWS_SUBMERGING\"] = Fl(8)] = \"TM_ALLOWS_SUBMERGING\";\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_EXTINGUISHES_FIRE\"] = Fl(14)] = \"TM_EXTINGUISHES_FIRE\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_REFLECTS_BOLTS\"] = Fl(16)] = \"TM_REFLECTS_BOLTS\";\n    TileMech[TileMech[\"TM_STAND_IN_TILE\"] = Fl(17)] = \"TM_STAND_IN_TILE\";\n    TileMech[TileMech[\"TM_LIST_IN_SIDEBAR\"] = Fl(18)] = \"TM_LIST_IN_SIDEBAR\";\n    TileMech[TileMech[\"TM_VISUALLY_DISTINCT\"] = Fl(19)] = \"TM_VISUALLY_DISTINCT\";\n    TileMech[TileMech[\"TM_BRIGHT_MEMORY\"] = Fl(20)] = \"TM_BRIGHT_MEMORY\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_CONNECTS_LEVEL\"] = Fl(22)] = \"TM_CONNECTS_LEVEL\";\n    TileMech[TileMech[\"TM_INTERRUPT_EXPLORATION_WHEN_SEEN\"] = Fl(23)] = \"TM_INTERRUPT_EXPLORATION_WHEN_SEEN\";\n    TileMech[TileMech[\"TM_INVERT_WHEN_HIGHLIGHTED\"] = Fl(24)] = \"TM_INVERT_WHEN_HIGHLIGHTED\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    TileMech[TileMech[\"TM_PROMOTES\"] = TileMech.TM_PROMOTES_WITH_KEY |\n        TileMech.TM_PROMOTES_WITHOUT_KEY |\n        TileMech.TM_PROMOTES_ON_STEP |\n        TileMech.TM_PROMOTES_ON_ITEM_REMOVE |\n        TileMech.TM_PROMOTES_ON_SACRIFICE_ENTRY |\n        TileMech.TM_PROMOTES_ON_ELECTRICITY |\n        TileMech.TM_PROMOTES_ON_PLAYER_ENTRY] = \"TM_PROMOTES\";\n})(TileMech || (TileMech = {}));\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"REVEALED\"] = Fl(0)] = \"REVEALED\";\n    Cell[Cell[\"VISIBLE\"] = Fl(1)] = \"VISIBLE\";\n    Cell[Cell[\"WAS_VISIBLE\"] = Fl(2)] = \"WAS_VISIBLE\";\n    Cell[Cell[\"IN_FOV\"] = Fl(3)] = \"IN_FOV\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(4)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_MONSTER\"] = Fl(5)] = \"HAS_MONSTER\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(6)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(7)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_STAIRS\"] = Fl(8)] = \"HAS_STAIRS\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(9)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"CELL_CHANGED\"] = Fl(10)] = \"CELL_CHANGED\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(12)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(13)] = \"IS_CURSOR\";\n    Cell[Cell[\"MAGIC_MAPPED\"] = Fl(14)] = \"MAGIC_MAPPED\";\n    Cell[Cell[\"ITEM_DETECTED\"] = Fl(15)] = \"ITEM_DETECTED\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(16)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"CLAIRVOYANT_VISIBLE\"] = Fl(17)] = \"CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"WAS_CLAIRVOYANT_VISIBLE\"] = Fl(18)] = \"WAS_CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"CLAIRVOYANT_DARKENED\"] = Fl(19)] = \"CLAIRVOYANT_DARKENED\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(20)] = \"IMPREGNABLE\";\n    Cell[Cell[\"TELEPATHIC_VISIBLE\"] = Fl(22)] = \"TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"WAS_TELEPATHIC_VISIBLE\"] = Fl(23)] = \"WAS_TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"MONSTER_DETECTED\"] = Fl(24)] = \"MONSTER_DETECTED\";\n    Cell[Cell[\"WAS_MONSTER_DETECTED\"] = Fl(25)] = \"WAS_MONSTER_DETECTED\";\n    Cell[Cell[\"LIGHT_CHANGED\"] = Fl(27)] = \"LIGHT_CHANGED\";\n    Cell[Cell[\"CELL_LIT\"] = Fl(28)] = \"CELL_LIT\";\n    Cell[Cell[\"IS_IN_SHADOW\"] = Fl(29)] = \"IS_IN_SHADOW\";\n    Cell[Cell[\"CELL_DARK\"] = Fl(30)] = \"CELL_DARK\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.REVEALED |\n        Cell.MAGIC_MAPPED |\n        Cell.ITEM_DETECTED |\n        Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.HAS_STAIRS |\n        Cell.STABLE_MEMORY |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE | Cell.CLAIRVOYANT_VISIBLE | Cell.TELEPATHIC_VISIBLE] = \"ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"HAS_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_MONSTER] = \"HAS_ACTOR\";\n    Cell[Cell[\"IS_WAS_ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE |\n        Cell.WAS_VISIBLE |\n        Cell.CLAIRVOYANT_VISIBLE |\n        Cell.WAS_CLAIRVOYANT_VISIBLE |\n        Cell.TELEPATHIC_VISIBLE |\n        Cell.WAS_TELEPATHIC_VISIBLE] = \"IS_WAS_ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.VISIBLE | Cell.IN_FOV | Cell.NEEDS_REDRAW | Cell.CELL_CHANGED | Cell.IS_IN_SHADOW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n///////////////////////////////////////////////////////\n// CELL MECH\nexport var CellMech;\n(function (CellMech) {\n    CellMech[CellMech[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    CellMech[CellMech[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    CellMech[CellMech[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    CellMech[CellMech[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(4)] = \"CAUGHT_FIRE_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_FIRED_THIS_TURN\"] = Fl(5)] = \"EVENT_FIRED_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_PROTECTED\"] = Fl(6)] = \"EVENT_PROTECTED\";\n    CellMech[CellMech[\"IS_IN_LOOP\"] = Fl(10)] = \"IS_IN_LOOP\";\n    CellMech[CellMech[\"IS_CHOKEPOINT\"] = Fl(11)] = \"IS_CHOKEPOINT\";\n    CellMech[CellMech[\"IS_GATE_SITE\"] = Fl(12)] = \"IS_GATE_SITE\";\n    CellMech[CellMech[\"IS_IN_ROOM_MACHINE\"] = Fl(13)] = \"IS_IN_ROOM_MACHINE\";\n    CellMech[CellMech[\"IS_IN_AREA_MACHINE\"] = Fl(14)] = \"IS_IN_AREA_MACHINE\";\n    CellMech[CellMech[\"IS_POWERED\"] = Fl(15)] = \"IS_POWERED\";\n    CellMech[CellMech[\"IS_IN_MACHINE\"] = CellMech.IS_IN_ROOM_MACHINE | CellMech.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    CellMech[CellMech[\"PERMANENT_MECH_FLAGS\"] = CellMech.SEARCHED_FROM_HERE |\n        CellMech.PRESSURE_PLATE_DEPRESSED |\n        CellMech.KNOWN_TO_BE_TRAP_FREE |\n        CellMech.IS_IN_LOOP |\n        CellMech.IS_CHOKEPOINT |\n        CellMech.IS_GATE_SITE |\n        CellMech.IS_IN_MACHINE] = \"PERMANENT_MECH_FLAGS\";\n})(CellMech || (CellMech = {}));\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_STABLE_GLOW_LIGHTS\"] = Fl(1)] = \"MAP_STABLE_GLOW_LIGHTS\";\n    Map[Map[\"MAP_STABLE_LIGHTS\"] = Fl(2)] = \"MAP_STABLE_LIGHTS\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(7)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = Map.MAP_STABLE_LIGHTS | Map.MAP_STABLE_GLOW_LIGHTS | Map.MAP_FOV_CHANGED] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import { utils as Utils, range as Range, grid as Grid, color as Color, data as DATA, config as CONFIG, make as Make, } from \"gw-utils\";\nimport * as Flags from \"./flags\";\n// const LIGHT_SMOOTHING_THRESHOLD = 150;       // light components higher than this magnitude will be toned down a little\nexport const config = (CONFIG.light = { INTENSITY_DARK: 20 }); // less than 20% for highest color in rgb\nconst LIGHT_COMPONENTS = Color.make();\nexport class Light {\n    constructor(color, range, fadeTo, pass = false) {\n        this.fadeTo = 0;\n        this.passThroughActors = false;\n        this.id = null;\n        this.color = Color.from(color) || null; /* color */\n        this.radius = Range.make(range || 1);\n        this.fadeTo = fadeTo || 0;\n        this.passThroughActors = pass; // generally no, but miner light does (TODO - string parameter?  'false' or 'true')\n    }\n    copy(other) {\n        this.color = other.color;\n        this.radius.copy(other.radius);\n        this.fadeTo = other.fadeTo;\n        this.passThroughActors = other.passThroughActors;\n    }\n    get intensity() {\n        return intensity(this.color);\n    }\n    // Returns true if any part of the light hit cells that are in the player's field of view.\n    paint(map, x, y, maintainShadows = false, isMinersLight = false) {\n        if (!map)\n            return;\n        let k;\n        // let colorComponents = [0,0,0];\n        let lightMultiplier;\n        let radius = this.radius.value();\n        let outerRadius = Math.ceil(radius);\n        // calcLightComponents(colorComponents, this);\n        LIGHT_COMPONENTS.copy(this.color).bake();\n        // console.log('paint', LIGHT_COMPONENTS.toString(true), x, y, outerRadius);\n        // the miner's light does not dispel IS_IN_SHADOW,\n        // so the player can be in shadow despite casting his own light.\n        const dispelShadows = !isMinersLight &&\n            !maintainShadows &&\n            intensity(LIGHT_COMPONENTS) > config.INTENSITY_DARK;\n        const fadeToPercent = this.fadeTo;\n        const grid = Grid.alloc(map.width, map.height, 0);\n        map.calcFov(grid, x, y, outerRadius, this.passThroughActors ? 0 : Flags.Cell.HAS_ACTOR, Flags.Tile.T_OBSTRUCTS_VISION);\n        let overlappedFieldOfView = false;\n        grid.forCircle(x, y, outerRadius, (v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            lightMultiplier = Math.floor(100 -\n                (100 - fadeToPercent) * (Utils.distanceBetween(x, y, i, j) / radius));\n            for (k = 0; k < 3; k++) {\n                cell.light[k] += Math.floor((LIGHT_COMPONENTS[k] * lightMultiplier) / 100);\n            }\n            if (dispelShadows) {\n                cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n            }\n            if (cell.flags & (Flags.Cell.IN_FOV | Flags.Cell.ANY_KIND_OF_VISIBLE)) {\n                overlappedFieldOfView = true;\n            }\n            // console.log(i, j, lightMultiplier, cell.light);\n        });\n        if (dispelShadows) {\n            const cell = map.cell(x, y);\n            cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n        }\n        Grid.free(grid);\n        return overlappedFieldOfView;\n    }\n}\nexport function intensity(color) {\n    return Math.max(color[0], color[1], color[2]);\n}\nexport function make(...args) {\n    if (args.length == 1) {\n        const config = args[0];\n        if (typeof config === \"string\") {\n            const cached = lights[config];\n            if (cached)\n                return cached;\n            const [color, radius, fadeTo, pass] = config\n                .split(/[,|]/)\n                .map((t) => t.trim());\n            return new Light(Color.from(color), Range.from(radius || 1), Number.parseInt(fadeTo || \"0\"), !!pass && pass !== \"false\");\n        }\n        else if (Array.isArray(config)) {\n            const [color, radius, fadeTo, pass] = config;\n            return new Light(color, radius, fadeTo, pass);\n        }\n        else if (config && config.color) {\n            return new Light(Color.from(config.color), Range.from(config.range), Number.parseInt(config.fadeTo || \"0\"), config.pass);\n        }\n        else {\n            throw new Error(\"Unknown Light config - \" + config);\n        }\n    }\n    else {\n        const [color, radius, fadeTo, pass] = args;\n        return new Light(color, radius, fadeTo, pass);\n    }\n}\nMake.light = make;\nexport const lights = {};\nexport function from(...args) {\n    if (args.length != 1)\n        Utils.ERROR(\"Unknown Light config: \" + JSON.stringify(args));\n    const arg = args[0];\n    if (typeof arg === \"string\") {\n        const cached = lights[arg];\n        if (cached)\n            return cached;\n    }\n    return make(arg);\n}\nexport function install(id, ...args) {\n    let source;\n    if (args.length == 1) {\n        source = make(args[0]);\n    }\n    else {\n        source = make(args[0], args[1], args[2], args[3]);\n    }\n    lights[id] = source;\n    if (source)\n        source.id = id;\n    return source;\n}\nexport function installAll(config = {}) {\n    const entries = Object.entries(config);\n    entries.forEach(([name, info]) => {\n        install(name, info);\n    });\n}\n// export function calcLightComponents(colorComponents, theLight) {\n// \tconst randComponent = cosmetic.range(0, theLight.color.rand);\n// \tcolorComponents[0] = randComponent + theLight.color.red + cosmetic.range(0, theLight.color.redRand);\n// \tcolorComponents[1] = randComponent + theLight.color.green + cosmetic.range(0, theLight.color.greenRand);\n// \tcolorComponents[2] = randComponent + theLight.color.blue + cosmetic.range(0, theLight.color.blueRand);\n// }\nfunction updateDisplayDetail(map) {\n    map.eachCell((cell, _i, _j) => {\n        // clear light flags\n        cell.flags &= ~(Flags.Cell.CELL_LIT | Flags.Cell.CELL_DARK);\n        if (cell.light.some((v, i) => v !== cell.oldLight[i])) {\n            cell.flags |= Flags.Cell.LIGHT_CHANGED;\n        }\n        if (cell.isDark()) {\n            cell.flags |= Flags.Cell.CELL_DARK;\n        }\n        else if (!(cell.flags & Flags.Cell.IS_IN_SHADOW)) {\n            cell.flags |= Flags.Cell.CELL_LIT;\n        }\n    });\n}\nexport function backUpLighting(map, lights) {\n    let k;\n    map.eachCell((cell, i, j) => {\n        for (k = 0; k < 3; k++) {\n            lights[i][j][k] = cell.light[k];\n        }\n    });\n}\nexport function restoreLighting(map, lights) {\n    let k;\n    map.eachCell((cell, i, j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = lights[i][j][k];\n        }\n    });\n}\nexport function recordOldLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.oldLight[k] = cell.light[k];\n            cell.flags &= ~Flags.Cell.LIGHT_CHANGED;\n        }\n    });\n}\nexport function zeroOutLights(map) {\n    let k;\n    const light = map.ambientLight ? map.ambientLight : [0, 0, 0];\n    map.eachCell((cell, _i, _j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = light[k];\n        }\n        cell.flags |= Flags.Cell.IS_IN_SHADOW;\n    });\n}\nexport function recordGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.glowLight[k] = cell.light[k];\n        }\n    });\n}\nexport function restoreGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = cell.glowLight[k];\n        }\n    });\n}\nexport function updateLighting(map) {\n    // Copy Light over oldLight\n    recordOldLights(map);\n    if (map.flags & Flags.Map.MAP_STABLE_LIGHTS)\n        return false;\n    // and then zero out Light.\n    zeroOutLights(map);\n    if (map.flags & Flags.Map.MAP_STABLE_GLOW_LIGHTS) {\n        restoreGlowLights(map);\n    }\n    else {\n        // GW.debug.log('painting glow lights.');\n        // Paint all glowing tiles.\n        map.eachGlowLight((light, x, y) => {\n            //   const light = lights[id];\n            if (light) {\n                light.paint(map, x, y);\n            }\n        });\n        recordGlowLights(map);\n        map.setFlag(Flags.Map.MAP_STABLE_GLOW_LIGHTS);\n    }\n    // Cycle through monsters and paint their lights:\n    map.eachDynamicLight((light, x, y) => {\n        light.paint(map, x, y);\n        // if (monst.mutationIndex >= 0 && mutationCatalog[monst.mutationIndex].light != lights['NO_LIGHT']) {\n        //     paint(map, mutationCatalog[monst.mutationIndex].light, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isBurning()) { // monst.status.burning && !(actor.kind.flags & Flags.Actor.AF_FIERY)) {\n        // \tpaint(map, lights.BURNING_CREATURE, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isTelepathicallyRevealed()) {\n        // \tpaint(map, lights['TELEPATHY_LIGHT'], actor.x, actor.y, false, true);\n        // }\n    });\n    // Also paint telepathy lights for dormant monsters.\n    // for (monst of map.dormantMonsters) {\n    //     if (monsterTelepathicallyRevealed(monst)) {\n    //         paint(map, lights['TELEPATHY_LIGHT'], monst.xLoc, monst.yLoc, false, true);\n    //     }\n    // }\n    updateDisplayDetail(map);\n    // Miner's light:\n    const PLAYER = DATA.player;\n    if (PLAYER) {\n        const MINERS_LIGHT = lights.MINERS_LIGHT;\n        if (MINERS_LIGHT && MINERS_LIGHT.radius) {\n            MINERS_LIGHT.paint(map, PLAYER.x, PLAYER.y, true, true);\n        }\n    }\n    map.setFlag(Flags.Map.MAP_STABLE_LIGHTS);\n    // if (PLAYER.status.invisible) {\n    //     PLAYER.info.foreColor = playerInvisibleColor;\n    // } else if (playerInDarkness()) {\n    // \tPLAYER.info.foreColor = playerInDarknessColor;\n    // } else if (pmap[PLAYER.xLoc][PLAYER.yLoc].flags & IS_IN_SHADOW) {\n    // \tPLAYER.info.foreColor = playerInShadowColor;\n    // } else {\n    // \tPLAYER.info.foreColor = playerInLightColor;\n    // }\n    return true;\n}\n// TODO - Move and make more generic\nexport function playerInDarkness(map, PLAYER, darkColor) {\n    const cell = map.cell(PLAYER.x, PLAYER.y);\n    return (cell.light[0] + 10 < darkColor.r &&\n        cell.light[1] + 10 < darkColor.g &&\n        cell.light[2] + 10 < darkColor.b);\n}\n","import { flag as Flag, utils as Utils, color as Color, canvas as Canvas, } from \"gw-utils\";\nimport { Tile as Flags, TileMech as MechFlags, Layer } from \"./flags\";\nimport * as Light from \"./light\";\nexport { Flags, MechFlags, Layer };\n/** Tile Class */\nexport class Tile {\n    /**\n     * Creates a new Tile object.\n     * @param {Object} [config={}] - The configuration of the Tile\n     * @param {String|Number|String[]} [config.flags=0] - Flags and MechFlags for the tile\n     * @param {String} [config.layer=GROUND] - Name of the layer for this tile\n     * @param {String} [config.ch] - The sprite character\n     * @param {String} [config.fg] - The sprite foreground color\n     * @param {String} [config.bg] - The sprite background color\n     */\n    constructor(config, base) {\n        this.flags = 0;\n        this.mechFlags = 0;\n        this.layer = Layer.GROUND;\n        this.priority = -1;\n        this.sprite = {};\n        this.activates = {};\n        this.light = null; // TODO - Light\n        this.flavor = null;\n        this.desc = null;\n        this.article = null;\n        this.dissipate = 2000; // 20 * 100 = 20%\n        if (base !== undefined) {\n            Utils.assignOmitting([\"activates\"], this, base);\n        }\n        Utils.assignOmitting([\n            \"Extends\",\n            \"extends\",\n            \"flags\",\n            \"mechFlags\",\n            \"sprite\",\n            \"activates\",\n            \"ch\",\n            \"fg\",\n            \"bg\",\n            \"light\",\n        ], this, config);\n        this.name = config.name || (base ? base.name : config.id);\n        this.id = config.id;\n        if (this.priority < 0) {\n            this.priority = 50;\n        }\n        if (this.layer !== undefined) {\n            if (typeof this.layer === \"string\") {\n                this.layer = Layer[this.layer];\n            }\n        }\n        this.flags = Flag.from(Flags, this.flags, config.flags);\n        this.mechFlags = Flag.from(MechFlags, this.mechFlags, config.mechFlags || config.flags);\n        if (config.light) {\n            // Light.from will throw an Error on invalid config\n            this.light = Light.from(config.light) || null;\n        }\n        if (config.sprite) {\n            this.sprite = Canvas.makeSprite(config.sprite);\n        }\n        else if (config.ch || config.fg || config.bg) {\n            this.sprite = Canvas.makeSprite(config.ch || null, config.fg || null, config.bg || null, config.opacity);\n        }\n        if (base && base.activates) {\n            Object.assign(this.activates, base.activates);\n        }\n        if (config.activates) {\n            Object.entries(config.activates).forEach(([key, info]) => {\n                if (info) {\n                    this.activates[key] = info;\n                }\n                else {\n                    delete this.activates[key];\n                }\n            });\n        }\n    }\n    /**\n     * Returns the flags for the tile after the given event is fired.\n     * @param {string} id - Name of the event to fire.\n     * @returns {number} The flags from the Tile after the event.\n     */\n    successorFlags(id) {\n        const e = this.activates[id];\n        if (!e)\n            return 0;\n        const tileId = e.tile;\n        if (!tileId)\n            return 0;\n        const tile = tiles[tileId];\n        if (!tile)\n            return 0;\n        return tile.flags;\n    }\n    /**\n     * Returns whether or not this tile as the given flag.\n     * Will return true if any bit in the flag is true, so testing with\n     * multiple flags will return true if any of them is set.\n     * @param {number} flag - The flag to check\n     * @returns {boolean} Whether or not the flag is set\n     */\n    hasFlag(flag) {\n        return (this.flags & flag) > 0;\n    }\n    hasMechFlag(flag) {\n        return (this.mechFlags & flag) > 0;\n    }\n    hasFlags(flags, mechFlags) {\n        return ((!flags || this.flags & flags) &&\n            (!mechFlags || this.mechFlags & mechFlags));\n    }\n    activatesOn(name) {\n        return !!this.activates[name];\n    }\n    getName(arg) {\n        let opts = {};\n        if (arg === true || arg === false) {\n            opts.article = arg;\n        }\n        else if (typeof arg === \"string\") {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = this.sprite.fg;\n            if (typeof color !== \"string\") {\n                color = Color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === \"string\" ? opts.article : this.article || \"a\";\n            result = article + \" \" + result;\n        }\n        return result;\n    }\n    getDescription(opts = {}) {\n        return this.getName(opts);\n    }\n}\n// Types.Tile = Tile;\nexport const tiles = {};\nexport function install(...args) {\n    let id = args[0];\n    let base = args[1];\n    let config = args[2];\n    if (arguments.length == 1) {\n        config = args[0];\n        base = config.Extends || config.extends || {};\n        id = config.id || config.name;\n    }\n    else if (arguments.length == 2) {\n        config = base;\n        base = config.Extends || config.extends || {};\n    }\n    if (typeof base === \"string\") {\n        base = tiles[base] || Utils.ERROR(\"Unknown base tile: \" + base);\n    }\n    config.name = config.name || id.toLowerCase();\n    config.id = id;\n    const tile = new Tile(config, base);\n    tiles[id] = tile;\n    return tile;\n}\n/**\n * Adds multiple tiles to the GW.tiles collection.\n * It extracts all the id:opts pairs from the config object and uses\n * them to call addTileKind.\n * @param {Object} config - The tiles to add in [id, config] pairs\n * @returns {void} Nothing\n * @see addTileKind\n */\nexport function installAll(config) {\n    Object.entries(config).forEach(([id, opts]) => {\n        opts.id = id;\n        install(id, opts);\n    });\n}\n","import { utils as Utils, random, grid as Grid, events as Events, color as Color, flag as Flag, data as Data, message as Msg, make as Make, } from \"gw-utils\";\nimport { Layer, Activation as Flags, Tile as TileFlags, CellMech as CellMechFlags, Cell as CellFlags, } from \"./flags\";\nimport { tiles as Tiles } from \"./tile\";\nexport { Flags };\nexport class Activation {\n    constructor(opts = {}) {\n        if (typeof opts === \"function\") {\n            opts = {\n                fn: opts,\n            };\n        }\n        this.tile = opts.tile || null;\n        this.fn = opts.fn || null;\n        this.item = opts.item || null;\n        this.chance = opts.chance || 0;\n        this.volume = opts.volume || 0;\n        // spawning pattern:\n        this.spread = opts.spread || 0;\n        this.radius = opts.radius || 0;\n        this.decrement = opts.decrement || 0;\n        this.flags = Flag.from(Flags, opts.flags);\n        this.matchTile = opts.matchTile || opts.needs || 0; /* ENUM tileType */\n        this.next = opts.next || null; /* ENUM makeEventTypes */\n        this.message = opts.message || null;\n        this.lightFlare = opts.flare || null;\n        this.flashColor = opts.flash ? Color.from(opts.flash) : null;\n        // this.effectRadius = radius || 0;\n        this.messageDisplayed = false;\n        this.emit = opts.emit || null; // name of the event to emit when activated\n        this.id = opts.id || null;\n    }\n}\nexport function make(opts) {\n    if (!opts)\n        return null;\n    if (typeof opts === \"string\") {\n        opts = { tile: opts };\n    }\n    const te = new Activation(opts);\n    return te;\n}\nexport const activations = {\n    DF_NONE: null,\n};\nexport function install(id, event) {\n    if (!(event instanceof Activation)) {\n        event = make(event);\n    }\n    activations[id] = event;\n    if (event)\n        event.id = id;\n    return event;\n}\nexport function resetAllMessages() {\n    Object.values(activations).forEach((f) => {\n        if (f instanceof Activation) {\n            f.messageDisplayed = false;\n        }\n    });\n}\n// returns whether the feature was successfully generated (false if we aborted because of blocking)\nexport async function spawn(activation, ctx = {}) {\n    let i, j;\n    if (!activation)\n        return false;\n    if (!ctx)\n        return false;\n    let feat;\n    if (typeof activation === \"string\") {\n        // @ts-ignore\n        feat = activations[activation];\n        if (!feat)\n            Utils.ERROR(\"Unknown tile Event: \" + activation);\n    }\n    else if (typeof activation === \"function\") {\n        return activation(ctx);\n    }\n    else {\n        feat = activation;\n    }\n    const map = ctx.map;\n    const x = ctx.x;\n    const y = ctx.y;\n    if (!map || x === undefined || y === undefined) {\n        Utils.ERROR(\"MAP, x, y are required in context.\");\n    }\n    if (ctx.safe &&\n        map.hasCellMechFlag(x, y, CellMechFlags.EVENT_FIRED_THIS_TURN)) {\n        if (!(feat.flags & Flags.DFF_ALWAYS_FIRE)) {\n            // Activation.debug('spawn - already fired.');\n            return false;\n        }\n    }\n    // Activation.debug('spawn', x, y, 'id=', feat.id, 'tile=', feat.tile, 'item=', feat.item);\n    // const refreshCell = (ctx.refreshCell =\n    //   ctx.refreshCell || !(feat.flags & Flags.DFF_NO_REDRAW_CELL));\n    const abortIfBlocking = (ctx.abortIfBlocking =\n        ctx.abortIfBlocking || feat.flags & Flags.DFF_ABORT_IF_BLOCKS_MAP);\n    // if ((feat.flags & DFF_RESURRECT_ALLY) && !resurrectAlly(x, y))\n    // {\n    //     return false;\n    // }\n    if (feat.message &&\n        feat.message.length &&\n        !feat.messageDisplayed &&\n        map.isVisible(x, y)) {\n        feat.messageDisplayed = true;\n        Msg.add(feat.message);\n    }\n    let tile = null;\n    if (feat.tile) {\n        tile = Tiles[feat.tile] || null;\n        if (!tile) {\n            Utils.ERROR(\"Unknown tile: \" + feat.tile);\n        }\n    }\n    let item = null;\n    if (feat.item && \"item\" in Make) {\n        item = Make.item(feat.item);\n        if (!item) {\n            Utils.ERROR(\"Unknown item: \" + feat.item);\n        }\n    }\n    // Blocking keeps track of whether to abort if it turns out that the DF would obstruct the level.\n    const blocking = (ctx.blocking =\n        abortIfBlocking &&\n            !(feat.flags & Flags.DFF_PERMIT_BLOCKING) &&\n            ((tile && tile.flags & TileFlags.T_PATHING_BLOCKER) ||\n                (item && item.blocksMove()) ||\n                feat.flags & Flags.DFF_TREAT_AS_BLOCKING)\n            ? true\n            : false);\n    // Activation.debug('- blocking', blocking);\n    const spawnMap = Grid.alloc(map.width, map.height);\n    let didSomething = false;\n    computeSpawnMap(feat, spawnMap, ctx);\n    if (!blocking ||\n        !map.gridDisruptsPassability(spawnMap, { bounds: ctx.bounds })) {\n        if (feat.flags & Flags.DFF_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (feat.flags & Flags.DFF_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (feat.flags & Flags.DFF_NULLIFY_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (nullifyCells(map, spawnMap, feat.flags)) {\n                didSomething = true;\n            }\n        }\n        if (tile || item || feat.fn) {\n            if (await spawnTiles(feat, spawnMap, ctx, tile, item)) {\n                didSomething = true;\n            }\n        }\n    }\n    if (item) {\n        item.delete();\n    }\n    if (didSomething && feat.flags & Flags.DFF_PROTECTED) {\n        spawnMap.forEach((v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            cell.mechFlags |= CellMechFlags.EVENT_PROTECTED;\n        });\n    }\n    if (didSomething) {\n        // if ((feat.flags & Flags.DFF_AGGRAVATES_MONSTERS) && feat.effectRadius) {\n        //     await aggravateMonsters(feat.effectRadius, x, y, /* Color. */gray);\n        // }\n        // if (refreshCell && feat.flashColor && feat.effectRadius) {\n        //     await colorFlash(feat.flashColor, 0, (IN_FOV | CLAIRVOYANT_VISIBLE), 4, feat.effectRadius, x, y);\n        // }\n        // if (refreshCell && feat.lightFlare) {\n        //     createFlare(x, y, feat.lightFlare);\n        // }\n    }\n    // if (refreshCell && feat.tile\n    // \t&& (tile.flags & (TileFlags.T_IS_FIRE | TileFlags.T_AUTO_DESCENT))\n    // \t&& map.hasTileFlag(PLAYER.xLoc, PLAYER.yLoc, (TileFlags.T_IS_FIRE | TileFlags.T_AUTO_DESCENT)))\n    // {\n    // \tawait applyInstantTileEffectsToCreature(PLAYER);\n    // }\n    // apply tile effects\n    if (didSomething) {\n        for (let i = 0; i < spawnMap.width; ++i) {\n            for (let j = 0; j < spawnMap.height; ++j) {\n                const v = spawnMap[i][j];\n                if (!v || Data.gameHasEnded)\n                    continue;\n                const cell = map.cell(i, j);\n                if (cell.actor || cell.item) {\n                    for (let t of cell.tiles()) {\n                        await t.applyInstantEffects(map, i, j, cell);\n                        if (Data.gameHasEnded) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (feat.emit) {\n        await Events.emit(feat.emit, ctx);\n        didSomething = true;\n    }\n    if (Data.gameHasEnded) {\n        Grid.free(spawnMap);\n        return didSomething;\n    }\n    //\tif (succeeded && feat.message[0] && !feat.messageDisplayed && isVisible(x, y)) {\n    //\t\tfeat.messageDisplayed = true;\n    //\t\tmessage(feat.message, false);\n    //\t}\n    if (feat.next && (didSomething || feat.flags & Flags.DFF_SUBSEQ_ALWAYS)) {\n        // Activation.debug('- subsequent: %s, everywhere=%s', feat.next, feat.flags & Flags.DFF_SUBSEQ_EVERYWHERE);\n        if (feat.flags & Flags.DFF_SUBSEQ_EVERYWHERE) {\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j]) {\n                        ctx.x = i;\n                        ctx.y = j;\n                        await spawn(feat.next, ctx);\n                    }\n                }\n            }\n            ctx.x = x;\n            ctx.y = y;\n        }\n        else {\n            await spawn(feat.next, ctx);\n        }\n    }\n    if (didSomething) {\n        if (tile &&\n            tile.flags &\n                (TileFlags.T_DEEP_WATER | TileFlags.T_LAVA | TileFlags.T_AUTO_DESCENT)) {\n            Data.updateMapToShoreThisTurn = false;\n        }\n        // awaken dormant creatures?\n        // if (feat.flags & Flags.DFF_ACTIVATE_DORMANT_MONSTER) {\n        //     for (monst of map.dormant) {\n        //         if (monst.x == x && monst.y == y || spawnMap[monst.x][monst.y]) {\n        //             // found it!\n        //             toggleMonsterDormancy(monst);\n        //         }\n        //     }\n        // }\n    }\n    if (didSomething) {\n        spawnMap.forEach((v, i, j) => {\n            if (v)\n                map.redrawXY(i, j);\n        });\n        map.needsRedraw();\n        if (!(feat.flags & Flags.DFF_NO_MARK_FIRED)) {\n            spawnMap.forEach((v, i, j) => {\n                if (v) {\n                    map.setCellFlags(i, j, 0, CellMechFlags.EVENT_FIRED_THIS_TURN);\n                }\n            });\n        }\n    }\n    // Activation.debug('- spawn complete : @%d,%d, ok=%s, feat=%s', ctx.x, ctx.y, didSomething, feat.id);\n    Grid.free(spawnMap);\n    return didSomething;\n}\nfunction cellIsOk(feat, x, y, ctx = {}) {\n    const map = ctx.map;\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (feat.flags & Flags.DFF_BUILD_IN_WALLS) {\n        if (!cell.isWall())\n            return false;\n    }\n    else if (feat.flags & Flags.DFF_MUST_TOUCH_WALLS) {\n        let ok = false;\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = true;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    else if (feat.flags & Flags.DFF_NO_TOUCH_WALLS) {\n        let ok = true;\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = false;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    if (ctx.bounds && !ctx.bounds.containsXY(x, y))\n        return false;\n    if (feat.matchTile && !cell.hasTile(feat.matchTile))\n        return false;\n    if (cell.hasTileFlag(TileFlags.T_OBSTRUCTS_TILE_EFFECTS) &&\n        !feat.matchTile &&\n        (ctx.x != x || ctx.y != y))\n        return false;\n    return true;\n}\nexport function computeSpawnMap(feat, spawnMap, ctx = {}) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    const map = ctx.map;\n    const x = ctx.x;\n    const y = ctx.y;\n    const bounds = ctx.bounds || null;\n    if (bounds) {\n        // Activation.debug('- bounds', bounds);\n    }\n    let startProb = feat.spread || 0;\n    let probDec = feat.decrement || 0;\n    if (feat.matchTile && typeof feat.matchTile === \"string\") {\n        const name = feat.matchTile;\n        const tile = Tiles[name];\n        if (!tile) {\n            Utils.ERROR(\"Failed to find match tile with name:\" + name);\n        }\n        feat.matchTile = tile.id;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let radius = feat.radius || 0;\n    if (feat.flags & Flags.DFF_SPREAD_CIRCLE) {\n        radius = 0;\n        startProb = startProb || 100;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        while (random.chance(startProb)) {\n            startProb -= probDec;\n            ++radius;\n        }\n        startProb = 100;\n        probDec = 0;\n    }\n    if (radius) {\n        startProb = startProb || 100;\n        spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n            if (!cellIsOk(feat, i, j, ctx))\n                return 0;\n            const dist = Math.floor(Utils.distanceBetween(x, y, i, j));\n            const prob = startProb - dist * probDec;\n            if (!random.chance(prob))\n                return 0;\n            return 1;\n        });\n        spawnMap[x][y] = 1;\n    }\n    else if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (feat.flags & Flags.DFF_SPREAD_LINE) {\n            x2 = x;\n            y2 = y;\n            const dir = Utils.DIRS[random.number(4)];\n            while (madeChange) {\n                madeChange = false;\n                x2 = x2 + dir[0];\n                y2 = y2 + dir[1];\n                if (spawnMap.hasXY(x2, y2) &&\n                    !spawnMap[x2][y2] &&\n                    cellIsOk(feat, x2, y2, ctx) &&\n                    random.chance(startProb)) {\n                    spawnMap[x2][y2] = 1;\n                    madeChange = true;\n                    startProb -= probDec;\n                }\n            }\n        }\n        else {\n            if (probDec <= 0)\n                probDec = startProb;\n            while (madeChange && startProb > 0) {\n                madeChange = false;\n                t++;\n                for (i = 0; i < map.width; i++) {\n                    for (j = 0; j < map.height; j++) {\n                        if (spawnMap[i][j] == t - 1) {\n                            for (dir = 0; dir < 4; dir++) {\n                                x2 = i + Utils.DIRS[dir][0];\n                                y2 = j + Utils.DIRS[dir][1];\n                                if (spawnMap.hasXY(x2, y2) &&\n                                    !spawnMap[x2][y2] &&\n                                    cellIsOk(feat, x2, y2, ctx) &&\n                                    random.chance(startProb)) {\n                                    spawnMap[x2][y2] = t;\n                                    madeChange = true;\n                                }\n                            }\n                        }\n                    }\n                }\n                startProb -= probDec;\n            }\n        }\n    }\n    if (!cellIsOk(feat, x, y, ctx)) {\n        spawnMap[x][y] = 0;\n    }\n}\nexport async function spawnTiles(feat, spawnMap, ctx, tile, item) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = feat.flags & Flags.DFF_BLOCKED_BY_OTHER_LAYERS;\n    const superpriority = feat.flags & Flags.DFF_SUPERPRIORITY;\n    const applyEffects = ctx.refreshCell;\n    const map = ctx.map;\n    const volume = ctx.volume || feat.volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.mechFlags & CellMechFlags.EVENT_PROTECTED)\n                continue;\n            if (tile) {\n                if (cell.layers[tile.layer] === tile.id) {\n                    // If the new cell does not already contains the fill terrain,\n                    if (tile.layer == Layer.GAS) {\n                        spawnMap[i][j] = 1;\n                        cell.gasVolume += volume;\n                    }\n                    else if (tile.layer == Layer.LIQUID) {\n                        spawnMap[i][j] = 1;\n                        cell.liquidVolume += volume;\n                    }\n                }\n                else if ((superpriority || cell.tile(tile.layer).priority < tile.priority) && // If the terrain in the layer to be overwritten has a higher priority number (unless superpriority),\n                    !cell.obstructsLayer(tile.layer) && // If we will be painting into the surface layer when that cell forbids it,\n                    (!cell.item || !(feat.flags & Flags.DFF_BLOCKED_BY_ITEMS)) &&\n                    (!cell.actor || !(feat.flags & Flags.DFF_BLOCKED_BY_ACTORS)) &&\n                    (!blockedByOtherLayers ||\n                        cell.highestPriorityTile().priority < tile.priority)) {\n                    // if the fill won't violate the priority of the most important terrain in this cell:\n                    spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                    map.setTile(i, j, tile, volume);\n                    // map.redrawCell(cell);\n                    // if (volume && cell.gas) {\n                    //     cell.volume += (feat.volume || 0);\n                    // }\n                    // debug('- tile', i, j, 'tile=', tile.id);\n                    // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                    accomplishedSomething = true;\n                }\n            }\n            if (item) {\n                if (superpriority || !cell.item) {\n                    if (!cell.hasTileFlag(TileFlags.T_OBSTRUCTS_ITEMS)) {\n                        spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                        if (cell.item) {\n                            map.removeItem(cell.item);\n                        }\n                        const clone = item.clone();\n                        map.addItem(i, j, clone);\n                        // map.redrawCell(cell);\n                        // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                        accomplishedSomething = true;\n                        // Activation.debug('- item', i, j, 'item=', itemKind.id);\n                    }\n                }\n            }\n            if (feat.fn) {\n                if (await feat.fn(i, j, ctx)) {\n                    spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                    // map.redrawCell(cell);\n                    // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                    accomplishedSomething = true;\n                }\n            }\n            if (applyEffects) {\n                // if (PLAYER.xLoc == i && PLAYER.yLoc == j && !PLAYER.status.levitating && refresh) {\n                // \tflavorMessage(tileFlavor(PLAYER.xLoc, PLAYER.yLoc));\n                // }\n                // if (cell.actor || cell.item) {\n                // \tfor(let t of cell.tiles()) {\n                // \t\tawait t.applyInstantEffects(map, i, j, cell);\n                // \t\tif (Data.gameHasEnded) {\n                // \t\t\treturn true;\n                // \t\t}\n                // \t}\n                // }\n                // if (tile.flags & TileFlags.T_IS_FIRE) {\n                // \tif (cell.flags & CellFlags.HAS_ITEM) {\n                // \t\ttheItem = map.itemAt(i, j);\n                // \t\tif (theItem.flags & Flags.Item.ITEM_FLAMMABLE) {\n                // \t\t\tawait burnItem(theItem);\n                // \t\t}\n                // \t}\n                // }\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.changed(true);\n    }\n    return accomplishedSomething;\n}\nexport function nullifyCells(map, spawnMap, flags) {\n    let didSomething = false;\n    const nullSurface = flags & Flags.DFF_NULL_SURFACE;\n    const nullLiquid = flags & Flags.DFF_NULL_LIQUID;\n    const nullGas = flags & Flags.DFF_NULL_GAS;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        map.nullifyCellLayers(i, j, !!nullLiquid, !!nullSurface, !!nullGas);\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let i, j;\n    let monst;\n    let didSomething = false;\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            if (blockingMap[i][j] && map.hasCellFlag(i, j, CellFlags.HAS_ACTOR)) {\n                monst = map.actorAt(i, j);\n                if (monst === null)\n                    continue;\n                const loc = map.matchingLocNear(i, j, (cell) => {\n                    return !(monst === null || monst === void 0 ? void 0 : monst.forbidsCell(cell));\n                }, { hallways: true, blockingMap });\n                map.moveActor(loc[0], loc[1], monst);\n                map.redrawXY(loc[0], loc[1]);\n                didSomething = true;\n            }\n        }\n    }\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    blockingMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (!cell.item)\n            return;\n        const loc = map.matchingLocNear(i, j, (cell) => {\n            var _a;\n            return !!((_a = cell.item) === null || _a === void 0 ? void 0 : _a.forbidsCell(cell));\n        }, { hallways: true, blockingMap });\n        if (loc) {\n            map.removeItem(cell.item);\n            map.addItem(loc[0], loc[1], cell.item);\n            map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import { color as Color, canvas as Canvas, utils as Utils, config as CONFIG, data as DATA, random, } from \"gw-utils\";\nimport { Tile, tiles as TILES, Layer } from \"./tile\";\nimport * as Activation from \"./activation\";\nimport * as Light from \"./light\";\nimport { Cell as Flags, CellMech as MechFlags, TileMech as TileMechFlags, Tile as TileFlags, Map as MapFlags, } from \"./flags\";\nexport { Flags, MechFlags };\n// TODO - Move to gw-ui\nColor.install(\"cursorColor\", 25, 100, 150);\nCONFIG.cursorPathIntensity = 50;\nexport class CellMemory {\n    constructor() {\n        this.mixer = new Canvas.Mixer();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    nullify() {\n        this.mixer.nullify();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    copy(other) {\n        const mixer = this.mixer;\n        Object.assign(this, other);\n        this.mixer = mixer;\n        this.mixer.copy(other.mixer);\n    }\n}\nexport class Cell {\n    constructor() {\n        this.layers = [null, null, null, null];\n        this.sprites = null;\n        this.actor = null;\n        this.item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory = new CellMemory();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n    }\n    copy(other) {\n        Utils.copyObject(this, other);\n    }\n    nullify() {\n        for (let i = 0; i < this.layers.length; ++i) {\n            this.layers[i] = null;\n        }\n        this.sprites = null;\n        this.actor = null;\n        this.item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory.nullify();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n    }\n    nullifyLayers(nullLiquid = false, nullSurface = false, nullGas = false) {\n        if (nullLiquid) {\n            this.layers[1] = null;\n            this.liquidVolume = 0;\n        }\n        if (nullSurface) {\n            this.layers[2] = null;\n        }\n        if (nullGas) {\n            this.layers[3] = null;\n            this.gasVolume = 0;\n        }\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    get ground() {\n        return this.layers[Layer.GROUND];\n    }\n    get liquid() {\n        return this.layers[Layer.LIQUID];\n    }\n    get surface() {\n        return this.layers[Layer.SURFACE];\n    }\n    get gas() {\n        return this.layers[Layer.GAS];\n    }\n    get groundTile() {\n        return TILES[this.layers[Layer.GROUND] || \"0\"];\n    }\n    get liquidTile() {\n        return TILES[this.layers[Layer.LIQUID] || \"0\"];\n    }\n    get surfaceTile() {\n        return TILES[this.layers[Layer.SURFACE] || \"0\"];\n    }\n    get gasTile() {\n        return TILES[this.layers[Layer.GAS] || \"0\"];\n    }\n    dump() {\n        if (this.actor)\n            return this.actor.sprite.ch;\n        if (this.item)\n            return this.item.sprite.ch;\n        for (let i = this.layers.length - 1; i >= 0; --i) {\n            if (!this.layers[i])\n                continue;\n            const tile = TILES[this.layers[i] || \"0\"];\n            if (tile.sprite.ch)\n                return tile.sprite.ch;\n        }\n        return TILES[0].sprite.ch;\n    }\n    changed() {\n        return this.flags & Flags.CELL_CHANGED;\n    }\n    isVisible() {\n        return this.flags & Flags.VISIBLE;\n    }\n    isAnyKindOfVisible() {\n        return (this.flags & Flags.ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isOrWasAnyKindOfVisible() {\n        return (this.flags &\n            Flags.IS_WAS_ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isRevealed(orMapped = false) {\n        const flag = Flags.REVEALED | (orMapped ? Flags.MAGIC_MAPPED : 0);\n        return this.flags & flag;\n    }\n    listInSidebar() {\n        return this.hasTileMechFlag(TileMechFlags.TM_LIST_IN_SIDEBAR, true);\n    }\n    _needsRedraw() {\n        this.flags |= Flags.NEEDS_REDRAW;\n    }\n    // TODO - Use functions in LIGHT to check these on cell.light directly???\n    hasVisibleLight() {\n        return Light.intensity(this.light) > CONFIG.light.INTENSITY_DARK;\n    } // TODO\n    isDark() {\n        return Light.intensity(this.light) <= CONFIG.light.INTENSITY_DARK;\n    } // TODO\n    lightChanged() {\n        return this.flags & Flags.LIGHT_CHANGED;\n    } // TODO\n    tile(layer = 0) {\n        const id = this.layers[layer] || 0;\n        return TILES[id];\n    }\n    *tiles() {\n        for (let id of this.layers) {\n            if (id) {\n                yield TILES[id];\n            }\n        }\n    }\n    tileFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags;\n        }\n        return flags;\n    }\n    tileMechFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileMechFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.mechFlags;\n        }\n        return flags;\n    }\n    hasTileFlag(flagMask = 0, limitToPlayerKnowledge = false) {\n        const tileFlags = this.tileFlags(limitToPlayerKnowledge);\n        return !!(flagMask & tileFlags);\n    }\n    hasAllTileFlags(flags = 0) {\n        return (flags & this.tileFlags()) === flags;\n    }\n    hasTileMechFlag(flagMask = 0, limitToPlayerKnowledge = false) {\n        const mechFlags = this.tileMechFlags(limitToPlayerKnowledge);\n        return !!(flagMask & mechFlags);\n    }\n    hasAllTileMechFlags(flags = 0) {\n        return (flags & this.tileMechFlags()) === flags;\n    }\n    setFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags |= cellFlag;\n        this.mechFlags |= cellMechFlag;\n        // this.flags |= Flags.NEEDS_REDRAW;\n    }\n    clearFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags &= ~cellFlag;\n        this.mechFlags &= ~cellMechFlag;\n        // if ((~cellFlag) & Flags.NEEDS_REDRAW) {\n        //   this.flags |= Flags.NEEDS_REDRAW;\n        // }\n    }\n    hasFlag(flag = 0, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellFlags\n            : this.flags;\n        return !!(flag & flags);\n    }\n    hasMechFlag(flag = 0, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellMechFlags\n            : this.mechFlags;\n        return !!(flag & flags);\n    }\n    hasTile(tile) {\n        let id;\n        if (tile instanceof Tile) {\n            id = tile.id;\n        }\n        else {\n            id = tile;\n        }\n        return this.layers.includes(id);\n    }\n    // hasTileInGroup(...groups) {\n    //   if (groups.length == 1 && Array.isArray(groups[0])) {\n    //     groups = groups[0];\n    //   }\n    //   return this.layers.some( (tileId) => {\n    //     const tile = TILES[tileId] || TILES.NOTHING;\n    //     return Utils.intersect(groups, tile.groups);\n    //   });\n    // }\n    successorTileFlags(id) {\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.successorFlags(id);\n        }\n        return flags;\n    }\n    promotedTileFlags() {\n        return this.successorTileFlags(\"promote\");\n    }\n    discoveredTileFlags() {\n        return this.successorTileFlags(\"discover\");\n    }\n    hasDiscoveredTileFlag(flag) {\n        // if (!this.hasTileMechFlag(TM_IS_SECRET)) return false;\n        return this.discoveredTileFlags() & flag;\n    }\n    highestPriorityTile(skipGas = false) {\n        let best = TILES[0];\n        let bestPriority = -10000;\n        for (let layer = Layer.GROUND; layer <= (skipGas ? Layer.LIQUID : Layer.GAS); ++layer) {\n            // @ts-ignore\n            const id = this.layers[layer];\n            if (!id)\n                continue;\n            const tile = TILES[id];\n            if (tile.priority > bestPriority) {\n                best = tile;\n                bestPriority = tile.priority;\n            }\n        }\n        return best;\n    }\n    tileWithFlag(tileFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags & tileFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileWithMechFlag(mechFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.mechFlags & mechFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileDesc() {\n        return this.highestPriorityTile().desc;\n    }\n    tileFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    isNull() {\n        return this.ground == null;\n    }\n    isEmpty() {\n        return !(this.actor || this.item);\n    }\n    isPassableNow(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        if (!(tileFlags & TileFlags.T_PATHING_BLOCKER))\n            return true;\n        if (tileFlags & TileFlags.T_BRIDGE)\n            return true;\n        return limitToPlayerKnowledge\n            ? false\n            : this.isSecretDoor(limitToPlayerKnowledge);\n    }\n    canBePassed(limitToPlayerKnowledge = false) {\n        if (this.isPassableNow(limitToPlayerKnowledge))\n            return true;\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileMechFlags = useMemory\n            ? this.memory.tileMechFlags\n            : this.tileMechFlags();\n        if (tileMechFlags & TileMechFlags.TM_CONNECTS_LEVEL)\n            return true;\n        return !!(tileMechFlags & TileMechFlags.TM_PROMOTES &&\n            !(this.promotedTileFlags() & TileFlags.T_PATHING_BLOCKER));\n    }\n    isWall(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_OBSTRUCTS_EVERYTHING);\n    }\n    isObstruction(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_OBSTRUCTS_DIAGONAL_MOVEMENT);\n    }\n    isDoor(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_IS_DOOR);\n    }\n    isSecretDoor(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge)\n            return false;\n        const tileMechFlags = this.tileMechFlags();\n        return !!(tileMechFlags & TileMechFlags.TM_IS_SECRET &&\n            !(this.discoveredTileFlags() & TileFlags.T_PATHING_BLOCKER));\n    }\n    blocksPathing(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_PATHING_BLOCKER);\n    }\n    blocksVision() {\n        let tileFlags = this.tileFlags();\n        return !!(tileFlags & TileFlags.T_OBSTRUCTS_VISION);\n    }\n    isLiquid(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_IS_LIQUID);\n    }\n    hasGas(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_GAS);\n    }\n    markRevealed() {\n        this.flags &= ~Flags.STABLE_MEMORY;\n        if (this.flags & Flags.REVEALED)\n            return false;\n        this.flags |= Flags.REVEALED;\n        if (!this.hasTileFlag(TileFlags.T_PATHING_BLOCKER)) {\n            DATA.xpxpThisTurn++;\n        }\n        return true;\n    }\n    obstructsLayer(layer) {\n        return (layer == Layer.SURFACE && this.hasTileFlag(TileFlags.T_OBSTRUCTS_SURFACE));\n    }\n    _setTile(tileId = null, volume = 0, map) {\n        map = map || DATA.map;\n        let tile;\n        if (tileId === null) {\n            tile = TILES[\"0\"];\n        }\n        else if (typeof tileId === \"string\") {\n            tile = TILES[tileId];\n        }\n        else if (tileId instanceof Tile) {\n            tile = tileId;\n            tileId = tile.id;\n        }\n        else if (!!tileId) {\n            Utils.ERROR(\"Unknown tile: \" + tileId);\n        }\n        if (!tile) {\n            Utils.WARN(\"Unknown tile - \" + tileId);\n            tile = TILES[\"0\"];\n            tileId = null;\n        }\n        // @ts-ignore\n        const oldTileId = this.layers[tile.layer] || null;\n        // @ts-ignore\n        const oldTile = TILES[oldTileId] || TILES[\"0\"];\n        if ((oldTile.flags & TileFlags.T_PATHING_BLOCKER) !=\n            (tile.flags & TileFlags.T_PATHING_BLOCKER)) {\n            DATA.staleLoopMap = true;\n        }\n        if (tile.flags & TileFlags.T_IS_FIRE &&\n            !(oldTile.flags & TileFlags.T_IS_FIRE)) {\n            this.setFlags(0, MechFlags.CAUGHT_FIRE_THIS_TURN);\n        }\n        const blocksVision = tile.flags & TileFlags.T_OBSTRUCTS_VISION;\n        const oldBlocksVision = oldTile.flags & TileFlags.T_OBSTRUCTS_VISION;\n        if (map && this.isAnyKindOfVisible() && blocksVision != oldBlocksVision) {\n            map.setFlag(MapFlags.MAP_FOV_CHANGED);\n        }\n        // @ts-ignore\n        this.layers[tile.layer] = tileId;\n        if (tile.layer == Layer.LIQUID) {\n            this.liquidVolume =\n                volume + (tileId == oldTileId ? this.liquidVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_LIQUID);\n        }\n        else if (tile.layer == Layer.GAS) {\n            this.gasVolume = volume + (tileId == oldTileId ? this.gasVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_GAS);\n        }\n        if (tile.layer > 0 && this.layers[0] === null) {\n            this.layers[0] = \"FLOOR\"; // TODO - Not good\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n        if (map && oldTile.light !== tile.light) {\n            map.clearFlag(MapFlags.MAP_STABLE_GLOW_LIGHTS | MapFlags.MAP_STABLE_LIGHTS);\n        }\n        return true;\n    }\n    clearLayer(layer) {\n        // @ts-ignore\n        if (typeof layer === \"string\")\n            layer = Layer[layer];\n        // @ts-ignore\n        if (this.layers[layer]) {\n            // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n            this.flags |= Flags.CELL_CHANGED;\n        }\n        // @ts-ignore\n        this.layers[layer] = null;\n        if (layer == Layer.LIQUID) {\n            this.liquidVolume = 0;\n        }\n        else if (layer == Layer.GAS) {\n            this.gasVolume = 0;\n        }\n    }\n    clearLayers(except, floorTile) {\n        floorTile = floorTile ? floorTile : this.layers[0];\n        for (let layer = 0; layer < this.layers.length; layer++) {\n            if (layer != except && layer != Layer.GAS) {\n                this.layers[layer] = layer ? null : floorTile;\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    nullifyTileWithFlags(tileFlags, tileMechFlags = 0) {\n        for (let i = 0; i < this.layers.length; ++i) {\n            const id = this.layers[i];\n            if (!id)\n                continue;\n            const tile = TILES[id];\n            if (tileFlags && tileMechFlags) {\n                if (tile.flags & tileFlags && tile.mechFlags & tileMechFlags) {\n                    this.layers[i] = null;\n                }\n            }\n            else if (tileFlags) {\n                if (tile.flags & tileFlags) {\n                    this.layers[i] = null;\n                }\n            }\n            else if (tileMechFlags) {\n                if (tile.flags & tileMechFlags) {\n                    this.layers[i] = null;\n                }\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    // EVENTS\n    async activate(name, ctx = {}) {\n        ctx.cell = this;\n        let fired = false;\n        // cell.debug(\"fire event - %s\", name);\n        for (let tile of this.tiles()) {\n            if (!tile.activates)\n                continue;\n            const ev = tile.activates[name];\n            if (ev) {\n                // cell.debug(\" - has event\");\n                if (ev.chance && !random.chance(ev.chance, 10000)) {\n                    continue;\n                }\n                ctx.tile = tile;\n                // cell.debug(\" - spawn event @%d,%d - %s\", ctx.x, ctx.y, name);\n                fired = (await Activation.spawn(ev, ctx)) || fired;\n                // cell.debug(\" - spawned\");\n                if (fired) {\n                    break;\n                }\n            }\n        }\n        if (fired) {\n            // this.mechFlags |= MechFlags.EVENT_FIRED_THIS_TURN;\n        }\n        return fired;\n    }\n    activatesOn(name) {\n        for (let tile of this.tiles()) {\n            if (tile.activatesOn(name))\n                return true;\n        }\n        return false;\n    }\n    // SPRITES\n    addSprite(layer, sprite, priority = 50) {\n        if (!sprite)\n            return;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        if (!this.sprites ||\n            this.sprites.layer > layer ||\n            (this.sprites.layer == layer && this.sprites.priority > priority)) {\n            this.sprites = { layer, priority, sprite, next: this.sprites };\n            return;\n        }\n        let current = this.sprites;\n        while (current.next &&\n            (current.layer < layer ||\n                (current.layer == layer && current.priority <= priority))) {\n            current = current.next;\n        }\n        const item = { layer, priority, sprite, next: current.next };\n        current.next = item;\n    }\n    removeSprite(sprite) {\n        if (!sprite)\n            return false;\n        if (!this.sprites)\n            return false;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        if (this.sprites && this.sprites.sprite === sprite) {\n            this.sprites = this.sprites.next;\n            return true;\n        }\n        let prev = this.sprites;\n        let current = this.sprites.next;\n        while (current) {\n            if (current.sprite === sprite) {\n                prev.next = current.next;\n                return true;\n            }\n            current = current.next;\n        }\n        return false;\n    }\n    // MEMORY\n    storeMemory() {\n        const memory = this.memory;\n        memory.tileFlags = this.tileFlags();\n        memory.tileMechFlags = this.tileMechFlags();\n        memory.cellFlags = this.flags;\n        memory.cellMechFlags = this.mechFlags;\n        memory.tile = this.highestPriorityTile();\n        if (this.item) {\n            memory.item = this.item;\n            memory.itemQuantity = this.item.quantity || 1;\n        }\n        else {\n            memory.item = null;\n            memory.itemQuantity = 0;\n        }\n        memory.actor = this.actor;\n        getAppearance(this, memory.mixer);\n        if (this.actor && this.isOrWasAnyKindOfVisible()) {\n            if (this.actor.rememberedInCell && this.actor.rememberedInCell !== this) {\n                console.log(\"remembered in cell change\");\n                this.actor.rememberedInCell.storeMemory();\n                this.actor.rememberedInCell.flags |= Flags.NEEDS_REDRAW;\n            }\n            this.actor.rememberedInCell = this;\n        }\n    }\n}\nexport function make() {\n    const cell = new Cell();\n    return cell;\n}\nexport function getAppearance(cell, dest) {\n    const memory = cell.memory.mixer;\n    memory.blackOut();\n    let needDistinctness = false;\n    for (let tile of cell.tiles()) {\n        let alpha = 100;\n        if (tile.layer == Layer.LIQUID) {\n            alpha = Utils.clamp(cell.liquidVolume || 0, 20, 100);\n        }\n        else if (tile.layer == Layer.GAS) {\n            alpha = Utils.clamp(cell.gasVolume || 0, 20, 100);\n        }\n        memory.drawSprite(tile.sprite, alpha);\n        if (tile.mechFlags & TileMechFlags.TM_VISUALLY_DISTINCT) {\n            needDistinctness = true;\n        }\n    }\n    let current = cell.sprites;\n    while (current) {\n        memory.drawSprite(current.sprite);\n        current = current.next;\n    }\n    memory.fg.multiply(cell.light);\n    memory.bg.multiply(cell.light);\n    memory.bake(!cell.isAnyKindOfVisible()); // turns off dancing if not visible\n    if (needDistinctness) {\n        Color.separate(memory.fg, memory.bg);\n    }\n    dest.drawSprite(memory);\n    return true;\n}\n","import { utils as Utils, random, grid as Grid, fov as Fov, flag as Flag, path as Path, color as Color, colors as COLORS, canvas as Canvas, config as CONFIG, data as DATA, } from \"gw-utils\";\nimport * as Cell from \"./cell\";\nimport * as Flags from \"./flags\";\nconst TileLayer = Flags.Layer;\nUtils.setDefaults(CONFIG, {\n    \"map.deepestLevel\": 99,\n});\nexport class Map {\n    constructor(w, h, opts = {}) {\n        this.locations = {};\n        this.config = {};\n        this._actors = null;\n        this._items = null;\n        this.flags = 0;\n        this.ambientLight = null;\n        this.lights = null;\n        this.events = {};\n        this._width = w;\n        this._height = h;\n        this.cells = Grid.make(w, h, () => new Cell.Cell());\n        this.locations = opts.locations || {};\n        this.config = Object.assign({}, opts);\n        this.config.tick = this.config.tick || 100;\n        this._actors = null;\n        this._items = null;\n        this.flags = Flag.from(Flags.Map, Flags.Map.MAP_DEFAULT, opts.flags);\n        this.ambientLight = null;\n        const ambient = opts.ambient || opts.ambientLight || opts.light;\n        if (ambient) {\n            this.ambientLight = Color.make(ambient);\n        }\n        this.lights = null;\n        this.id = opts.id;\n        this.events = opts.events || {};\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    async start() { }\n    nullify() {\n        this.cells.forEach((c) => c.nullify());\n    }\n    dump(fmt) {\n        this.cells.dump(fmt || ((c) => c.dump()));\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    eachCell(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    forEach(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    forRect(x, y, w, h, fn) {\n        this.cells.forRect(x, y, w, h, (c, i, j) => fn(c, i, j, this));\n    }\n    eachNeighbor(x, y, fn, only4dirs = false) {\n        this.cells.eachNeighbor(x, y, (c, i, j) => fn(c, i, j, this), only4dirs);\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.cells.isBoundaryXY(x, y);\n    }\n    changed(v) {\n        if (v === true) {\n            this.flags |= Flags.Map.MAP_CHANGED;\n        }\n        else if (v === false) {\n            this.flags &= ~Flags.Map.MAP_CHANGED;\n        }\n        return this.flags & Flags.Map.MAP_CHANGED;\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).flags & flag;\n    }\n    hasCellMechFlag(x, y, flag) {\n        return this.cell(x, y).mechFlags & flag;\n    }\n    hasTileFlag(x, y, flag) {\n        return this.cell(x, y).hasTileFlag(flag);\n    }\n    hasTileMechFlag(x, y, flag) {\n        return this.cell(x, y).hasTileMechFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).flags |= flag;\n    }\n    redrawCell(cell) {\n        // if (cell.isAnyKindOfVisible()) {\n        cell._needsRedraw();\n        this.flags |= Flags.Map.MAP_CHANGED;\n        // }\n    }\n    redrawXY(x, y) {\n        const cell = this.cell(x, y);\n        this.redrawCell(cell);\n    }\n    redrawAll() {\n        this.forEach((c) => {\n            // if (c.isAnyKindOfVisible()) {\n            c.flags |= Flags.Cell.NEEDS_REDRAW;\n            // }\n        });\n        this.flags |= Flags.Map.MAP_CHANGED;\n    }\n    revealAll() {\n        this.forEach((c) => {\n            c.markRevealed();\n            c.storeMemory();\n        });\n    }\n    markRevealed(x, y) {\n        if (!this.cell(x, y).markRevealed())\n            return;\n        if (DATA.player) {\n            DATA.player.invalidateCostMap();\n        }\n    }\n    isVisible(x, y) {\n        return this.cell(x, y).isVisible();\n    }\n    isAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isAnyKindOfVisible();\n    }\n    isOrWasAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isOrWasAnyKindOfVisible();\n    }\n    hasVisibleLight(x, y) {\n        return this.cell(x, y).hasVisibleLight();\n    }\n    setFlag(flag) {\n        this.flags |= flag;\n        this.changed(true);\n    }\n    setFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags |= mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((c) => c.setFlags(cellFlag, cellMechFlag));\n        }\n        this.changed(true);\n    }\n    clearFlag(flag) {\n        this.flags &= ~flag;\n        this.changed(true);\n    }\n    clearFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags &= ~mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((cell) => cell.clearFlags(cellFlag, cellMechFlag));\n        }\n        this.changed(true);\n    }\n    setCellFlags(x, y, cellFlag = 0, cellMechFlag = 0) {\n        this.cell(x, y).setFlags(cellFlag, cellMechFlag);\n        this.flags |= Flags.Map.MAP_CHANGED;\n    }\n    clearCellFlags(x, y, cellFlags = 0, cellMechFlags = 0) {\n        this.cell(x, y).clearFlags(cellFlags, cellMechFlags);\n        this.changed(true);\n    }\n    hasTile(x, y, tile) {\n        return this.cells[x][y].hasTile(tile);\n    }\n    tileFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileFlags(limitToPlayerKnowledge);\n    }\n    tileMechFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileMechFlags(limitToPlayerKnowledge);\n    }\n    tileWithFlag(x, y, flag = 0) {\n        return this.cells[x][y].tileWithFlag(flag);\n    }\n    tileWithMechFlag(x, y, mechFlag = 0) {\n        return this.cells[x][y].tileWithMechFlag(mechFlag);\n    }\n    hasKnownTileFlag(x, y, flagMask = 0) {\n        return this.cells[x][y].memory.tileFlags & flagMask;\n    }\n    // hasTileInGroup(x, y, ...groups) { return this.cells[x][y].hasTileInGroup(...groups); }\n    discoveredTileFlags(x, y) {\n        return this.cells[x][y].discoveredTileFlags();\n    }\n    hasDiscoveredTileFlag(x, y, flag = 0) {\n        return this.cells[x][y].hasDiscoveredTileFlag(flag);\n    }\n    canBePassed(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].canBePassed(limitToPlayerKnowledge);\n    }\n    isPassableNow(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isPassableNow(limitToPlayerKnowledge);\n    }\n    isNull(x, y) {\n        return this.cells[x][y].isNull();\n    }\n    isEmpty(x, y) {\n        return this.cells[x][y].isEmpty();\n    }\n    isObstruction(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isObstruction(limitToPlayerKnowledge);\n    }\n    isDoor(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isDoor(limitToPlayerKnowledge);\n    }\n    isLiquid(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isLiquid(limitToPlayerKnowledge);\n    }\n    hasGas(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].hasGas(limitToPlayerKnowledge);\n    }\n    blocksPathing(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].blocksPathing(limitToPlayerKnowledge);\n    }\n    blocksVision(x, y) {\n        return this.cells[x][y].blocksVision();\n    }\n    highestPriorityTile(x, y, skipGas = false) {\n        return this.cells[x][y].highestPriorityTile(skipGas);\n    }\n    tileFlavor(x, y) {\n        return this.cells[x][y].tileFlavor();\n    }\n    setTile(x, y, tileId, volume = 0) {\n        return this.cell(x, y)._setTile(tileId, volume, this);\n    }\n    nullifyTileWithFlags(x, y, tileFlags, tileMechFlags = 0) {\n        const cell = this.cell(x, y);\n        cell.nullifyTileWithFlags(tileFlags, tileMechFlags);\n    }\n    nullifyCellLayers(x, y, nullLiquid = true, nullSurface = true, nullGas = true) {\n        this.changed(true);\n        return this.cell(x, y).nullifyLayers(nullLiquid, nullSurface, nullGas);\n    }\n    fill(tileId, boundaryTile) {\n        let i, j;\n        if (boundaryTile === undefined) {\n            boundaryTile = tileId;\n        }\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                if (this.isBoundaryXY(i, j)) {\n                    this.setTile(i, j, boundaryTile);\n                }\n                else {\n                    this.setTile(i, j, tileId);\n                }\n            }\n        }\n    }\n    neighborCount(x, y, matchFn, only4dirs = false) {\n        let count = 0;\n        this.eachNeighbor(x, y, (...args) => {\n            if (matchFn(...args))\n                ++count;\n        }, only4dirs);\n        return count;\n    }\n    passableArcCount(x, y) {\n        if (!this.hasXY(x, y))\n            return -1;\n        return this.cells.arcCount(x, y, (c) => c.isPassableNow());\n    }\n    diagonalBlocked(x1, y1, x2, y2, limitToPlayerKnowledge = false) {\n        if (x1 == x2 || y1 == y2) {\n            return false; // If it's not a diagonal, it's not diagonally blocked.\n        }\n        const locFlags1 = this.tileFlags(x1, y2, limitToPlayerKnowledge);\n        if (locFlags1 & Flags.Tile.T_OBSTRUCTS_DIAGONAL_MOVEMENT) {\n            return true;\n        }\n        const locFlags2 = this.tileFlags(x2, y1, limitToPlayerKnowledge);\n        if (locFlags2 & Flags.Tile.T_OBSTRUCTS_DIAGONAL_MOVEMENT) {\n            return true;\n        }\n        return false;\n    }\n    fillCostGrid(costGrid, costFn) {\n        costFn = costFn || Utils.ONE;\n        this.cells.forEach((cell, i, j) => {\n            if (cell.isNull()) {\n                costGrid[i][j] = Path.OBSTRUCTION;\n            }\n            else {\n                costGrid[i][j] = cell.canBePassed()\n                    ? costFn(cell, i, j, this)\n                    : Path.OBSTRUCTION;\n            }\n        });\n    }\n    matchingNeighbor(x, y, matcher, only4dirs = false) {\n        const maxIndex = only4dirs ? 4 : 8;\n        for (let d = 0; d < maxIndex; ++d) {\n            const dir = Utils.DIRS[d];\n            const i = x + dir[0];\n            const j = y + dir[1];\n            if (this.hasXY(i, j)) {\n                if (matcher(this.cells[i][j], i, j, this))\n                    return [i, j];\n            }\n        }\n        return null;\n    }\n    matchingLocNear(x, y, ...args) {\n        let i, j, k;\n        let matcher = args[0];\n        let opts = args[1] || {};\n        const arg = args[0];\n        if (typeof arg !== \"function\") {\n            opts = arg || args[1];\n            matcher = opts.match || Utils.TRUE;\n        }\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const deterministic = opts.deterministic || false;\n        const candidateLocs = [];\n        // count up the number of candidate locations\n        for (k = 0; k < Math.max(this.width, this.height) && !candidateLocs.length; k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (!this.hasXY(i, j))\n                        continue;\n                    const cell = this.cell(i, j);\n                    // if ((i == x-k || i == x+k || j == y-k || j == y+k)\n                    if (Math.ceil(Utils.distanceBetween(x, y, i, j)) == k &&\n                        (!blockingMap || !blockingMap[i][j]) &&\n                        matcher(cell, i, j, this) &&\n                        (!forbidLiquid || !cell.liquid) &&\n                        (hallwaysAllowed || this.passableArcCount(i, j) < 2)) {\n                        candidateLocs.push([i, j]);\n                    }\n                }\n            }\n        }\n        if (candidateLocs.length == 0) {\n            return [-1, -1];\n        }\n        // and pick one\n        let randIndex = 0;\n        if (deterministic) {\n            randIndex = Math.floor(candidateLocs.length / 2);\n        }\n        else {\n            randIndex = random.number(candidateLocs.length);\n        }\n        return candidateLocs[randIndex];\n    }\n    // fills (*x, *y) with the coordinates of a random cell with\n    // no creatures, items or stairs and with either a matching liquid and dungeon type\n    // or at least one layer of type terrainType.\n    // A dungeon, liquid type of -1 will match anything.\n    randomMatchingLoc(opts = {}) {\n        let x;\n        let y;\n        let cell;\n        if (typeof opts === \"function\") {\n            opts = { match: opts };\n        }\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const matcher = opts.match || Utils.TRUE;\n        const forbidCellFlags = opts.forbidCellFlags || 0;\n        const forbidTileFlags = opts.forbidTileFlags || 0;\n        const forbidTileMechFlags = opts.forbidTileMechFlags || 0;\n        const tile = opts.tile || null;\n        let tries = opts.tries || 500;\n        let retry = true;\n        while (retry) {\n            tries--;\n            if (!tries)\n                break;\n            x = random.range(0, this.width - 1);\n            y = random.range(0, this.height - 1);\n            cell = this.cell(x, y);\n            if ((!blockingMap || !blockingMap[x][y]) &&\n                (!tile || cell.hasTile(tile)) &&\n                (!forbidLiquid || !cell.liquid) &&\n                (!forbidCellFlags || !(cell.flags & forbidCellFlags)) &&\n                (!forbidTileFlags || !cell.hasTileFlag(forbidTileFlags)) &&\n                (!forbidTileMechFlags || !cell.hasTileMechFlag(forbidTileMechFlags)) &&\n                (hallwaysAllowed || this.passableArcCount(x, y) < 2) &&\n                matcher(cell, x, y, this)) {\n                retry = false;\n            }\n        }\n        if (!tries) {\n            // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => FAIL');\n            return false;\n        }\n        // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => ', x, y);\n        return [x, y];\n    }\n    // LIGHT\n    addLight(x, y, light) {\n        const info = { x, y, light, next: this.lights };\n        this.lights = info;\n        this.flags &= ~(Flags.Map.MAP_STABLE_LIGHTS | Flags.Map.MAP_STABLE_GLOW_LIGHTS);\n        return info;\n    }\n    removeLight(info) {\n        Utils.removeFromChain(this, \"lights\", info);\n        this.flags &= ~(Flags.Map.MAP_STABLE_LIGHTS | Flags.Map.MAP_STABLE_GLOW_LIGHTS);\n    }\n    eachGlowLight(fn) {\n        Utils.eachChain(this.lights, (info) => fn(info.light, info.x, info.y));\n        this.eachCell((cell, x, y) => {\n            for (let tile of cell.tiles()) {\n                if (tile.light) {\n                    fn(tile.light, x, y);\n                }\n            }\n        });\n    }\n    eachDynamicLight(fn) {\n        Utils.eachChain(this._actors, (actor) => {\n            if (actor.light)\n                fn(actor.light, actor.x, actor.y);\n        });\n    }\n    // FX\n    addFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addSprite(TileLayer.FX, anim.sprite);\n        anim.x = x;\n        anim.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    moveFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeSprite(anim.sprite);\n        this.redrawCell(oldCell);\n        cell.addSprite(TileLayer.FX, anim.sprite);\n        this.redrawCell(cell);\n        anim.x = x;\n        anim.y = y;\n        return true;\n    }\n    removeFx(anim) {\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeSprite(anim.sprite);\n        this.redrawCell(oldCell);\n        this.flags |= Flags.Map.MAP_CHANGED;\n        return true;\n    }\n    // ACTORS\n    // will return the PLAYER if the PLAYER is at (x, y).\n    actorAt(x, y) {\n        // creature *\n        if (!this.hasXY(x, y))\n            return null;\n        const cell = this.cell(x, y);\n        return cell.actor;\n    }\n    addActor(x, y, theActor) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.actor) {\n            return false;\n        }\n        cell.actor = theActor;\n        theActor.next = this._actors;\n        this._actors = theActor;\n        const layer = theActor === DATA.player ? TileLayer.PLAYER : TileLayer.ACTOR;\n        cell.addSprite(layer, theActor.sprite);\n        const flag = theActor === DATA.player ? Flags.Cell.HAS_PLAYER : Flags.Cell.HAS_MONSTER;\n        cell.flags |= flag;\n        // if (theActor.flags & Flags.Actor.MK_DETECTED)\n        // {\n        // \tcell.flags |= Flags.Cell.MONSTER_DETECTED;\n        // }\n        if (theActor.light) {\n            this.flags &= ~Flags.Map.MAP_STABLE_LIGHTS;\n        }\n        // If the player moves or an actor that blocks vision and the cell is visible...\n        // -- we need to update the FOV\n        if (theActor.isPlayer() ||\n            (cell.isAnyKindOfVisible() && theActor.blocksVision())) {\n            this.flags |= Flags.Map.MAP_FOV_CHANGED;\n        }\n        theActor.x = x;\n        theActor.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    addActorNear(x, y, theActor) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return theActor.avoidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the actor.');\n            return false;\n        }\n        return this.addActor(loc[0], loc[1], theActor);\n    }\n    moveActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        this.removeActor(actor);\n        if (!this.addActor(x, y, actor)) {\n            this.addActor(actor.x, actor.y, actor);\n            return false;\n        }\n        if (actor.light) {\n            this.flags &= ~Flags.Map.MAP_STABLE_LIGHTS;\n        }\n        return true;\n    }\n    removeActor(actor) {\n        if (!this.hasXY(actor.x, actor.y))\n            return false;\n        const cell = this.cell(actor.x, actor.y);\n        if (cell.actor === actor) {\n            cell.actor = null;\n            Utils.removeFromChain(this, \"actors\", actor);\n            cell.flags &= ~Flags.Cell.HAS_ACTOR;\n            cell.removeSprite(actor.sprite);\n            if (actor.light) {\n                this.flags &= ~Flags.Map.MAP_STABLE_LIGHTS;\n            }\n            // If the player moves or an actor that blocks vision and the cell is visible...\n            // -- we need to update the FOV\n            if (actor.isPlayer() ||\n                (cell.isAnyKindOfVisible() && actor.blocksVision())) {\n                this.flags |= Flags.Map.MAP_FOV_CHANGED;\n            }\n            this.redrawCell(cell);\n            return true;\n        }\n        return false;\n    }\n    deleteActorAt(x, y) {\n        const actor = this.actorAt(x, y);\n        if (!actor)\n            return false;\n        this.removeActor(actor);\n        actor.delete();\n        return true;\n    }\n    // dormantAt(x: number, y: number) {  // creature *\n    // \tif (!(this.cell(x, y).flags & Flags.Cell.HAS_DORMANT_MONSTER)) {\n    // \t\treturn null;\n    // \t}\n    // \treturn this.dormantActors.find( (m) => m.x == x && m.y == y );\n    // }\n    //\n    // addDormant(x, y, actor) {\n    // \ttheActor.x = x;\n    // \ttheActor.y = y;\n    // \tthis.dormant.add(theActor);\n    // \tcell.flags |= (Flags.Cell.HAS_DORMANT_MONSTER);\n    // \tthis.flags |= Flags.Map.MAP_CHANGED;\n    // \treturn true;\n    // }\n    //\n    // removeDormant(actor) {\n    // \tconst cell = this.cell(actor.x, actor.y);\n    // \tcell.flags &= ~(Flags.Cell.HAS_DORMANT_MONSTER);\n    // \tcell.flags |= Flags.Cell.NEEDS_REDRAW;\n    // \tthis.flags |= Flags.Map.MAP_CHANGED;\n    // \tthis.dormant.remove(actor);\n    // }\n    // ITEMS\n    itemAt(x, y) {\n        const cell = this.cell(x, y);\n        return cell.item;\n    }\n    addItem(x, y, theItem) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.flags & Flags.Cell.HAS_ITEM) {\n            // GW.ui.message(colors.badMessageColor, 'There is already an item there.');\n            return false;\n        }\n        theItem.x = x;\n        theItem.y = y;\n        cell.item = theItem;\n        theItem.next = this._items;\n        this._items = theItem;\n        cell.addSprite(TileLayer.ITEM, theItem.sprite);\n        cell.flags |= Flags.Cell.HAS_ITEM;\n        if (theItem.light) {\n            this.flags &= ~Flags.Map.MAP_STABLE_LIGHTS;\n        }\n        this.redrawCell(cell);\n        if (theItem.isDetected() || CONFIG.D_ITEM_OMNISCIENCE) {\n            cell.flags |= Flags.Cell.ITEM_DETECTED;\n        }\n        return true;\n    }\n    addItemNear(x, y, theItem) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return theItem.forbidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the item.');\n            return false;\n        }\n        return this.addItem(loc[0], loc[1], theItem);\n    }\n    removeItem(theItem) {\n        const x = theItem.x;\n        const y = theItem.y;\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.item !== theItem)\n            return false;\n        cell.removeSprite(theItem.sprite);\n        cell.item = null;\n        Utils.removeFromChain(this, \"items\", theItem);\n        if (theItem.light) {\n            this.flags &= ~Flags.Map.MAP_STABLE_LIGHTS;\n        }\n        cell.flags &= ~(Flags.Cell.HAS_ITEM | Flags.Cell.ITEM_DETECTED);\n        this.redrawCell(cell);\n        return true;\n    }\n    // // PROMOTE\n    //\n    // async promote(x, y, mechFlag) {\n    // \tif (this.hasTileMechFlag(x, y, mechFlag)) {\n    // \t\tconst cell = this.cell(x, y);\n    // \t\tfor (let tile of cell.tiles()) {\n    // \t\t\tif (tile.mechFlags & mechFlag) {\n    // \t\t\t\tawait tile.promote(this, x, y, false);\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // }\n    gridDisruptsPassability(blockingGrid, opts = {}) {\n        const walkableGrid = Grid.alloc(this.width, this.height);\n        let disrupts = false;\n        const gridOffsetX = opts.gridOffsetX || 0;\n        const gridOffsetY = opts.gridOffsetY || 0;\n        const bounds = opts.bounds || null;\n        // Get all walkable locations after lake added\n        this.cells.forEach((cell, i, j) => {\n            if (bounds && !bounds.contains(i, j))\n                return; // outside bounds\n            const blockingX = i + gridOffsetX;\n            const blockingY = j + gridOffsetY;\n            if (cell.isNull()) {\n                return; // do nothing\n            }\n            else if (cell.canBePassed()) {\n                if (blockingGrid.hasXY(blockingX, blockingY) &&\n                    blockingGrid[blockingX][blockingY])\n                    return;\n                walkableGrid[i][j] = 1;\n            }\n            else if (cell.hasTileFlag(Flags.Tile.T_HAS_STAIRS)) {\n                if (blockingGrid.hasXY(blockingX, blockingY) &&\n                    blockingGrid[blockingX][blockingY]) {\n                    disrupts = true;\n                }\n                else {\n                    walkableGrid[i][j] = 1;\n                }\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        Grid.free(walkableGrid);\n        return disrupts;\n    }\n    // FOV\n    // Returns a boolean grid indicating whether each square is in the field of view of (xLoc, yLoc).\n    // forbiddenTileFlags is the set of terrain flags that will block vision (but the blocking cell itself is\n    // illuminated); forbiddenCellFlags is the set of map flags that will block vision.\n    // If cautiousOnWalls is set, we will not illuminate blocking tiles unless the tile one space closer to the origin\n    // is visible to the player; this is to prevent lights from illuminating a wall when the player is on the other\n    // side of the wall.\n    calcFov(grid, x, y, maxRadius, forbiddenCellFlags = 0, forbiddenTileFlags = Flags.Tile.T_OBSTRUCTS_VISION) {\n        maxRadius = maxRadius || this.width + this.height;\n        grid.fill(0);\n        const map = this;\n        const FOV = new Fov.FOV({\n            isBlocked(i, j) {\n                return !!(!grid.hasXY(i, j) ||\n                    map.hasCellFlag(i, j, forbiddenCellFlags) ||\n                    map.hasTileFlag(i, j, forbiddenTileFlags));\n            },\n            calcRadius(x, y) {\n                return Math.sqrt(x ** 2 + y ** 2);\n            },\n            setVisible(x, y) {\n                grid[x][y] = 1;\n            },\n            hasXY(x, y) {\n                return grid.hasXY(x, y);\n            },\n        });\n        return FOV.calculate(x, y, maxRadius);\n    }\n    losFromTo(a, b) {\n        const line = Utils.getLine(a.x, a.y, b.x, b.y);\n        if (!line || !line.length)\n            return false;\n        return !line.some((loc) => {\n            return this.blocksVision(loc[0], loc[1]);\n        });\n    }\n    // MEMORIES\n    storeMemory(x, y) {\n        const cell = this.cell(x, y);\n        cell.storeMemory();\n    }\n    storeMemories() {\n        let x, y;\n        for (x = 0; x < this.width; ++x) {\n            for (y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.flags & Flags.Cell.ANY_KIND_OF_VISIBLE) {\n                    this.storeMemory(x, y);\n                }\n                cell.flags &= Flags.Cell.PERMANENT_CELL_FLAGS;\n                cell.mechFlags &= Flags.CellMech.PERMANENT_MECH_FLAGS;\n            }\n        }\n    }\n    // TICK\n    async tick() {\n        // map.debug(\"tick\");\n        this.forEach((c) => (c.mechFlags &= ~(Flags.CellMech.EVENT_FIRED_THIS_TURN | Flags.CellMech.EVENT_PROTECTED)));\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cells[x][y];\n                await cell.activate(\"tick\", { map: this, x, y, cell, safe: true });\n            }\n        }\n        updateLiquid(this);\n    }\n    resetEvents() {\n        this.forEach((c) => (c.mechFlags &= ~(Flags.CellMech.EVENT_FIRED_THIS_TURN | Flags.CellMech.EVENT_PROTECTED)));\n    }\n}\nexport function makeMap(w, h, opts = {}) {\n    if (typeof opts === \"string\") {\n        opts = { tile: opts };\n    }\n    const map = new Map(w, h, opts);\n    const floor = opts.tile || opts.floor || opts.floorTile;\n    const boundary = opts.boundary || opts.wall || opts.wallTile;\n    if (floor) {\n        map.fill(floor, boundary);\n    }\n    if (!DATA.map) {\n        DATA.map = map;\n    }\n    return map;\n}\nexport function getCellAppearance(map, x, y, dest) {\n    dest.blackOut();\n    if (!map.hasXY(x, y))\n        return;\n    const cell = map.cell(x, y);\n    if (cell.isAnyKindOfVisible() &&\n        cell.flags & (Flags.Cell.CELL_CHANGED | Flags.Cell.NEEDS_REDRAW)) {\n        Cell.getAppearance(cell, dest);\n    }\n    else if (cell.isRevealed()) {\n        dest.drawSprite(cell.memory.mixer);\n    }\n    if (cell.isVisible()) {\n        // keep here to allow for games that do not use fov to work\n    }\n    else if (!cell.isRevealed()) {\n        dest.blackOut();\n    }\n    else if (!cell.isAnyKindOfVisible()) {\n        dest.bg.mix(COLORS.black, 30);\n        dest.fg.mix(COLORS.black, 30);\n    }\n    let needDistinctness = false;\n    if (cell.flags & (Flags.Cell.IS_CURSOR | Flags.Cell.IS_IN_PATH)) {\n        const highlight = cell.flags & Flags.Cell.IS_CURSOR ? COLORS.cursorColor : COLORS.yellow;\n        if (cell.hasTileMechFlag(Flags.TileMech.TM_INVERT_WHEN_HIGHLIGHTED)) {\n            Color.swap(dest.fg, dest.bg);\n        }\n        else {\n            // if (!GAME.trueColorMode || !dest.needDistinctness) {\n            // dest.fg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n            // }\n            dest.bg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n        }\n        needDistinctness = true;\n    }\n    if (needDistinctness) {\n        Color.separate(dest.fg, dest.bg);\n    }\n    // dest.bake();\n}\nexport function addText(map, x, y, text, fg, bg, layer) {\n    for (let ch of text) {\n        const sprite = Canvas.makeSprite(ch, fg, bg);\n        const cell = map.cell(x++, y);\n        cell.addSprite(layer || TileLayer.GROUND, sprite);\n    }\n}\nexport function updateGas(map) {\n    if (map.flags & Flags.Map.MAP_NO_GAS)\n        return;\n    const newVolume = Grid.alloc(map.width, map.height);\n    map.forEach((c, x, y) => {\n        if (c.hasTileFlag(Flags.Tile.T_OBSTRUCTS_GAS))\n            return;\n        let gas = c.gas;\n        let highest = c.gasVolume;\n        let sum = c.gasVolume;\n        let count = 1;\n        map.eachNeighbor(x, y, (n) => {\n            if (n.hasTileFlag(Flags.Tile.T_OBSTRUCTS_GAS))\n                return;\n            ++count;\n            sum += n.gasVolume;\n            if (n.gasVolume > highest) {\n                gas = n.gas;\n                highest = n.gasVolume;\n            }\n        });\n        if (!sum)\n            return;\n        const newVol = Math.floor(sum / count);\n        if (c.gas != gas) {\n            c._setTile(gas, newVol, map); // volume = 1 to start, will change later\n        }\n        newVolume[x][y] += newVol;\n        const rem = sum - count * Math.floor(sum / count);\n        if (rem && random.number(count) < rem) {\n            newVolume[x][y] += 1;\n        }\n        // disperses\n        // if (newVolume[x][y] && random.chance(20)) {\n        // \tnewVolume[x][y] -= 1;\n        // }\n    });\n    let hasGas = false;\n    newVolume.forEach((v, i, j) => {\n        const cell = map.cell(i, j);\n        if (v) {\n            hasGas = true;\n            if (cell.gas && cell.gasVolume !== v) {\n                cell.gasVolume = v;\n                map.redrawCell(cell);\n            }\n        }\n        else if (cell.gas) {\n            cell.clearLayer(Flags.Layer.GAS);\n            map.redrawCell(cell);\n        }\n    });\n    if (hasGas) {\n        map.flags &= ~Flags.Map.MAP_NO_GAS;\n    }\n    else {\n        map.flags |= Flags.Map.MAP_NO_GAS;\n    }\n    map.changed(true);\n    Grid.free(newVolume);\n}\nexport function updateLiquid(map) {\n    if (map.flags & Flags.Map.MAP_NO_LIQUID)\n        return;\n    const newVolume = Grid.alloc(map.width, map.height);\n    map.forEach((c, x, y) => {\n        if (c.hasTileFlag(Flags.Tile.T_OBSTRUCTS_LIQUID))\n            return;\n        let liquid = c.liquid;\n        let highest = c.liquidVolume;\n        let count = 1;\n        map.eachNeighbor(x, y, (n) => {\n            if (n.hasTileFlag(Flags.Tile.T_OBSTRUCTS_LIQUID))\n                return;\n            ++count;\n            if (n.liquidVolume > highest) {\n                liquid = n.liquid;\n                highest = n.liquidVolume;\n            }\n        });\n        let newVol = c.liquidVolume;\n        if (newVol > 10 && count > 1) {\n            let spread = Math.round(0.2 * c.liquidVolume);\n            if (spread > 5) {\n                newVol -= spread;\n                if (c.liquid != liquid) {\n                    c._setTile(liquid, newVol, map); // volume = 1 to start, will change later\n                }\n                // spread = Math.floor(spread / count);\n                if (spread) {\n                    newVolume.eachNeighbor(x, y, (v, i, j) => {\n                        newVolume[i][j] = v + spread;\n                    });\n                }\n            }\n        }\n        newVolume[x][y] += newVol;\n        // disperses\n        const tile = c.liquidTile;\n        if (newVolume[x][y] && random.chance(tile.dissipate, 10000)) {\n            newVolume[x][y] -= 1;\n        }\n    });\n    let hasLiquid = false;\n    newVolume.forEach((v, i, j) => {\n        const cell = map.cell(i, j);\n        if (v) {\n            hasLiquid = true;\n            if (cell.liquid && cell.liquidVolume !== v) {\n                cell.liquidVolume = v;\n                map.redrawCell(cell);\n            }\n        }\n        else if (cell.liquid) {\n            cell.clearLayer(Flags.Layer.LIQUID);\n            map.redrawCell(cell);\n        }\n    });\n    if (hasLiquid) {\n        map.flags &= ~Flags.Map.MAP_NO_LIQUID;\n    }\n    else {\n        map.flags |= Flags.Map.MAP_NO_LIQUID;\n    }\n    map.changed(true);\n    Grid.free(newVolume);\n}\n","import * as Tile from \"./tile\";\n// These are the minimal set of tiles to make the diggers work\nconst NOTHING = \"0\";\nTile.install(NOTHING, {\n    sprite: { ch: \"\\u2205\", fg: \"white\", bg: \"black\" },\n    flags: \"T_OBSTRUCTS_PASSABILITY\",\n    name: \"eerie nothingness\",\n    article: \"an\",\n    priority: 0,\n});\nTile.install(\"FLOOR\", {\n    sprite: {\n        ch: \"\\u00b7\",\n        fg: [30, 30, 30, 20, 0, 0, 0],\n        bg: [2, 2, 10, 0, 2, 2, 0],\n    },\n    priority: 10,\n    article: \"the\",\n});\nTile.install(\"DOOR\", {\n    sprite: { ch: \"+\", fg: [100, 40, 40], bg: [30, 60, 60] },\n    priority: 30,\n    flags: \"T_IS_DOOR, T_OBSTRUCTS_TILE_EFFECTS, T_OBSTRUCTS_ITEMS, T_OBSTRUCTS_VISION, TM_VISUALLY_DISTINCT\",\n    article: \"a\",\n    activates: {\n        enter: { tile: \"DOOR_OPEN\" },\n        open: { tile: \"DOOR_OPEN_ALWAYS\" },\n    },\n});\nTile.install(\"DOOR_OPEN\", \"DOOR\", {\n    sprite: { ch: \"'\", fg: [100, 40, 40], bg: [30, 60, 60] },\n    priority: 40,\n    flags: \"!T_OBSTRUCTS_ITEMS, !T_OBSTRUCTS_VISION\",\n    name: \"open door\",\n    article: \"an\",\n    activates: {\n        tick: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n        enter: null,\n        open: null,\n        close: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n    },\n});\nTile.install(\"DOOR_OPEN_ALWAYS\", \"DOOR_OPEN\", {\n    activates: {\n        tick: null,\n        close: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n    },\n});\nTile.install(\"BRIDGE\", {\n    sprite: { ch: \"=\", fg: [100, 40, 40] },\n    priority: 40,\n    layer: \"SURFACE\",\n    flags: \"T_BRIDGE, TM_VISUALLY_DISTINCT\",\n    article: \"a\",\n});\nTile.install(\"UP_STAIRS\", {\n    sprite: { ch: \"<\", fg: [100, 40, 40], bg: [100, 60, 20] },\n    priority: 200,\n    flags: \"T_UP_STAIRS, T_STAIR_BLOCKERS, TM_VISUALLY_DISTINCT, TM_LIST_IN_SIDEBAR\",\n    name: \"upward staircase\",\n    article: \"an\",\n});\nTile.install(\"DOWN_STAIRS\", {\n    sprite: { ch: \">\", fg: [100, 40, 40], bg: [100, 60, 20] },\n    priority: 200,\n    flags: \"T_DOWN_STAIRS, T_STAIR_BLOCKERS, TM_VISUALLY_DISTINCT, TM_LIST_IN_SIDEBAR\",\n    name: \"downward staircase\",\n    article: \"a\",\n});\nTile.install(\"WALL\", {\n    sprite: {\n        ch: \"#\",\n        fg: [7, 7, 7, 0, 3, 3, 3],\n        bg: [40, 40, 40, 10, 10, 0, 5],\n    },\n    priority: 100,\n    flags: \"T_OBSTRUCTS_EVERYTHING\",\n    article: \"a\",\n});\nTile.install(\"LAKE\", {\n    sprite: {\n        ch: \"~\",\n        fg: [5, 8, 20, 10, 0, 4, 15, true],\n        bg: [10, 15, 41, 6, 5, 5, 5, true],\n    },\n    priority: 50,\n    flags: \"T_DEEP_WATER\",\n    name: \"deep water\",\n    article: \"the\",\n});\n"],"names":["Flag","CONFIG","Color","Range","Grid","Flags.Cell","Flags.Tile","Utils","Make","Tile","Flags","MechFlags","Light.from","Canvas","Activation","make","install","CellMechFlags","Msg","Tiles","TileFlags","Data","Events","random","CellFlags","Cell","TILES","TileMechFlags","Light.intensity","DATA","MapFlags","Activation.spawn","Flags.Layer","Map","Cell.Cell","Flags.Map","Path","Fov","Flags.CellMech","cell","Cell.getAppearance","COLORS","Flags.TileMech","Tile.install"],"mappings":"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"}