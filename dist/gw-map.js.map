{"version":3,"file":"gw-map.js","sources":["../js/flags.js","../js/light.js","../js/entity.js","../js/tile.js","../js/cell.js","../js/visibility.js","../js/effect.js","../js/analyze.js","../js/map.js","../js/tiles.js"],"sourcesContent":["import { flag as Flag } from 'gw-utils';\nexport var Layer;\n(function (Layer) {\n    Layer[Layer[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Layer[Layer[\"GROUND\"] = 0] = \"GROUND\";\n    Layer[Layer[\"LIQUID\"] = 1] = \"LIQUID\";\n    Layer[Layer[\"SURFACE\"] = 2] = \"SURFACE\";\n    Layer[Layer[\"GAS\"] = 3] = \"GAS\";\n    Layer[Layer[\"ITEM\"] = 4] = \"ITEM\";\n    Layer[Layer[\"ACTOR\"] = 5] = \"ACTOR\";\n    Layer[Layer[\"PLAYER\"] = 6] = \"PLAYER\";\n    Layer[Layer[\"FX\"] = 7] = \"FX\";\n    Layer[Layer[\"UI\"] = 8] = \"UI\";\n})(Layer || (Layer = {}));\nconst Fl = Flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_SUPERPRIORITY\"] = Fl(1)] = \"L_SUPERPRIORITY\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(11)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(12)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(13)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(14)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(15)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_IS_WALL\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_IS_WALL\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_IS_WALL |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Activation;\n(function (Activation) {\n    Activation[Activation[\"DFF_SUBSEQ_ALWAYS\"] = Fl(0)] = \"DFF_SUBSEQ_ALWAYS\";\n    Activation[Activation[\"DFF_SUBSEQ_EVERYWHERE\"] = Fl(1)] = \"DFF_SUBSEQ_EVERYWHERE\";\n    Activation[Activation[\"DFF_TREAT_AS_BLOCKING\"] = Fl(2)] = \"DFF_TREAT_AS_BLOCKING\";\n    Activation[Activation[\"DFF_PERMIT_BLOCKING\"] = Fl(3)] = \"DFF_PERMIT_BLOCKING\";\n    Activation[Activation[\"DFF_BLOCKED_BY_OTHER_LAYERS\"] = Fl(4)] = \"DFF_BLOCKED_BY_OTHER_LAYERS\";\n    Activation[Activation[\"DFF_SUPERPRIORITY\"] = Fl(5)] = \"DFF_SUPERPRIORITY\";\n    Activation[Activation[\"DFF_NO_REDRAW_CELL\"] = Fl(6)] = \"DFF_NO_REDRAW_CELL\";\n    Activation[Activation[\"DFF_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"DFF_ABORT_IF_BLOCKS_MAP\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"DFF_BLOCKED_BY_ITEMS\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"DFF_BLOCKED_BY_ACTORS\";\n    Activation[Activation[\"DFF_ALWAYS_FIRE\"] = Fl(10)] = \"DFF_ALWAYS_FIRE\";\n    Activation[Activation[\"DFF_NO_MARK_FIRED\"] = Fl(11)] = \"DFF_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Activation[Activation[\"DFF_PROTECTED\"] = Fl(12)] = \"DFF_PROTECTED\";\n    Activation[Activation[\"DFF_SPREAD_CIRCLE\"] = Fl(13)] = \"DFF_SPREAD_CIRCLE\";\n    Activation[Activation[\"DFF_SPREAD_LINE\"] = Fl(14)] = \"DFF_SPREAD_LINE\";\n    Activation[Activation[\"DFF_NULL_SURFACE\"] = Fl(15)] = \"DFF_NULL_SURFACE\";\n    Activation[Activation[\"DFF_NULL_LIQUID\"] = Fl(16)] = \"DFF_NULL_LIQUID\";\n    Activation[Activation[\"DFF_NULL_GAS\"] = Fl(17)] = \"DFF_NULL_GAS\";\n    Activation[Activation[\"DFF_EVACUATE_CREATURES\"] = Fl(18)] = \"DFF_EVACUATE_CREATURES\";\n    Activation[Activation[\"DFF_EVACUATE_ITEMS\"] = Fl(19)] = \"DFF_EVACUATE_ITEMS\";\n    Activation[Activation[\"DFF_BUILD_IN_WALLS\"] = Fl(20)] = \"DFF_BUILD_IN_WALLS\";\n    Activation[Activation[\"DFF_MUST_TOUCH_WALLS\"] = Fl(21)] = \"DFF_MUST_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_NO_TOUCH_WALLS\"] = Fl(22)] = \"DFF_NO_TOUCH_WALLS\";\n    // These should be effect types\n    Activation[Activation[\"DFF_ACTIVATE_DORMANT_MONSTER\"] = Fl(23)] = \"DFF_ACTIVATE_DORMANT_MONSTER\";\n    Activation[Activation[\"DFF_AGGRAVATES_MONSTERS\"] = Fl(24)] = \"DFF_AGGRAVATES_MONSTERS\";\n    Activation[Activation[\"DFF_RESURRECT_ALLY\"] = Fl(25)] = \"DFF_RESURRECT_ALLY\";\n    Activation[Activation[\"DFF_EMIT_EVENT\"] = Fl(26)] = \"DFF_EMIT_EVENT\";\n    Activation[Activation[\"DFF_ONLY_IF_EMPTY\"] = Activation.DFF_BLOCKED_BY_ITEMS | Activation.DFF_BLOCKED_BY_ACTORS] = \"DFF_ONLY_IF_EMPTY\";\n    Activation[Activation[\"DFF_NULLIFY_CELL\"] = Activation.DFF_NULL_SURFACE | Activation.DFF_NULL_LIQUID | Activation.DFF_NULL_GAS] = \"DFF_NULLIFY_CELL\";\n})(Activation || (Activation = {}));\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(4)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(5)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(6)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(7)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(8)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(9)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(10)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(11)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(12)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(13)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(14)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(15)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(16)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(17)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(18)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(19)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"VISIBLE\"] = Fl(0)] = \"VISIBLE\";\n    Cell[Cell[\"WAS_VISIBLE\"] = Fl(1)] = \"WAS_VISIBLE\";\n    Cell[Cell[\"CLAIRVOYANT_VISIBLE\"] = Fl(2)] = \"CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"WAS_CLAIRVOYANT_VISIBLE\"] = Fl(3)] = \"WAS_CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"TELEPATHIC_VISIBLE\"] = Fl(4)] = \"TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"WAS_TELEPATHIC_VISIBLE\"] = Fl(5)] = \"WAS_TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"ITEM_DETECTED\"] = Fl(6)] = \"ITEM_DETECTED\";\n    Cell[Cell[\"WAS_ITEM_DETECTED\"] = Fl(7)] = \"WAS_ITEM_DETECTED\";\n    Cell[Cell[\"MONSTER_DETECTED\"] = Fl(8)] = \"MONSTER_DETECTED\";\n    Cell[Cell[\"WAS_MONSTER_DETECTED\"] = Fl(9)] = \"WAS_MONSTER_DETECTED\";\n    Cell[Cell[\"REVEALED\"] = Fl(10)] = \"REVEALED\";\n    Cell[Cell[\"MAGIC_MAPPED\"] = Fl(11)] = \"MAGIC_MAPPED\";\n    Cell[Cell[\"IN_FOV\"] = Fl(12)] = \"IN_FOV\";\n    Cell[Cell[\"WAS_IN_FOV\"] = Fl(13)] = \"WAS_IN_FOV\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(14)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"CELL_CHANGED\"] = Fl(15)] = \"CELL_CHANGED\";\n    // These are to help memory\n    Cell[Cell[\"HAS_SURFACE\"] = Fl(16)] = \"HAS_SURFACE\";\n    Cell[Cell[\"HAS_LIQUID\"] = Fl(17)] = \"HAS_LIQUID\";\n    Cell[Cell[\"HAS_GAS\"] = Fl(18)] = \"HAS_GAS\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(19)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(20)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(21)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(22)] = \"HAS_ITEM\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(23)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(24)] = \"IS_CURSOR\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(25)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"LIGHT_CHANGED\"] = Fl(26)] = \"LIGHT_CHANGED\";\n    Cell[Cell[\"CELL_LIT\"] = Fl(27)] = \"CELL_LIT\";\n    Cell[Cell[\"IS_IN_SHADOW\"] = Fl(28)] = \"IS_IN_SHADOW\";\n    Cell[Cell[\"CELL_DARK\"] = Fl(29)] = \"CELL_DARK\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.REVEALED |\n        Cell.MAGIC_MAPPED |\n        Cell.ITEM_DETECTED |\n        Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE | Cell.CLAIRVOYANT_VISIBLE | Cell.TELEPATHIC_VISIBLE] = \"ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"IS_WAS_ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE |\n        Cell.WAS_VISIBLE |\n        Cell.CLAIRVOYANT_VISIBLE |\n        Cell.WAS_CLAIRVOYANT_VISIBLE |\n        Cell.TELEPATHIC_VISIBLE |\n        Cell.WAS_TELEPATHIC_VISIBLE] = \"IS_WAS_ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"WAS_ANY_KIND_OF_VISIBLE\"] = Cell.WAS_VISIBLE |\n        Cell.WAS_CLAIRVOYANT_VISIBLE |\n        Cell.WAS_TELEPATHIC_VISIBLE] = \"WAS_ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.VISIBLE | Cell.IN_FOV | Cell.NEEDS_REDRAW | Cell.CELL_CHANGED] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n///////////////////////////////////////////////////////\n// CELL MECH\nexport var CellMech;\n(function (CellMech) {\n    CellMech[CellMech[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    CellMech[CellMech[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    CellMech[CellMech[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    CellMech[CellMech[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(4)] = \"CAUGHT_FIRE_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_FIRED_THIS_TURN\"] = Fl(5)] = \"EVENT_FIRED_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_PROTECTED\"] = Fl(6)] = \"EVENT_PROTECTED\";\n    CellMech[CellMech[\"IS_IN_LOOP\"] = Fl(10)] = \"IS_IN_LOOP\";\n    CellMech[CellMech[\"IS_CHOKEPOINT\"] = Fl(11)] = \"IS_CHOKEPOINT\";\n    CellMech[CellMech[\"IS_GATE_SITE\"] = Fl(12)] = \"IS_GATE_SITE\";\n    CellMech[CellMech[\"IS_IN_ROOM_MACHINE\"] = Fl(13)] = \"IS_IN_ROOM_MACHINE\";\n    CellMech[CellMech[\"IS_IN_AREA_MACHINE\"] = Fl(14)] = \"IS_IN_AREA_MACHINE\";\n    CellMech[CellMech[\"IS_POWERED\"] = Fl(15)] = \"IS_POWERED\";\n    CellMech[CellMech[\"IMPREGNABLE\"] = Fl(20)] = \"IMPREGNABLE\";\n    CellMech[CellMech[\"DARKENED\"] = Fl(19)] = \"DARKENED\";\n    CellMech[CellMech[\"IS_IN_MACHINE\"] = CellMech.IS_IN_ROOM_MACHINE | CellMech.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    CellMech[CellMech[\"PERMANENT_MECH_FLAGS\"] = CellMech.SEARCHED_FROM_HERE |\n        CellMech.PRESSURE_PLATE_DEPRESSED |\n        CellMech.KNOWN_TO_BE_TRAP_FREE |\n        CellMech.IS_IN_LOOP |\n        CellMech.IS_CHOKEPOINT |\n        CellMech.IS_GATE_SITE |\n        CellMech.IS_IN_MACHINE |\n        CellMech.IMPREGNABLE] = \"PERMANENT_MECH_FLAGS\";\n})(CellMech || (CellMech = {}));\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_STABLE_GLOW_LIGHTS\"] = Fl(1)] = \"MAP_STABLE_GLOW_LIGHTS\";\n    Map[Map[\"MAP_STABLE_LIGHTS\"] = Fl(2)] = \"MAP_STABLE_LIGHTS\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = Map.MAP_STABLE_LIGHTS | Map.MAP_STABLE_GLOW_LIGHTS] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import { utils as Utils, range as Range, grid as Grid, color as Color, data as DATA, config as CONFIG, make as Make, } from 'gw-utils';\nimport * as Flags from './flags';\n// const LIGHT_SMOOTHING_THRESHOLD = 150;       // light components higher than this magnitude will be toned down a little\nexport const config = (CONFIG.light = { INTENSITY_DARK: 20 }); // less than 20% for highest color in rgb\nconst LIGHT_COMPONENTS = Color.make();\nexport class Light {\n    constructor(color, range, fadeTo, pass = false) {\n        this.fadeTo = 0;\n        this.passThroughActors = false;\n        this.id = null;\n        this.color = Color.from(color) || null; /* color */\n        this.radius = Range.make(range || 1);\n        this.fadeTo = fadeTo || 0;\n        this.passThroughActors = pass; // generally no, but miner light does (TODO - string parameter?  'false' or 'true')\n    }\n    copy(other) {\n        this.color = other.color;\n        this.radius.copy(other.radius);\n        this.fadeTo = other.fadeTo;\n        this.passThroughActors = other.passThroughActors;\n    }\n    get intensity() {\n        return intensity(this.color);\n    }\n    // Returns true if any part of the light hit cells that are in the player's field of view.\n    paint(map, x, y, maintainShadows = false, isMinersLight = false) {\n        if (!map)\n            return false;\n        let k;\n        // let colorComponents = [0,0,0];\n        let lightMultiplier;\n        let radius = this.radius.value();\n        let outerRadius = Math.ceil(radius);\n        // calcLightComponents(colorComponents, this);\n        LIGHT_COMPONENTS.copy(this.color).bake();\n        // console.log('paint', LIGHT_COMPONENTS.toString(true), x, y, outerRadius);\n        // the miner's light does not dispel IS_IN_SHADOW,\n        // so the player can be in shadow despite casting his own light.\n        const dispelShadows = !isMinersLight &&\n            !maintainShadows &&\n            intensity(LIGHT_COMPONENTS) > config.INTENSITY_DARK;\n        const fadeToPercent = this.fadeTo;\n        const grid = Grid.alloc(map.width, map.height, 0);\n        map.calcFov(grid, x, y, outerRadius, this.passThroughActors ? 0 : Flags.Cell.HAS_ANY_ACTOR, Flags.Entity.L_BLOCKS_VISION);\n        let overlappedFieldOfView = false;\n        grid.forCircle(x, y, outerRadius, (v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            lightMultiplier = Math.floor(100 -\n                (100 - fadeToPercent) *\n                    (Utils.distanceBetween(x, y, i, j) / radius));\n            for (k = 0; k < 3; k++) {\n                cell.light[k] += Math.floor((LIGHT_COMPONENTS[k] * lightMultiplier) / 100);\n            }\n            if (dispelShadows) {\n                cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n            }\n            if (cell.flags &\n                (Flags.Cell.IN_FOV | Flags.Cell.ANY_KIND_OF_VISIBLE)) {\n                overlappedFieldOfView = true;\n            }\n            // console.log(i, j, lightMultiplier, cell.light);\n        });\n        if (dispelShadows) {\n            const cell = map.cell(x, y);\n            cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n        }\n        Grid.free(grid);\n        return overlappedFieldOfView;\n    }\n}\nexport function intensity(color) {\n    return Math.max(color[0], color[1], color[2]);\n}\nexport function make(...args) {\n    if (args.length == 1) {\n        const config = args[0];\n        if (typeof config === 'string') {\n            const cached = lights[config];\n            if (cached)\n                return cached;\n            const [color, radius, fadeTo, pass] = config\n                .split(/[,|]/)\n                .map((t) => t.trim());\n            return new Light(Color.from(color), Range.from(radius || 1), Number.parseInt(fadeTo || '0'), !!pass && pass !== 'false');\n        }\n        else if (Array.isArray(config)) {\n            const [color, radius, fadeTo, pass] = config;\n            return new Light(color, radius, fadeTo, pass);\n        }\n        else if (config && config.color) {\n            return new Light(Color.from(config.color), Range.from(config.radius), Number.parseInt(config.fadeTo || '0'), config.pass);\n        }\n        else {\n            throw new Error('Unknown Light config - ' + config);\n        }\n    }\n    else {\n        const [color, radius, fadeTo, pass] = args;\n        return new Light(color, radius, fadeTo, pass);\n    }\n}\nMake.light = make;\nexport const lights = {};\nexport function from(...args) {\n    if (args.length != 1)\n        Utils.ERROR('Unknown Light config: ' + JSON.stringify(args));\n    const arg = args[0];\n    if (typeof arg === 'string') {\n        const cached = lights[arg];\n        if (cached)\n            return cached;\n    }\n    return make(arg);\n}\nexport function install(id, ...args) {\n    let source;\n    if (args.length == 1) {\n        source = make(args[0]);\n    }\n    else {\n        source = make(args[0], args[1], args[2], args[3]);\n    }\n    lights[id] = source;\n    if (source)\n        source.id = id;\n    return source;\n}\nexport function installAll(config = {}) {\n    const entries = Object.entries(config);\n    entries.forEach(([name, info]) => {\n        install(name, info);\n    });\n}\n// export function calcLightComponents(colorComponents, theLight) {\n// \tconst randComponent = cosmetic.range(0, theLight.color.rand);\n// \tcolorComponents[0] = randComponent + theLight.color.red + cosmetic.range(0, theLight.color.redRand);\n// \tcolorComponents[1] = randComponent + theLight.color.green + cosmetic.range(0, theLight.color.greenRand);\n// \tcolorComponents[2] = randComponent + theLight.color.blue + cosmetic.range(0, theLight.color.blueRand);\n// }\nfunction updateDisplayDetail(map) {\n    map.eachCell((cell, _i, _j) => {\n        // clear light flags\n        cell.flags &= ~(Flags.Cell.CELL_LIT | Flags.Cell.CELL_DARK);\n        if (cell.light.some((v, i) => v !== cell.oldLight[i])) {\n            cell.lightChanged = true;\n        }\n        if (cell.isDark()) {\n            cell.flags |= Flags.Cell.CELL_DARK;\n        }\n        else if (!(cell.flags & Flags.Cell.IS_IN_SHADOW)) {\n            cell.flags |= Flags.Cell.CELL_LIT;\n        }\n    });\n}\n// export function backUpLighting(map: Map.Map, lights: LightDataGrid) {\n//   let k;\n//   map.eachCell((cell, i, j) => {\n//     for (k = 0; k < 3; k++) {\n//       lights[i][j][k] = cell.light[k];\n//     }\n//   });\n// }\n// export function restoreLighting(map: Map.Map, lights: LightDataGrid) {\n//   let k;\n//   map.eachCell((cell, i, j) => {\n//     for (k = 0; k < 3; k++) {\n//       cell.light[k] = lights[i][j][k];\n//     }\n//   });\n// }\nexport function recordOldLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.oldLight[k] = cell.light[k];\n            cell.lightChanged = false;\n        }\n    });\n}\nexport function zeroOutLights(map) {\n    let k;\n    const light = map.ambientLight ? map.ambientLight : [0, 0, 0];\n    map.eachCell((cell, _i, _j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = light[k];\n        }\n        cell.flags |= Flags.Cell.IS_IN_SHADOW;\n    });\n}\nexport function recordGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.glowLight[k] = cell.light[k];\n        }\n    });\n}\nexport function restoreGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = cell.glowLight[k];\n        }\n    });\n}\nexport function updateLighting(map) {\n    if (!map.anyLightChanged)\n        return false;\n    // Copy Light over oldLight\n    recordOldLights(map);\n    // and then zero out Light.\n    zeroOutLights(map);\n    if (!map.staticLightChanged) {\n        restoreGlowLights(map);\n    }\n    else {\n        // GW.debug.log('painting glow lights.');\n        // Paint all glowing tiles.\n        map.eachStaticLight((light, x, y) => {\n            //   const light = lights[id];\n            if (light) {\n                light.paint(map, x, y);\n            }\n        });\n        recordGlowLights(map);\n        map.staticLightChanged = false;\n    }\n    // Cycle through monsters and paint their lights:\n    map.eachDynamicLight((light, x, y) => {\n        light.paint(map, x, y);\n        // if (monst.mutationIndex >= 0 && mutationCatalog[monst.mutationIndex].light != lights['NO_LIGHT']) {\n        //     paint(map, mutationCatalog[monst.mutationIndex].light, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isBurning()) { // monst.status.burning && !(actor.kind.flags & Flags.Actor.AF_FIERY)) {\n        // \tpaint(map, lights.BURNING_CREATURE, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isTelepathicallyRevealed()) {\n        // \tpaint(map, lights['TELEPATHY_LIGHT'], actor.x, actor.y, false, true);\n        // }\n    });\n    // Also paint telepathy lights for dormant monsters.\n    // for (monst of map.dormantMonsters) {\n    //     if (monsterTelepathicallyRevealed(monst)) {\n    //         paint(map, lights['TELEPATHY_LIGHT'], monst.xLoc, monst.yLoc, false, true);\n    //     }\n    // }\n    updateDisplayDetail(map);\n    // Miner's light:\n    const PLAYER = DATA.player;\n    if (PLAYER) {\n        const PLAYERS_LIGHT = lights.PLAYERS_LIGHT;\n        if (PLAYERS_LIGHT && PLAYERS_LIGHT.radius) {\n            PLAYERS_LIGHT.paint(map, PLAYER.x, PLAYER.y, true, true);\n        }\n    }\n    map.anyLightChanged = false;\n    // if (PLAYER.status.invisible) {\n    //     PLAYER.info.foreColor = playerInvisibleColor;\n    // } else if (playerInDarkness()) {\n    // \tPLAYER.info.foreColor = playerInDarknessColor;\n    // } else if (pmap[PLAYER.xLoc][PLAYER.yLoc].flags & IS_IN_SHADOW) {\n    // \tPLAYER.info.foreColor = playerInShadowColor;\n    // } else {\n    // \tPLAYER.info.foreColor = playerInLightColor;\n    // }\n    return true;\n}\n// TODO - Move?\nexport function playerInDarkness(map, PLAYER, darkColor) {\n    const cell = map.cell(PLAYER.x, PLAYER.y);\n    return cell.isDark(darkColor);\n    // return (\n    //   cell.light[0] + 10 < darkColor.r &&\n    //   cell.light[1] + 10 < darkColor.g &&\n    //   cell.light[2] + 10 < darkColor.b\n    // );\n}\n","import * as GW from 'gw-utils';\nimport { Entity as Flags, Layer } from './flags';\nimport * as Light from './light';\nexport { Flags, Layer };\nexport class Entity {\n    constructor(config) {\n        this.priority = 50;\n        this.layer = 0;\n        this.light = null;\n        this.flags = { layer: 0 };\n        this.sprite = GW.make.sprite(config.sprite || config);\n        this.light = config.light ? Light.make(config.light) : null;\n        this.priority = GW.utils.first(config.priority, 50);\n        this.layer =\n            (config.layer && typeof config.layer !== 'number'\n                ? Layer[config.layer]\n                : config.layer) || 0;\n        // @ts-ignore\n        this.flags.layer = GW.flag.from(Flags, config.layerFlags, config.flags, 0);\n    }\n    hasLayerFlag(flag) {\n        return (this.flags.layer & flag) > 0;\n    }\n}\nexport function make(config) {\n    return new Entity(config);\n}\nGW.make.layer = make;\n","import { flag as Flag, utils as Utils, color as Color, make as Make, effect as Effect, } from 'gw-utils';\nimport { Tile as Flags, TileMech as MechFlags } from './flags';\nimport * as Layer from './entity';\nexport { Flags, MechFlags };\n/** Tile Class */\nexport class Tile extends Layer.Entity {\n    /**\n     * Creates a new Tile object.\n     * @param {Object} [config={}] - The configuration of the Tile\n     * @param {String|Number|String[]} [config.flags=0] - Flags and MechFlags for the tile\n     * @param {String} [config.layer=GROUND] - Name of the layer for this tile\n     * @param {String} [config.ch] - The sprite character\n     * @param {String} [config.fg] - The sprite foreground color\n     * @param {String} [config.bg] - The sprite background color\n     */\n    constructor(config) {\n        super((() => {\n            if (!config.Extends)\n                return config;\n            if (typeof config.Extends === 'string') {\n                config.Extends = tiles[config.Extends];\n                if (!config.Extends)\n                    throw new Error('Unknown tile base - ' + config.Extends);\n            }\n            const base = config.Extends;\n            config.ch = Utils.first(config.ch, base.sprite.ch, -1);\n            config.fg = Utils.first(config.fg, base.sprite.fg, -1);\n            config.bg = Utils.first(config.bg, base.sprite.bg, -1);\n            config.layer = Utils.first(config.layer, base.layer);\n            config.priority = Utils.first(config.priority, base.priority);\n            config.opacity = Utils.first(config.opacity, base.sprite.opacity);\n            config.light = Utils.first(config.light, base.light);\n            return config;\n        })());\n        this.flags = { layer: 0, tile: 0, tileMech: 0 };\n        this.activates = {};\n        this.flavor = null;\n        this.desc = null;\n        this.article = null;\n        this.dissipate = 2000; // 20 * 100 = 20%\n        this.defaultGround = null;\n        let base = config.Extends;\n        if (base) {\n            Utils.assignOmitting(['sprite', 'depth', 'priority', 'activates', 'flags', 'light'], this, base);\n            if (base.activates) {\n                Object.assign(this.activates, base.activates);\n            }\n            Object.assign(this.flags, base.flags);\n        }\n        Utils.assignOmitting([\n            'Extends',\n            'extends',\n            'flags',\n            'layerFlags',\n            'mechFlags',\n            'sprite',\n            'activates',\n            'ch',\n            'fg',\n            'bg',\n            'opacity',\n            'light',\n            'layer',\n            'priority',\n            'flags',\n            'ground',\n            'light',\n        ], this, config);\n        this.name = config.name || (base ? base.name : config.id);\n        this.id = config.id;\n        if (config.ground) {\n            this.defaultGround = config.ground;\n        }\n        // @ts-ignore\n        this.flags.tile = Flag.from(Flags, this.flags.tile, config.flags);\n        // @ts-ignore\n        this.flags.layer = Flag.from(Layer.Flags, this.flags.layer, config.layerFlags || config.flags);\n        // @ts-ignore\n        this.flags.tileMech = Flag.from(MechFlags, this.flags.tileMech, config.mechFlags || config.flags);\n        if (config.activates) {\n            Object.entries(config.activates).forEach(([key, info]) => {\n                if (info) {\n                    if (typeof info === 'string') {\n                        if (tiles[info]) {\n                            info = { tile: info };\n                        }\n                        else {\n                            this.activates[key] = info;\n                            return;\n                        }\n                    }\n                    const activation = Effect.make(info);\n                    this.activates[key] = activation;\n                }\n                else {\n                    delete this.activates[key];\n                }\n            });\n        }\n    }\n    /**\n     * Returns whether or not this tile as the given flag.\n     * Will return true if any bit in the flag is true, so testing with\n     * multiple flags will return true if any of them is set.\n     * @param {number} flag - The flag to check\n     * @returns {boolean} Whether or not the flag is set\n     */\n    hasAllFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllLayerFlags(flag) {\n        return (this.flags.layer & flag) === flag;\n    }\n    hasAllMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksPathing() {\n        return (this.flags.layer & Layer.Flags.L_BLOCKS_MOVE ||\n            this.flags.tile & Flags.T_PATHING_BLOCKER);\n    }\n    activatesOn(name) {\n        return !!this.activates[name];\n    }\n    getName(arg) {\n        let opts = {};\n        if (arg === true || arg === false) {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = Color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts = {}) {\n        return this.getName(opts);\n    }\n}\n// Types.Tile = Tile;\nexport function make(config) {\n    return new Tile(config);\n}\nMake.tile = make;\nexport const tiles = {};\nexport function install(...args) {\n    let id = args[0];\n    let base = args[1];\n    let config = args[2];\n    if (arguments.length == 1) {\n        config = args[0];\n        base = config.Extends || null;\n        id = config.id;\n    }\n    else if (arguments.length == 2) {\n        config = base;\n    }\n    if (typeof base === 'string') {\n        config.Extends =\n            tiles[base] || Utils.ERROR('Unknown base tile: ' + base);\n    }\n    // config.name = config.name || base.name || id.toLowerCase();\n    config.id = id;\n    const tile = make(config);\n    tiles[id] = tile;\n    return tile;\n}\n/**\n * Adds multiple tiles to the GW.tiles collection.\n * It extracts all the id:opts pairs from the config object and uses\n * them to call addTileKind.\n * @param {Object} config - The tiles to add in [id, config] pairs\n * @returns {void} Nothing\n * @see addTileKind\n */\nexport function installAll(config) {\n    Object.entries(config).forEach(([id, opts]) => {\n        opts.id = id;\n        install(id, opts);\n    });\n}\n","import { color as Color, sprite as Sprite, utils as Utils, config as CONFIG, data as DATA, random, make as Make, effect as Effect, } from 'gw-utils';\nimport { Tile, tiles as TILES } from './tile';\nimport * as Light from './light';\nimport { Cell as Flags, CellMech as MechFlags, Tile as TileFlags, Map as MapFlags, Entity as LayerFlags, Layer, } from './flags';\nexport { Flags, MechFlags };\n// TODO - Move to gw-ui\nColor.install('cursorColor', 25, 100, 150);\nCONFIG.cursorPathIntensity = 50;\nexport class CellMemory {\n    constructor() {\n        this.mixer = new Sprite.Mixer();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.layerFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    clear() {\n        this.mixer.nullify();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.layerFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    copy(other) {\n        const mixer = this.mixer;\n        Object.assign(this, other);\n        this.mixer = mixer;\n        this.mixer.copy(other.mixer);\n    }\n}\nexport class Cell {\n    constructor() {\n        this._tiles = [];\n        this.layers = null;\n        this._actor = null;\n        this._item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory = new CellMemory();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n        this.chokeCount = 0;\n    }\n    copy(other) {\n        Utils.copyObject(this, other);\n    }\n    nullify() {\n        for (let i = 0; i < this._tiles.length; ++i) {\n            this._tiles[i] = null;\n        }\n        this.layers = null;\n        this._actor = null;\n        this._item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory.clear();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n        this.chokeCount = 0;\n    }\n    clear(floorTile = 'FLOOR') {\n        this.nullify();\n        if (typeof floorTile === 'string') {\n            floorTile = TILES[floorTile];\n        }\n        if (floorTile) {\n            this._tiles[0] = floorTile;\n        }\n    }\n    // clearLayers(nullLiquid = false, nullSurface = false, nullGas = false) {\n    //     if (nullLiquid) {\n    //         this._tiles[1] = null;\n    //         this.liquidVolume = 0;\n    //     }\n    //     if (nullSurface) {\n    //         this._tiles[2] = null;\n    //     }\n    //     if (nullGas) {\n    //         this._tiles[3] = null;\n    //         this.gasVolume = 0;\n    //     }\n    //     this.flags |= Flags.CELL_CHANGED;\n    // }\n    get ground() {\n        var _a;\n        return ((_a = this._tiles[Layer.GROUND]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get liquid() {\n        var _a;\n        return ((_a = this._tiles[Layer.LIQUID]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get surface() {\n        var _a;\n        return ((_a = this._tiles[Layer.SURFACE]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get gas() {\n        var _a;\n        return ((_a = this._tiles[Layer.GAS]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get groundTile() {\n        return this._tiles[Layer.GROUND] || TILES.NULL;\n    }\n    get liquidTile() {\n        return this._tiles[Layer.LIQUID] || TILES.NULL;\n    }\n    get surfaceTile() {\n        return this._tiles[Layer.SURFACE] || TILES.NULL;\n    }\n    get gasTile() {\n        return this._tiles[Layer.GAS] || TILES.NULL;\n    }\n    dump() {\n        if (this.actor)\n            return this.actor.sprite.ch;\n        if (this.item)\n            return this.item.sprite.ch;\n        for (let i = this._tiles.length - 1; i >= 0; --i) {\n            if (!this._tiles[i])\n                continue;\n            const tile = this._tiles[i] || TILES.NULL;\n            if (tile.sprite.ch)\n                return tile.sprite.ch;\n        }\n        return TILES.NULL.sprite.ch;\n    }\n    get changed() {\n        return (this.flags & Flags.CELL_CHANGED) > 0;\n    }\n    set changed(v) {\n        if (v) {\n            this.flags |= Flags.CELL_CHANGED;\n        }\n        else {\n            this.flags &= ~Flags.CELL_CHANGED;\n        }\n    }\n    isVisible() {\n        return this.flags & Flags.VISIBLE ? true : false;\n    }\n    isAnyKindOfVisible() {\n        return (this.flags &\n            Flags.ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isOrWasAnyKindOfVisible() {\n        return (this.flags &\n            Flags.IS_WAS_ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isRevealed(orMapped = false) {\n        const flag = Flags.REVEALED | (orMapped ? Flags.MAGIC_MAPPED : 0);\n        return (this.flags & flag) > 0;\n    }\n    listInSidebar() {\n        return this.hasLayerFlag(LayerFlags.L_LIST_IN_SIDEBAR, true);\n    }\n    get needsRedraw() {\n        return (this.flags & Flags.NEEDS_REDRAW) > 0;\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags |= Flags.NEEDS_REDRAW;\n        }\n        else {\n            this.flags &= ~Flags.NEEDS_REDRAW;\n        }\n    }\n    // TODO - Use functions in LIGHT to check these on cell.light directly???\n    hasVisibleLight() {\n        return Light.intensity(this.light) > CONFIG.light.INTENSITY_DARK;\n    } // TODO\n    isDark(darkColor) {\n        const intensity = darkColor\n            ? Light.intensity(darkColor)\n            : CONFIG.light.INTENSITY_DARK;\n        return Light.intensity(this.light) <= intensity;\n    } // TODO\n    get lightChanged() {\n        return (this.flags & Flags.LIGHT_CHANGED) > 0;\n    }\n    set lightChanged(v) {\n        if (v) {\n            this.flags |= Flags.LIGHT_CHANGED | Flags.NEEDS_REDRAW;\n        }\n        else {\n            this.flags &= ~Flags.LIGHT_CHANGED;\n        }\n    }\n    tile(layer = Layer.GROUND) {\n        return this._tiles[layer] || TILES.NULL;\n    }\n    tileId(layer = Layer.GROUND) {\n        var _a;\n        return ((_a = this._tiles[layer]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    volume(layer = Layer.GAS) {\n        if (layer === Layer.GAS)\n            return this.gasVolume;\n        if (layer === Layer.LIQUID)\n            return this.liquidVolume;\n        return 0;\n    }\n    setVolume(layer, volume = 0) {\n        if (layer === Layer.GAS) {\n            this.gasVolume = volume;\n        }\n        else if (layer === Layer.LIQUID) {\n            this.liquidVolume = volume;\n        }\n    }\n    *tiles() {\n        for (let tile of this._tiles) {\n            if (tile) {\n                yield tile;\n            }\n        }\n    }\n    layerFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.layerFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags.layer;\n        }\n        return flags;\n    }\n    tileFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags.tile;\n        }\n        return flags;\n    }\n    tileMechFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileMechFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags.tileMech;\n        }\n        return flags;\n    }\n    hasLayerFlag(flag, limitToPlayerKnowledge = false) {\n        const flags = this.layerFlags(limitToPlayerKnowledge);\n        return !!(flag & flags);\n    }\n    hasAllLayerFlags(flag, limitToPlayerKnowledge = false) {\n        const flags = this.layerFlags(limitToPlayerKnowledge);\n        return (flag & flags) === flag;\n    }\n    hasTileFlag(flagMask, limitToPlayerKnowledge = false) {\n        const tileFlags = this.tileFlags(limitToPlayerKnowledge);\n        return !!(flagMask & tileFlags);\n    }\n    hasAllTileFlags(flags, limitToPlayerKnowledge = false) {\n        return (flags & this.tileFlags(limitToPlayerKnowledge)) === flags;\n    }\n    hasTileMechFlag(flagMask, limitToPlayerKnowledge = false) {\n        const mechFlags = this.tileMechFlags(limitToPlayerKnowledge);\n        return !!(flagMask & mechFlags);\n    }\n    hasAllTileMechFlags(flags, limitToPlayerKnowledge = false) {\n        return (flags & this.tileMechFlags(limitToPlayerKnowledge)) === flags;\n    }\n    setFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags |= cellFlag;\n        this.mechFlags |= cellMechFlag;\n        // this.flags |= Flags.NEEDS_REDRAW;\n    }\n    clearFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags &= ~cellFlag;\n        this.mechFlags &= ~cellMechFlag;\n        // if ((~cellFlag) & Flags.NEEDS_REDRAW) {\n        //   this.flags |= Flags.NEEDS_REDRAW;\n        // }\n    }\n    hasFlag(flag, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellFlags\n            : this.flags;\n        return (flag & flags) > 0;\n    }\n    hasMechFlag(flag, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellMechFlags\n            : this.mechFlags;\n        return (flag & flags) > 0;\n    }\n    hasTile(tile) {\n        let id;\n        if (typeof tile === 'string') {\n            id = tile;\n        }\n        else {\n            id = tile.id;\n        }\n        return this._tiles.some((t) => t && t.id === id);\n    }\n    // hasTileInGroup(...groups) {\n    //   if (groups.length == 1 && Array.isArray(groups[0])) {\n    //     groups = groups[0];\n    //   }\n    //   return this.layers.some( (tileId) => {\n    //     const tile = TILES[tileId] || TILES.NOTHING;\n    //     return Utils.intersect(groups, tile.groups);\n    //   });\n    // }\n    // promotedTileFlags() {\n    //   return this.successorTileFlags(\"promote\");\n    // }\n    // discoveredTileFlags() {\n    //   return this.successorTileFlags(\"discover\");\n    // }\n    // hasDiscoveredTileFlag(flag: number) {\n    //   // if (!this.hasTileMechFlag(TM_IS_SECRET)) return false;\n    //   return this.discoveredTileFlags() & flag;\n    // }\n    topmostTile(skipGas = false) {\n        let best = TILES.NULL;\n        let bestPriority = -10000;\n        for (let layer = Layer.GROUND; layer <= (skipGas ? Layer.LIQUID : Layer.GAS); ++layer) {\n            // @ts-ignore\n            const tile = this._tiles[layer];\n            if (!tile)\n                continue;\n            if (tile.priority > bestPriority) {\n                best = tile;\n                bestPriority = tile.priority;\n            }\n        }\n        return best;\n    }\n    tileWithLayerFlag(layerFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags.layer & layerFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileWithFlag(tileFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags.tile & tileFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileWithMechFlag(mechFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags.tileMech & mechFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileDesc() {\n        return this.topmostTile().desc;\n    }\n    tileFlavor() {\n        return this.topmostTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.topmostTile().getName(opts);\n    }\n    isNull() {\n        return this.ground === null;\n    }\n    isClear() {\n        return (this.liquid === null && this.gas === null && this.surface === null);\n    }\n    isEmpty() {\n        return !(this._actor || this._item);\n    }\n    isMoveableNow(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const layerFlags = useMemory\n            ? this.memory.layerFlags\n            : this.layerFlags(false);\n        return (layerFlags & LayerFlags.L_BLOCKS_MOVE) === 0;\n    }\n    isWalkableNow(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const layerFlags = useMemory\n            ? this.memory.layerFlags\n            : this.layerFlags(false);\n        if (layerFlags & LayerFlags.L_BLOCKS_MOVE)\n            return false;\n        const tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        if (!(tileFlags & TileFlags.T_IS_DEEP_LIQUID))\n            return true;\n        return (tileFlags & TileFlags.T_BRIDGE) > 0;\n    }\n    canBeWalked(limitToPlayerKnowledge = false) {\n        if (this.isWalkableNow(limitToPlayerKnowledge))\n            return true;\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const layerFlags = useMemory\n            ? this.memory.layerFlags\n            : this.layerFlags(false);\n        return (layerFlags & LayerFlags.L_SECRETLY_PASSABLE) > 0;\n    }\n    isWall(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let layerFlags = useMemory ? this.memory.layerFlags : this.layerFlags();\n        return (layerFlags & LayerFlags.L_IS_WALL) === LayerFlags.L_IS_WALL;\n    }\n    isObstruction(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let layerFlags = useMemory ? this.memory.layerFlags : this.layerFlags();\n        return !!(layerFlags & LayerFlags.L_BLOCKS_DIAGONAL);\n    }\n    isDoorway(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let layerFlags = useMemory ? this.memory.layerFlags : this.layerFlags();\n        return ((layerFlags & LayerFlags.L_BLOCKS_VISION) > 0 &&\n            (layerFlags & LayerFlags.L_BLOCKS_MOVE) === 0);\n    }\n    isSecretDoorway(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge)\n            return false;\n        const layerFlags = this.layerFlags(limitToPlayerKnowledge);\n        return (layerFlags & LayerFlags.L_SECRETLY_PASSABLE) > 0;\n    }\n    blocksPathing(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        if (!this.isWalkableNow(limitToPlayerKnowledge))\n            return true;\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_PATHING_BLOCKER);\n    }\n    blocksVision() {\n        const layerFlags = this.layerFlags();\n        return !!(layerFlags & LayerFlags.L_BLOCKS_VISION);\n    }\n    blocksEffects() {\n        const layerFlags = this.layerFlags();\n        return !!(layerFlags & LayerFlags.L_BLOCKS_EFFECTS);\n    }\n    isLiquid(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_IS_DEEP_LIQUID);\n    }\n    // TODO - Should this look at the tiles instead of the flags?\n    // What if a gas tile is not set with T_GAS?\n    // Should we force T_GAS if layer === GAS when creating a tile?\n    // Should these be cell flags - indicating we have this layer\n    hasGas(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let cellFlags = useMemory ? this.memory.cellFlags : this.flags;\n        return !!(cellFlags & Flags.HAS_GAS);\n    }\n    // TODO - Check floor and actor\n    hasKey() {\n        return false;\n    }\n    markRevealed() {\n        this.flags &= ~Flags.STABLE_MEMORY;\n        if (this.flags & Flags.REVEALED)\n            return false;\n        this.flags |= Flags.REVEALED;\n        return !this.isWall();\n    }\n    obstructsLayer(depth) {\n        return (depth === Layer.SURFACE &&\n            this.hasLayerFlag(LayerFlags.L_BLOCKS_SURFACE));\n    }\n    setTile(tileId = null, volume = 0, map) {\n        map = map || DATA.map;\n        let tile;\n        if (tileId === null) {\n            tile = TILES.NULL;\n            tileId = null;\n        }\n        else if (typeof tileId === 'string') {\n            tile = TILES[tileId];\n        }\n        else if (tileId instanceof Tile) {\n            tile = tileId;\n            tileId = tile.id;\n        }\n        if (!tile) {\n            return Utils.ERROR('Unknown tile - ' + tileId);\n        }\n        if (tile.layer > 0 && !this._tiles[0]) {\n            this.setTile(tile.defaultGround || TILES.FLOOR, 0, map); // TODO - do not use FLOOR?  Does map have the tile to use?\n        }\n        const oldTile = this._tiles[tile.layer] || TILES.NULL;\n        const oldTileId = oldTile === TILES.NULL ? null : oldTile.id;\n        if (oldTile.blocksPathing() != tile.blocksPathing()) {\n            DATA.staleLoopMap = true;\n        }\n        if (tile.flags.tile & TileFlags.T_IS_FIRE &&\n            !(oldTile.flags.tile & TileFlags.T_IS_FIRE)) {\n            this.mechFlags |= MechFlags.CAUGHT_FIRE_THIS_TURN;\n        }\n        const blocksVision = tile.flags.layer & LayerFlags.L_BLOCKS_VISION;\n        const oldBlocksVision = oldTile.flags.layer & LayerFlags.L_BLOCKS_VISION;\n        if (map &&\n            this.isAnyKindOfVisible() &&\n            blocksVision != oldBlocksVision) {\n            map.setFlag(MapFlags.MAP_FOV_CHANGED);\n        }\n        if (oldTileId !== null)\n            this.removeLayer(oldTile);\n        this._tiles[tile.layer] = tileId === null ? null : tile;\n        if (tileId !== null)\n            this.addLayer(tile);\n        let layerFlag = 0;\n        if (tile.layer == Layer.LIQUID) {\n            layerFlag = Flags.HAS_LIQUID;\n            this.liquidVolume =\n                volume + (tileId == oldTileId ? this.liquidVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_LIQUID);\n        }\n        else if (tile.layer == Layer.GAS) {\n            layerFlag = Flags.HAS_GAS;\n            this.gasVolume =\n                volume + (tileId == oldTileId ? this.gasVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_GAS);\n        }\n        else if (tile.layer === Layer.SURFACE) {\n            layerFlag = Flags.HAS_SURFACE;\n        }\n        if (tileId) {\n            this.flags |= layerFlag;\n        }\n        else {\n            this.flags &= ~layerFlag;\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED | Flags.NEEDS_REDRAW;\n        if (map && oldTile.light !== tile.light) {\n            map.clearFlag(MapFlags.MAP_STABLE_GLOW_LIGHTS | MapFlags.MAP_STABLE_LIGHTS);\n        }\n        return true;\n    }\n    clearLayer(depth) {\n        // @ts-ignore\n        if (typeof depth === 'string')\n            depth = Layer[depth];\n        const current = this._tiles[depth];\n        if (current) {\n            // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n            this.flags |= Flags.CELL_CHANGED;\n            this.removeLayer(current);\n        }\n        this._tiles[depth] = null;\n        let layerFlag = 0;\n        if (depth == Layer.LIQUID) {\n            layerFlag = Flags.HAS_LIQUID;\n            this.liquidVolume = 0;\n        }\n        else if (depth == Layer.GAS) {\n            layerFlag = Flags.HAS_GAS;\n            this.gasVolume = 0;\n        }\n        else if (depth == Layer.SURFACE) {\n            layerFlag = Flags.HAS_SURFACE;\n        }\n        else if (depth == Layer.GROUND) {\n            this._tiles[Layer.GROUND] = TILES.FLOOR; // TODO - ????!!!\n        }\n        this.flags &= ~layerFlag;\n    }\n    clearLayersExcept(except = Layer.GROUND, ground) {\n        const floorTile = ground ? TILES[ground] : this.groundTile;\n        for (let layer = 0; layer < this._tiles.length; layer++) {\n            if (layer != except && layer != Layer.GAS) {\n                if (layer === Layer.GROUND) {\n                    if (floorTile !== this.groundTile)\n                        this.setTile(floorTile);\n                }\n                else {\n                    this.clearLayer(layer);\n                }\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    clearLayersWithFlags(tileFlags, tileMechFlags = 0) {\n        for (let i = 0; i < this._tiles.length; ++i) {\n            const tile = this._tiles[i];\n            if (!tile)\n                continue;\n            if (tileFlags && tileMechFlags) {\n                if (tile.flags.tile & tileFlags &&\n                    tile.flags.tileMech & tileMechFlags) {\n                    this.clearLayer(i);\n                }\n            }\n            else if (tileFlags) {\n                if (tile.flags.tile & tileFlags) {\n                    this.clearLayer(i);\n                }\n            }\n            else if (tileMechFlags) {\n                if (tile.flags.tileMech & tileMechFlags) {\n                    this.clearLayer(i);\n                }\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n    }\n    // EVENTS\n    async activate(name, map, x, y, ctx = {}) {\n        ctx.cell = this;\n        let fired = false;\n        if (ctx.layer !== undefined) {\n            const tile = this.tile(ctx.layer);\n            if (tile && tile.activates) {\n                const ev = tile.activates[name];\n                let effect;\n                if (typeof ev === 'string') {\n                    effect = Effect.effects[ev];\n                }\n                else {\n                    effect = ev;\n                }\n                if (effect) {\n                    // console.log(' - has event');\n                    if (ctx.force ||\n                        !effect.chance ||\n                        random.chance(effect.chance, 10000)) {\n                        ctx.tile = tile;\n                        // console.log(' - spawn event @%d,%d - %s', x, y, name);\n                        fired = await effect.fire(map, x, y, ctx);\n                        // cell.debug(\" - spawned\");\n                    }\n                }\n            }\n        }\n        else {\n            // console.log('fire event - %s', name);\n            for (let tile of this.tiles()) {\n                if (!tile.activates)\n                    continue;\n                const ev = tile.activates[name];\n                // console.log(' - ', ev);\n                let effect;\n                if (typeof ev === 'string') {\n                    effect = Effect.effects[ev];\n                }\n                else {\n                    effect = ev;\n                }\n                if (effect) {\n                    // cell.debug(\" - has event\");\n                    if (ctx.force ||\n                        !effect.chance ||\n                        random.chance(effect.chance, 10000)) {\n                        ctx.tile = tile;\n                        // console.log(' - spawn event @%d,%d - %s', x, y, name);\n                        fired = (await effect.fire(map, x, y, ctx)) || fired;\n                        // cell.debug(\" - spawned\");\n                        if (fired) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return fired;\n    }\n    activatesOn(name) {\n        for (let tile of this.tiles()) {\n            if (tile.activatesOn(name))\n                return true;\n        }\n        return false;\n    }\n    // ITEM\n    get item() {\n        return this._item;\n    }\n    set item(item) {\n        if (this.item) {\n            this.removeLayer(this.item);\n        }\n        this._item = item;\n        if (item) {\n            this.flags |= Flags.HAS_ITEM;\n            this.addLayer(item);\n        }\n        else {\n            this.flags &= ~Flags.HAS_ITEM;\n        }\n    }\n    // ACTOR\n    get actor() {\n        return this._actor;\n    }\n    set actor(actor) {\n        if (this.actor) {\n            this.removeLayer(this.actor);\n        }\n        this._actor = actor;\n        if (actor) {\n            this.flags |= Flags.HAS_ANY_ACTOR;\n            this.addLayer(actor);\n        }\n        else {\n            this.flags &= ~Flags.HAS_ANY_ACTOR;\n        }\n    }\n    addLayer(layer) {\n        if (!layer)\n            return;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        let current = this.layers;\n        if (!current ||\n            current.layer.layer > layer.layer ||\n            (current.layer.layer == layer.layer &&\n                current.layer.priority > layer.priority)) {\n            this.layers = {\n                layer,\n                next: current,\n            };\n            return;\n        }\n        while (current.next &&\n            (current.layer.layer < layer.layer ||\n                (current.layer.layer == layer.layer &&\n                    current.layer.priority <= layer.priority))) {\n            current = current.next;\n        }\n        const item = {\n            layer,\n            next: current.next,\n        };\n        current.next = item;\n    }\n    removeLayer(layer) {\n        if (!layer)\n            return false;\n        if (!this.layers)\n            return false;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        if (this.layers && this.layers.layer === layer) {\n            this.layers = this.layers.next;\n            return true;\n        }\n        let prev = this.layers;\n        let current = this.layers.next;\n        while (current) {\n            if (current.layer === layer) {\n                prev.next = current.next;\n                return true;\n            }\n            prev = current;\n            current = current.next;\n        }\n        return false;\n    }\n    // MEMORY\n    storeMemory() {\n        const memory = this.memory;\n        memory.tileFlags = this.tileFlags();\n        memory.tileMechFlags = this.tileMechFlags();\n        memory.layerFlags = this.layerFlags();\n        memory.cellFlags = this.flags;\n        memory.cellMechFlags = this.mechFlags;\n        memory.tile = this.topmostTile();\n        if (this.item) {\n            memory.item = this.item;\n            memory.itemQuantity = this.item.quantity;\n        }\n        else {\n            memory.item = null;\n            memory.itemQuantity = 0;\n        }\n        memory.actor = this.actor;\n        getAppearance(this, memory.mixer);\n        if (this.actor && this.isOrWasAnyKindOfVisible()) {\n            if (this.actor.rememberedInCell &&\n                this.actor.rememberedInCell !== this) {\n                // console.log(\"remembered in cell change\");\n                this.actor.rememberedInCell.storeMemory();\n                this.actor.rememberedInCell.flags |= Flags.NEEDS_REDRAW;\n            }\n            this.actor.rememberedInCell = this;\n        }\n    }\n}\nexport function make(tile) {\n    const cell = new Cell();\n    if (tile) {\n        cell.setTile(tile);\n    }\n    return cell;\n}\nMake.cell = make;\nexport function getAppearance(cell, dest) {\n    const memory = cell.memory.mixer;\n    memory.blackOut();\n    let needDistinctness = cell.layerFlags() & LayerFlags.L_VISUALLY_DISTINCT;\n    let current = cell.layers;\n    while (current) {\n        const layer = current.layer;\n        let alpha = layer.sprite.opacity || 100;\n        if (layer.layer == Layer.LIQUID) {\n            alpha = Utils.clamp(cell.liquidVolume * 34, 20, 100);\n        }\n        else if (layer.layer == Layer.GAS) {\n            alpha = Utils.clamp(cell.gasVolume * 34, 20, 100);\n        }\n        memory.drawSprite(layer.sprite, alpha);\n        current = current.next;\n    }\n    memory.fg.multiply(cell.light);\n    memory.bg.multiply(cell.light);\n    memory.bake(!cell.isAnyKindOfVisible()); // turns off dancing if not visible\n    if (needDistinctness) {\n        Color.separate(memory.fg, memory.bg);\n    }\n    dest.drawSprite(memory);\n    return true;\n}\n","import * as GW from 'gw-utils';\nimport * as Flags from './flags';\nimport * as Map from './map';\nfunction demoteCellVisibility(cell) {\n    cell.flags &= ~(Flags.Cell.WAS_ANY_KIND_OF_VISIBLE | Flags.Cell.IN_FOV);\n    if (cell.flags & Flags.Cell.VISIBLE) {\n        cell.flags &= ~Flags.Cell.VISIBLE;\n        cell.flags |= Flags.Cell.WAS_VISIBLE;\n    }\n    if (cell.flags & Flags.Cell.CLAIRVOYANT_VISIBLE) {\n        cell.flags &= ~Flags.Cell.CLAIRVOYANT_VISIBLE;\n        cell.flags |= Flags.Cell.WAS_CLAIRVOYANT_VISIBLE;\n    }\n    if (cell.flags & Flags.Cell.TELEPATHIC_VISIBLE) {\n        cell.flags &= ~Flags.Cell.TELEPATHIC_VISIBLE;\n        cell.flags |= Flags.Cell.WAS_TELEPATHIC_VISIBLE;\n    }\n}\nfunction _updateCellVisibility(cell, i, j, map) {\n    const isVisible = cell.flags & Flags.Cell.VISIBLE;\n    const wasVisible = cell.flags & Flags.Cell.WAS_VISIBLE;\n    if (isVisible && wasVisible) {\n        if (cell.lightChanged) {\n            map.redrawCell(cell);\n        }\n    }\n    else if (isVisible && !wasVisible) {\n        // if the cell became visible this move\n        if (!(cell.flags & Flags.Cell.REVEALED) && GW.data.automationActive) {\n            if (cell.item) {\n                const theItem = cell.item;\n                if (theItem.hasLayerFlag(Flags.Entity.L_INTERRUPT_WHEN_SEEN)) {\n                    GW.message.add('§you§ §see§ ΩitemMessageColorΩ§item§∆.', {\n                        item: theItem,\n                        actor: GW.data.player,\n                    });\n                }\n            }\n            if (!(cell.flags & Flags.Cell.MAGIC_MAPPED) &&\n                cell.hasLayerFlag(Flags.Entity.L_INTERRUPT_WHEN_SEEN)) {\n                const tile = cell.tileWithLayerFlag(Flags.Entity.L_INTERRUPT_WHEN_SEEN);\n                if (tile) {\n                    GW.message.add('§you§ §see§ ΩbackgroundMessageColorΩ§item§∆.', {\n                        actor: GW.data.player,\n                        item: tile.name,\n                    });\n                }\n            }\n        }\n        map.markRevealed(i, j);\n        map.redrawCell(cell);\n    }\n    else if (!isVisible && wasVisible) {\n        // if the cell ceased being visible this move\n        cell.storeMemory();\n        map.redrawCell(cell);\n    }\n    return isVisible;\n}\nfunction _updateCellClairyvoyance(cell, _i, _j, map) {\n    const isClairy = cell.flags & Flags.Cell.CLAIRVOYANT_VISIBLE;\n    const wasClairy = cell.flags & Flags.Cell.WAS_CLAIRVOYANT_VISIBLE;\n    if (isClairy && wasClairy) {\n        if (cell.lightChanged) {\n            map.redrawCell(cell);\n        }\n    }\n    else if (!isClairy && wasClairy) {\n        // ceased being clairvoyantly visible\n        cell.storeMemory();\n        map.redrawCell(cell);\n    }\n    else if (!wasClairy && isClairy) {\n        // became clairvoyantly visible\n        cell.flags &= ~Flags.Cell.STABLE_MEMORY;\n        map.redrawCell(cell);\n    }\n    return isClairy;\n}\nfunction _updateCellTelepathy(cell, _i, _j, map) {\n    const isTele = cell.flags & Flags.Cell.TELEPATHIC_VISIBLE;\n    const wasTele = cell.flags & Flags.Cell.WAS_TELEPATHIC_VISIBLE;\n    if (isTele && wasTele) {\n        if (cell.lightChanged) {\n            map.redrawCell(cell);\n        }\n    }\n    else if (!isTele && wasTele) {\n        // ceased being telepathically visible\n        cell.storeMemory();\n        map.redrawCell(cell);\n    }\n    else if (!wasTele && isTele) {\n        // became telepathically visible\n        if (!(cell.flags & Flags.Cell.REVEALED) &&\n            !cell.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER)) {\n            GW.data.xpxpThisTurn++;\n        }\n        cell.flags &= ~Flags.Cell.STABLE_MEMORY;\n        map.redrawCell(cell);\n    }\n    return isTele;\n}\nfunction _updateCellDetect(cell, _i, _j, map) {\n    const isMonst = cell.flags & Flags.Cell.MONSTER_DETECTED;\n    const wasMonst = cell.flags & Flags.Cell.WAS_MONSTER_DETECTED;\n    if (isMonst && wasMonst) {\n        if (cell.lightChanged) {\n            map.redrawCell(cell);\n        }\n    }\n    else if (!isMonst && wasMonst) {\n        // ceased being detected visible\n        cell.flags &= ~Flags.Cell.STABLE_MEMORY;\n        map.redrawCell(cell);\n        cell.storeMemory();\n    }\n    else if (!wasMonst && isMonst) {\n        // became detected visible\n        cell.flags &= ~Flags.Cell.STABLE_MEMORY;\n        map.redrawCell(cell);\n        cell.storeMemory();\n    }\n    return isMonst;\n}\nfunction promoteCellVisibility(cell, i, j, map) {\n    if (cell.flags & Flags.Cell.IN_FOV &&\n        map.hasVisibleLight(i, j) &&\n        !(cell.mechFlags & Flags.CellMech.DARKENED)) {\n        cell.flags |= Flags.Cell.VISIBLE;\n    }\n    if (_updateCellVisibility(cell, i, j, map))\n        return;\n    if (_updateCellClairyvoyance(cell, i, j, map))\n        return;\n    if (_updateCellTelepathy(cell, i, j, map))\n        return;\n    if (_updateCellDetect(cell, i, j, map))\n        return;\n}\nexport function initMap(map) {\n    if (!(map.flags & Map.Flags.MAP_CALC_FOV)) {\n        map.forEach((cell) => (cell.flags |= Flags.Cell.REVEALED));\n        return;\n    }\n    map.clearFlags(0, Flags.Cell.IS_WAS_ANY_KIND_OF_VISIBLE);\n}\nexport function update(map, x, y, maxRadius) {\n    if (!(map.flags & Map.Flags.MAP_CALC_FOV) || !map.fov)\n        return false;\n    if (x == map.fov.x && y == map.fov.y) {\n        if (!(map.flags & Flags.Map.MAP_FOV_CHANGED))\n            return false;\n    }\n    map.flags &= ~Flags.Map.MAP_FOV_CHANGED;\n    map.fov.x = x;\n    map.fov.y = y;\n    map.forEach(demoteCellVisibility);\n    // Calculate player's field of view (distinct from what is visible, as lighting hasn't been done yet).\n    const grid = GW.grid.alloc(map.width, map.height, 0);\n    map.calcFov(grid, x, y, maxRadius);\n    grid.forEach((v, i, j) => {\n        if (v) {\n            map.setCellFlags(i, j, Flags.Cell.IN_FOV);\n        }\n    });\n    GW.grid.free(grid);\n    map.setCellFlags(x, y, Flags.Cell.IN_FOV | Flags.Cell.VISIBLE);\n    // if (PLAYER.bonus.clairvoyance < 0) {\n    //   discoverCell(PLAYER.xLoc, PLAYER.yLoc);\n    // }\n    //\n    // if (PLAYER.bonus.clairvoyance != 0) {\n    // \tupdateClairvoyance();\n    // }\n    //\n    // updateTelepathy();\n    // updateMonsterDetection();\n    // updateLighting();\n    map.forEach(promoteCellVisibility);\n    // if (PLAYER.status.hallucinating > 0) {\n    // \tfor (theItem of DUNGEON.items) {\n    // \t\tif ((pmap[theItem.xLoc][theItem.yLoc].flags & DISCOVERED) && refreshDisplay) {\n    // \t\t\trefreshDungeonCell(theItem.xLoc, theItem.yLoc);\n    // \t\t}\n    // \t}\n    // \tfor (monst of DUNGEON.monsters) {\n    // \t\tif ((pmap[monst.xLoc][monst.yLoc].flags & DISCOVERED) && refreshDisplay) {\n    // \t\t\trefreshDungeonCell(monst.xLoc, monst.yLoc);\n    // \t\t}\n    // \t}\n    // }\n    return true;\n}\n","import * as GW from 'gw-utils';\nimport * as Cell from './cell';\nimport * as Tile from './tile';\nimport * as Entity from './entity';\nconst Flags = GW.effect.Flags;\nexport function makeTileEffect(config) {\n    if (!config) {\n        GW.utils.ERROR('Config required to make tile effect.');\n        return null;\n    }\n    if (typeof config === 'string') {\n        config = config.split(/[,|]/).map((t) => t.trim());\n    }\n    if (Array.isArray(config)) {\n        config = {\n            id: config[0],\n            spread: config[1] || 0,\n            decrement: config[2] || 0,\n        };\n    }\n    config.id = config.id || config.tile;\n    config.spread = config.spread || 0;\n    config.decrement = config.decrement || 0;\n    if (config.spread >= 100 && config.decrement <= 0) {\n        config.decrement = 100;\n    }\n    config.matchTile = config.matchTile || config.match || config.needs || null;\n    config.volume = config.volume || 0;\n    if (!config.id) {\n        GW.utils.ERROR('id required to make tile effect.');\n    }\n    return tileEffect.bind(config);\n}\nGW.effect.installType('tile', makeTileEffect);\nexport async function tileEffect(effect, x, y) {\n    const id = this.id;\n    const tile = Tile.tiles[id] || null;\n    if (!tile)\n        return false;\n    const abortIfBlocking = !!(effect.flags & Flags.E_ABORT_IF_BLOCKS_MAP);\n    const isBlocking = !!(abortIfBlocking &&\n        !(effect.flags & Flags.E_PERMIT_BLOCKING) &&\n        (tile.blocksPathing() || effect.flags & Flags.E_TREAT_AS_BLOCKING));\n    let didSomething = false;\n    const map = effect.map;\n    didSomething = computeSpawnMap(this, effect, x, y);\n    if (!didSomething) {\n        return false;\n    }\n    if (abortIfBlocking &&\n        isBlocking &&\n        map.gridDisruptsWalkability(effect.grid)) {\n        // GW.grid.free(spawnMap);\n        return false;\n    }\n    if (effect.flags & Flags.E_EVACUATE_CREATURES) {\n        // first, evacuate creatures, so that they do not re-trigger the tile.\n        if (evacuateCreatures(map, effect.grid)) {\n            didSomething = true;\n        }\n    }\n    if (effect.flags & Flags.E_EVACUATE_ITEMS) {\n        // first, evacuate items, so that they do not re-trigger the tile.\n        if (evacuateItems(map, effect.grid)) {\n            didSomething = true;\n        }\n    }\n    if (effect.flags & Flags.E_CLEAR_CELL) {\n        // first, clear other tiles (not base/ground)\n        if (clearCells(map, effect.grid)) {\n            didSomething = true;\n        }\n    }\n    const spawned = spawnTiles(effect.flags, effect.grid, effect.map, tile, this.volume);\n    if (spawned) {\n        didSomething = true;\n        // await spawnMap.forEachAsync( (v, x, y) => {\n        //     if (!v) return;\n        //     await map.applyInstantEffects(x, y);\n        // });\n        // if (applyEffects) {\n        // if (PLAYER.xLoc == i && PLAYER.yLoc == j && !PLAYER.status.levitating && refresh) {\n        // \tflavorMessage(tileFlavor(PLAYER.xLoc, PLAYER.yLoc));\n        // }\n        // if (cell.actor || cell.item) {\n        // \tfor(let t of cell.tiles()) {\n        // \t\tawait t.applyInstantEffects(map, i, j, cell);\n        // \t\tif (Data.gameHasEnded) {\n        // \t\t\treturn true;\n        // \t\t}\n        // \t}\n        // }\n        // if (tile.flags & TileFlags.T_IS_FIRE) {\n        // \tif (cell.flags & CellFlags.HAS_ITEM) {\n        // \t\ttheItem = map.itemAt(i, j);\n        // \t\tif (theItem.flags & Flags.Item.ITEM_FLAMMABLE) {\n        // \t\t\tawait burnItem(theItem);\n        // \t\t}\n        // \t}\n        // }\n        // }\n    }\n    // GW.grid.free(spawnMap);\n    return didSomething;\n}\n// tick\nexport async function fireAll(map, event) {\n    const willFire = GW.grid.alloc(map.width, map.height);\n    // Figure out which tiles will fire - before we change everything...\n    map.forEach((cell, x, y) => {\n        cell.clearFlags(0, Cell.MechFlags.EVENT_FIRED_THIS_TURN);\n        for (let tile of cell.tiles()) {\n            const effect = GW.effect.from(tile.activates[event]);\n            if (!effect)\n                continue;\n            let promoteChance = 0;\n            // < 0 means try to fire my neighbors...\n            if (effect.chance < 0) {\n                promoteChance = 0;\n                map.eachNeighbor(x, y, (n, _i, _j) => {\n                    if (!n.hasLayerFlag(Entity.Flags.L_BLOCKS_EFFECTS) &&\n                        n.tileId(tile.layer) != cell.tileId(tile.layer) &&\n                        !(n.mechFlags &\n                            Cell.MechFlags.CAUGHT_FIRE_THIS_TURN)) {\n                        // TODO - Should this break from the loop after doing this once or keep going?\n                        promoteChance += -1 * effect.chance;\n                    }\n                }, true);\n            }\n            else {\n                promoteChance = effect.chance || 100 * 100; // 100%\n            }\n            if (!(cell.mechFlags & Cell.MechFlags.CAUGHT_FIRE_THIS_TURN) &&\n                GW.random.chance(promoteChance, 10000)) {\n                willFire[x][y] |= GW.flag.fl(tile.layer);\n                cell.mechFlags |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n            }\n        }\n    });\n    // Then activate them - so that we don't activate the next generation as part of the forEach\n    await willFire.forEachAsync(async (w, x, y) => {\n        if (!w)\n            return;\n        const cell = map.cell(x, y);\n        for (let layer = 0; layer <= Entity.Layer.GAS; ++layer) {\n            if (w & GW.flag.fl(layer)) {\n                await cell.activate(event, map, x, y, { force: true, layer });\n            }\n        }\n    });\n    GW.grid.free(willFire);\n}\n// Spawn\nexport function spawnTiles(flags, spawnMap, map, tile, volume = 0) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = flags & Flags.E_BLOCKED_BY_OTHER_LAYERS;\n    const superpriority = flags & Flags.E_SUPERPRIORITY;\n    // const applyEffects = ctx.refreshCell;\n    volume = volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            const isRoot = spawnMap[i][j] === 1;\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.mechFlags & Cell.MechFlags.EVENT_FIRED_THIS_TURN &&\n                !isRoot) {\n                continue;\n            }\n            if (cell.tile(tile.layer) === tile) {\n                // If the new cell already contains the fill terrain,\n                if (tile.layer == Entity.Layer.GAS) {\n                    spawnMap[i][j] = 1;\n                    cell.gasVolume += volume;\n                }\n                else if (tile.layer == Entity.Layer.LIQUID) {\n                    spawnMap[i][j] = 1;\n                    cell.liquidVolume += volume;\n                }\n            }\n            else if ((superpriority ||\n                cell.tile(tile.layer).priority < tile.priority) && // If the terrain in the layer to be overwritten has a higher priority number (unless superpriority),\n                !cell.obstructsLayer(tile.layer) && // If we will be painting into the surface layer when that cell forbids it,\n                (!cell.item || !(flags & Flags.E_BLOCKED_BY_ITEMS)) &&\n                (!cell.actor || !(flags & Flags.E_BLOCKED_BY_ACTORS)) &&\n                (!blockedByOtherLayers ||\n                    cell.topmostTile().priority < tile.priority) // TODO - highestPriorityTile()\n            ) {\n                // if the fill won't violate the priority of the most important terrain in this cell:\n                spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                map.setTile(i, j, tile, volume);\n                // map.redrawCell(cell);\n                // if (volume && cell.gas) {\n                //     cell.volume += (feat.volume || 0);\n                // }\n                // debug('- tile', i, j, 'tile=', tile.id);\n                // cell.mechFlags |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                accomplishedSomething = true;\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.changed = true;\n    }\n    return accomplishedSomething;\n}\n// Spread\nfunction cellIsOk(config, map, x, y, flags, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (flags & Flags.E_BUILD_IN_WALLS) {\n        if (!cell.isWall())\n            return false;\n    }\n    else if (flags & Flags.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = true;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    else if (flags & Flags.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (cell.isWall())\n            return false; // or on wall\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = false;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    else if (cell.blocksEffects() && !config.matchTile && !isStart) {\n        return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (config.matchTile && !cell.hasTile(config.matchTile))\n        return false;\n    return true;\n}\nexport function computeSpawnMap(config, effect, x, y) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const map = effect.map;\n    const flags = effect.flags;\n    const grid = effect.grid;\n    let startProb = config.spread || 0;\n    let probDec = config.decrement || 0;\n    const spawnMap = grid;\n    spawnMap.fill(0);\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GW.utils.DIRS[dir][0];\n                            y2 = j + GW.utils.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                cellIsOk(config, map, x2, y2, flags, false) &&\n                                GW.random.chance(startProb)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    if (!cellIsOk(config, map, x, y, flags, true)) {\n        spawnMap[x][y] = 0;\n        --count;\n    }\n    return count > 0;\n}\n// export function spreadCircle(\n//     this: any,\n//     ctx: GW.effect.EffectCtx,\n//     spawnMap: GW.grid.NumGrid\n// ) {\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     let radius = 0;\n//     startProb = startProb || 100;\n//     if (startProb >= 100) {\n//         probDec = probDec || 100;\n//     }\n//     while (GW.random.chance(startProb)) {\n//         startProb -= probDec;\n//         ++radius;\n//     }\n//     // startProb = 100;\n//     // probDec = 0;\n//     spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n//         if (!cellIsOk(this, i, j, ctx)) return 0;\n//         // const dist = Math.floor(Utils.distanceBetween(x, y, i, j));\n//         // const prob = startProb - dist * probDec;\n//         // if (!random.chance(prob)) return 0;\n//         return 1;\n//     });\n//     // spawnMap[x][y] = 1;\n//     // if (!isOk(flags, x, y, ctx)) {\n//     //     spawnMap[x][y] = 0;\n//     // }\n//     return true;\n// }\n// export function spreadLine(\n//     this: any,\n//     ctx: GW.effect.EffectCtx,\n//     spawnMap: GW.grid.NumGrid\n// ) {\n//     let x2, y2;\n//     let madeChange;\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     if (startProb) {\n//         madeChange = true;\n//         if (startProb >= 100) {\n//             probDec = probDec || 100;\n//         }\n//         x2 = x;\n//         y2 = y;\n//         const dir = GW.utils.DIRS[GW.random.number(4)];\n//         while (madeChange) {\n//             madeChange = false;\n//             x2 = x2 + dir[0];\n//             y2 = y2 + dir[1];\n//             if (\n//                 spawnMap.hasXY(x2, y2) &&\n//                 !spawnMap[x2][y2] &&\n//                 cellIsOk(this, x2, y2, ctx) &&\n//                 GW.random.chance(startProb)\n//             ) {\n//                 spawnMap[x2][y2] = 1;\n//                 madeChange = true;\n//                 startProb -= probDec;\n//             }\n//         }\n//     }\n//     if (!cellIsOk(this, x, y, ctx)) {\n//         spawnMap[x][y] = 0;\n//     }\n//     return true;\n// }\nexport function clearCells(map, spawnMap) {\n    let didSomething = false;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        map.clearCell(i, j);\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let i, j;\n    let didSomething = false;\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            if (!blockingMap[i][j])\n                continue;\n            const cell = map.cell(i, j);\n            if (!cell.actor)\n                continue;\n            const monst = cell.actor;\n            const loc = map.matchingLocNear(i, j, (cell) => {\n                return !monst.forbidsCell(cell);\n            }, { hallways: true, blockingMap });\n            if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                map.moveActor(loc[0], loc[1], monst);\n                // map.redrawXY(loc[0], loc[1]);\n                didSomething = true;\n            }\n        }\n    }\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    blockingMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (!cell.item)\n            return;\n        const item = cell.item;\n        const loc = map.matchingLocNear(i, j, (dest) => {\n            return !item.forbidsCell(dest);\n        }, { hallways: true, blockingMap });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(item);\n            map.addItem(loc[0], loc[1], item);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import * as GW from 'gw-utils';\nimport * as FLAGS from './flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GW.grid.alloc(map.width, map.height);\n    const grid = GW.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.get(i, j);\n            if ((cell.hasTileFlag(FLAGS.Tile.T_PATHING_BLOCKER) ||\n                cell.hasLayerFlag(FLAGS.Entity.L_BLOCKS_MOVE)) &&\n                !cell.hasLayerFlag(FLAGS.Entity.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~FLAGS.CellMech.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= FLAGS.CellMech.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cells[i][j].mechFlags &= ~FLAGS.CellMech.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cells[i][j].mechFlags & FLAGS.CellMech.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GW.utils.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GW.utils.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GW.utils.CLOCK_DIRS[dir][0];\n                    const newY = j + GW.utils.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cells[i][j].mechFlags |=\n                                    FLAGS.CellMech.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cells[i][j].chokeCount = 30000;\n                if (map.cells[i][j].mechFlags &\n                    FLAGS.CellMech.IS_IN_ROOM_MACHINE) {\n                    passMap[i][j] = 0;\n                }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cells[i][j];\n                if (passMap[i][j] &&\n                    cell.mechFlags & FLAGS.CellMech.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GW.utils.DIRS[dir][0];\n                        const newY = j + GW.utils.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cells[newX][newY].mechFlags &\n                                FLAGS.CellMech.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cells[i2][j2].chokeCount) {\n                                            map.cells[i2][j2].chokeCount = cellCount;\n                                            map.cells[i2][j2].mechFlags &= ~FLAGS.CellMech\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.mechFlags |=\n                                        FLAGS.CellMech.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GW.grid.free(passMap);\n    GW.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    let count = passMap[startX][startY] == 2 ? 5000 : 1;\n    if (map.cells[startX][startY].mechFlags & FLAGS.CellMech.IS_IN_AREA_MACHINE) {\n        count = 10000;\n    }\n    results[startX][startY] = 1;\n    for (let dir = 0; dir < 4; dir++) {\n        const newX = startX + GW.utils.DIRS[dir][0];\n        const newY = startY + GW.utils.DIRS[dir][1];\n        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n            passMap[newX][newY] &&\n            !results[newX][newY]) {\n            count += floodFillCount(map, results, passMap, newX, newY);\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.forEach(resetLoopiness);\n    map.forEach(checkLoopiness);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.hasTileFlag(FLAGS.Tile.T_PATHING_BLOCKER) ||\n        cell.hasLayerFlag(FLAGS.Entity.L_BLOCKS_MOVE)) &&\n        !cell.hasLayerFlag(FLAGS.Entity.L_SECRETLY_PASSABLE)) {\n        cell.mechFlags &= ~FLAGS.CellMech.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.mechFlags |= FLAGS.CellMech.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(cell, x, y, map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    if (!cell || !(cell.mechFlags & FLAGS.CellMech.IS_IN_LOOP)) {\n        return false;\n    }\n    // find an unloopy neighbor to start on\n    for (sdir = 0; sdir < 8; sdir++) {\n        newX = x + GW.utils.CLOCK_DIRS[sdir][0];\n        newY = y + GW.utils.CLOCK_DIRS[sdir][1];\n        if (!map.hasXY(newX, newY))\n            continue;\n        const cell = map.get(newX, newY);\n        if (!cell || !(cell.mechFlags & FLAGS.CellMech.IS_IN_LOOP)) {\n            break;\n        }\n    }\n    if (sdir == 8) {\n        // no unloopy neighbors\n        return false; // leave cell loopy\n    }\n    // starting on this unloopy neighbor,\n    // work clockwise and count up:\n    // (a) the number of strings of loopy neighbors, and\n    // (b) the length of the longest such string.\n    numStrings = maxStringLength = currentStringLength = 0;\n    inString = false;\n    for (dir = sdir; dir < sdir + 8; dir++) {\n        newX = x + GW.utils.CLOCK_DIRS[dir % 8][0];\n        newY = y + GW.utils.CLOCK_DIRS[dir % 8][1];\n        if (!map.hasXY(newX, newY))\n            continue;\n        const newCell = map.get(newX, newY);\n        if (newCell && newCell.mechFlags & FLAGS.CellMech.IS_IN_LOOP) {\n            currentStringLength++;\n            if (!inString) {\n                if (numStrings > 0) {\n                    return false; // more than one string here; leave loopy\n                }\n                numStrings++;\n                inString = true;\n            }\n        }\n        else if (inString) {\n            if (currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            currentStringLength = 0;\n            inString = false;\n        }\n    }\n    if (inString && currentStringLength > maxStringLength) {\n        maxStringLength = currentStringLength;\n    }\n    if (numStrings == 1 && maxStringLength <= 4) {\n        cell.mechFlags &= ~FLAGS.CellMech.IS_IN_LOOP;\n        for (dir = 0; dir < 8; dir++) {\n            const newX = x + GW.utils.CLOCK_DIRS[dir][0];\n            const newY = y + GW.utils.CLOCK_DIRS[dir][1];\n            if (map.hasXY(newX, newY)) {\n                const newCell = map.get(newX, newY);\n                checkLoopiness(newCell, newX, newY, map);\n            }\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cells[x][y];\n            if (cell.mechFlags & FLAGS.CellMech.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cells[x][y - 1];\n                const left = map.cells[x - 1][y];\n                if (up.mechFlags & FLAGS.CellMech.IS_IN_LOOP &&\n                    left.mechFlags & FLAGS.CellMech.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GW.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.get(i, j);\n            if (cell.mechFlags & FLAGS.CellMech.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GW.utils.CLOCK_DIRS[dir][0];\n                    let newY = j + GW.utils.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cells[newX][newY].mechFlags &\n                            FLAGS.CellMech.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cells[i][j].mechFlags &= ~FLAGS.CellMech.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GW.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import { utils as Utils, random, grid as Grid, fov as Fov, flag as Flag, path as Path, color as Color, colors as COLORS, config as CONFIG, data as DATA, make as Make, sprite as Sprite, effect as EFFECT, } from 'gw-utils';\nimport * as Cell from './cell';\nimport * as Tile from './tile';\nimport { Map as Flags, Cell as CellFlags, Tile as TileFlags, CellMech as CellMechFlags, TileMech as TileMechFlags, Layer as TileLayer, Entity as LayerFlags, } from './flags';\nimport * as Light from './light';\nimport * as Entity from './entity';\nimport * as Visibility from './visibility';\nimport * as Effect from './effect';\nexport { Flags };\nexport * from './analyze';\nUtils.setDefaults(CONFIG, {\n    'map.deepestLevel': 99,\n});\nexport class Map {\n    constructor(w, h, opts = {}) {\n        this.locations = {};\n        this.config = {};\n        this._actors = null;\n        this._items = null;\n        this.flags = 0;\n        this.lights = null;\n        this.fov = null;\n        this._width = w;\n        this._height = h;\n        this.cells = Grid.make(w, h, () => new Cell.Cell());\n        this.locations = opts.locations || {};\n        this.config = Object.assign({}, opts);\n        this.config.tick = this.config.tick || 100;\n        this._actors = null;\n        this._items = null;\n        this.flags = Flag.from(Flags, Flags.MAP_DEFAULT, opts.flags);\n        const ambient = opts.ambient || opts.ambientLight || opts.light || 'white';\n        this.ambientLight = Color.make(ambient);\n        if (opts.ambient || opts.ambientLight || opts.light) {\n            this.ambientLightChanged = true;\n        }\n        this.lights = null;\n        this.id = opts.id;\n        if (this.config.fov) {\n            this.flags |= Flags.MAP_CALC_FOV;\n            this.fov = { x: -1, y: -1 };\n        }\n        if (opts.updateLiquid && typeof opts.updateLiquid === 'function') {\n            this.updateLiquid = opts.updateLiquid.bind(this);\n        }\n        if (opts.updateGas && typeof opts.updateGas === 'function') {\n            this.updateGas = opts.updateGas.bind(this);\n        }\n        Light.updateLighting(this); // to set the ambient light\n        Visibility.initMap(this);\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    async start() { }\n    clear(floorTile = 'FLOOR') {\n        this.cells.forEach((c) => c.clear(floorTile));\n        this.changed = true;\n    }\n    dump(fmt) {\n        this.cells.dump(fmt || ((c) => c.dump()));\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells[x][y];\n    }\n    eachCell(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    forEach(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    async forEachAsync(fn) {\n        return this.cells.forEachAsync((c, i, j) => fn(c, i, j, this));\n    }\n    forRect(x, y, w, h, fn) {\n        this.cells.forRect(x, y, w, h, (c, i, j) => fn(c, i, j, this));\n    }\n    eachNeighbor(x, y, fn, only4dirs = false) {\n        this.cells.eachNeighbor(x, y, (c, i, j) => fn(c, i, j, this), only4dirs);\n    }\n    eachNeighborAsync(x, y, fn, only4dirs = false) {\n        return this.cells.eachNeighborAsync(x, y, (c, i, j) => fn(c, i, j, this), only4dirs);\n    }\n    randomEach(fn) {\n        this.cells.randomEach((c, i, j) => fn(c, i, j, this));\n    }\n    count(fn) {\n        let count = 0;\n        this.forEach((c, x, y, g) => {\n            if (fn(c, x, y, g)) {\n                ++count;\n            }\n        });\n        return count;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.cells.isBoundaryXY(x, y);\n    }\n    get changed() {\n        return (this.flags & Flags.MAP_CHANGED) > 0;\n    }\n    set changed(v) {\n        if (v === true) {\n            this.flags |= Flags.MAP_CHANGED;\n        }\n        else if (v === false) {\n            this.flags &= ~Flags.MAP_CHANGED;\n        }\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).flags & flag;\n    }\n    hasCellMechFlag(x, y, flag) {\n        return this.cell(x, y).mechFlags & flag;\n    }\n    hasLayerFlag(x, y, flag) {\n        return this.cell(x, y).hasLayerFlag(flag);\n    }\n    hasTileFlag(x, y, flag) {\n        return this.cell(x, y).hasTileFlag(flag);\n    }\n    hasTileMechFlag(x, y, flag) {\n        return this.cell(x, y).hasTileMechFlag(flag);\n    }\n    redrawCell(cell) {\n        // if (cell.isAnyKindOfVisible()) {\n        cell.needsRedraw = true;\n        this.flags |= Flags.MAP_CHANGED;\n        // }\n    }\n    redrawXY(x, y) {\n        const cell = this.cell(x, y);\n        this.redrawCell(cell);\n    }\n    redrawAll() {\n        this.forEach((c) => {\n            // if (c.isAnyKindOfVisible()) {\n            c.needsRedraw = true;\n            // }\n        });\n        this.changed = true;\n    }\n    drawInto(canvas, opts = {}) {\n        Light.updateLighting(this);\n        if (typeof opts === 'boolean')\n            opts = { force: opts };\n        const mixer = new Sprite.Mixer();\n        for (let x = 0; x < canvas.width; ++x) {\n            for (let y = 0; y < canvas.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.needsRedraw || opts.force) {\n                    getCellAppearance(this, x, y, mixer);\n                    const glyph = typeof mixer.ch === 'number'\n                        ? mixer.ch\n                        : canvas.toGlyph(mixer.ch);\n                    canvas.draw(x, y, glyph, mixer.fg.toInt(), mixer.bg.toInt());\n                    cell.needsRedraw = false;\n                }\n            }\n        }\n    }\n    revealAll() {\n        this.forEach((c) => {\n            c.markRevealed();\n            c.storeMemory();\n        });\n        if (DATA.player) {\n            DATA.player.invalidateCostMap();\n        }\n    }\n    markRevealed(x, y) {\n        if (!this.cell(x, y).markRevealed())\n            return;\n        if (DATA.player) {\n            DATA.player.invalidateCostMap();\n        }\n    }\n    makeVisible(v = true) {\n        if (v) {\n            this.setFlags(0, Cell.Flags.VISIBLE);\n        }\n        else {\n            this.clearFlags(0, Cell.Flags.ANY_KIND_OF_VISIBLE);\n        }\n    }\n    isVisible(x, y) {\n        return this.cell(x, y).isVisible();\n    }\n    isAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isAnyKindOfVisible();\n    }\n    isOrWasAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isOrWasAnyKindOfVisible();\n    }\n    isRevealed(x, y) {\n        return this.cell(x, y).isRevealed();\n    }\n    get anyLightChanged() {\n        return (this.flags & Flags.MAP_STABLE_LIGHTS) == 0;\n    }\n    set anyLightChanged(v) {\n        if (v) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        else {\n            this.flags |= Flags.MAP_STABLE_LIGHTS;\n        }\n    }\n    get ambientLightChanged() {\n        return this.staticLightChanged;\n    }\n    set ambientLightChanged(v) {\n        this.staticLightChanged = v;\n    }\n    get staticLightChanged() {\n        return (this.flags & Flags.MAP_STABLE_GLOW_LIGHTS) == 0;\n    }\n    set staticLightChanged(v) {\n        if (v) {\n            this.flags &= ~(Flags.MAP_STABLE_GLOW_LIGHTS | Flags.MAP_STABLE_LIGHTS);\n        }\n        else {\n            this.flags |= Flags.MAP_STABLE_GLOW_LIGHTS;\n        }\n    }\n    setFlag(flag) {\n        this.flags |= flag;\n        this.changed = true;\n    }\n    setFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags |= mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((c) => c.setFlags(cellFlag, cellMechFlag));\n        }\n        this.changed = true;\n    }\n    clearFlag(flag) {\n        this.flags &= ~flag;\n        this.changed = true;\n    }\n    clearFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags &= ~mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((cell) => cell.clearFlags(cellFlag, cellMechFlag));\n        }\n        this.changed = true;\n    }\n    // setCellFlag(x: number, y: number, flag: number) {\n    //   this.cell(x, y).flags |= flag;\n    // }\n    setCellFlags(x, y, cellFlag = 0, cellMechFlag = 0) {\n        this.cell(x, y).setFlags(cellFlag, cellMechFlag);\n        this.flags |= Flags.MAP_CHANGED;\n    }\n    clearCellFlags(x, y, cellFlags = 0, cellMechFlags = 0) {\n        this.cell(x, y).clearFlags(cellFlags, cellMechFlags);\n        this.changed = true;\n    }\n    hasTile(x, y, tile) {\n        return this.cells[x][y].hasTile(tile);\n    }\n    layerFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].layerFlags(limitToPlayerKnowledge);\n    }\n    tileFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileFlags(limitToPlayerKnowledge);\n    }\n    tileMechFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileMechFlags(limitToPlayerKnowledge);\n    }\n    tileWithLayerFlag(x, y, mechFlag = 0) {\n        return this.cells[x][y].tileWithLayerFlag(mechFlag);\n    }\n    tileWithFlag(x, y, flag = 0) {\n        return this.cells[x][y].tileWithFlag(flag);\n    }\n    tileWithMechFlag(x, y, mechFlag = 0) {\n        return this.cells[x][y].tileWithMechFlag(mechFlag);\n    }\n    hasKnownTileFlag(x, y, flagMask = 0) {\n        return this.cells[x][y].memory.tileFlags & flagMask;\n    }\n    // hasTileInGroup(x, y, ...groups) { return this.cells[x][y].hasTileInGroup(...groups); }\n    // discoveredTileFlags(x: number, y: number) {\n    //   return this.cells[x][y].discoveredTileFlags();\n    // }\n    // hasDiscoveredTileFlag(x: number, y: number, flag = 0) {\n    //   return this.cells[x][y].hasDiscoveredTileFlag(flag);\n    // }\n    isClear(x, y) {\n        return this.cells[x][y].isClear();\n    }\n    isEmpty(x, y) {\n        return this.cells[x][y].isEmpty();\n    }\n    isObstruction(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isObstruction(limitToPlayerKnowledge);\n    }\n    isDoorway(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isDoorway(limitToPlayerKnowledge);\n    }\n    isSecretDoorway(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isSecretDoorway(limitToPlayerKnowledge);\n    }\n    isLiquid(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isLiquid(limitToPlayerKnowledge);\n    }\n    hasGas(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].hasGas(limitToPlayerKnowledge);\n    }\n    blocksPathing(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].blocksPathing(limitToPlayerKnowledge);\n    }\n    blocksVision(x, y) {\n        return this.cells[x][y].blocksVision();\n    }\n    isMoveableNow(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isMoveableNow(limitToPlayerKnowledge);\n    }\n    isWalkableNow(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isWalkableNow(limitToPlayerKnowledge);\n    }\n    canBeWalked(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].canBeWalked(limitToPlayerKnowledge);\n    }\n    topmostTile(x, y, skipGas = false) {\n        return this.cells[x][y].topmostTile(skipGas);\n    }\n    tileFlavor(x, y) {\n        return this.cells[x][y].tileFlavor();\n    }\n    setTile(x, y, tileId, volume = 0) {\n        return this.cell(x, y).setTile(tileId, volume, this);\n    }\n    nullifyCell(x, y) {\n        this.cell(x, y).nullify();\n    }\n    clearCell(x, y) {\n        this.cell(x, y).clear();\n    }\n    clearCellLayersWithFlags(x, y, tileFlags, tileMechFlags = 0) {\n        const cell = this.cell(x, y);\n        cell.clearLayersWithFlags(tileFlags, tileMechFlags);\n    }\n    // clearCellLayers(\n    //     x: number,\n    //     y: number,\n    //     nullLiquid = true,\n    //     nullSurface = true,\n    //     nullGas = true\n    // ) {\n    //     this.changed = true;\n    //     return this.cell(x, y).clearLayers(nullLiquid, nullSurface, nullGas);\n    // }\n    fill(tileId, boundaryTile) {\n        let i, j;\n        if (boundaryTile === undefined) {\n            boundaryTile = tileId;\n        }\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                if (this.isBoundaryXY(i, j)) {\n                    this.setTile(i, j, boundaryTile);\n                }\n                else {\n                    this.setTile(i, j, tileId);\n                }\n            }\n        }\n    }\n    neighborCount(x, y, matchFn, only4dirs = false) {\n        let count = 0;\n        this.eachNeighbor(x, y, (...args) => {\n            if (matchFn(...args))\n                ++count;\n        }, only4dirs);\n        return count;\n    }\n    walkableArcCount(x, y) {\n        if (!this.hasXY(x, y))\n            return -1;\n        return this.cells.arcCount(x, y, (c) => c.isWalkableNow());\n    }\n    diagonalBlocked(x1, y1, x2, y2, limitToPlayerKnowledge = false) {\n        if (x1 == x2 || y1 == y2) {\n            return false; // If it's not a diagonal, it's not diagonally blocked.\n        }\n        if (this.isObstruction(x1, y2, limitToPlayerKnowledge)) {\n            return true;\n        }\n        if (this.isObstruction(x2, y1, limitToPlayerKnowledge)) {\n            return true;\n        }\n        return false;\n    }\n    fillCostGrid(costGrid, costFn) {\n        costFn =\n            costFn ||\n                ((c) => (c.isWalkableNow() ? 1 : Path.OBSTRUCTION));\n        this.cells.forEach((cell, i, j) => {\n            if (cell.isNull()) {\n                costGrid[i][j] = Path.OBSTRUCTION;\n            }\n            else {\n                costGrid[i][j] = costFn(cell, i, j, this);\n            }\n        });\n    }\n    matchingNeighbor(x, y, matcher, only4dirs = false) {\n        const maxIndex = only4dirs ? 4 : 8;\n        for (let d = 0; d < maxIndex; ++d) {\n            const dir = Utils.DIRS[d];\n            const i = x + dir[0];\n            const j = y + dir[1];\n            if (this.hasXY(i, j)) {\n                if (matcher(this.cells[i][j], i, j, this))\n                    return [i, j];\n            }\n        }\n        return [-1, -1];\n    }\n    matchingLocNear(x, y, ...args) {\n        let i, j, k;\n        let matcher = args[0];\n        let opts = args[1] || {};\n        const arg = args[0];\n        if (typeof arg !== 'function') {\n            opts = arg || args[1];\n            matcher = opts.match || Utils.TRUE;\n        }\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const deterministic = opts.deterministic || false;\n        const candidateLocs = [];\n        // count up the number of candidate locations\n        for (k = 0; k < Math.max(this.width, this.height) && !candidateLocs.length; k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (!this.hasXY(i, j))\n                        continue;\n                    const cell = this.cell(i, j);\n                    // if ((i == x-k || i == x+k || j == y-k || j == y+k)\n                    if (Math.ceil(Utils.distanceBetween(x, y, i, j)) == k &&\n                        (!blockingMap || !blockingMap[i][j]) &&\n                        matcher(cell, i, j, this) &&\n                        (!forbidLiquid || !cell.liquid) &&\n                        (hallwaysAllowed || this.walkableArcCount(i, j) < 2)) {\n                        candidateLocs.push([i, j]);\n                    }\n                }\n            }\n        }\n        if (candidateLocs.length == 0) {\n            return [-1, -1];\n        }\n        // and pick one\n        let randIndex = 0;\n        if (deterministic) {\n            randIndex = Math.floor(candidateLocs.length / 2);\n        }\n        else {\n            randIndex = random.number(candidateLocs.length);\n        }\n        return candidateLocs[randIndex];\n    }\n    randomMatchingLoc(opts = {}) {\n        let x;\n        let y;\n        let cell;\n        if (typeof opts === 'function') {\n            opts = { match: opts };\n        }\n        const sequence = random.sequence(this.width * this.height);\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const matcher = opts.match || Utils.TRUE;\n        const forbidCellFlags = opts.forbidCellFlags || 0;\n        const forbidTileFlags = opts.forbidTileFlags || 0;\n        const forbidTileMechFlags = opts.forbidTileMechFlags || 0;\n        const tile = opts.tile || null;\n        let success = false;\n        let index = 0;\n        while (!success && index < sequence.length) {\n            const v = sequence[index];\n            x = v % this.width;\n            y = Math.floor(v / this.width);\n            cell = this.cell(x, y);\n            if ((!blockingMap || !blockingMap[x][y]) &&\n                (!tile || cell.hasTile(tile)) &&\n                (!forbidLiquid || !cell.liquid) &&\n                (!forbidCellFlags || !(cell.flags & forbidCellFlags)) &&\n                (!forbidTileFlags || !cell.hasTileFlag(forbidTileFlags)) &&\n                (!forbidTileMechFlags ||\n                    !cell.hasTileMechFlag(forbidTileMechFlags)) &&\n                (hallwaysAllowed || this.walkableArcCount(x, y) < 2) &&\n                matcher(cell, x, y, this)) {\n                success = true;\n            }\n            ++index;\n        }\n        if (!success) {\n            // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => FAIL');\n            return [-1, -1];\n        }\n        // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => ', x, y);\n        return [x, y];\n    }\n    // LIGHT\n    hasVisibleLight(x, y) {\n        return this.cell(x, y).hasVisibleLight();\n    }\n    addStaticLight(x, y, light) {\n        const info = { x, y, light, next: this.lights };\n        this.lights = info;\n        this.staticLightChanged = true;\n        return info;\n    }\n    removeStaticLight(x, y, light) {\n        let prev = this.lights;\n        if (!prev)\n            return;\n        function matches(info) {\n            if (info.x != x || info.y != y)\n                return false;\n            return !light || light === info.light;\n        }\n        this.staticLightChanged = true;\n        while (prev && matches(prev)) {\n            prev = this.lights = prev.next;\n        }\n        if (!prev)\n            return;\n        let current = prev.next;\n        while (current) {\n            if (matches(current)) {\n                prev.next = current.next;\n            }\n            else {\n                prev = current;\n            }\n            current = current.next;\n        }\n    }\n    eachStaticLight(fn) {\n        Utils.eachChain(this.lights, (info) => fn(info.light, info.x, info.y));\n        this.eachCell((cell, x, y) => {\n            for (let tile of cell.tiles()) {\n                if (tile.light) {\n                    fn(tile.light, x, y);\n                }\n            }\n        });\n    }\n    eachDynamicLight(fn) {\n        Utils.eachChain(this._actors, (actor) => {\n            if (actor.light)\n                fn(actor.light, actor.x, actor.y);\n        });\n    }\n    // Layers\n    addFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addLayer(anim);\n        anim.x = x;\n        anim.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    moveFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeLayer(anim);\n        this.redrawCell(oldCell);\n        cell.addLayer(anim);\n        this.redrawCell(cell);\n        anim.x = x;\n        anim.y = y;\n        return true;\n    }\n    removeFx(anim) {\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeLayer(anim);\n        this.redrawCell(oldCell);\n        this.flags |= Flags.MAP_CHANGED;\n        return true;\n    }\n    // ACTORS\n    // will return the PLAYER if the PLAYER is at (x, y).\n    actorAt(x, y) {\n        // creature *\n        if (!this.hasXY(x, y))\n            return null;\n        const cell = this.cell(x, y);\n        return cell.actor;\n    }\n    addActor(x, y, theActor) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.actor) {\n            return false;\n        }\n        cell.actor = theActor; // adjusts the layer\n        theActor.next = this._actors;\n        this._actors = theActor;\n        const flag = theActor === DATA.player\n            ? CellFlags.HAS_PLAYER\n            : CellFlags.HAS_ANY_ACTOR;\n        cell.flags |= flag;\n        // if (theActor.flags & Flags.Actor.MK_DETECTED)\n        // {\n        // \tcell.flags |= CellFlags.MONSTER_DETECTED;\n        // }\n        if (theActor.light) {\n            this.anyLightChanged = true;\n        }\n        // If the player moves or an actor that blocks vision and the cell is visible...\n        // -- we need to update the FOV\n        if (theActor.isPlayer() ||\n            (cell.isAnyKindOfVisible() && theActor.blocksVision())) {\n            this.flags |= Flags.MAP_FOV_CHANGED;\n        }\n        theActor.x = x;\n        theActor.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    addActorNear(x, y, theActor) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return !theActor.avoidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the actor.');\n            return false;\n        }\n        return this.addActor(loc[0], loc[1], theActor);\n    }\n    moveActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        this.removeActor(actor);\n        if (!this.addActor(x, y, actor)) {\n            this.addActor(actor.x, actor.y, actor);\n            return false;\n        }\n        if (actor.light) {\n            this.anyLightChanged = true;\n        }\n        return true;\n    }\n    removeActor(actor) {\n        if (!this.hasXY(actor.x, actor.y))\n            return false;\n        const cell = this.cell(actor.x, actor.y);\n        if (cell.actor === actor) {\n            cell.actor = null;\n            Utils.removeFromChain(this, 'actors', actor);\n            if (actor.light) {\n                this.anyLightChanged = true;\n            }\n            // If the player moves or an actor that blocks vision and the cell is visible...\n            // -- we need to update the FOV\n            if (actor.isPlayer() ||\n                (cell.isAnyKindOfVisible() && actor.blocksVision())) {\n                this.flags |= Flags.MAP_FOV_CHANGED;\n            }\n            this.redrawCell(cell);\n            return true;\n        }\n        return false;\n    }\n    deleteActorAt(x, y) {\n        const actor = this.actorAt(x, y);\n        if (!actor)\n            return false;\n        this.removeActor(actor);\n        actor.delete();\n        return true;\n    }\n    // dormantAt(x: number, y: number) {  // creature *\n    // \tif (!(this.cell(x, y).flags & CellFlags.HAS_DORMANT_MONSTER)) {\n    // \t\treturn null;\n    // \t}\n    // \treturn this.dormantActors.find( (m) => m.x == x && m.y == y );\n    // }\n    //\n    // addDormant(x, y, actor) {\n    // \ttheActor.x = x;\n    // \ttheActor.y = y;\n    // \tthis.dormant.add(theActor);\n    // \tcell.flags |= (CellFlags.HAS_DORMANT_MONSTER);\n    // \tthis.flags |= Flags.MAP_CHANGED;\n    // \treturn true;\n    // }\n    //\n    // removeDormant(actor) {\n    // \tconst cell = this.cell(actor.x, actor.y);\n    // \tcell.flags &= ~(CellFlags.HAS_DORMANT_MONSTER);\n    // \tcell.flags |= CellFlags.NEEDS_REDRAW;\n    // \tthis.flags |= Flags.MAP_CHANGED;\n    // \tthis.dormant.remove(actor);\n    // }\n    // ITEMS\n    itemAt(x, y) {\n        const cell = this.cell(x, y);\n        return cell.item;\n    }\n    addItem(x, y, theItem) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.item) {\n            // GW.ui.message(colors.badMessageColor, 'There is already an item there.');\n            return false;\n        }\n        theItem.x = x;\n        theItem.y = y;\n        cell.item = theItem; // adjusts the layers\n        theItem.next = this._items;\n        this._items = theItem;\n        if (theItem.light) {\n            this.anyLightChanged = true;\n        }\n        this.redrawCell(cell);\n        if (theItem.isDetected() || CONFIG.D_ITEM_OMNISCIENCE) {\n            cell.flags |= CellFlags.ITEM_DETECTED;\n        }\n        return true;\n    }\n    addItemNear(x, y, theItem) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return !theItem.forbidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the item.');\n            return false;\n        }\n        return this.addItem(loc[0], loc[1], theItem);\n    }\n    removeItem(theItem) {\n        const x = theItem.x;\n        const y = theItem.y;\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.item !== theItem)\n            return false;\n        cell.item = null;\n        Utils.removeFromChain(this, 'items', theItem);\n        if (theItem.light) {\n            this.anyLightChanged = true;\n        }\n        cell.flags &= ~(CellFlags.HAS_ITEM | CellFlags.ITEM_DETECTED);\n        this.redrawCell(cell);\n        return true;\n    }\n    // // PROMOTE\n    //\n    // async promote(x, y, mechFlag) {\n    // \tif (this.hasTileMechFlag(x, y, mechFlag)) {\n    // \t\tconst cell = this.cell(x, y);\n    // \t\tfor (let tile of cell.tiles()) {\n    // \t\t\tif (tile.mechFlags & mechFlag) {\n    // \t\t\t\tawait tile.promote(this, x, y, false);\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // }\n    gridDisruptsWalkability(blockingGrid, opts = {}) {\n        const walkableGrid = Grid.alloc(this.width, this.height);\n        let disrupts = false;\n        const gridOffsetX = opts.gridOffsetX || 0;\n        const gridOffsetY = opts.gridOffsetY || 0;\n        const bounds = opts.bounds || null; // TODO - Where is this used ???\n        // Get all walkable locations after lake added\n        this.cells.forEach((cell, i, j) => {\n            if (bounds && !bounds.contains(i, j))\n                return; // outside bounds\n            const blockingX = i + gridOffsetX;\n            const blockingY = j + gridOffsetY;\n            if (cell.isNull()) {\n                return; // not walkable\n            }\n            else if (cell.hasTileFlag(TileFlags.T_HAS_STAIRS)) {\n                if (blockingGrid.get(blockingX, blockingY)) {\n                    disrupts = true;\n                }\n                else {\n                    walkableGrid[i][j] = 1;\n                }\n            }\n            else if (cell.canBeWalked()) {\n                if (blockingGrid.get(blockingX, blockingY))\n                    return;\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        Grid.free(walkableGrid);\n        return disrupts;\n    }\n    // FOV\n    // Returns a boolean grid indicating whether each square is in the field of view of (xLoc, yLoc).\n    // forbiddenTileFlags is the set of terrain flags that will block vision (but the blocking cell itself is\n    // illuminated); forbiddenCellFlags is the set of map flags that will block vision.\n    // If cautiousOnWalls is set, we will not illuminate blocking tiles unless the tile one space closer to the origin\n    // is visible to the player; this is to prevent lights from illuminating a wall when the player is on the other\n    // side of the wall.\n    calcFov(grid, x, y, maxRadius, forbiddenCellFlags = 0, forbiddenLayerFlags = LayerFlags.L_BLOCKS_VISION) {\n        maxRadius = maxRadius || this.width + this.height;\n        grid.fill(0);\n        const map = this;\n        const FOV = new Fov.FOV({\n            isBlocked(i, j) {\n                return !!(!grid.hasXY(i, j) ||\n                    map.hasCellFlag(i, j, forbiddenCellFlags) ||\n                    map.hasLayerFlag(i, j, forbiddenLayerFlags));\n            },\n            calcRadius(x, y) {\n                return Math.sqrt(x ** 2 + y ** 2);\n            },\n            setVisible(x, y) {\n                grid[x][y] = 1;\n            },\n            hasXY(x, y) {\n                return grid.hasXY(x, y);\n            },\n        });\n        return FOV.calculate(x, y, maxRadius);\n    }\n    losFromTo(a, b) {\n        if (Utils.equalsXY(a, b))\n            return true;\n        const line = Utils.getLine(a.x, a.y, b.x, b.y);\n        if (!line.length)\n            return false;\n        return !line.some((loc) => {\n            return this.blocksVision(loc[0], loc[1]);\n        });\n    }\n    // MEMORIES\n    storeMemory(x, y) {\n        const cell = this.cell(x, y);\n        cell.storeMemory();\n    }\n    storeMemories() {\n        let x, y;\n        for (x = 0; x < this.width; ++x) {\n            for (y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.flags & CellFlags.ANY_KIND_OF_VISIBLE) {\n                    cell.storeMemory();\n                }\n                // cell.flags &= CellFlags.PERMANENT_CELL_FLAGS;\n                // cell.mechFlags &= CellMechFlags.PERMANENT_MECH_FLAGS;\n            }\n        }\n    }\n    // TICK\n    async activateCell(x, y, event) {\n        const cell = this.cell(x, y);\n        return await cell.activate(event, this, x, y, { cell });\n    }\n    async activateAll(event) {\n        return Effect.fireAll(this, event);\n    }\n    async tick() {\n        await Effect.fireAll(this, 'tick');\n        // Bookkeeping for fire, pressure plates and key-activated tiles.\n        await this.forEachAsync(async (cell, x, y) => {\n            cell.mechFlags &= ~Cell.MechFlags.CAUGHT_FIRE_THIS_TURN;\n            if (!(cell.flags &\n                (CellFlags.HAS_ANY_ACTOR | CellFlags.HAS_ITEM)) &&\n                cell.mechFlags & CellMechFlags.PRESSURE_PLATE_DEPRESSED) {\n                cell.mechFlags &= ~CellMechFlags.PRESSURE_PLATE_DEPRESSED;\n            }\n            if (cell.activatesOn('noKey') && !cell.hasKey()) {\n                await cell.activate('noKey', this, x, y);\n            }\n        });\n        // now spread the fire...\n        await this.forEachAsync(async (cell, x, y) => {\n            if (cell.hasTileFlag(Tile.Flags.T_IS_FIRE) &&\n                !(cell.mechFlags & CellMechFlags.CAUGHT_FIRE_THIS_TURN)) {\n                await this.exposeToFire(x, y, false);\n                await this.eachNeighborAsync(x, y, (_n, i, j) => this.exposeToFire(i, j), true);\n            }\n        });\n        if (!(this.flags & Flags.MAP_NO_LIQUID)) {\n            const newVolume = Grid.alloc(this.width, this.height);\n            const calc = calcBaseVolume(this, TileLayer.LIQUID, newVolume);\n            if (calc === CalcType.CALC) {\n                this.updateLiquid(newVolume);\n            }\n            if (calc != CalcType.NONE) {\n                updateVolume(this, TileLayer.LIQUID, newVolume);\n                this.flags &= ~Flags.MAP_NO_LIQUID;\n            }\n            else {\n                this.flags |= Flags.MAP_NO_LIQUID;\n            }\n            this.changed = true;\n            Grid.free(newVolume);\n        }\n        if (!(this.flags & Flags.MAP_NO_GAS)) {\n            const newVolume = Grid.alloc(this.width, this.height);\n            const calc = calcBaseVolume(this, TileLayer.GAS, newVolume);\n            if (calc === CalcType.CALC) {\n                this.updateGas(newVolume);\n            }\n            if (calc != CalcType.NONE) {\n                updateVolume(this, TileLayer.GAS, newVolume);\n                this.flags &= ~Flags.MAP_NO_GAS;\n            }\n            else {\n                this.flags |= Flags.MAP_NO_GAS;\n            }\n            this.changed = true;\n            Grid.free(newVolume);\n        }\n    }\n    async exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        for (let tile of cell.tiles()) {\n            if (tile.flags.tile & TileFlags.T_EXTINGUISHES_FIRE &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        }\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        for (let tile of cell.tiles()) {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.layer === Entity.Layer.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = EFFECT.from(tile.activates.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        }\n        if (alwaysIgnite ||\n            (ignitionChance && random.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                this.eachNeighbor(x, y, (n) => {\n                    if (n.hasLayerFlag(Entity.Flags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.activatesOn('explode')) {\n                event = 'explode';\n            }\n            for (let tile of cell.tiles()) {\n                if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n                    if (tile.layer === Entity.Layer.GAS) {\n                        cell.gasVolume = 0;\n                    }\n                    else if (tile.layer === Entity.Layer.LIQUID) {\n                        cell.liquidVolume = 0;\n                    }\n                }\n            }\n            await cell.activate(event, this, x, y, {\n                force: true,\n            });\n            this.redrawCell(cell);\n        }\n        return fireIgnited;\n    }\n    updateLiquid(newVolume) {\n        this.randomEach((c, x, y) => {\n            if (c.hasLayerFlag(Entity.Flags.L_BLOCKS_LIQUID))\n                return;\n            let highVol = 0;\n            let highX = -1;\n            let highY = -1;\n            let highTile = c.liquidTile;\n            let myVol = newVolume[x][y];\n            newVolume.eachNeighbor(x, y, (v, i, j) => {\n                if (v <= myVol)\n                    return;\n                if (v <= highVol)\n                    return;\n                highVol = v;\n                highX = i;\n                highY = j;\n                highTile = this.cell(i, j).liquidTile;\n            });\n            if (highVol > 1) {\n                // guaranteed => myVol < highVol\n                this.setTile(x, y, highTile, 0); // place tile with 0 volume - will force liquid to be same as highest volume liquid neighbor\n                const amt = Math.floor((highVol - myVol) / 9) + 1;\n                newVolume[x][y] += amt;\n                newVolume[highX][highY] -= amt;\n            }\n        });\n        // }\n    }\n    updateGas(newVolume) {\n        const dirs = random.sequence(4).map((i) => Utils.DIRS[i]);\n        const grid = Grid.alloc(this.width, this.height);\n        // push out from my square\n        newVolume.forEach((v, x, y) => {\n            if (!v)\n                return;\n            let adj = v;\n            if (v > 1) {\n                let count = 1;\n                newVolume.eachNeighbor(x, y, () => {\n                    ++count;\n                }, true); // only 4 dirs\n                let avg = Math.floor(v / count);\n                let rem = v - avg * count;\n                grid[x][y] += avg;\n                if (rem > 0) {\n                    grid[x][y] += 1;\n                    rem -= 1;\n                }\n                for (let i = 0; i < dirs.length; ++i) {\n                    const dir = dirs[i];\n                    const x2 = x + dir[0];\n                    const y2 = y + dir[1];\n                    if (grid.hasXY(x2, y2)) {\n                        adj = avg;\n                        if (rem > 0) {\n                            --rem;\n                            ++adj;\n                        }\n                        grid[x2][y2] += adj;\n                    }\n                }\n            }\n            else {\n                grid[x][y] += v;\n            }\n        });\n        newVolume.copy(grid);\n        Grid.free(grid);\n        // newVolume.dump();\n    }\n    resetCellEvents() {\n        this.forEach((c) => (c.mechFlags &= ~(CellMechFlags.EVENT_FIRED_THIS_TURN |\n            CellMechFlags.EVENT_PROTECTED)));\n    }\n}\nexport function make(w, h, opts = {}, wall) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n        if (wall) {\n            opts.wall = wall;\n        }\n    }\n    const map = new Map(w, h, opts);\n    let floor = opts.tile || opts.floor || opts.floorTile;\n    if (floor === true) {\n        floor = 'FLOOR';\n    }\n    let boundary = opts.boundary || opts.wall || opts.wallTile;\n    if (boundary === true) {\n        boundary = 'WALL';\n    }\n    if (floor) {\n        map.fill(floor, boundary);\n    }\n    if (opts.visible || opts.revealed) {\n        map.makeVisible();\n        map.revealAll();\n    }\n    if (opts.revealed && !opts.visible) {\n        map.makeVisible(false);\n    }\n    if (!DATA.map) {\n        DATA.map = map;\n    }\n    return map;\n}\nMake.map = make;\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    // redo this because we changed the tiles\n    if (opts.visible || opts.revealed) {\n        map.makeVisible();\n        map.revealAll();\n    }\n    if (opts.revealed && !opts.visible) {\n        map.makeVisible(false);\n    }\n    return map;\n}\nif (!COLORS.cursor) {\n    Color.install('cursor', COLORS.yellow);\n}\nif (!COLORS.path) {\n    Color.install('path', COLORS.gold);\n}\nexport function getCellAppearance(map, x, y, dest) {\n    dest.blackOut();\n    if (!map.hasXY(x, y))\n        return;\n    const cell = map.cell(x, y);\n    if (cell.isAnyKindOfVisible() &&\n        cell.flags & (CellFlags.CELL_CHANGED | CellFlags.NEEDS_REDRAW)) {\n        Cell.getAppearance(cell, dest);\n    }\n    else {\n        // if (cell.isRevealed()) {\n        dest.drawSprite(cell.memory.mixer);\n    }\n    if (cell.isVisible()) {\n        // keep here to allow for games that do not use fov to work\n    }\n    else if (!cell.isRevealed()) {\n        if (!cell.isAnyKindOfVisible())\n            dest.blackOut();\n    }\n    else if (!cell.isAnyKindOfVisible()) {\n        dest.bg.mix(COLORS.black, 30);\n        dest.fg.mix(COLORS.black, 30);\n    }\n    let needDistinctness = false;\n    if (cell.flags & (CellFlags.IS_CURSOR | CellFlags.IS_IN_PATH)) {\n        const highlight = cell.flags & CellFlags.IS_CURSOR ? COLORS.cursor : COLORS.path;\n        if (cell.hasLayerFlag(LayerFlags.L_INVERT_WHEN_HIGHLIGHTED)) {\n            Color.swap(dest.fg, dest.bg);\n        }\n        else {\n            // if (!GAME.trueColorMode || !dest.needDistinctness) {\n            // dest.fg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n            // }\n            dest.bg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n        }\n        needDistinctness = true;\n    }\n    if (needDistinctness) {\n        Color.separate(dest.fg, dest.bg);\n    }\n    // dest.bake();\n}\nexport function addText(map, x, y, text, fg, bg, layer) {\n    for (let ch of text) {\n        const sprite = Entity.make({\n            ch,\n            fg,\n            bg,\n            layer: layer || TileLayer.GROUND,\n            priority: 200,\n        }); // on top of ground tiles\n        const cell = map.cell(x++, y);\n        cell.addLayer(sprite);\n    }\n}\nvar CalcType;\n(function (CalcType) {\n    CalcType[CalcType[\"NONE\"] = 0] = \"NONE\";\n    CalcType[CalcType[\"UPDATE\"] = 1] = \"UPDATE\";\n    CalcType[CalcType[\"CALC\"] = 2] = \"CALC\";\n})(CalcType || (CalcType = {}));\nfunction calcBaseVolume(map, depth, newVolume) {\n    let hasVolume = false;\n    let needsAjustment = false;\n    map.forEach((c, x, y) => {\n        let volume = c.volume(depth);\n        const tile = c.tile(depth);\n        if (volume && tile.dissipate) {\n            if (tile.dissipate > 10000) {\n                volume -= Math.floor(tile.dissipate / 10000);\n                if (random.chance(tile.dissipate % 10000, 10000)) {\n                    volume -= 1;\n                }\n            }\n            else if (random.chance(tile.dissipate, 10000)) {\n                volume -= 1;\n            }\n        }\n        if (volume > 0) {\n            newVolume[x][y] = volume;\n            hasVolume = true;\n            if (volume > 1) {\n                needsAjustment = true;\n            }\n        }\n        else if (tile !== Tile.tiles.NULL) {\n            c.clearLayer(depth);\n            map.redrawCell(c);\n        }\n    });\n    if (needsAjustment)\n        return CalcType.CALC;\n    if (hasVolume)\n        return CalcType.UPDATE;\n    return CalcType.NONE;\n}\nfunction updateVolume(map, depth, newVolume) {\n    newVolume.forEach((v, i, j) => {\n        const cell = map.cell(i, j);\n        const current = cell.volume(depth);\n        const tile = cell.tile(depth);\n        if (v > 0) {\n            // hasLiquid = true;\n            if (current !== v || !tile) {\n                let highVol = current;\n                let highTile = tile;\n                map.eachNeighbor(i, j, (n) => {\n                    if (n.volume(depth) > highVol) {\n                        highVol = n.volume(depth);\n                        highTile = n.tile(depth);\n                    }\n                });\n                if (highTile !== tile) {\n                    cell.setTile(highTile, 0, map);\n                }\n                cell.setVolume(depth, v);\n                map.redrawCell(cell);\n            }\n        }\n        else if (current || tile !== Tile.tiles.NULL) {\n            cell.clearLayer(depth);\n            map.redrawCell(cell);\n        }\n    });\n}\n","import * as Tile from './tile';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: [30, 30, 30, 20, 0, 0, 0],\n    bg: [2, 2, 10, 0, 2, 2, 0],\n    priority: 10,\n    article: 'the',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    activates: {\n        enter: { tile: 'DOOR_OPEN' },\n        open: { tile: 'DOOR_OPEN_ALWAYS' },\n    },\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    activates: {\n        tick: {\n            chance: 100 * 100,\n            tile: 'DOOR',\n            flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY',\n        },\n        enter: null,\n        open: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    activates: {\n        tick: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_BLOCKS_EVERYTHING',\n    article: 'a',\n    name: 'stone wall',\n    desc: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: [5, 8, 20, 10, 0, 4, 15, true],\n    bg: [10, 15, 41, 6, 5, 5, 5, true],\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: [5, 8, 10, 10, 0, 4, 15, true],\n    bg: [10, 15, 21, 6, 5, 5, 5, true],\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    layer: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    ground: 'LAKE',\n});\n"],"names":["Flag","CONFIG","Color","Range","Grid","Flags.Cell","Flags.Entity","Utils","Make","DATA","Entity","GW.make","Light.make","GW.utils","GW.flag","Flags","make","Tile","Layer.Entity","Layer.Flags","MechFlags","Effect","install","installAll","Sprite","Cell","TILES","LayerFlags","Light.intensity","intensity","TileFlags","MapFlags","random","GW.data","GW.message","Flags.Tile","Flags.CellMech","map","Map.Flags","Flags.Map","GW.grid","GW.effect","tile","Tile.tiles","cell","Cell.MechFlags","Entity.Flags","GW.random","Entity.Layer","FLAGS.Tile","FLAGS.Entity","FLAGS.CellMech","Map","Cell.Cell","Light.updateLighting","Visibility.initMap","Cell.Flags","Path","CellFlags","Fov","Effect.fireAll","CellMechFlags","Tile.Flags","TileLayer","EFFECT","TileMechFlags","from","COLORS","Cell.getAppearance","Entity.make","Tile.install"],"mappings":"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"}