{"version":3,"file":"gw-map.min.js","sources":["../js/flags.js","../js/light.js","../js/tile.js","../js/activation.js","../js/cell.js","../js/map.js","../js/tiles.js"],"sourcesContent":["import { flag as Flag } from \"gw-utils\";\nexport var Layer;\n(function (Layer) {\n    Layer[Layer[\"GROUND\"] = 0] = \"GROUND\";\n    Layer[Layer[\"LIQUID\"] = 1] = \"LIQUID\";\n    Layer[Layer[\"SURFACE\"] = 2] = \"SURFACE\";\n    Layer[Layer[\"GAS\"] = 3] = \"GAS\";\n    Layer[Layer[\"ITEM\"] = 4] = \"ITEM\";\n    Layer[Layer[\"ACTOR\"] = 5] = \"ACTOR\";\n    Layer[Layer[\"PLAYER\"] = 6] = \"PLAYER\";\n    Layer[Layer[\"FX\"] = 7] = \"FX\";\n    Layer[Layer[\"UI\"] = 8] = \"UI\";\n})(Layer || (Layer = {}));\nconst Fl = Flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Activation;\n(function (Activation) {\n    Activation[Activation[\"DFF_SUBSEQ_ALWAYS\"] = Fl(0)] = \"DFF_SUBSEQ_ALWAYS\";\n    Activation[Activation[\"DFF_SUBSEQ_EVERYWHERE\"] = Fl(1)] = \"DFF_SUBSEQ_EVERYWHERE\";\n    Activation[Activation[\"DFF_TREAT_AS_BLOCKING\"] = Fl(2)] = \"DFF_TREAT_AS_BLOCKING\";\n    Activation[Activation[\"DFF_PERMIT_BLOCKING\"] = Fl(3)] = \"DFF_PERMIT_BLOCKING\";\n    Activation[Activation[\"DFF_ACTIVATE_DORMANT_MONSTER\"] = Fl(4)] = \"DFF_ACTIVATE_DORMANT_MONSTER\";\n    Activation[Activation[\"DFF_BLOCKED_BY_OTHER_LAYERS\"] = Fl(6)] = \"DFF_BLOCKED_BY_OTHER_LAYERS\";\n    Activation[Activation[\"DFF_SUPERPRIORITY\"] = Fl(7)] = \"DFF_SUPERPRIORITY\";\n    Activation[Activation[\"DFF_AGGRAVATES_MONSTERS\"] = Fl(8)] = \"DFF_AGGRAVATES_MONSTERS\";\n    Activation[Activation[\"DFF_RESURRECT_ALLY\"] = Fl(9)] = \"DFF_RESURRECT_ALLY\";\n    Activation[Activation[\"DFF_EMIT_EVENT\"] = Fl(10)] = \"DFF_EMIT_EVENT\";\n    Activation[Activation[\"DFF_NO_REDRAW_CELL\"] = Fl(11)] = \"DFF_NO_REDRAW_CELL\";\n    Activation[Activation[\"DFF_ABORT_IF_BLOCKS_MAP\"] = Fl(12)] = \"DFF_ABORT_IF_BLOCKS_MAP\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ITEMS\"] = Fl(13)] = \"DFF_BLOCKED_BY_ITEMS\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ACTORS\"] = Fl(14)] = \"DFF_BLOCKED_BY_ACTORS\";\n    Activation[Activation[\"DFF_ALWAYS_FIRE\"] = Fl(15)] = \"DFF_ALWAYS_FIRE\";\n    Activation[Activation[\"DFF_NO_MARK_FIRED\"] = Fl(16)] = \"DFF_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Activation[Activation[\"DFF_PROTECTED\"] = Fl(19)] = \"DFF_PROTECTED\";\n    Activation[Activation[\"DFF_SPREAD_CIRCLE\"] = Fl(20)] = \"DFF_SPREAD_CIRCLE\";\n    Activation[Activation[\"DFF_SPREAD_LINE\"] = Fl(21)] = \"DFF_SPREAD_LINE\";\n    Activation[Activation[\"DFF_NULL_SURFACE\"] = Fl(22)] = \"DFF_NULL_SURFACE\";\n    Activation[Activation[\"DFF_NULL_LIQUID\"] = Fl(23)] = \"DFF_NULL_LIQUID\";\n    Activation[Activation[\"DFF_NULL_GAS\"] = Fl(24)] = \"DFF_NULL_GAS\";\n    Activation[Activation[\"DFF_EVACUATE_CREATURES\"] = Fl(25)] = \"DFF_EVACUATE_CREATURES\";\n    Activation[Activation[\"DFF_EVACUATE_ITEMS\"] = Fl(26)] = \"DFF_EVACUATE_ITEMS\";\n    Activation[Activation[\"DFF_BUILD_IN_WALLS\"] = Fl(27)] = \"DFF_BUILD_IN_WALLS\";\n    Activation[Activation[\"DFF_MUST_TOUCH_WALLS\"] = Fl(28)] = \"DFF_MUST_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_NO_TOUCH_WALLS\"] = Fl(29)] = \"DFF_NO_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_ONLY_IF_EMPTY\"] = Activation.DFF_BLOCKED_BY_ITEMS | Activation.DFF_BLOCKED_BY_ACTORS] = \"DFF_ONLY_IF_EMPTY\";\n    Activation[Activation[\"DFF_NULLIFY_CELL\"] = Activation.DFF_NULL_SURFACE | Activation.DFF_NULL_LIQUID | Activation.DFF_NULL_GAS] = \"DFF_NULLIFY_CELL\";\n})(Activation || (Activation = {}));\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_OBSTRUCTS_PASSABILITY\"] = Fl(0)] = \"T_OBSTRUCTS_PASSABILITY\";\n    Tile[Tile[\"T_OBSTRUCTS_VISION\"] = Fl(1)] = \"T_OBSTRUCTS_VISION\";\n    Tile[Tile[\"T_OBSTRUCTS_ITEMS\"] = Fl(2)] = \"T_OBSTRUCTS_ITEMS\";\n    Tile[Tile[\"T_OBSTRUCTS_SURFACE\"] = Fl(3)] = \"T_OBSTRUCTS_SURFACE\";\n    Tile[Tile[\"T_OBSTRUCTS_GAS\"] = Fl(4)] = \"T_OBSTRUCTS_GAS\";\n    Tile[Tile[\"T_OBSTRUCTS_LIQUID\"] = Fl(5)] = \"T_OBSTRUCTS_LIQUID\";\n    Tile[Tile[\"T_OBSTRUCTS_TILE_EFFECTS\"] = Fl(6)] = \"T_OBSTRUCTS_TILE_EFFECTS\";\n    Tile[Tile[\"T_OBSTRUCTS_DIAGONAL_MOVEMENT\"] = Fl(7)] = \"T_OBSTRUCTS_DIAGONAL_MOVEMENT\";\n    Tile[Tile[\"T_GAS\"] = Fl(9)] = \"T_GAS\";\n    Tile[Tile[\"T_BRIDGE\"] = Fl(10)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(11)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(12)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(13)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(14)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(15)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(16)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_CAUSES_POISON\"] = Fl(18)] = \"T_CAUSES_POISON\";\n    Tile[Tile[\"T_CAUSES_DAMAGE\"] = Fl(19)] = \"T_CAUSES_DAMAGE\";\n    Tile[Tile[\"T_CAUSES_NAUSEA\"] = Fl(20)] = \"T_CAUSES_NAUSEA\";\n    Tile[Tile[\"T_CAUSES_PARALYSIS\"] = Fl(21)] = \"T_CAUSES_PARALYSIS\";\n    Tile[Tile[\"T_CAUSES_CONFUSION\"] = Fl(22)] = \"T_CAUSES_CONFUSION\";\n    Tile[Tile[\"T_CAUSES_HEALING\"] = Fl(23)] = \"T_CAUSES_HEALING\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(24)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_CAUSES_EXPLOSIVE_DAMAGE\"] = Fl(25)] = \"T_CAUSES_EXPLOSIVE_DAMAGE\";\n    Tile[Tile[\"T_SACRED\"] = Fl(26)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(27)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(28)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(29)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(30)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_OBSTRUCTS_VISION |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    Tile[Tile[\"T_OBSTRUCTS_EVERYTHING\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_OBSTRUCTS_VISION |\n        Tile.T_OBSTRUCTS_ITEMS |\n        Tile.T_OBSTRUCTS_GAS |\n        Tile.T_OBSTRUCTS_SURFACE |\n        Tile.T_OBSTRUCTS_LIQUID |\n        Tile.T_OBSTRUCTS_DIAGONAL_MOVEMENT] = \"T_OBSTRUCTS_EVERYTHING\";\n    Tile[Tile[\"T_HARMFUL_TERRAIN\"] = Tile.T_CAUSES_POISON |\n        Tile.T_IS_FIRE |\n        Tile.T_CAUSES_DAMAGE |\n        Tile.T_CAUSES_PARALYSIS |\n        Tile.T_CAUSES_CONFUSION |\n        Tile.T_CAUSES_EXPLOSIVE_DAMAGE] = \"T_HARMFUL_TERRAIN\";\n    Tile[Tile[\"T_RESPIRATION_IMMUNITIES\"] = Tile.T_CAUSES_DAMAGE |\n        Tile.T_CAUSES_CONFUSION |\n        Tile.T_CAUSES_PARALYSIS |\n        Tile.T_CAUSES_NAUSEA] = \"T_RESPIRATION_IMMUNITIES\";\n    Tile[Tile[\"T_IS_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_LIQUID\";\n    Tile[Tile[\"T_STAIR_BLOCKERS\"] = Tile.T_OBSTRUCTS_ITEMS |\n        Tile.T_OBSTRUCTS_SURFACE |\n        Tile.T_OBSTRUCTS_GAS |\n        Tile.T_OBSTRUCTS_LIQUID |\n        Tile.T_OBSTRUCTS_TILE_EFFECTS] = \"T_STAIR_BLOCKERS\";\n})(Tile || (Tile = {}));\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    TileMech[TileMech[\"TM_IS_SECRET\"] = Fl(0)] = \"TM_IS_SECRET\";\n    TileMech[TileMech[\"TM_PROMOTES_WITH_KEY\"] = Fl(1)] = \"TM_PROMOTES_WITH_KEY\";\n    TileMech[TileMech[\"TM_PROMOTES_WITHOUT_KEY\"] = Fl(2)] = \"TM_PROMOTES_WITHOUT_KEY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_STEP\"] = Fl(3)] = \"TM_PROMOTES_ON_STEP\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_ITEM_REMOVE\"] = Fl(4)] = \"TM_PROMOTES_ON_ITEM_REMOVE\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_PLAYER_ENTRY\"] = Fl(5)] = \"TM_PROMOTES_ON_PLAYER_ENTRY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_SACRIFICE_ENTRY\"] = Fl(6)] = \"TM_PROMOTES_ON_SACRIFICE_ENTRY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_ELECTRICITY\"] = Fl(7)] = \"TM_PROMOTES_ON_ELECTRICITY\";\n    TileMech[TileMech[\"TM_ALLOWS_SUBMERGING\"] = Fl(8)] = \"TM_ALLOWS_SUBMERGING\";\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_EXTINGUISHES_FIRE\"] = Fl(14)] = \"TM_EXTINGUISHES_FIRE\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_REFLECTS_BOLTS\"] = Fl(16)] = \"TM_REFLECTS_BOLTS\";\n    TileMech[TileMech[\"TM_STAND_IN_TILE\"] = Fl(17)] = \"TM_STAND_IN_TILE\";\n    TileMech[TileMech[\"TM_LIST_IN_SIDEBAR\"] = Fl(18)] = \"TM_LIST_IN_SIDEBAR\";\n    TileMech[TileMech[\"TM_VISUALLY_DISTINCT\"] = Fl(19)] = \"TM_VISUALLY_DISTINCT\";\n    TileMech[TileMech[\"TM_BRIGHT_MEMORY\"] = Fl(20)] = \"TM_BRIGHT_MEMORY\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_CONNECTS_LEVEL\"] = Fl(22)] = \"TM_CONNECTS_LEVEL\";\n    TileMech[TileMech[\"TM_INTERRUPT_EXPLORATION_WHEN_SEEN\"] = Fl(23)] = \"TM_INTERRUPT_EXPLORATION_WHEN_SEEN\";\n    TileMech[TileMech[\"TM_INVERT_WHEN_HIGHLIGHTED\"] = Fl(24)] = \"TM_INVERT_WHEN_HIGHLIGHTED\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    TileMech[TileMech[\"TM_PROMOTES\"] = TileMech.TM_PROMOTES_WITH_KEY |\n        TileMech.TM_PROMOTES_WITHOUT_KEY |\n        TileMech.TM_PROMOTES_ON_STEP |\n        TileMech.TM_PROMOTES_ON_ITEM_REMOVE |\n        TileMech.TM_PROMOTES_ON_SACRIFICE_ENTRY |\n        TileMech.TM_PROMOTES_ON_ELECTRICITY |\n        TileMech.TM_PROMOTES_ON_PLAYER_ENTRY] = \"TM_PROMOTES\";\n})(TileMech || (TileMech = {}));\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"REVEALED\"] = Fl(0)] = \"REVEALED\";\n    Cell[Cell[\"VISIBLE\"] = Fl(1)] = \"VISIBLE\";\n    Cell[Cell[\"WAS_VISIBLE\"] = Fl(2)] = \"WAS_VISIBLE\";\n    Cell[Cell[\"IN_FOV\"] = Fl(3)] = \"IN_FOV\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(4)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_MONSTER\"] = Fl(5)] = \"HAS_MONSTER\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(6)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(7)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_STAIRS\"] = Fl(8)] = \"HAS_STAIRS\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(9)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"CELL_CHANGED\"] = Fl(10)] = \"CELL_CHANGED\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(12)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(13)] = \"IS_CURSOR\";\n    Cell[Cell[\"MAGIC_MAPPED\"] = Fl(14)] = \"MAGIC_MAPPED\";\n    Cell[Cell[\"ITEM_DETECTED\"] = Fl(15)] = \"ITEM_DETECTED\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(16)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"CLAIRVOYANT_VISIBLE\"] = Fl(17)] = \"CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"WAS_CLAIRVOYANT_VISIBLE\"] = Fl(18)] = \"WAS_CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"CLAIRVOYANT_DARKENED\"] = Fl(19)] = \"CLAIRVOYANT_DARKENED\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(20)] = \"IMPREGNABLE\";\n    Cell[Cell[\"TELEPATHIC_VISIBLE\"] = Fl(22)] = \"TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"WAS_TELEPATHIC_VISIBLE\"] = Fl(23)] = \"WAS_TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"MONSTER_DETECTED\"] = Fl(24)] = \"MONSTER_DETECTED\";\n    Cell[Cell[\"WAS_MONSTER_DETECTED\"] = Fl(25)] = \"WAS_MONSTER_DETECTED\";\n    Cell[Cell[\"LIGHT_CHANGED\"] = Fl(27)] = \"LIGHT_CHANGED\";\n    Cell[Cell[\"CELL_LIT\"] = Fl(28)] = \"CELL_LIT\";\n    Cell[Cell[\"IS_IN_SHADOW\"] = Fl(29)] = \"IS_IN_SHADOW\";\n    Cell[Cell[\"CELL_DARK\"] = Fl(30)] = \"CELL_DARK\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.REVEALED |\n        Cell.MAGIC_MAPPED |\n        Cell.ITEM_DETECTED |\n        Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.HAS_STAIRS |\n        Cell.STABLE_MEMORY |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE | Cell.CLAIRVOYANT_VISIBLE | Cell.TELEPATHIC_VISIBLE] = \"ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"HAS_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_MONSTER] = \"HAS_ACTOR\";\n    Cell[Cell[\"IS_WAS_ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE |\n        Cell.WAS_VISIBLE |\n        Cell.CLAIRVOYANT_VISIBLE |\n        Cell.WAS_CLAIRVOYANT_VISIBLE |\n        Cell.TELEPATHIC_VISIBLE |\n        Cell.WAS_TELEPATHIC_VISIBLE] = \"IS_WAS_ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.VISIBLE | Cell.IN_FOV | Cell.NEEDS_REDRAW | Cell.CELL_CHANGED | Cell.IS_IN_SHADOW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n///////////////////////////////////////////////////////\n// CELL MECH\nexport var CellMech;\n(function (CellMech) {\n    CellMech[CellMech[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    CellMech[CellMech[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    CellMech[CellMech[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    CellMech[CellMech[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(4)] = \"CAUGHT_FIRE_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_FIRED_THIS_TURN\"] = Fl(5)] = \"EVENT_FIRED_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_PROTECTED\"] = Fl(6)] = \"EVENT_PROTECTED\";\n    CellMech[CellMech[\"IS_IN_LOOP\"] = Fl(10)] = \"IS_IN_LOOP\";\n    CellMech[CellMech[\"IS_CHOKEPOINT\"] = Fl(11)] = \"IS_CHOKEPOINT\";\n    CellMech[CellMech[\"IS_GATE_SITE\"] = Fl(12)] = \"IS_GATE_SITE\";\n    CellMech[CellMech[\"IS_IN_ROOM_MACHINE\"] = Fl(13)] = \"IS_IN_ROOM_MACHINE\";\n    CellMech[CellMech[\"IS_IN_AREA_MACHINE\"] = Fl(14)] = \"IS_IN_AREA_MACHINE\";\n    CellMech[CellMech[\"IS_POWERED\"] = Fl(15)] = \"IS_POWERED\";\n    CellMech[CellMech[\"IS_IN_MACHINE\"] = CellMech.IS_IN_ROOM_MACHINE | CellMech.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    CellMech[CellMech[\"PERMANENT_MECH_FLAGS\"] = CellMech.SEARCHED_FROM_HERE |\n        CellMech.PRESSURE_PLATE_DEPRESSED |\n        CellMech.KNOWN_TO_BE_TRAP_FREE |\n        CellMech.IS_IN_LOOP |\n        CellMech.IS_CHOKEPOINT |\n        CellMech.IS_GATE_SITE |\n        CellMech.IS_IN_MACHINE] = \"PERMANENT_MECH_FLAGS\";\n})(CellMech || (CellMech = {}));\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_STABLE_GLOW_LIGHTS\"] = Fl(1)] = \"MAP_STABLE_GLOW_LIGHTS\";\n    Map[Map[\"MAP_STABLE_LIGHTS\"] = Fl(2)] = \"MAP_STABLE_LIGHTS\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(7)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = Map.MAP_STABLE_LIGHTS | Map.MAP_STABLE_GLOW_LIGHTS | Map.MAP_FOV_CHANGED] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import { utils as Utils, range as Range, grid as Grid, color as Color, data as DATA, config as CONFIG, make as Make, } from \"gw-utils\";\nimport * as Flags from \"./flags\";\n// const LIGHT_SMOOTHING_THRESHOLD = 150;       // light components higher than this magnitude will be toned down a little\nexport const config = (CONFIG.light = { INTENSITY_DARK: 20 }); // less than 20% for highest color in rgb\nconst LIGHT_COMPONENTS = Color.make();\nexport class Light {\n    constructor(color, range, fadeTo, pass = false) {\n        this.fadeTo = 0;\n        this.passThroughActors = false;\n        this.id = null;\n        this.color = Color.from(color) || null; /* color */\n        this.radius = Range.make(range || 1);\n        this.fadeTo = fadeTo || 0;\n        this.passThroughActors = pass; // generally no, but miner light does (TODO - string parameter?  'false' or 'true')\n    }\n    copy(other) {\n        this.color = other.color;\n        this.radius.copy(other.radius);\n        this.fadeTo = other.fadeTo;\n        this.passThroughActors = other.passThroughActors;\n    }\n    get intensity() {\n        return intensity(this.color);\n    }\n    // Returns true if any part of the light hit cells that are in the player's field of view.\n    paint(map, x, y, maintainShadows = false, isMinersLight = false) {\n        if (!map)\n            return;\n        let k;\n        // let colorComponents = [0,0,0];\n        let lightMultiplier;\n        let radius = this.radius.value();\n        let outerRadius = Math.ceil(radius);\n        // calcLightComponents(colorComponents, this);\n        LIGHT_COMPONENTS.copy(this.color).bake();\n        // console.log('paint', LIGHT_COMPONENTS.toString(true), x, y, outerRadius);\n        // the miner's light does not dispel IS_IN_SHADOW,\n        // so the player can be in shadow despite casting his own light.\n        const dispelShadows = !isMinersLight &&\n            !maintainShadows &&\n            intensity(LIGHT_COMPONENTS) > config.INTENSITY_DARK;\n        const fadeToPercent = this.fadeTo;\n        const grid = Grid.alloc(map.width, map.height, 0);\n        map.calcFov(grid, x, y, outerRadius, this.passThroughActors ? 0 : Flags.Cell.HAS_ACTOR, Flags.Tile.T_OBSTRUCTS_VISION);\n        let overlappedFieldOfView = false;\n        grid.forCircle(x, y, outerRadius, (v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            lightMultiplier = Math.floor(100 -\n                (100 - fadeToPercent) * (Utils.distanceBetween(x, y, i, j) / radius));\n            for (k = 0; k < 3; k++) {\n                cell.light[k] += Math.floor((LIGHT_COMPONENTS[k] * lightMultiplier) / 100);\n            }\n            if (dispelShadows) {\n                cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n            }\n            if (cell.flags & (Flags.Cell.IN_FOV | Flags.Cell.ANY_KIND_OF_VISIBLE)) {\n                overlappedFieldOfView = true;\n            }\n            // console.log(i, j, lightMultiplier, cell.light);\n        });\n        if (dispelShadows) {\n            const cell = map.cell(x, y);\n            cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n        }\n        Grid.free(grid);\n        return overlappedFieldOfView;\n    }\n}\nexport function intensity(color) {\n    return Math.max(color[0], color[1], color[2]);\n}\nexport function make(...args) {\n    if (args.length == 1) {\n        const config = args[0];\n        if (typeof config === \"string\") {\n            const cached = lights[config];\n            if (cached)\n                return cached;\n            const [color, radius, fadeTo, pass] = config\n                .split(/[,|]/)\n                .map((t) => t.trim());\n            return new Light(Color.from(color), Range.from(radius || 1), Number.parseInt(fadeTo || \"0\"), !!pass && pass !== \"false\");\n        }\n        else if (Array.isArray(config)) {\n            const [color, radius, fadeTo, pass] = config;\n            return new Light(color, radius, fadeTo, pass);\n        }\n        else if (config && config.color) {\n            return new Light(Color.from(config.color), Range.from(config.radius), Number.parseInt(config.fadeTo || \"0\"), config.pass);\n        }\n        else {\n            throw new Error(\"Unknown Light config - \" + config);\n        }\n    }\n    else {\n        const [color, radius, fadeTo, pass] = args;\n        return new Light(color, radius, fadeTo, pass);\n    }\n}\nMake.light = make;\nexport const lights = {};\nexport function from(...args) {\n    if (args.length != 1)\n        Utils.ERROR(\"Unknown Light config: \" + JSON.stringify(args));\n    const arg = args[0];\n    if (typeof arg === \"string\") {\n        const cached = lights[arg];\n        if (cached)\n            return cached;\n    }\n    return make(arg);\n}\nexport function install(id, ...args) {\n    let source;\n    if (args.length == 1) {\n        source = make(args[0]);\n    }\n    else {\n        source = make(args[0], args[1], args[2], args[3]);\n    }\n    lights[id] = source;\n    if (source)\n        source.id = id;\n    return source;\n}\nexport function installAll(config = {}) {\n    const entries = Object.entries(config);\n    entries.forEach(([name, info]) => {\n        install(name, info);\n    });\n}\n// export function calcLightComponents(colorComponents, theLight) {\n// \tconst randComponent = cosmetic.range(0, theLight.color.rand);\n// \tcolorComponents[0] = randComponent + theLight.color.red + cosmetic.range(0, theLight.color.redRand);\n// \tcolorComponents[1] = randComponent + theLight.color.green + cosmetic.range(0, theLight.color.greenRand);\n// \tcolorComponents[2] = randComponent + theLight.color.blue + cosmetic.range(0, theLight.color.blueRand);\n// }\nfunction updateDisplayDetail(map) {\n    map.eachCell((cell, _i, _j) => {\n        // clear light flags\n        cell.flags &= ~(Flags.Cell.CELL_LIT | Flags.Cell.CELL_DARK);\n        if (cell.light.some((v, i) => v !== cell.oldLight[i])) {\n            cell.flags |= Flags.Cell.LIGHT_CHANGED;\n        }\n        if (cell.isDark()) {\n            cell.flags |= Flags.Cell.CELL_DARK;\n        }\n        else if (!(cell.flags & Flags.Cell.IS_IN_SHADOW)) {\n            cell.flags |= Flags.Cell.CELL_LIT;\n        }\n    });\n}\nexport function backUpLighting(map, lights) {\n    let k;\n    map.eachCell((cell, i, j) => {\n        for (k = 0; k < 3; k++) {\n            lights[i][j][k] = cell.light[k];\n        }\n    });\n}\nexport function restoreLighting(map, lights) {\n    let k;\n    map.eachCell((cell, i, j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = lights[i][j][k];\n        }\n    });\n}\nexport function recordOldLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.oldLight[k] = cell.light[k];\n            cell.flags &= ~Flags.Cell.LIGHT_CHANGED;\n        }\n    });\n}\nexport function zeroOutLights(map) {\n    let k;\n    const light = map.ambientLight ? map.ambientLight : [0, 0, 0];\n    map.eachCell((cell, _i, _j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = light[k];\n        }\n        cell.flags |= Flags.Cell.IS_IN_SHADOW;\n    });\n}\nexport function recordGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.glowLight[k] = cell.light[k];\n        }\n    });\n}\nexport function restoreGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = cell.glowLight[k];\n        }\n    });\n}\nexport function updateLighting(map) {\n    // Copy Light over oldLight\n    recordOldLights(map);\n    if (map.flags & Flags.Map.MAP_STABLE_LIGHTS)\n        return false;\n    // and then zero out Light.\n    zeroOutLights(map);\n    if (map.flags & Flags.Map.MAP_STABLE_GLOW_LIGHTS) {\n        restoreGlowLights(map);\n    }\n    else {\n        // GW.debug.log('painting glow lights.');\n        // Paint all glowing tiles.\n        map.eachGlowLight((light, x, y) => {\n            //   const light = lights[id];\n            if (light) {\n                light.paint(map, x, y);\n            }\n        });\n        recordGlowLights(map);\n        map.setFlag(Flags.Map.MAP_STABLE_GLOW_LIGHTS);\n    }\n    // Cycle through monsters and paint their lights:\n    map.eachDynamicLight((light, x, y) => {\n        light.paint(map, x, y);\n        // if (monst.mutationIndex >= 0 && mutationCatalog[monst.mutationIndex].light != lights['NO_LIGHT']) {\n        //     paint(map, mutationCatalog[monst.mutationIndex].light, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isBurning()) { // monst.status.burning && !(actor.kind.flags & Flags.Actor.AF_FIERY)) {\n        // \tpaint(map, lights.BURNING_CREATURE, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isTelepathicallyRevealed()) {\n        // \tpaint(map, lights['TELEPATHY_LIGHT'], actor.x, actor.y, false, true);\n        // }\n    });\n    // Also paint telepathy lights for dormant monsters.\n    // for (monst of map.dormantMonsters) {\n    //     if (monsterTelepathicallyRevealed(monst)) {\n    //         paint(map, lights['TELEPATHY_LIGHT'], monst.xLoc, monst.yLoc, false, true);\n    //     }\n    // }\n    updateDisplayDetail(map);\n    // Miner's light:\n    const PLAYER = DATA.player;\n    if (PLAYER) {\n        const MINERS_LIGHT = lights.MINERS_LIGHT;\n        if (MINERS_LIGHT && MINERS_LIGHT.radius) {\n            MINERS_LIGHT.paint(map, PLAYER.x, PLAYER.y, true, true);\n        }\n    }\n    map.setFlag(Flags.Map.MAP_STABLE_LIGHTS);\n    // if (PLAYER.status.invisible) {\n    //     PLAYER.info.foreColor = playerInvisibleColor;\n    // } else if (playerInDarkness()) {\n    // \tPLAYER.info.foreColor = playerInDarknessColor;\n    // } else if (pmap[PLAYER.xLoc][PLAYER.yLoc].flags & IS_IN_SHADOW) {\n    // \tPLAYER.info.foreColor = playerInShadowColor;\n    // } else {\n    // \tPLAYER.info.foreColor = playerInLightColor;\n    // }\n    return true;\n}\n// TODO - Move and make more generic\nexport function playerInDarkness(map, PLAYER, darkColor) {\n    const cell = map.cell(PLAYER.x, PLAYER.y);\n    return (cell.light[0] + 10 < darkColor.r &&\n        cell.light[1] + 10 < darkColor.g &&\n        cell.light[2] + 10 < darkColor.b);\n}\n","import { flag as Flag, utils as Utils, color as Color, canvas as Canvas, } from \"gw-utils\";\nimport { Tile as Flags, TileMech as MechFlags, Layer } from \"./flags\";\nimport * as Light from \"./light\";\nexport { Flags, MechFlags, Layer };\n/** Tile Class */\nexport class Tile {\n    /**\n     * Creates a new Tile object.\n     * @param {Object} [config={}] - The configuration of the Tile\n     * @param {String|Number|String[]} [config.flags=0] - Flags and MechFlags for the tile\n     * @param {String} [config.layer=GROUND] - Name of the layer for this tile\n     * @param {String} [config.ch] - The sprite character\n     * @param {String} [config.fg] - The sprite foreground color\n     * @param {String} [config.bg] - The sprite background color\n     */\n    constructor(config, base) {\n        this.flags = 0;\n        this.mechFlags = 0;\n        this.layer = Layer.GROUND;\n        this.priority = -1;\n        this.sprite = {};\n        this.activates = {};\n        this.light = null; // TODO - Light\n        this.flavor = null;\n        this.desc = null;\n        this.article = null;\n        this.dissipate = 2000; // 20 * 100 = 20%\n        if (base !== undefined) {\n            Utils.assignOmitting([\"activates\"], this, base);\n        }\n        Utils.assignOmitting([\n            \"Extends\",\n            \"extends\",\n            \"flags\",\n            \"mechFlags\",\n            \"sprite\",\n            \"activates\",\n            \"ch\",\n            \"fg\",\n            \"bg\",\n            \"light\",\n        ], this, config);\n        this.name = config.name || (base ? base.name : config.id);\n        this.id = config.id;\n        if (this.priority < 0) {\n            this.priority = 50;\n        }\n        if (this.layer !== undefined) {\n            if (typeof this.layer === \"string\") {\n                this.layer = Layer[this.layer];\n            }\n        }\n        this.flags = Flag.from(Flags, this.flags, config.flags);\n        this.mechFlags = Flag.from(MechFlags, this.mechFlags, config.mechFlags || config.flags);\n        if (config.light) {\n            // Light.from will throw an Error on invalid config\n            this.light = Light.from(config.light) || null;\n        }\n        if (config.sprite) {\n            this.sprite = Canvas.makeSprite(config.sprite);\n        }\n        else if (config.ch || config.fg || config.bg) {\n            this.sprite = Canvas.makeSprite(config.ch || null, config.fg || null, config.bg || null, config.opacity);\n        }\n        if (base && base.activates) {\n            Object.assign(this.activates, base.activates);\n        }\n        if (config.activates) {\n            Object.entries(config.activates).forEach(([key, info]) => {\n                if (info) {\n                    this.activates[key] = info;\n                }\n                else {\n                    delete this.activates[key];\n                }\n            });\n        }\n    }\n    /**\n     * Returns the flags for the tile after the given event is fired.\n     * @param {string} id - Name of the event to fire.\n     * @returns {number} The flags from the Tile after the event.\n     */\n    successorFlags(id) {\n        const e = this.activates[id];\n        if (!e)\n            return 0;\n        const tileId = e.tile;\n        if (!tileId)\n            return 0;\n        const tile = tiles[tileId];\n        if (!tile)\n            return 0;\n        return tile.flags;\n    }\n    /**\n     * Returns whether or not this tile as the given flag.\n     * Will return true if any bit in the flag is true, so testing with\n     * multiple flags will return true if any of them is set.\n     * @param {number} flag - The flag to check\n     * @returns {boolean} Whether or not the flag is set\n     */\n    hasFlag(flag) {\n        return (this.flags & flag) > 0;\n    }\n    hasMechFlag(flag) {\n        return (this.mechFlags & flag) > 0;\n    }\n    hasFlags(flags, mechFlags) {\n        return ((!flags || this.flags & flags) &&\n            (!mechFlags || this.mechFlags & mechFlags));\n    }\n    activatesOn(name) {\n        return !!this.activates[name];\n    }\n    getName(arg) {\n        let opts = {};\n        if (arg === true || arg === false) {\n            opts.article = arg;\n        }\n        else if (typeof arg === \"string\") {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = this.sprite.fg;\n            if (typeof color !== \"string\") {\n                color = Color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === \"string\" ? opts.article : this.article || \"a\";\n            result = article + \" \" + result;\n        }\n        return result;\n    }\n    getDescription(opts = {}) {\n        return this.getName(opts);\n    }\n}\n// Types.Tile = Tile;\nexport const tiles = {};\nexport function install(...args) {\n    let id = args[0];\n    let base = args[1];\n    let config = args[2];\n    if (arguments.length == 1) {\n        config = args[0];\n        base = config.Extends || config.extends || {};\n        id = config.id || config.name;\n    }\n    else if (arguments.length == 2) {\n        config = base;\n        base = config.Extends || config.extends || {};\n    }\n    if (typeof base === \"string\") {\n        base = tiles[base] || Utils.ERROR(\"Unknown base tile: \" + base);\n    }\n    config.name = config.name || id.toLowerCase();\n    config.id = id;\n    const tile = new Tile(config, base);\n    tiles[id] = tile;\n    return tile;\n}\n/**\n * Adds multiple tiles to the GW.tiles collection.\n * It extracts all the id:opts pairs from the config object and uses\n * them to call addTileKind.\n * @param {Object} config - The tiles to add in [id, config] pairs\n * @returns {void} Nothing\n * @see addTileKind\n */\nexport function installAll(config) {\n    Object.entries(config).forEach(([id, opts]) => {\n        opts.id = id;\n        install(id, opts);\n    });\n}\n","import { utils as Utils, random, grid as Grid, events as Events, color as Color, flag as Flag, data as Data, message as Msg, make as Make, } from \"gw-utils\";\nimport { Layer, Activation as Flags, Tile as TileFlags, CellMech as CellMechFlags, Cell as CellFlags, } from \"./flags\";\nimport { tiles as Tiles } from \"./tile\";\nexport { Flags };\nexport class Activation {\n    constructor(opts = {}) {\n        if (typeof opts === \"function\") {\n            opts = {\n                fn: opts,\n            };\n        }\n        this.tile = opts.tile || null;\n        this.fn = opts.fn || null;\n        this.item = opts.item || null;\n        this.chance = opts.chance || 0;\n        this.volume = opts.volume || 0;\n        // spawning pattern:\n        this.spread = opts.spread || 0;\n        this.radius = opts.radius || 0;\n        this.decrement = opts.decrement || 0;\n        this.flags = Flag.from(Flags, opts.flags);\n        this.matchTile = opts.matchTile || opts.needs || 0; /* ENUM tileType */\n        this.next = opts.next || null; /* ENUM makeEventTypes */\n        this.message = opts.message || null;\n        this.lightFlare = opts.flare || null;\n        this.flashColor = opts.flash ? Color.from(opts.flash) : null;\n        // this.effectRadius = radius || 0;\n        this.messageDisplayed = false;\n        this.emit = opts.emit || null; // name of the event to emit when activated\n        this.id = opts.id || null;\n    }\n}\nexport function make(opts) {\n    if (!opts)\n        return null;\n    if (typeof opts === \"string\") {\n        opts = { tile: opts };\n    }\n    const te = new Activation(opts);\n    return te;\n}\nexport const activations = {\n    DF_NONE: null,\n};\nexport function install(id, event) {\n    if (!(event instanceof Activation)) {\n        event = make(event);\n    }\n    activations[id] = event;\n    if (event)\n        event.id = id;\n    return event;\n}\nexport function resetAllMessages() {\n    Object.values(activations).forEach((f) => {\n        if (f instanceof Activation) {\n            f.messageDisplayed = false;\n        }\n    });\n}\n// returns whether the feature was successfully generated (false if we aborted because of blocking)\nexport async function spawn(activation, ctx = {}) {\n    let i, j;\n    if (!activation)\n        return false;\n    if (!ctx)\n        return false;\n    let feat;\n    if (typeof activation === \"string\") {\n        // @ts-ignore\n        feat = activations[activation];\n        if (!feat)\n            Utils.ERROR(\"Unknown tile Event: \" + activation);\n    }\n    else if (typeof activation === \"function\") {\n        return activation(ctx);\n    }\n    else {\n        feat = activation;\n    }\n    const map = ctx.map;\n    const x = ctx.x;\n    const y = ctx.y;\n    if (!map || x === undefined || y === undefined) {\n        Utils.ERROR(\"MAP, x, y are required in context.\");\n    }\n    if (ctx.safe &&\n        map.hasCellMechFlag(x, y, CellMechFlags.EVENT_FIRED_THIS_TURN)) {\n        if (!(feat.flags & Flags.DFF_ALWAYS_FIRE)) {\n            // Activation.debug('spawn - already fired.');\n            return false;\n        }\n    }\n    // Activation.debug('spawn', x, y, 'id=', feat.id, 'tile=', feat.tile, 'item=', feat.item);\n    // const refreshCell = (ctx.refreshCell =\n    //   ctx.refreshCell || !(feat.flags & Flags.DFF_NO_REDRAW_CELL));\n    const abortIfBlocking = (ctx.abortIfBlocking =\n        ctx.abortIfBlocking || feat.flags & Flags.DFF_ABORT_IF_BLOCKS_MAP);\n    // if ((feat.flags & DFF_RESURRECT_ALLY) && !resurrectAlly(x, y))\n    // {\n    //     return false;\n    // }\n    if (feat.message &&\n        feat.message.length &&\n        !feat.messageDisplayed &&\n        map.isVisible(x, y)) {\n        feat.messageDisplayed = true;\n        Msg.add(feat.message);\n    }\n    let tile = null;\n    if (feat.tile) {\n        tile = Tiles[feat.tile] || null;\n        if (!tile) {\n            Utils.ERROR(\"Unknown tile: \" + feat.tile);\n        }\n    }\n    let item = null;\n    if (feat.item && \"item\" in Make) {\n        item = Make.item(feat.item);\n        if (!item) {\n            Utils.ERROR(\"Unknown item: \" + feat.item);\n        }\n    }\n    // Blocking keeps track of whether to abort if it turns out that the DF would obstruct the level.\n    const blocking = (ctx.blocking =\n        abortIfBlocking &&\n            !(feat.flags & Flags.DFF_PERMIT_BLOCKING) &&\n            ((tile && tile.flags & TileFlags.T_PATHING_BLOCKER) ||\n                (item && item.blocksMove()) ||\n                feat.flags & Flags.DFF_TREAT_AS_BLOCKING)\n            ? true\n            : false);\n    // Activation.debug('- blocking', blocking);\n    const spawnMap = Grid.alloc(map.width, map.height);\n    let didSomething = false;\n    computeSpawnMap(feat, spawnMap, ctx);\n    if (!blocking ||\n        !map.gridDisruptsPassability(spawnMap, { bounds: ctx.bounds })) {\n        if (feat.flags & Flags.DFF_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (feat.flags & Flags.DFF_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (feat.flags & Flags.DFF_NULLIFY_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (nullifyCells(map, spawnMap, feat.flags)) {\n                didSomething = true;\n            }\n        }\n        if (tile || item || feat.fn) {\n            if (await spawnTiles(feat, spawnMap, ctx, tile, item)) {\n                didSomething = true;\n            }\n        }\n    }\n    if (item) {\n        item.delete();\n    }\n    if (didSomething && feat.flags & Flags.DFF_PROTECTED) {\n        spawnMap.forEach((v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            cell.mechFlags |= CellMechFlags.EVENT_PROTECTED;\n        });\n    }\n    if (didSomething) {\n        // if ((feat.flags & Flags.DFF_AGGRAVATES_MONSTERS) && feat.effectRadius) {\n        //     await aggravateMonsters(feat.effectRadius, x, y, /* Color. */gray);\n        // }\n        // if (refreshCell && feat.flashColor && feat.effectRadius) {\n        //     await colorFlash(feat.flashColor, 0, (IN_FOV | CLAIRVOYANT_VISIBLE), 4, feat.effectRadius, x, y);\n        // }\n        // if (refreshCell && feat.lightFlare) {\n        //     createFlare(x, y, feat.lightFlare);\n        // }\n    }\n    // if (refreshCell && feat.tile\n    // \t&& (tile.flags & (TileFlags.T_IS_FIRE | TileFlags.T_AUTO_DESCENT))\n    // \t&& map.hasTileFlag(PLAYER.xLoc, PLAYER.yLoc, (TileFlags.T_IS_FIRE | TileFlags.T_AUTO_DESCENT)))\n    // {\n    // \tawait applyInstantTileEffectsToCreature(PLAYER);\n    // }\n    // apply tile effects\n    if (didSomething) {\n        for (let i = 0; i < spawnMap.width; ++i) {\n            for (let j = 0; j < spawnMap.height; ++j) {\n                const v = spawnMap[i][j];\n                if (!v || Data.gameHasEnded)\n                    continue;\n                const cell = map.cell(i, j);\n                if (cell.actor || cell.item) {\n                    for (let t of cell.tiles()) {\n                        await t.applyInstantEffects(map, i, j, cell);\n                        if (Data.gameHasEnded) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (feat.emit) {\n        await Events.emit(feat.emit, ctx);\n        didSomething = true;\n    }\n    if (Data.gameHasEnded) {\n        Grid.free(spawnMap);\n        return didSomething;\n    }\n    //\tif (succeeded && feat.message[0] && !feat.messageDisplayed && isVisible(x, y)) {\n    //\t\tfeat.messageDisplayed = true;\n    //\t\tmessage(feat.message, false);\n    //\t}\n    if (feat.next && (didSomething || feat.flags & Flags.DFF_SUBSEQ_ALWAYS)) {\n        // Activation.debug('- subsequent: %s, everywhere=%s', feat.next, feat.flags & Flags.DFF_SUBSEQ_EVERYWHERE);\n        if (feat.flags & Flags.DFF_SUBSEQ_EVERYWHERE) {\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j]) {\n                        ctx.x = i;\n                        ctx.y = j;\n                        await spawn(feat.next, ctx);\n                    }\n                }\n            }\n            ctx.x = x;\n            ctx.y = y;\n        }\n        else {\n            await spawn(feat.next, ctx);\n        }\n    }\n    if (didSomething) {\n        if (tile &&\n            tile.flags &\n                (TileFlags.T_DEEP_WATER | TileFlags.T_LAVA | TileFlags.T_AUTO_DESCENT)) {\n            Data.updateMapToShoreThisTurn = false;\n        }\n        // awaken dormant creatures?\n        // if (feat.flags & Flags.DFF_ACTIVATE_DORMANT_MONSTER) {\n        //     for (monst of map.dormant) {\n        //         if (monst.x == x && monst.y == y || spawnMap[monst.x][monst.y]) {\n        //             // found it!\n        //             toggleMonsterDormancy(monst);\n        //         }\n        //     }\n        // }\n    }\n    if (didSomething) {\n        spawnMap.forEach((v, i, j) => {\n            if (v)\n                map.redrawXY(i, j);\n        });\n        map.needsRedraw();\n        if (!(feat.flags & Flags.DFF_NO_MARK_FIRED)) {\n            spawnMap.forEach((v, i, j) => {\n                if (v) {\n                    map.setCellFlags(i, j, 0, CellMechFlags.EVENT_FIRED_THIS_TURN);\n                }\n            });\n        }\n    }\n    // Activation.debug('- spawn complete : @%d,%d, ok=%s, feat=%s', ctx.x, ctx.y, didSomething, feat.id);\n    Grid.free(spawnMap);\n    return didSomething;\n}\nfunction cellIsOk(feat, x, y, ctx = {}) {\n    const map = ctx.map;\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (feat.flags & Flags.DFF_BUILD_IN_WALLS) {\n        if (!cell.isWall())\n            return false;\n    }\n    else if (feat.flags & Flags.DFF_MUST_TOUCH_WALLS) {\n        let ok = false;\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = true;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    else if (feat.flags & Flags.DFF_NO_TOUCH_WALLS) {\n        let ok = true;\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = false;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    if (ctx.bounds && !ctx.bounds.containsXY(x, y))\n        return false;\n    if (feat.matchTile && !cell.hasTile(feat.matchTile))\n        return false;\n    if (cell.hasTileFlag(TileFlags.T_OBSTRUCTS_TILE_EFFECTS) &&\n        !feat.matchTile &&\n        (ctx.x != x || ctx.y != y))\n        return false;\n    return true;\n}\nexport function computeSpawnMap(feat, spawnMap, ctx = {}) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    const map = ctx.map;\n    const x = ctx.x;\n    const y = ctx.y;\n    const bounds = ctx.bounds || null;\n    if (bounds) {\n        // Activation.debug('- bounds', bounds);\n    }\n    let startProb = feat.spread || 0;\n    let probDec = feat.decrement || 0;\n    if (feat.matchTile && typeof feat.matchTile === \"string\") {\n        const name = feat.matchTile;\n        const tile = Tiles[name];\n        if (!tile) {\n            Utils.ERROR(\"Failed to find match tile with name:\" + name);\n        }\n        feat.matchTile = tile.id;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let radius = feat.radius || 0;\n    if (feat.flags & Flags.DFF_SPREAD_CIRCLE) {\n        radius = 0;\n        startProb = startProb || 100;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        while (random.chance(startProb)) {\n            startProb -= probDec;\n            ++radius;\n        }\n        startProb = 100;\n        probDec = 0;\n    }\n    if (radius) {\n        startProb = startProb || 100;\n        spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n            if (!cellIsOk(feat, i, j, ctx))\n                return 0;\n            const dist = Math.floor(Utils.distanceBetween(x, y, i, j));\n            const prob = startProb - dist * probDec;\n            if (!random.chance(prob))\n                return 0;\n            return 1;\n        });\n        spawnMap[x][y] = 1;\n    }\n    else if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (feat.flags & Flags.DFF_SPREAD_LINE) {\n            x2 = x;\n            y2 = y;\n            const dir = Utils.DIRS[random.number(4)];\n            while (madeChange) {\n                madeChange = false;\n                x2 = x2 + dir[0];\n                y2 = y2 + dir[1];\n                if (spawnMap.hasXY(x2, y2) &&\n                    !spawnMap[x2][y2] &&\n                    cellIsOk(feat, x2, y2, ctx) &&\n                    random.chance(startProb)) {\n                    spawnMap[x2][y2] = 1;\n                    madeChange = true;\n                    startProb -= probDec;\n                }\n            }\n        }\n        else {\n            if (probDec <= 0)\n                probDec = startProb;\n            while (madeChange && startProb > 0) {\n                madeChange = false;\n                t++;\n                for (i = 0; i < map.width; i++) {\n                    for (j = 0; j < map.height; j++) {\n                        if (spawnMap[i][j] == t - 1) {\n                            for (dir = 0; dir < 4; dir++) {\n                                x2 = i + Utils.DIRS[dir][0];\n                                y2 = j + Utils.DIRS[dir][1];\n                                if (spawnMap.hasXY(x2, y2) &&\n                                    !spawnMap[x2][y2] &&\n                                    cellIsOk(feat, x2, y2, ctx) &&\n                                    random.chance(startProb)) {\n                                    spawnMap[x2][y2] = t;\n                                    madeChange = true;\n                                }\n                            }\n                        }\n                    }\n                }\n                startProb -= probDec;\n            }\n        }\n    }\n    if (!cellIsOk(feat, x, y, ctx)) {\n        spawnMap[x][y] = 0;\n    }\n}\nexport async function spawnTiles(feat, spawnMap, ctx, tile, item) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = feat.flags & Flags.DFF_BLOCKED_BY_OTHER_LAYERS;\n    const superpriority = feat.flags & Flags.DFF_SUPERPRIORITY;\n    const applyEffects = ctx.refreshCell;\n    const map = ctx.map;\n    const volume = ctx.volume || feat.volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.mechFlags & CellMechFlags.EVENT_PROTECTED)\n                continue;\n            if (tile) {\n                if (cell.layers[tile.layer] === tile.id) {\n                    // If the new cell does not already contains the fill terrain,\n                    if (tile.layer == Layer.GAS) {\n                        spawnMap[i][j] = 1;\n                        cell.gasVolume += volume;\n                    }\n                    else if (tile.layer == Layer.LIQUID) {\n                        spawnMap[i][j] = 1;\n                        cell.liquidVolume += volume;\n                    }\n                }\n                else if ((superpriority || cell.tile(tile.layer).priority < tile.priority) && // If the terrain in the layer to be overwritten has a higher priority number (unless superpriority),\n                    !cell.obstructsLayer(tile.layer) && // If we will be painting into the surface layer when that cell forbids it,\n                    (!cell.item || !(feat.flags & Flags.DFF_BLOCKED_BY_ITEMS)) &&\n                    (!cell.actor || !(feat.flags & Flags.DFF_BLOCKED_BY_ACTORS)) &&\n                    (!blockedByOtherLayers ||\n                        cell.highestPriorityTile().priority < tile.priority)) {\n                    // if the fill won't violate the priority of the most important terrain in this cell:\n                    spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                    map.setTile(i, j, tile, volume);\n                    // map.redrawCell(cell);\n                    // if (volume && cell.gas) {\n                    //     cell.volume += (feat.volume || 0);\n                    // }\n                    // debug('- tile', i, j, 'tile=', tile.id);\n                    // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                    accomplishedSomething = true;\n                }\n            }\n            if (item) {\n                if (superpriority || !cell.item) {\n                    if (!cell.hasTileFlag(TileFlags.T_OBSTRUCTS_ITEMS)) {\n                        spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                        if (cell.item) {\n                            map.removeItem(cell.item);\n                        }\n                        const clone = item.clone();\n                        map.addItem(i, j, clone);\n                        // map.redrawCell(cell);\n                        // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                        accomplishedSomething = true;\n                        // Activation.debug('- item', i, j, 'item=', itemKind.id);\n                    }\n                }\n            }\n            if (feat.fn) {\n                if (await feat.fn(i, j, ctx)) {\n                    spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                    // map.redrawCell(cell);\n                    // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                    accomplishedSomething = true;\n                }\n            }\n            if (applyEffects) {\n                // if (PLAYER.xLoc == i && PLAYER.yLoc == j && !PLAYER.status.levitating && refresh) {\n                // \tflavorMessage(tileFlavor(PLAYER.xLoc, PLAYER.yLoc));\n                // }\n                // if (cell.actor || cell.item) {\n                // \tfor(let t of cell.tiles()) {\n                // \t\tawait t.applyInstantEffects(map, i, j, cell);\n                // \t\tif (Data.gameHasEnded) {\n                // \t\t\treturn true;\n                // \t\t}\n                // \t}\n                // }\n                // if (tile.flags & TileFlags.T_IS_FIRE) {\n                // \tif (cell.flags & CellFlags.HAS_ITEM) {\n                // \t\ttheItem = map.itemAt(i, j);\n                // \t\tif (theItem.flags & Flags.Item.ITEM_FLAMMABLE) {\n                // \t\t\tawait burnItem(theItem);\n                // \t\t}\n                // \t}\n                // }\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.changed(true);\n    }\n    return accomplishedSomething;\n}\nexport function nullifyCells(map, spawnMap, flags) {\n    let didSomething = false;\n    const nullSurface = flags & Flags.DFF_NULL_SURFACE;\n    const nullLiquid = flags & Flags.DFF_NULL_LIQUID;\n    const nullGas = flags & Flags.DFF_NULL_GAS;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        map.nullifyCellLayers(i, j, !!nullLiquid, !!nullSurface, !!nullGas);\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let i, j;\n    let monst;\n    let didSomething = false;\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            if (blockingMap[i][j] && map.hasCellFlag(i, j, CellFlags.HAS_ACTOR)) {\n                monst = map.actorAt(i, j);\n                if (monst === null)\n                    continue;\n                const loc = map.matchingLocNear(i, j, (cell) => {\n                    return !(monst === null || monst === void 0 ? void 0 : monst.forbidsCell(cell));\n                }, { hallways: true, blockingMap });\n                map.moveActor(loc[0], loc[1], monst);\n                map.redrawXY(loc[0], loc[1]);\n                didSomething = true;\n            }\n        }\n    }\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    blockingMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (!cell.item)\n            return;\n        const loc = map.matchingLocNear(i, j, (cell) => {\n            var _a;\n            return !!((_a = cell.item) === null || _a === void 0 ? void 0 : _a.forbidsCell(cell));\n        }, { hallways: true, blockingMap });\n        if (loc) {\n            map.removeItem(cell.item);\n            map.addItem(loc[0], loc[1], cell.item);\n            map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import { color as Color, canvas as Canvas, utils as Utils, config as CONFIG, data as DATA, random, make as Make, } from \"gw-utils\";\nimport { Tile, tiles as TILES, Layer } from \"./tile\";\nimport * as Activation from \"./activation\";\nimport * as Light from \"./light\";\nimport { Cell as Flags, CellMech as MechFlags, TileMech as TileMechFlags, Tile as TileFlags, Map as MapFlags, } from \"./flags\";\nexport { Flags, MechFlags };\n// TODO - Move to gw-ui\nColor.install(\"cursorColor\", 25, 100, 150);\nCONFIG.cursorPathIntensity = 50;\nexport class CellMemory {\n    constructor() {\n        this.mixer = new Canvas.Mixer();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    nullify() {\n        this.mixer.nullify();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    copy(other) {\n        const mixer = this.mixer;\n        Object.assign(this, other);\n        this.mixer = mixer;\n        this.mixer.copy(other.mixer);\n    }\n}\nexport class Cell {\n    constructor() {\n        this.layers = [null, null, null, null];\n        this.sprites = null;\n        this.actor = null;\n        this.item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory = new CellMemory();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n    }\n    copy(other) {\n        Utils.copyObject(this, other);\n    }\n    nullify() {\n        for (let i = 0; i < this.layers.length; ++i) {\n            this.layers[i] = null;\n        }\n        this.sprites = null;\n        this.actor = null;\n        this.item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory.nullify();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n    }\n    nullifyLayers(nullLiquid = false, nullSurface = false, nullGas = false) {\n        if (nullLiquid) {\n            this.layers[1] = null;\n            this.liquidVolume = 0;\n        }\n        if (nullSurface) {\n            this.layers[2] = null;\n        }\n        if (nullGas) {\n            this.layers[3] = null;\n            this.gasVolume = 0;\n        }\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    get ground() {\n        return this.layers[Layer.GROUND];\n    }\n    get liquid() {\n        return this.layers[Layer.LIQUID];\n    }\n    get surface() {\n        return this.layers[Layer.SURFACE];\n    }\n    get gas() {\n        return this.layers[Layer.GAS];\n    }\n    get groundTile() {\n        return TILES[this.layers[Layer.GROUND] || \"0\"];\n    }\n    get liquidTile() {\n        return TILES[this.layers[Layer.LIQUID] || \"0\"];\n    }\n    get surfaceTile() {\n        return TILES[this.layers[Layer.SURFACE] || \"0\"];\n    }\n    get gasTile() {\n        return TILES[this.layers[Layer.GAS] || \"0\"];\n    }\n    dump() {\n        if (this.actor)\n            return this.actor.sprite.ch;\n        if (this.item)\n            return this.item.sprite.ch;\n        for (let i = this.layers.length - 1; i >= 0; --i) {\n            if (!this.layers[i])\n                continue;\n            const tile = TILES[this.layers[i] || \"0\"];\n            if (tile.sprite.ch)\n                return tile.sprite.ch;\n        }\n        return TILES[0].sprite.ch;\n    }\n    changed() {\n        return this.flags & Flags.CELL_CHANGED;\n    }\n    isVisible() {\n        return this.flags & Flags.VISIBLE;\n    }\n    isAnyKindOfVisible() {\n        return (this.flags & Flags.ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isOrWasAnyKindOfVisible() {\n        return (this.flags &\n            Flags.IS_WAS_ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isRevealed(orMapped = false) {\n        const flag = Flags.REVEALED | (orMapped ? Flags.MAGIC_MAPPED : 0);\n        return this.flags & flag;\n    }\n    listInSidebar() {\n        return this.hasTileMechFlag(TileMechFlags.TM_LIST_IN_SIDEBAR, true);\n    }\n    _needsRedraw() {\n        this.flags |= Flags.NEEDS_REDRAW;\n    }\n    // TODO - Use functions in LIGHT to check these on cell.light directly???\n    hasVisibleLight() {\n        return Light.intensity(this.light) > CONFIG.light.INTENSITY_DARK;\n    } // TODO\n    isDark() {\n        return Light.intensity(this.light) <= CONFIG.light.INTENSITY_DARK;\n    } // TODO\n    lightChanged() {\n        return this.flags & Flags.LIGHT_CHANGED;\n    } // TODO\n    tile(layer = 0) {\n        const id = this.layers[layer] || 0;\n        return TILES[id];\n    }\n    *tiles() {\n        for (let id of this.layers) {\n            if (id) {\n                yield TILES[id];\n            }\n        }\n    }\n    tileFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags;\n        }\n        return flags;\n    }\n    tileMechFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileMechFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.mechFlags;\n        }\n        return flags;\n    }\n    hasTileFlag(flagMask = 0, limitToPlayerKnowledge = false) {\n        const tileFlags = this.tileFlags(limitToPlayerKnowledge);\n        return !!(flagMask & tileFlags);\n    }\n    hasAllTileFlags(flags = 0) {\n        return (flags & this.tileFlags()) === flags;\n    }\n    hasTileMechFlag(flagMask = 0, limitToPlayerKnowledge = false) {\n        const mechFlags = this.tileMechFlags(limitToPlayerKnowledge);\n        return !!(flagMask & mechFlags);\n    }\n    hasAllTileMechFlags(flags = 0) {\n        return (flags & this.tileMechFlags()) === flags;\n    }\n    setFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags |= cellFlag;\n        this.mechFlags |= cellMechFlag;\n        // this.flags |= Flags.NEEDS_REDRAW;\n    }\n    clearFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags &= ~cellFlag;\n        this.mechFlags &= ~cellMechFlag;\n        // if ((~cellFlag) & Flags.NEEDS_REDRAW) {\n        //   this.flags |= Flags.NEEDS_REDRAW;\n        // }\n    }\n    hasFlag(flag = 0, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellFlags\n            : this.flags;\n        return !!(flag & flags);\n    }\n    hasMechFlag(flag = 0, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellMechFlags\n            : this.mechFlags;\n        return !!(flag & flags);\n    }\n    hasTile(tile) {\n        let id;\n        if (tile instanceof Tile) {\n            id = tile.id;\n        }\n        else {\n            id = tile;\n        }\n        return this.layers.includes(id);\n    }\n    // hasTileInGroup(...groups) {\n    //   if (groups.length == 1 && Array.isArray(groups[0])) {\n    //     groups = groups[0];\n    //   }\n    //   return this.layers.some( (tileId) => {\n    //     const tile = TILES[tileId] || TILES.NOTHING;\n    //     return Utils.intersect(groups, tile.groups);\n    //   });\n    // }\n    successorTileFlags(id) {\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.successorFlags(id);\n        }\n        return flags;\n    }\n    promotedTileFlags() {\n        return this.successorTileFlags(\"promote\");\n    }\n    discoveredTileFlags() {\n        return this.successorTileFlags(\"discover\");\n    }\n    hasDiscoveredTileFlag(flag) {\n        // if (!this.hasTileMechFlag(TM_IS_SECRET)) return false;\n        return this.discoveredTileFlags() & flag;\n    }\n    highestPriorityTile(skipGas = false) {\n        let best = TILES[0];\n        let bestPriority = -10000;\n        for (let layer = Layer.GROUND; layer <= (skipGas ? Layer.LIQUID : Layer.GAS); ++layer) {\n            // @ts-ignore\n            const id = this.layers[layer];\n            if (!id)\n                continue;\n            const tile = TILES[id];\n            if (tile.priority > bestPriority) {\n                best = tile;\n                bestPriority = tile.priority;\n            }\n        }\n        return best;\n    }\n    tileWithFlag(tileFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags & tileFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileWithMechFlag(mechFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.mechFlags & mechFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileDesc() {\n        return this.highestPriorityTile().desc;\n    }\n    tileFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    isNull() {\n        return this.ground == null;\n    }\n    isEmpty() {\n        return !(this.actor || this.item);\n    }\n    isPassableNow(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        if (!(tileFlags & TileFlags.T_PATHING_BLOCKER))\n            return true;\n        if (tileFlags & TileFlags.T_BRIDGE)\n            return true;\n        return limitToPlayerKnowledge\n            ? false\n            : this.isSecretDoor(limitToPlayerKnowledge);\n    }\n    canBePassed(limitToPlayerKnowledge = false) {\n        if (this.isPassableNow(limitToPlayerKnowledge))\n            return true;\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileMechFlags = useMemory\n            ? this.memory.tileMechFlags\n            : this.tileMechFlags();\n        if (tileMechFlags & TileMechFlags.TM_CONNECTS_LEVEL)\n            return true;\n        return !!(tileMechFlags & TileMechFlags.TM_PROMOTES &&\n            !(this.promotedTileFlags() & TileFlags.T_PATHING_BLOCKER));\n    }\n    isWall(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_OBSTRUCTS_EVERYTHING);\n    }\n    isObstruction(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_OBSTRUCTS_DIAGONAL_MOVEMENT);\n    }\n    isDoor(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_IS_DOOR);\n    }\n    isSecretDoor(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge)\n            return false;\n        const tileMechFlags = this.tileMechFlags();\n        return !!(tileMechFlags & TileMechFlags.TM_IS_SECRET &&\n            !(this.discoveredTileFlags() & TileFlags.T_PATHING_BLOCKER));\n    }\n    blocksPathing(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_PATHING_BLOCKER);\n    }\n    blocksVision() {\n        let tileFlags = this.tileFlags();\n        return !!(tileFlags & TileFlags.T_OBSTRUCTS_VISION);\n    }\n    isLiquid(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_IS_LIQUID);\n    }\n    hasGas(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_GAS);\n    }\n    markRevealed() {\n        this.flags &= ~Flags.STABLE_MEMORY;\n        if (this.flags & Flags.REVEALED)\n            return false;\n        this.flags |= Flags.REVEALED;\n        if (!this.hasTileFlag(TileFlags.T_PATHING_BLOCKER)) {\n            DATA.xpxpThisTurn++;\n        }\n        return true;\n    }\n    obstructsLayer(layer) {\n        return (layer == Layer.SURFACE && this.hasTileFlag(TileFlags.T_OBSTRUCTS_SURFACE));\n    }\n    _setTile(tileId = null, volume = 0, map) {\n        map = map || DATA.map;\n        let tile;\n        if (tileId === null) {\n            tile = TILES[\"0\"];\n        }\n        else if (typeof tileId === \"string\") {\n            tile = TILES[tileId];\n        }\n        else if (tileId instanceof Tile) {\n            tile = tileId;\n            tileId = tile.id;\n        }\n        else if (!!tileId) {\n            Utils.ERROR(\"Unknown tile: \" + tileId);\n        }\n        if (!tile) {\n            Utils.WARN(\"Unknown tile - \" + tileId);\n            tile = TILES[\"0\"];\n            tileId = null;\n        }\n        // @ts-ignore\n        const oldTileId = this.layers[tile.layer] || null;\n        // @ts-ignore\n        const oldTile = TILES[oldTileId] || TILES[\"0\"];\n        if ((oldTile.flags & TileFlags.T_PATHING_BLOCKER) !=\n            (tile.flags & TileFlags.T_PATHING_BLOCKER)) {\n            DATA.staleLoopMap = true;\n        }\n        if (tile.flags & TileFlags.T_IS_FIRE &&\n            !(oldTile.flags & TileFlags.T_IS_FIRE)) {\n            this.setFlags(0, MechFlags.CAUGHT_FIRE_THIS_TURN);\n        }\n        const blocksVision = tile.flags & TileFlags.T_OBSTRUCTS_VISION;\n        const oldBlocksVision = oldTile.flags & TileFlags.T_OBSTRUCTS_VISION;\n        if (map && this.isAnyKindOfVisible() && blocksVision != oldBlocksVision) {\n            map.setFlag(MapFlags.MAP_FOV_CHANGED);\n        }\n        // @ts-ignore\n        this.layers[tile.layer] = tileId;\n        if (tile.layer == Layer.LIQUID) {\n            this.liquidVolume =\n                volume + (tileId == oldTileId ? this.liquidVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_LIQUID);\n        }\n        else if (tile.layer == Layer.GAS) {\n            this.gasVolume = volume + (tileId == oldTileId ? this.gasVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_GAS);\n        }\n        if (tile.layer > 0 && this.layers[0] === null) {\n            this.layers[0] = \"FLOOR\"; // TODO - Not good\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n        if (map && oldTile.light !== tile.light) {\n            map.clearFlag(MapFlags.MAP_STABLE_GLOW_LIGHTS | MapFlags.MAP_STABLE_LIGHTS);\n        }\n        return true;\n    }\n    clearLayer(layer) {\n        // @ts-ignore\n        if (typeof layer === \"string\")\n            layer = Layer[layer];\n        // @ts-ignore\n        if (this.layers[layer]) {\n            // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n            this.flags |= Flags.CELL_CHANGED;\n        }\n        // @ts-ignore\n        this.layers[layer] = null;\n        if (layer == Layer.LIQUID) {\n            this.liquidVolume = 0;\n        }\n        else if (layer == Layer.GAS) {\n            this.gasVolume = 0;\n        }\n    }\n    clearLayers(except, floorTile) {\n        floorTile = floorTile ? floorTile : this.layers[0];\n        for (let layer = 0; layer < this.layers.length; layer++) {\n            if (layer != except && layer != Layer.GAS) {\n                this.layers[layer] = layer ? null : floorTile;\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    nullifyTileWithFlags(tileFlags, tileMechFlags = 0) {\n        for (let i = 0; i < this.layers.length; ++i) {\n            const id = this.layers[i];\n            if (!id)\n                continue;\n            const tile = TILES[id];\n            if (tileFlags && tileMechFlags) {\n                if (tile.flags & tileFlags && tile.mechFlags & tileMechFlags) {\n                    this.layers[i] = null;\n                }\n            }\n            else if (tileFlags) {\n                if (tile.flags & tileFlags) {\n                    this.layers[i] = null;\n                }\n            }\n            else if (tileMechFlags) {\n                if (tile.flags & tileMechFlags) {\n                    this.layers[i] = null;\n                }\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    // EVENTS\n    async activate(name, ctx = {}) {\n        ctx.cell = this;\n        let fired = false;\n        // cell.debug(\"fire event - %s\", name);\n        for (let tile of this.tiles()) {\n            if (!tile.activates)\n                continue;\n            const ev = tile.activates[name];\n            if (ev) {\n                // cell.debug(\" - has event\");\n                if (ev.chance && !random.chance(ev.chance, 10000)) {\n                    continue;\n                }\n                ctx.tile = tile;\n                // cell.debug(\" - spawn event @%d,%d - %s\", ctx.x, ctx.y, name);\n                fired = (await Activation.spawn(ev, ctx)) || fired;\n                // cell.debug(\" - spawned\");\n                if (fired) {\n                    break;\n                }\n            }\n        }\n        if (fired) {\n            // this.mechFlags |= MechFlags.EVENT_FIRED_THIS_TURN;\n        }\n        return fired;\n    }\n    activatesOn(name) {\n        for (let tile of this.tiles()) {\n            if (tile.activatesOn(name))\n                return true;\n        }\n        return false;\n    }\n    // SPRITES\n    addSprite(layer, sprite, priority = 50) {\n        if (!sprite)\n            return;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        if (!this.sprites ||\n            this.sprites.layer > layer ||\n            (this.sprites.layer == layer && this.sprites.priority > priority)) {\n            this.sprites = { layer, priority, sprite, next: this.sprites };\n            return;\n        }\n        let current = this.sprites;\n        while (current.next &&\n            (current.layer < layer ||\n                (current.layer == layer && current.priority <= priority))) {\n            current = current.next;\n        }\n        const item = { layer, priority, sprite, next: current.next };\n        current.next = item;\n    }\n    removeSprite(sprite) {\n        if (!sprite)\n            return false;\n        if (!this.sprites)\n            return false;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        if (this.sprites && this.sprites.sprite === sprite) {\n            this.sprites = this.sprites.next;\n            return true;\n        }\n        let prev = this.sprites;\n        let current = this.sprites.next;\n        while (current) {\n            if (current.sprite === sprite) {\n                prev.next = current.next;\n                return true;\n            }\n            current = current.next;\n        }\n        return false;\n    }\n    // MEMORY\n    storeMemory() {\n        const memory = this.memory;\n        memory.tileFlags = this.tileFlags();\n        memory.tileMechFlags = this.tileMechFlags();\n        memory.cellFlags = this.flags;\n        memory.cellMechFlags = this.mechFlags;\n        memory.tile = this.highestPriorityTile();\n        if (this.item) {\n            memory.item = this.item;\n            memory.itemQuantity = this.item.quantity || 1;\n        }\n        else {\n            memory.item = null;\n            memory.itemQuantity = 0;\n        }\n        memory.actor = this.actor;\n        getAppearance(this, memory.mixer);\n        if (this.actor && this.isOrWasAnyKindOfVisible()) {\n            if (this.actor.rememberedInCell && this.actor.rememberedInCell !== this) {\n                console.log(\"remembered in cell change\");\n                this.actor.rememberedInCell.storeMemory();\n                this.actor.rememberedInCell.flags |= Flags.NEEDS_REDRAW;\n            }\n            this.actor.rememberedInCell = this;\n        }\n    }\n}\nexport function make() {\n    const cell = new Cell();\n    return cell;\n}\nMake.cell = make;\nexport function getAppearance(cell, dest) {\n    const memory = cell.memory.mixer;\n    memory.blackOut();\n    let needDistinctness = false;\n    for (let tile of cell.tiles()) {\n        let alpha = 100;\n        if (tile.layer == Layer.LIQUID) {\n            alpha = Utils.clamp(cell.liquidVolume || 0, 20, 100);\n        }\n        else if (tile.layer == Layer.GAS) {\n            alpha = Utils.clamp(cell.gasVolume || 0, 20, 100);\n        }\n        memory.drawSprite(tile.sprite, alpha);\n        if (tile.mechFlags & TileMechFlags.TM_VISUALLY_DISTINCT) {\n            needDistinctness = true;\n        }\n    }\n    let current = cell.sprites;\n    while (current) {\n        memory.drawSprite(current.sprite);\n        current = current.next;\n    }\n    memory.fg.multiply(cell.light);\n    memory.bg.multiply(cell.light);\n    memory.bake(!cell.isAnyKindOfVisible()); // turns off dancing if not visible\n    if (needDistinctness) {\n        Color.separate(memory.fg, memory.bg);\n    }\n    dest.drawSprite(memory);\n    return true;\n}\n","import { utils as Utils, random, grid as Grid, fov as Fov, flag as Flag, path as Path, color as Color, colors as COLORS, canvas as Canvas, config as CONFIG, data as DATA, make as Make, } from \"gw-utils\";\nimport * as Cell from \"./cell\";\nimport { Map as Flags, Cell as CellFlags, Tile as TileFlags, CellMech as CellMechFlags, TileMech as TileMechFlags, Layer as TileLayer, } from \"./flags\";\nexport { Flags };\nUtils.setDefaults(CONFIG, {\n    \"map.deepestLevel\": 99,\n});\nexport class Map {\n    constructor(w, h, opts = {}) {\n        this.locations = {};\n        this.config = {};\n        this._actors = null;\n        this._items = null;\n        this.flags = 0;\n        this.ambientLight = null;\n        this.lights = null;\n        this.events = {};\n        this._width = w;\n        this._height = h;\n        this.cells = Grid.make(w, h, () => new Cell.Cell());\n        this.locations = opts.locations || {};\n        this.config = Object.assign({}, opts);\n        this.config.tick = this.config.tick || 100;\n        this._actors = null;\n        this._items = null;\n        this.flags = Flag.from(Flags, Flags.MAP_DEFAULT, opts.flags);\n        this.ambientLight = null;\n        const ambient = opts.ambient || opts.ambientLight || opts.light;\n        if (ambient) {\n            this.ambientLight = Color.make(ambient);\n        }\n        this.lights = null;\n        this.id = opts.id;\n        this.events = opts.events || {};\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    async start() { }\n    nullify() {\n        this.cells.forEach((c) => c.nullify());\n    }\n    dump(fmt) {\n        this.cells.dump(fmt || ((c) => c.dump()));\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    eachCell(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    forEach(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    forRect(x, y, w, h, fn) {\n        this.cells.forRect(x, y, w, h, (c, i, j) => fn(c, i, j, this));\n    }\n    eachNeighbor(x, y, fn, only4dirs = false) {\n        this.cells.eachNeighbor(x, y, (c, i, j) => fn(c, i, j, this), only4dirs);\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.cells.isBoundaryXY(x, y);\n    }\n    changed(v) {\n        if (v === true) {\n            this.flags |= Flags.MAP_CHANGED;\n        }\n        else if (v === false) {\n            this.flags &= ~Flags.MAP_CHANGED;\n        }\n        return this.flags & Flags.MAP_CHANGED;\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).flags & flag;\n    }\n    hasCellMechFlag(x, y, flag) {\n        return this.cell(x, y).mechFlags & flag;\n    }\n    hasTileFlag(x, y, flag) {\n        return this.cell(x, y).hasTileFlag(flag);\n    }\n    hasTileMechFlag(x, y, flag) {\n        return this.cell(x, y).hasTileMechFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).flags |= flag;\n    }\n    redrawCell(cell) {\n        // if (cell.isAnyKindOfVisible()) {\n        cell._needsRedraw();\n        this.flags |= Flags.MAP_CHANGED;\n        // }\n    }\n    redrawXY(x, y) {\n        const cell = this.cell(x, y);\n        this.redrawCell(cell);\n    }\n    redrawAll() {\n        this.forEach((c) => {\n            // if (c.isAnyKindOfVisible()) {\n            c.flags |= CellFlags.NEEDS_REDRAW;\n            // }\n        });\n        this.flags |= Flags.MAP_CHANGED;\n    }\n    revealAll() {\n        this.forEach((c) => {\n            c.markRevealed();\n            c.storeMemory();\n        });\n    }\n    markRevealed(x, y) {\n        if (!this.cell(x, y).markRevealed())\n            return;\n        if (DATA.player) {\n            DATA.player.invalidateCostMap();\n        }\n    }\n    isVisible(x, y) {\n        return this.cell(x, y).isVisible();\n    }\n    isAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isAnyKindOfVisible();\n    }\n    isOrWasAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isOrWasAnyKindOfVisible();\n    }\n    hasVisibleLight(x, y) {\n        return this.cell(x, y).hasVisibleLight();\n    }\n    setFlag(flag) {\n        this.flags |= flag;\n        this.changed(true);\n    }\n    setFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags |= mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((c) => c.setFlags(cellFlag, cellMechFlag));\n        }\n        this.changed(true);\n    }\n    clearFlag(flag) {\n        this.flags &= ~flag;\n        this.changed(true);\n    }\n    clearFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags &= ~mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((cell) => cell.clearFlags(cellFlag, cellMechFlag));\n        }\n        this.changed(true);\n    }\n    setCellFlags(x, y, cellFlag = 0, cellMechFlag = 0) {\n        this.cell(x, y).setFlags(cellFlag, cellMechFlag);\n        this.flags |= Flags.MAP_CHANGED;\n    }\n    clearCellFlags(x, y, cellFlags = 0, cellMechFlags = 0) {\n        this.cell(x, y).clearFlags(cellFlags, cellMechFlags);\n        this.changed(true);\n    }\n    hasTile(x, y, tile) {\n        return this.cells[x][y].hasTile(tile);\n    }\n    tileFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileFlags(limitToPlayerKnowledge);\n    }\n    tileMechFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileMechFlags(limitToPlayerKnowledge);\n    }\n    tileWithFlag(x, y, flag = 0) {\n        return this.cells[x][y].tileWithFlag(flag);\n    }\n    tileWithMechFlag(x, y, mechFlag = 0) {\n        return this.cells[x][y].tileWithMechFlag(mechFlag);\n    }\n    hasKnownTileFlag(x, y, flagMask = 0) {\n        return this.cells[x][y].memory.tileFlags & flagMask;\n    }\n    // hasTileInGroup(x, y, ...groups) { return this.cells[x][y].hasTileInGroup(...groups); }\n    discoveredTileFlags(x, y) {\n        return this.cells[x][y].discoveredTileFlags();\n    }\n    hasDiscoveredTileFlag(x, y, flag = 0) {\n        return this.cells[x][y].hasDiscoveredTileFlag(flag);\n    }\n    canBePassed(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].canBePassed(limitToPlayerKnowledge);\n    }\n    isPassableNow(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isPassableNow(limitToPlayerKnowledge);\n    }\n    isNull(x, y) {\n        return this.cells[x][y].isNull();\n    }\n    isEmpty(x, y) {\n        return this.cells[x][y].isEmpty();\n    }\n    isObstruction(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isObstruction(limitToPlayerKnowledge);\n    }\n    isDoor(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isDoor(limitToPlayerKnowledge);\n    }\n    isLiquid(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isLiquid(limitToPlayerKnowledge);\n    }\n    hasGas(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].hasGas(limitToPlayerKnowledge);\n    }\n    blocksPathing(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].blocksPathing(limitToPlayerKnowledge);\n    }\n    blocksVision(x, y) {\n        return this.cells[x][y].blocksVision();\n    }\n    highestPriorityTile(x, y, skipGas = false) {\n        return this.cells[x][y].highestPriorityTile(skipGas);\n    }\n    tileFlavor(x, y) {\n        return this.cells[x][y].tileFlavor();\n    }\n    setTile(x, y, tileId, volume = 0) {\n        return this.cell(x, y)._setTile(tileId, volume, this);\n    }\n    nullifyTileWithFlags(x, y, tileFlags, tileMechFlags = 0) {\n        const cell = this.cell(x, y);\n        cell.nullifyTileWithFlags(tileFlags, tileMechFlags);\n    }\n    nullifyCellLayers(x, y, nullLiquid = true, nullSurface = true, nullGas = true) {\n        this.changed(true);\n        return this.cell(x, y).nullifyLayers(nullLiquid, nullSurface, nullGas);\n    }\n    fill(tileId, boundaryTile) {\n        let i, j;\n        if (boundaryTile === undefined) {\n            boundaryTile = tileId;\n        }\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                if (this.isBoundaryXY(i, j)) {\n                    this.setTile(i, j, boundaryTile);\n                }\n                else {\n                    this.setTile(i, j, tileId);\n                }\n            }\n        }\n    }\n    neighborCount(x, y, matchFn, only4dirs = false) {\n        let count = 0;\n        this.eachNeighbor(x, y, (...args) => {\n            if (matchFn(...args))\n                ++count;\n        }, only4dirs);\n        return count;\n    }\n    passableArcCount(x, y) {\n        if (!this.hasXY(x, y))\n            return -1;\n        return this.cells.arcCount(x, y, (c) => c.isPassableNow());\n    }\n    diagonalBlocked(x1, y1, x2, y2, limitToPlayerKnowledge = false) {\n        if (x1 == x2 || y1 == y2) {\n            return false; // If it's not a diagonal, it's not diagonally blocked.\n        }\n        const locFlags1 = this.tileFlags(x1, y2, limitToPlayerKnowledge);\n        if (locFlags1 & TileFlags.T_OBSTRUCTS_DIAGONAL_MOVEMENT) {\n            return true;\n        }\n        const locFlags2 = this.tileFlags(x2, y1, limitToPlayerKnowledge);\n        if (locFlags2 & TileFlags.T_OBSTRUCTS_DIAGONAL_MOVEMENT) {\n            return true;\n        }\n        return false;\n    }\n    fillCostGrid(costGrid, costFn) {\n        costFn = costFn || Utils.ONE;\n        this.cells.forEach((cell, i, j) => {\n            if (cell.isNull()) {\n                costGrid[i][j] = Path.OBSTRUCTION;\n            }\n            else {\n                costGrid[i][j] = cell.canBePassed()\n                    ? costFn(cell, i, j, this)\n                    : Path.OBSTRUCTION;\n            }\n        });\n    }\n    matchingNeighbor(x, y, matcher, only4dirs = false) {\n        const maxIndex = only4dirs ? 4 : 8;\n        for (let d = 0; d < maxIndex; ++d) {\n            const dir = Utils.DIRS[d];\n            const i = x + dir[0];\n            const j = y + dir[1];\n            if (this.hasXY(i, j)) {\n                if (matcher(this.cells[i][j], i, j, this))\n                    return [i, j];\n            }\n        }\n        return null;\n    }\n    matchingLocNear(x, y, ...args) {\n        let i, j, k;\n        let matcher = args[0];\n        let opts = args[1] || {};\n        const arg = args[0];\n        if (typeof arg !== \"function\") {\n            opts = arg || args[1];\n            matcher = opts.match || Utils.TRUE;\n        }\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const deterministic = opts.deterministic || false;\n        const candidateLocs = [];\n        // count up the number of candidate locations\n        for (k = 0; k < Math.max(this.width, this.height) && !candidateLocs.length; k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (!this.hasXY(i, j))\n                        continue;\n                    const cell = this.cell(i, j);\n                    // if ((i == x-k || i == x+k || j == y-k || j == y+k)\n                    if (Math.ceil(Utils.distanceBetween(x, y, i, j)) == k &&\n                        (!blockingMap || !blockingMap[i][j]) &&\n                        matcher(cell, i, j, this) &&\n                        (!forbidLiquid || !cell.liquid) &&\n                        (hallwaysAllowed || this.passableArcCount(i, j) < 2)) {\n                        candidateLocs.push([i, j]);\n                    }\n                }\n            }\n        }\n        if (candidateLocs.length == 0) {\n            return [-1, -1];\n        }\n        // and pick one\n        let randIndex = 0;\n        if (deterministic) {\n            randIndex = Math.floor(candidateLocs.length / 2);\n        }\n        else {\n            randIndex = random.number(candidateLocs.length);\n        }\n        return candidateLocs[randIndex];\n    }\n    // fills (*x, *y) with the coordinates of a random cell with\n    // no creatures, items or stairs and with either a matching liquid and dungeon type\n    // or at least one layer of type terrainType.\n    // A dungeon, liquid type of -1 will match anything.\n    randomMatchingLoc(opts = {}) {\n        let x;\n        let y;\n        let cell;\n        if (typeof opts === \"function\") {\n            opts = { match: opts };\n        }\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const matcher = opts.match || Utils.TRUE;\n        const forbidCellFlags = opts.forbidCellFlags || 0;\n        const forbidTileFlags = opts.forbidTileFlags || 0;\n        const forbidTileMechFlags = opts.forbidTileMechFlags || 0;\n        const tile = opts.tile || null;\n        let tries = opts.tries || 500;\n        let retry = true;\n        while (retry) {\n            tries--;\n            if (!tries)\n                break;\n            x = random.range(0, this.width - 1);\n            y = random.range(0, this.height - 1);\n            cell = this.cell(x, y);\n            if ((!blockingMap || !blockingMap[x][y]) &&\n                (!tile || cell.hasTile(tile)) &&\n                (!forbidLiquid || !cell.liquid) &&\n                (!forbidCellFlags || !(cell.flags & forbidCellFlags)) &&\n                (!forbidTileFlags || !cell.hasTileFlag(forbidTileFlags)) &&\n                (!forbidTileMechFlags || !cell.hasTileMechFlag(forbidTileMechFlags)) &&\n                (hallwaysAllowed || this.passableArcCount(x, y) < 2) &&\n                matcher(cell, x, y, this)) {\n                retry = false;\n            }\n        }\n        if (!tries) {\n            // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => FAIL');\n            return false;\n        }\n        // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => ', x, y);\n        return [x, y];\n    }\n    // LIGHT\n    addLight(x, y, light) {\n        const info = { x, y, light, next: this.lights };\n        this.lights = info;\n        this.flags &= ~(Flags.MAP_STABLE_LIGHTS | Flags.MAP_STABLE_GLOW_LIGHTS);\n        return info;\n    }\n    removeLight(info) {\n        Utils.removeFromChain(this, \"lights\", info);\n        this.flags &= ~(Flags.MAP_STABLE_LIGHTS | Flags.MAP_STABLE_GLOW_LIGHTS);\n    }\n    eachGlowLight(fn) {\n        Utils.eachChain(this.lights, (info) => fn(info.light, info.x, info.y));\n        this.eachCell((cell, x, y) => {\n            for (let tile of cell.tiles()) {\n                if (tile.light) {\n                    fn(tile.light, x, y);\n                }\n            }\n        });\n    }\n    eachDynamicLight(fn) {\n        Utils.eachChain(this._actors, (actor) => {\n            if (actor.light)\n                fn(actor.light, actor.x, actor.y);\n        });\n    }\n    // FX\n    addFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addSprite(TileLayer.FX, anim.sprite);\n        anim.x = x;\n        anim.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    moveFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeSprite(anim.sprite);\n        this.redrawCell(oldCell);\n        cell.addSprite(TileLayer.FX, anim.sprite);\n        this.redrawCell(cell);\n        anim.x = x;\n        anim.y = y;\n        return true;\n    }\n    removeFx(anim) {\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeSprite(anim.sprite);\n        this.redrawCell(oldCell);\n        this.flags |= Flags.MAP_CHANGED;\n        return true;\n    }\n    // ACTORS\n    // will return the PLAYER if the PLAYER is at (x, y).\n    actorAt(x, y) {\n        // creature *\n        if (!this.hasXY(x, y))\n            return null;\n        const cell = this.cell(x, y);\n        return cell.actor;\n    }\n    addActor(x, y, theActor) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.actor) {\n            return false;\n        }\n        cell.actor = theActor;\n        theActor.next = this._actors;\n        this._actors = theActor;\n        const layer = theActor === DATA.player ? TileLayer.PLAYER : TileLayer.ACTOR;\n        cell.addSprite(layer, theActor.sprite);\n        const flag = theActor === DATA.player ? CellFlags.HAS_PLAYER : CellFlags.HAS_MONSTER;\n        cell.flags |= flag;\n        // if (theActor.flags & Flags.Actor.MK_DETECTED)\n        // {\n        // \tcell.flags |= CellFlags.MONSTER_DETECTED;\n        // }\n        if (theActor.light) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        // If the player moves or an actor that blocks vision and the cell is visible...\n        // -- we need to update the FOV\n        if (theActor.isPlayer() ||\n            (cell.isAnyKindOfVisible() && theActor.blocksVision())) {\n            this.flags |= Flags.MAP_FOV_CHANGED;\n        }\n        theActor.x = x;\n        theActor.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    addActorNear(x, y, theActor) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return theActor.avoidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the actor.');\n            return false;\n        }\n        return this.addActor(loc[0], loc[1], theActor);\n    }\n    moveActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        this.removeActor(actor);\n        if (!this.addActor(x, y, actor)) {\n            this.addActor(actor.x, actor.y, actor);\n            return false;\n        }\n        if (actor.light) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        return true;\n    }\n    removeActor(actor) {\n        if (!this.hasXY(actor.x, actor.y))\n            return false;\n        const cell = this.cell(actor.x, actor.y);\n        if (cell.actor === actor) {\n            cell.actor = null;\n            Utils.removeFromChain(this, \"actors\", actor);\n            cell.flags &= ~CellFlags.HAS_ACTOR;\n            cell.removeSprite(actor.sprite);\n            if (actor.light) {\n                this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n            }\n            // If the player moves or an actor that blocks vision and the cell is visible...\n            // -- we need to update the FOV\n            if (actor.isPlayer() ||\n                (cell.isAnyKindOfVisible() && actor.blocksVision())) {\n                this.flags |= Flags.MAP_FOV_CHANGED;\n            }\n            this.redrawCell(cell);\n            return true;\n        }\n        return false;\n    }\n    deleteActorAt(x, y) {\n        const actor = this.actorAt(x, y);\n        if (!actor)\n            return false;\n        this.removeActor(actor);\n        actor.delete();\n        return true;\n    }\n    // dormantAt(x: number, y: number) {  // creature *\n    // \tif (!(this.cell(x, y).flags & CellFlags.HAS_DORMANT_MONSTER)) {\n    // \t\treturn null;\n    // \t}\n    // \treturn this.dormantActors.find( (m) => m.x == x && m.y == y );\n    // }\n    //\n    // addDormant(x, y, actor) {\n    // \ttheActor.x = x;\n    // \ttheActor.y = y;\n    // \tthis.dormant.add(theActor);\n    // \tcell.flags |= (CellFlags.HAS_DORMANT_MONSTER);\n    // \tthis.flags |= Flags.MAP_CHANGED;\n    // \treturn true;\n    // }\n    //\n    // removeDormant(actor) {\n    // \tconst cell = this.cell(actor.x, actor.y);\n    // \tcell.flags &= ~(CellFlags.HAS_DORMANT_MONSTER);\n    // \tcell.flags |= CellFlags.NEEDS_REDRAW;\n    // \tthis.flags |= Flags.MAP_CHANGED;\n    // \tthis.dormant.remove(actor);\n    // }\n    // ITEMS\n    itemAt(x, y) {\n        const cell = this.cell(x, y);\n        return cell.item;\n    }\n    addItem(x, y, theItem) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.flags & CellFlags.HAS_ITEM) {\n            // GW.ui.message(colors.badMessageColor, 'There is already an item there.');\n            return false;\n        }\n        theItem.x = x;\n        theItem.y = y;\n        cell.item = theItem;\n        theItem.next = this._items;\n        this._items = theItem;\n        cell.addSprite(TileLayer.ITEM, theItem.sprite);\n        cell.flags |= CellFlags.HAS_ITEM;\n        if (theItem.light) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        this.redrawCell(cell);\n        if (theItem.isDetected() || CONFIG.D_ITEM_OMNISCIENCE) {\n            cell.flags |= CellFlags.ITEM_DETECTED;\n        }\n        return true;\n    }\n    addItemNear(x, y, theItem) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return theItem.forbidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the item.');\n            return false;\n        }\n        return this.addItem(loc[0], loc[1], theItem);\n    }\n    removeItem(theItem) {\n        const x = theItem.x;\n        const y = theItem.y;\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.item !== theItem)\n            return false;\n        cell.removeSprite(theItem.sprite);\n        cell.item = null;\n        Utils.removeFromChain(this, \"items\", theItem);\n        if (theItem.light) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        cell.flags &= ~(CellFlags.HAS_ITEM | CellFlags.ITEM_DETECTED);\n        this.redrawCell(cell);\n        return true;\n    }\n    // // PROMOTE\n    //\n    // async promote(x, y, mechFlag) {\n    // \tif (this.hasTileMechFlag(x, y, mechFlag)) {\n    // \t\tconst cell = this.cell(x, y);\n    // \t\tfor (let tile of cell.tiles()) {\n    // \t\t\tif (tile.mechFlags & mechFlag) {\n    // \t\t\t\tawait tile.promote(this, x, y, false);\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // }\n    gridDisruptsPassability(blockingGrid, opts = {}) {\n        const walkableGrid = Grid.alloc(this.width, this.height);\n        let disrupts = false;\n        const gridOffsetX = opts.gridOffsetX || 0;\n        const gridOffsetY = opts.gridOffsetY || 0;\n        const bounds = opts.bounds || null;\n        // Get all walkable locations after lake added\n        this.cells.forEach((cell, i, j) => {\n            if (bounds && !bounds.contains(i, j))\n                return; // outside bounds\n            const blockingX = i + gridOffsetX;\n            const blockingY = j + gridOffsetY;\n            if (cell.isNull()) {\n                return; // do nothing\n            }\n            else if (cell.canBePassed()) {\n                if (blockingGrid.hasXY(blockingX, blockingY) &&\n                    blockingGrid[blockingX][blockingY])\n                    return;\n                walkableGrid[i][j] = 1;\n            }\n            else if (cell.hasTileFlag(TileFlags.T_HAS_STAIRS)) {\n                if (blockingGrid.hasXY(blockingX, blockingY) &&\n                    blockingGrid[blockingX][blockingY]) {\n                    disrupts = true;\n                }\n                else {\n                    walkableGrid[i][j] = 1;\n                }\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        Grid.free(walkableGrid);\n        return disrupts;\n    }\n    // FOV\n    // Returns a boolean grid indicating whether each square is in the field of view of (xLoc, yLoc).\n    // forbiddenTileFlags is the set of terrain flags that will block vision (but the blocking cell itself is\n    // illuminated); forbiddenCellFlags is the set of map flags that will block vision.\n    // If cautiousOnWalls is set, we will not illuminate blocking tiles unless the tile one space closer to the origin\n    // is visible to the player; this is to prevent lights from illuminating a wall when the player is on the other\n    // side of the wall.\n    calcFov(grid, x, y, maxRadius, forbiddenCellFlags = 0, forbiddenTileFlags = TileFlags.T_OBSTRUCTS_VISION) {\n        maxRadius = maxRadius || this.width + this.height;\n        grid.fill(0);\n        const map = this;\n        const FOV = new Fov.FOV({\n            isBlocked(i, j) {\n                return !!(!grid.hasXY(i, j) ||\n                    map.hasCellFlag(i, j, forbiddenCellFlags) ||\n                    map.hasTileFlag(i, j, forbiddenTileFlags));\n            },\n            calcRadius(x, y) {\n                return Math.sqrt(x ** 2 + y ** 2);\n            },\n            setVisible(x, y) {\n                grid[x][y] = 1;\n            },\n            hasXY(x, y) {\n                return grid.hasXY(x, y);\n            },\n        });\n        return FOV.calculate(x, y, maxRadius);\n    }\n    losFromTo(a, b) {\n        const line = Utils.getLine(a.x, a.y, b.x, b.y);\n        if (!line || !line.length)\n            return false;\n        return !line.some((loc) => {\n            return this.blocksVision(loc[0], loc[1]);\n        });\n    }\n    // MEMORIES\n    storeMemory(x, y) {\n        const cell = this.cell(x, y);\n        cell.storeMemory();\n    }\n    storeMemories() {\n        let x, y;\n        for (x = 0; x < this.width; ++x) {\n            for (y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.flags & CellFlags.ANY_KIND_OF_VISIBLE) {\n                    this.storeMemory(x, y);\n                }\n                cell.flags &= CellFlags.PERMANENT_CELL_FLAGS;\n                cell.mechFlags &= CellMechFlags.PERMANENT_MECH_FLAGS;\n            }\n        }\n    }\n    // TICK\n    async tick() {\n        // map.debug(\"tick\");\n        this.forEach((c) => (c.mechFlags &= ~(CellMechFlags.EVENT_FIRED_THIS_TURN | CellMechFlags.EVENT_PROTECTED)));\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cells[x][y];\n                await cell.activate(\"tick\", { map: this, x, y, cell, safe: true });\n            }\n        }\n        updateLiquid(this);\n    }\n    resetEvents() {\n        this.forEach((c) => (c.mechFlags &= ~(CellMechFlags.EVENT_FIRED_THIS_TURN | CellMechFlags.EVENT_PROTECTED)));\n    }\n}\nexport function make(w, h, opts = {}, wall) {\n    if (typeof opts === \"string\") {\n        opts = { tile: opts };\n        if (wall) {\n            opts.wall = wall;\n        }\n    }\n    const map = new Map(w, h, opts);\n    const floor = opts.tile || opts.floor || opts.floorTile;\n    const boundary = opts.boundary || opts.wall || opts.wallTile;\n    if (floor) {\n        map.fill(floor, boundary);\n    }\n    if (!DATA.map) {\n        DATA.map = map;\n    }\n    return map;\n}\nMake.map = make;\nexport function getCellAppearance(map, x, y, dest) {\n    dest.blackOut();\n    if (!map.hasXY(x, y))\n        return;\n    const cell = map.cell(x, y);\n    if (cell.isAnyKindOfVisible() &&\n        cell.flags & (CellFlags.CELL_CHANGED | CellFlags.NEEDS_REDRAW)) {\n        Cell.getAppearance(cell, dest);\n    }\n    else if (cell.isRevealed()) {\n        dest.drawSprite(cell.memory.mixer);\n    }\n    if (cell.isVisible()) {\n        // keep here to allow for games that do not use fov to work\n    }\n    else if (!cell.isRevealed()) {\n        dest.blackOut();\n    }\n    else if (!cell.isAnyKindOfVisible()) {\n        dest.bg.mix(COLORS.black, 30);\n        dest.fg.mix(COLORS.black, 30);\n    }\n    let needDistinctness = false;\n    if (cell.flags & (CellFlags.IS_CURSOR | CellFlags.IS_IN_PATH)) {\n        const highlight = cell.flags & CellFlags.IS_CURSOR ? COLORS.cursorColor : COLORS.yellow;\n        if (cell.hasTileMechFlag(TileMechFlags.TM_INVERT_WHEN_HIGHLIGHTED)) {\n            Color.swap(dest.fg, dest.bg);\n        }\n        else {\n            // if (!GAME.trueColorMode || !dest.needDistinctness) {\n            // dest.fg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n            // }\n            dest.bg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n        }\n        needDistinctness = true;\n    }\n    if (needDistinctness) {\n        Color.separate(dest.fg, dest.bg);\n    }\n    // dest.bake();\n}\nexport function addText(map, x, y, text, fg, bg, layer) {\n    for (let ch of text) {\n        const sprite = Canvas.makeSprite(ch, fg, bg);\n        const cell = map.cell(x++, y);\n        cell.addSprite(layer || TileLayer.GROUND, sprite);\n    }\n}\nexport function updateGas(map) {\n    if (map.flags & Flags.MAP_NO_GAS)\n        return;\n    const newVolume = Grid.alloc(map.width, map.height);\n    map.forEach((c, x, y) => {\n        if (c.hasTileFlag(TileFlags.T_OBSTRUCTS_GAS))\n            return;\n        let gas = c.gas;\n        let highest = c.gasVolume;\n        let sum = c.gasVolume;\n        let count = 1;\n        map.eachNeighbor(x, y, (n) => {\n            if (n.hasTileFlag(TileFlags.T_OBSTRUCTS_GAS))\n                return;\n            ++count;\n            sum += n.gasVolume;\n            if (n.gasVolume > highest) {\n                gas = n.gas;\n                highest = n.gasVolume;\n            }\n        });\n        if (!sum)\n            return;\n        const newVol = Math.floor(sum / count);\n        if (c.gas != gas) {\n            c._setTile(gas, newVol, map); // volume = 1 to start, will change later\n        }\n        newVolume[x][y] += newVol;\n        const rem = sum - count * Math.floor(sum / count);\n        if (rem && random.number(count) < rem) {\n            newVolume[x][y] += 1;\n        }\n        // disperses\n        // if (newVolume[x][y] && random.chance(20)) {\n        // \tnewVolume[x][y] -= 1;\n        // }\n    });\n    let hasGas = false;\n    newVolume.forEach((v, i, j) => {\n        const cell = map.cell(i, j);\n        if (v) {\n            hasGas = true;\n            if (cell.gas && cell.gasVolume !== v) {\n                cell.gasVolume = v;\n                map.redrawCell(cell);\n            }\n        }\n        else if (cell.gas) {\n            cell.clearLayer(TileLayer.GAS);\n            map.redrawCell(cell);\n        }\n    });\n    if (hasGas) {\n        map.flags &= ~Flags.MAP_NO_GAS;\n    }\n    else {\n        map.flags |= Flags.MAP_NO_GAS;\n    }\n    map.changed(true);\n    Grid.free(newVolume);\n}\nexport function updateLiquid(map) {\n    if (map.flags & Flags.MAP_NO_LIQUID)\n        return;\n    const newVolume = Grid.alloc(map.width, map.height);\n    map.forEach((c, x, y) => {\n        if (c.hasTileFlag(TileFlags.T_OBSTRUCTS_LIQUID))\n            return;\n        let liquid = c.liquid;\n        let highest = c.liquidVolume;\n        let count = 1;\n        map.eachNeighbor(x, y, (n) => {\n            if (n.hasTileFlag(TileFlags.T_OBSTRUCTS_LIQUID))\n                return;\n            ++count;\n            if (n.liquidVolume > highest) {\n                liquid = n.liquid;\n                highest = n.liquidVolume;\n            }\n        });\n        let newVol = c.liquidVolume;\n        if (newVol > 10 && count > 1) {\n            let spread = Math.round(0.2 * c.liquidVolume);\n            if (spread > 5) {\n                newVol -= spread;\n                if (c.liquid != liquid) {\n                    c._setTile(liquid, newVol, map); // volume = 1 to start, will change later\n                }\n                // spread = Math.floor(spread / count);\n                if (spread) {\n                    newVolume.eachNeighbor(x, y, (v, i, j) => {\n                        newVolume[i][j] = v + spread;\n                    });\n                }\n            }\n        }\n        newVolume[x][y] += newVol;\n        // disperses\n        const tile = c.liquidTile;\n        if (newVolume[x][y] > 0 && random.chance(tile.dissipate, 10000)) {\n            newVolume[x][y] -= 1;\n        }\n    });\n    let hasLiquid = false;\n    newVolume.forEach((v, i, j) => {\n        const cell = map.cell(i, j);\n        if (v) {\n            hasLiquid = true;\n            if (cell.liquid && cell.liquidVolume !== v) {\n                cell.liquidVolume = v;\n                map.redrawCell(cell);\n            }\n        }\n        else if (cell.liquid) {\n            cell.clearLayer(TileLayer.LIQUID);\n            map.redrawCell(cell);\n        }\n    });\n    if (hasLiquid) {\n        map.flags &= ~Flags.MAP_NO_LIQUID;\n    }\n    else {\n        map.flags |= Flags.MAP_NO_LIQUID;\n    }\n    map.changed(true);\n    Grid.free(newVolume);\n}\n","import * as Tile from \"./tile\";\n// These are the minimal set of tiles to make the diggers work\nconst NOTHING = \"0\";\nTile.install(NOTHING, {\n    sprite: { ch: \"\\u2205\", fg: \"white\", bg: \"black\" },\n    flags: \"T_OBSTRUCTS_PASSABILITY\",\n    name: \"eerie nothingness\",\n    article: \"an\",\n    priority: 0,\n});\nTile.install(\"FLOOR\", {\n    sprite: {\n        ch: \"\\u00b7\",\n        fg: [30, 30, 30, 20, 0, 0, 0],\n        bg: [2, 2, 10, 0, 2, 2, 0],\n    },\n    priority: 10,\n    article: \"the\",\n});\nTile.install(\"DOOR\", {\n    sprite: { ch: \"+\", fg: [100, 40, 40], bg: [30, 60, 60] },\n    priority: 30,\n    flags: \"T_IS_DOOR, T_OBSTRUCTS_TILE_EFFECTS, T_OBSTRUCTS_ITEMS, T_OBSTRUCTS_VISION, TM_VISUALLY_DISTINCT\",\n    article: \"a\",\n    activates: {\n        enter: { tile: \"DOOR_OPEN\" },\n        open: { tile: \"DOOR_OPEN_ALWAYS\" },\n    },\n});\nTile.install(\"DOOR_OPEN\", \"DOOR\", {\n    sprite: { ch: \"'\", fg: [100, 40, 40], bg: [30, 60, 60] },\n    priority: 40,\n    flags: \"!T_OBSTRUCTS_ITEMS, !T_OBSTRUCTS_VISION\",\n    name: \"open door\",\n    article: \"an\",\n    activates: {\n        tick: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n        enter: null,\n        open: null,\n        close: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n    },\n});\nTile.install(\"DOOR_OPEN_ALWAYS\", \"DOOR_OPEN\", {\n    activates: {\n        tick: null,\n        close: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n    },\n});\nTile.install(\"BRIDGE\", {\n    sprite: { ch: \"=\", fg: [100, 40, 40] },\n    priority: 40,\n    layer: \"SURFACE\",\n    flags: \"T_BRIDGE, TM_VISUALLY_DISTINCT\",\n    article: \"a\",\n});\nTile.install(\"UP_STAIRS\", {\n    sprite: { ch: \"<\", fg: [100, 40, 40], bg: [100, 60, 20] },\n    priority: 200,\n    flags: \"T_UP_STAIRS, T_STAIR_BLOCKERS, TM_VISUALLY_DISTINCT, TM_LIST_IN_SIDEBAR\",\n    name: \"upward staircase\",\n    article: \"an\",\n});\nTile.install(\"DOWN_STAIRS\", {\n    sprite: { ch: \">\", fg: [100, 40, 40], bg: [100, 60, 20] },\n    priority: 200,\n    flags: \"T_DOWN_STAIRS, T_STAIR_BLOCKERS, TM_VISUALLY_DISTINCT, TM_LIST_IN_SIDEBAR\",\n    name: \"downward staircase\",\n    article: \"a\",\n});\nTile.install(\"WALL\", {\n    sprite: {\n        ch: \"#\",\n        fg: [7, 7, 7, 0, 3, 3, 3],\n        bg: [40, 40, 40, 10, 10, 0, 5],\n    },\n    priority: 100,\n    flags: \"T_OBSTRUCTS_EVERYTHING\",\n    article: \"a\",\n});\nTile.install(\"LAKE\", {\n    sprite: {\n        ch: \"~\",\n        fg: [5, 8, 20, 10, 0, 4, 15, true],\n        bg: [10, 15, 41, 6, 5, 5, 5, true],\n    },\n    priority: 50,\n    flags: \"T_DEEP_WATER\",\n    name: \"deep water\",\n    article: \"the\",\n});\n"],"names":["Layer","Fl","Flag","fl","Activation","Tile","TileMech","Cell","CellMech","Map","DFF_BLOCKED_BY_ITEMS","DFF_BLOCKED_BY_ACTORS","DFF_NULL_SURFACE","DFF_NULL_LIQUID","DFF_NULL_GAS","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_OBSTRUCTS_PASSABILITY","T_OBSTRUCTS_VISION","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","T_OBSTRUCTS_ITEMS","T_OBSTRUCTS_GAS","T_OBSTRUCTS_SURFACE","T_OBSTRUCTS_LIQUID","T_OBSTRUCTS_DIAGONAL_MOVEMENT","T_CAUSES_POISON","T_CAUSES_DAMAGE","T_CAUSES_PARALYSIS","T_CAUSES_CONFUSION","T_CAUSES_EXPLOSIVE_DAMAGE","T_CAUSES_NAUSEA","T_OBSTRUCTS_TILE_EFFECTS","TM_PROMOTES_WITH_KEY","TM_PROMOTES_WITHOUT_KEY","TM_PROMOTES_ON_STEP","TM_PROMOTES_ON_ITEM_REMOVE","TM_PROMOTES_ON_SACRIFICE_ENTRY","TM_PROMOTES_ON_ELECTRICITY","TM_PROMOTES_ON_PLAYER_ENTRY","REVEALED","MAGIC_MAPPED","ITEM_DETECTED","HAS_ITEM","HAS_DORMANT_MONSTER","HAS_STAIRS","STABLE_MEMORY","IMPREGNABLE","VISIBLE","CLAIRVOYANT_VISIBLE","TELEPATHIC_VISIBLE","HAS_PLAYER","HAS_MONSTER","WAS_VISIBLE","WAS_CLAIRVOYANT_VISIBLE","WAS_TELEPATHIC_VISIBLE","IN_FOV","NEEDS_REDRAW","CELL_CHANGED","IS_IN_SHADOW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_TRAP_FREE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","MAP_STABLE_LIGHTS","MAP_STABLE_GLOW_LIGHTS","MAP_FOV_CHANGED","config","CONFIG","light","INTENSITY_DARK","LIGHT_COMPONENTS","Color","make","Light","[object Object]","color","range","fadeTo","pass","this","passThroughActors","id","from","radius","Range","other","copy","intensity","map","x","y","maintainShadows","isMinersLight","k","lightMultiplier","value","outerRadius","Math","ceil","bake","dispelShadows","fadeToPercent","grid","Grid","alloc","width","height","calcFov","Flags.Cell","HAS_ACTOR","Flags.Tile","overlappedFieldOfView","forCircle","v","i","j","cell","floor","Utils","distanceBetween","flags","ANY_KIND_OF_VISIBLE","free","max","args","length","cached","lights","split","t","trim","Number","parseInt","Array","isArray","Error","base","mechFlags","layer","GROUND","priority","sprite","activates","flavor","desc","article","dissipate","undefined","assignOmitting","name","Flags","MechFlags","ERROR","JSON","stringify","arg","Light.from","Canvas","makeSprite","ch","fg","bg","opacity","Object","assign","entries","forEach","key","info","e","tileId","tile","tiles","flag","opts","result","toString","getName","install","arguments","Extends","extends","toLowerCase","fn","item","chance","volume","spread","decrement","matchTile","needs","next","message","lightFlare","flare","flashColor","flash","messageDisplayed","emit","activations","DF_NONE","async","spawn","activation","ctx","feat","safe","hasCellMechFlag","CellMechFlags","EVENT_FIRED_THIS_TURN","DFF_ALWAYS_FIRE","abortIfBlocking","DFF_ABORT_IF_BLOCKS_MAP","isVisible","Msg","add","Tiles","Make","blocking","DFF_PERMIT_BLOCKING","TileFlags","T_PATHING_BLOCKER","blocksMove","DFF_TREAT_AS_BLOCKING","spawnMap","didSomething","computeSpawnMap","gridDisruptsPassability","bounds","DFF_EVACUATE_CREATURES","evacuateCreatures","DFF_EVACUATE_ITEMS","evacuateItems","DFF_NULLIFY_CELL","nullifyCells","spawnTiles","delete","DFF_PROTECTED","EVENT_PROTECTED","Data","gameHasEnded","actor","applyInstantEffects","Events","DFF_SUBSEQ_ALWAYS","DFF_SUBSEQ_EVERYWHERE","updateMapToShoreThisTurn","redrawXY","needsRedraw","DFF_NO_MARK_FIRED","setCellFlags","cellIsOk","hasXY","DFF_BUILD_IN_WALLS","isWall","DFF_MUST_TOUCH_WALLS","ok","eachNeighbor","c","DFF_NO_TOUCH_WALLS","containsXY","hasTile","hasTileFlag","dir","x2","y2","madeChange","startProb","probDec","DFF_SPREAD_CIRCLE","random","updateCircle","_v","dist","prob","DFF_SPREAD_LINE","DIRS","number","accomplishedSomething","blockedByOtherLayers","DFF_BLOCKED_BY_OTHER_LAYERS","superpriority","DFF_SUPERPRIORITY","refreshCell","layers","GAS","gasVolume","LIQUID","liquidVolume","obstructsLayer","highestPriorityTile","setTile","removeItem","clone","addItem","changed","nullSurface","nullLiquid","nullGas","nullifyCellLayers","blockingMap","monst","hasCellFlag","CellFlags","actorAt","loc","matchingLocNear","forbidsCell","hallways","moveActor","_a","event","values","f","cursorPathIntensity","CellMemory","mixer","Mixer","itemQuantity","cellFlags","cellMechFlags","tileFlags","tileMechFlags","nullify","sprites","data","CELL_DEFAULT","machineNumber","memory","oldLight","glowLight","copyObject","ground","liquid","surface","SURFACE","gas","groundTile","TILES","liquidTile","surfaceTile","gasTile","IS_WAS_ANY_KIND_OF_VISIBLE","orMapped","hasTileMechFlag","TileMechFlags","TM_LIST_IN_SIDEBAR","Light.intensity","LIGHT_CHANGED","limitToPlayerKnowledge","flagMask","cellFlag","cellMechFlag","isAnyKindOfVisible","includes","successorFlags","successorTileFlags","discoveredTileFlags","skipGas","best","bestPriority","tileFlag","mechFlag","T_BRIDGE","isSecretDoor","isPassableNow","TM_CONNECTS_LEVEL","TM_PROMOTES","promotedTileFlags","T_OBSTRUCTS_EVERYTHING","T_IS_DOOR","TM_IS_SECRET","T_IS_LIQUID","T_GAS","DATA","xpxpThisTurn","WARN","oldTileId","oldTile","staleLoopMap","setFlags","CAUGHT_FIRE_THIS_TURN","blocksVision","oldBlocksVision","setFlag","MapFlags","clearFlag","MAP_NO_LIQUID","MAP_NO_GAS","except","floorTile","fired","ev","Activation.spawn","activatesOn","current","prev","quantity","getAppearance","isOrWasAnyKindOfVisible","rememberedInCell","console","log","storeMemory","dest","blackOut","needDistinctness","alpha","clamp","drawSprite","TM_VISUALLY_DISTINCT","multiply","separate","setDefaults","map.deepestLevel","w","h","locations","_actors","_items","ambientLight","events","_width","_height","cells","Cell.Cell","tick","MAP_DEFAULT","ambient","fmt","dump","forRect","only4dirs","isBoundaryXY","MAP_CHANGED","_needsRedraw","redrawCell","markRevealed","player","invalidateCostMap","hasVisibleLight","mapFlag","clearFlags","tileWithFlag","tileWithMechFlag","hasDiscoveredTileFlag","canBePassed","isNull","isEmpty","isObstruction","isDoor","isLiquid","hasGas","blocksPathing","tileFlavor","_setTile","nullifyTileWithFlags","nullifyLayers","boundaryTile","matchFn","count","arcCount","x1","y1","costGrid","costFn","ONE","Path","OBSTRUCTION","matcher","maxIndex","d","match","TRUE","hallwaysAllowed","forbidLiquid","liquids","deterministic","candidateLocs","passableArcCount","push","randIndex","forbidCellFlags","forbidTileFlags","forbidTileMechFlags","tries","retry","removeFromChain","eachChain","eachCell","anim","addSprite","TileLayer","FX","oldCell","removeSprite","theActor","PLAYER","ACTOR","isPlayer","avoidsCell","addActor","removeActor","theItem","ITEM","isDetected","D_ITEM_OMNISCIENCE","blockingGrid","walkableGrid","disrupts","gridOffsetX","gridOffsetY","contains","blockingX","blockingY","first","floodFill","maxRadius","forbiddenCellFlags","forbiddenTileFlags","fill","Fov","FOV","isBlocked","calcRadius","sqrt","calculate","a","b","line","getLine","some","PERMANENT_CELL_FLAGS","PERMANENT_MECH_FLAGS","activate","updateLiquid","wall","boundary","wallTile","newVolume","highest","n","newVol","round","hasLiquid","clearLayer","Cell.getAppearance","isRevealed","mix","COLORS","black","IS_CURSOR","IS_IN_PATH","highlight","cursorColor","yellow","TM_INVERT_WHEN_HIGHLIGHTED","swap","text","sum","rem","enter","open","close"],"mappings":"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"}