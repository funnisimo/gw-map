{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/actor/pain.js","../js/actor/stat.js","../js/actor/status.js","../js/actor/action.js","../js/actor/actor.js","../js/effect/effect.js","../js/tile/tile.js","../js/tile/index.js","../js/effect/types/basic.js","../js/effect/types/spread.js","../js/effect/handlers/emit.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/tile.js","../js/effect/handlers/clear.js","../js/effect/handlers/feature.js","../js/effect/handlers/nourish.js","../js/effect/handlers/stat.js","../js/map/cell.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/gasLayer.js","../js/layer/fireLayer.js","../js/draw/basic.js","../js/map/map.js","../js/memory/memory.js","../js/memory/system.js","../js/ai/ai.js","../js/ai/typical.js","../js/ai/wander.js","../js/ai/utils.js","../js/actor/kind.js","../js/actor/make.js","../js/actor/actions/bump.js","../js/actor/actions/standStill.js","../js/fx/fx.js","../js/actor/actions/moveDir.js","../js/actor/actions/idle.js","../js/actor/actions/pickup.js","../js/item/item.js","../js/item/kind.js","../js/item/make.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/path.js","../js/horde/horde.js","../js/horde/make.js","../js/command/command.js","../js/command/moveDir.js","../js/command/pickup.js","../js/player/attribute.js","../js/player/skill.js","../js/player/player.js","../js/player/kind.js","../js/player/make.js","../js/game/game.js","../js/tile/tiles.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_ON_MAP\"] = Fl(17)] = \"L_ON_MAP\";\n    Entity[Entity[\"DEFAULT_ACTOR\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ACTOR\";\n    Entity[Entity[\"DEFAULT_ITEM\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ITEM\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n    Actor[Actor[\"HAS_MEMORY\"] = Fl(1)] = \"HAS_MEMORY\";\n    Actor[Actor[\"USES_FOV\"] = Fl(2)] = \"USES_FOV\";\n    Actor[Actor[\"STABLE_COST_MAP\"] = Fl(3)] = \"STABLE_COST_MAP\";\n    Actor[Actor[\"IS_VISIBLE\"] = Fl(4)] = \"IS_VISIBLE\";\n    Actor[Actor[\"WAS_VISIBLE\"] = Fl(5)] = \"WAS_VISIBLE\";\n    Actor[Actor[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n    Item[Item[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_SHALLOW_WATER\"] = Fl(4)] = \"T_SHALLOW_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n    Tile[Tile[\"T_ANY_LIQUID\"] = Tile.T_IS_DEEP_LIQUID | Tile.T_SHALLOW_WATER] = \"T_ANY_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(0)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(1)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"KNOWN_TO_BE_SAFE\"] = Fl(2)] = \"KNOWN_TO_BE_SAFE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to speed checks\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(16)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(17)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(18)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(19)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_FX\"] = Fl(20)] = \"HAS_FX\";\n    Cell[Cell[\"HAS_TICK_EFFECT\"] = Fl(22)] = \"HAS_TICK_EFFECT\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(23)] = \"IS_CURSOR\";\n    Cell[Cell[\"IS_HIGHLIGHTED\"] = Fl(24)] = \"IS_HIGHLIGHTED\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_SAFE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_NEEDS_REDRAW\"] = Fl(1)] = \"MAP_NEEDS_REDRAW\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_IGNORE_FOV\"] = Fl(12)] = \"E_IGNORE_FOV\";\n    // E_SPREAD_CIRCLE = Fl(13), // Spread in a circle around the spot (using FOV), radius calculated using spread+decrement\n    // E_SPREAD_LINE = Fl(14), // Spread in a line in one random direction\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nlet lastId = 0;\nexport class Entity {\n    constructor(kind) {\n        this._map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.lastSeen = [-1, -1];\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n        this.id = '' + ++lastId;\n    }\n    get map() {\n        return this._map;\n    }\n    addToMap(map, x, y) {\n        this.x = x;\n        this.y = y;\n        this.setEntityFlag(Flags.Entity.L_ON_MAP);\n        if (this._map === map) {\n            return false;\n        }\n        this._map = map;\n        this.kind.addToMap(this, map);\n        return true;\n    }\n    removeFromMap() {\n        this.clearEntityFlag(Flags.Entity.L_ON_MAP);\n        this.kind.removeFromMap(this);\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    isAt(x, y) {\n        return this.x === x && this.y === y;\n    }\n    clone() {\n        const other = new this.constructor(this.kind);\n        other.copy(this);\n        return other;\n    }\n    copy(other) {\n        this.depth = other.depth;\n        this.light = other.light;\n        Object.assign(this.flags, other.flags);\n        this.next = other.next;\n        this.x = other.x;\n        this.y = other.y;\n        this.kind = other.kind;\n        this.id = other.id;\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    setEntityFlag(flag) {\n        this.flags.entity |= flag;\n    }\n    clearEntityFlag(flag) {\n        this.flags.entity &= ~flag;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isKey(x, y) {\n        return this.key && this.key.matches(x, y);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n    drawStatus(buffer, bounds) {\n        return this.kind.drawStatus(this, buffer, bounds);\n    }\n    drawInto(dest, _observer) {\n        dest.drawSprite(this.sprite);\n    }\n    toString() {\n        return `${this.constructor.name}-${this.id} @ ${this.x},${this.y}`;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requiredTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config.sprite ? config.sprite : config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requiredTileTags) {\n            if (typeof config.requiredTileTags === 'string') {\n                this.requiredTileTags = config.requiredTileTags\n                    .split(/[,|]/)\n                    .map((t) => t.trim());\n            }\n            else {\n                this.requiredTileTags = config.requiredTileTags\n                    .slice()\n                    .map((t) => t.trim());\n            }\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    addToMap(_entity, _map) { }\n    removeFromMap(_entity) { }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAllTileTags(this.requiredTileTags)) {\n            return true;\n        }\n        return false;\n    }\n    avoidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAnyTileTag(this.requiredTileTags)) {\n            return true;\n        }\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n    drawStatus(entity, buffer, bounds) {\n        if (!entity.map)\n            return 0;\n        if (entity.isDestroyed)\n            return 0;\n        const mixer = new GWU.sprite.Mixer();\n        entity.map.getAppearanceAt(entity.x, entity.y, mixer);\n        buffer.drawSprite(bounds.x + 1, bounds.y, mixer);\n        buffer.wrapText(bounds.x + 3, bounds.y, bounds.width - 3, entity.getName(), 'purple');\n        return 1;\n    }\n}\nexport function make(opts, makeOpts = {}) {\n    const kind = new EntityKind(opts);\n    return kind.make(makeOpts);\n}\n","import * as GWU from 'gw-utils';\nexport class PainMessages {\n    constructor(msgs = []) {\n        this._msgs = [];\n        msgs.forEach((m) => this.add(m));\n    }\n    add(msg) {\n        this._msgs.push(msg);\n        return this;\n    }\n    get(pct, singular = true) {\n        const index = GWU.clamp(Math.floor(pct * this._msgs.length), 0, this._msgs.length - 1);\n        const msg = this._msgs[index];\n        return this._format(msg, singular);\n    }\n    _format(msg, singular = true) {\n        return msg.replace(/\\[(\\w+)\\|?(\\w*)\\]/g, singular ? '$1' : '$2');\n    }\n}\nexport const painMessages = {};\nexport function installPain(id, pain) {\n    if (Array.isArray(pain)) {\n        pain = new PainMessages(pain);\n    }\n    painMessages[id] = pain;\n}\nexport function getPain(id) {\n    const m = painMessages[id];\n    if (!m)\n        throw new Error('No such pain message index: ' + id);\n    return m;\n}\n","import * as GWU from 'gw-utils';\nexport class Stats {\n    constructor(opts = {}) {\n        this._max = {};\n        this._rate = {};\n        this._value = {};\n        this.init(opts);\n    }\n    get(name) {\n        return this._value[name] || 0;\n    }\n    getPct(name) {\n        const max = this.max(name);\n        return max ? Math.round((100 * this.get(name)) / max) : 0;\n    }\n    max(name) {\n        return this._max[name] || 0;\n    }\n    regen(name) {\n        return this._rate[name] || null;\n    }\n    init(opts) {\n        for (let name in opts) {\n            this.set(name, opts[name]);\n        }\n    }\n    set(name, v, max) {\n        if (typeof v !== 'number') {\n            const r = GWU.range.make(v);\n            v = r.value();\n        }\n        this._value[name] = v;\n        this._max[name] = max || v;\n    }\n    gain(name, amount, allowOver = false) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        let v = this._value[name] + amount;\n        if (!allowOver) {\n            v = Math.min(v, this._max[name]);\n        }\n        this._value[name] = v;\n    }\n    drain(name, amount) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._value[name] = Math.max(0, this._value[name] - amount);\n    }\n    raiseMax(name, amount, raiseValue = true) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._max[name] += amount;\n        if (raiseValue) {\n            this.gain(name, amount);\n        }\n    }\n    reduceMax(name, amount, lowerValue = false) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._max[name] = Math.max(0, this._max[name] - amount);\n        if (lowerValue) {\n            this.drain(name, amount);\n        }\n    }\n    setRegen(name, turns, count = 1) {\n        const r = (this._rate[name] = this._rate[name] || { elapsed: 0 });\n        r.turns = turns;\n        r.count = count;\n    }\n    regenAll() {\n        for (let name in this._max) {\n            const r = this._rate[name];\n            r.elapsed += 1;\n            if (r.elapsed >= r.turns) {\n                this.gain(name, r.count);\n                r.elapsed -= r.turns;\n            }\n        }\n    }\n    restore(name, value) {\n        if (value === undefined)\n            value = this._max[name];\n        this._value[name] = value;\n    }\n    adjust(name, type, amount) {\n        amount = GWU.range.from(amount);\n        const v = amount.value();\n        const c = this.get(name);\n        if (type === 'inc') {\n            this.gain(name, amount);\n        }\n        else if (type === 'dec') {\n            this.drain(name, amount);\n        }\n        else if (type === 'set') {\n            this.set(name, amount);\n        }\n        else if (type === 'min') {\n            const v = amount.value();\n            if (this.get(name) < v) {\n                this.set(name, v);\n            }\n        }\n        else if (type === 'max') {\n            if (this.get(name) > v) {\n                this.set(name, v);\n            }\n        }\n        else {\n            throw new Error('Invalid stat adjust type: ' + type);\n        }\n        return c !== this.get(name);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Status {\n    constructor() {\n        this._set = {};\n        this._time = {};\n        this._count = {};\n        this._done = {};\n        this._value = {};\n        this.changed = null;\n    }\n    clear(name) {\n        this.clearTime(name);\n        this.clearCount(name);\n        this.setOff(name);\n        return this._update(name);\n    }\n    get(name) {\n        return this._value[name] || false;\n    }\n    has(name) {\n        return this._value[name] || false;\n    }\n    _addDone(name, done) {\n        if (done) {\n            if (!this._done[name]) {\n                this._done[name] = done;\n            }\n        }\n    }\n    /**\n     * Sets the count for a status variable.\n     * If setting the count turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {number} count The count to set.\n     * @param {function} [done] The function to call whenever the count goes to 0.\n     * @returns {boolean} Whether or not setting the count turned the status on.\n     */\n    setCount(name, count, done) {\n        const status = this;\n        status._count[name] = Math.max(count, status._count[name] || 0);\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Increments the count for the status by the given amount (1=default)\n     * If incrementing the count turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {number} [count=1] The count to incrmeent.\n     * @param {function} [done] The function to call whenever the count goes to 0.\n     * @returns {boolean} Whether or not incrementing the count turned the status on.\n     */\n    increment(name, count = 1, done) {\n        if (typeof count == 'function') {\n            done = count;\n            count = 1;\n        }\n        const status = this;\n        status._count[name] = (status._count[name] || 0) + count;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Decrements the count for the status by the given amount (1=default)\n     * If decrementing the count turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * Also, if the status is turned off, and a done function was set, then it\n     * is called.\n     * @param {string} name The name of the status to adjust.\n     * @param {number} [count=1] The count to decrement.\n     * @returns {boolean} Whether or not decrementing the count turned the status off.\n     */\n    decrement(name, count = 1) {\n        const status = this;\n        status._count[name] = Math.max(0, (status._count[name] || 0) - count);\n        return this._update(name);\n    }\n    /**\n     * Clears all counts from the given status.\n     * If clearing the count turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * Also, if the status is turned off, and a done function was set, then it\n     * is called.\n     * @param {string} name The name of the status to adjust.\n     * @returns {boolean} Whether or not decrementing the count turned the status off.\n     */\n    clearCount(name) {\n        const status = this;\n        status._count[name] = 0;\n        return this._update(name);\n    }\n    /**\n     * Turns on the given status.\n     * @param {string} name The status to adjust.\n     * @param {function} [done] The function to call when the status is turned off.\n     * @returns {boolean} True if this turns on the status. (It could be on because of a time or count).\n     */\n    setOn(name, done) {\n        const status = this;\n        status._set[name] = true;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Turns off the given status.\n     *\n     * @param {string} name The status to adjust.\n     * @returns {boolean} True if this turns off the status. (It could be on because of a time or count).\n     */\n    setOff(name) {\n        const status = this;\n        status._set[name] = false;\n        return this._update(name);\n    }\n    /**\n     * Sets the time for a status variable.\n     * If setting the time turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to set.\n     * @param {function} [done] The function to call whenever the status goes false.\n     * @returns {boolean} Whether or not setting the time turned the status on.\n     */\n    setTime(name, value, done) {\n        const status = this;\n        // if (value === true) {\n        //   return RUT.Status.setOn(source, name, done);\n        // }\n        value = GWU.range.make(value).value();\n        const current = status._time[name] || 0;\n        status._time[name] = Math.max(value, current);\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Adds to the time for a status variable.\n     * If adding to the time turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to add.\n     * @param {function} [done] The function to call whenever the status goes false.\n     * @returns {boolean} Whether or not adding the time turned the status on.\n     */\n    addTime(name, value = 1, done) {\n        if (typeof value == 'function') {\n            done = value;\n            value = 1;\n        }\n        const status = this;\n        // if (value === true) {\n        //   return RUT.Status.setOn(source, name, done);\n        // }\n        value = GWU.range.make(value).value();\n        status._time[name] = (status._time[name] || 0) + value;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Removes time for a status variable.\n     * If removing to the time turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to remove.\n     * @returns {boolean} Whether or not removing the time turned the status off.\n     */\n    removeTime(name, value = 1) {\n        const status = this;\n        value = GWU.range.make(value).value();\n        status._time[name] = Math.max(0, (status._time[name] || 0) - value);\n        return this._update(name);\n    }\n    /**\n     * Removes all time for a status variable.\n     * If removing to the time turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * @param {string} name The name of the status to set.\n     * @returns {boolean} Whether or not removing the time turned the status off.\n     */\n    clearTime(name) {\n        const status = this;\n        status._time[name] = 0;\n        return this._update(name);\n    }\n    /**\n     * Removes time for all status variables that have time.\n     * If removing the time turns off any status (it was on),\n     * then this function returns an object with all of those statuses as keys and false as the values.  Otherwise, false.\n     * @param {Status|object} source The object to set the status on.  If object.status is set then that is where the values are updated.\n     * @param {string} name The name of the status to set.\n     * @returns {boolean|object} false or an object with the names of the statuses that were cleared as keys and false as the values.\n     */\n    decayAllTimes(delta = 1) {\n        const status = this;\n        const cleared = {};\n        let noticed = false;\n        for (let name in status._time) {\n            if (this.removeTime(name, delta)) {\n                noticed = true;\n                cleared[name] = false;\n            }\n        }\n        return noticed ? cleared : false;\n    }\n    /**\n     * Updates the value of the status and returns whether or not this change\n     * turned the status on or off (true = change, false = no change)\n     * @param {string} name The name of the status to update\n     * @returns {boolean} True if the value was turned on or off, False otherwise.\n     */\n    _update(name) {\n        const status = this;\n        const rec = this._value;\n        let was = rec[name];\n        let value = (rec[name] =\n            status._set[name] ||\n                status._time[name] > 0 ||\n                status._count[name] > 0 ||\n                false);\n        const doneFn = this._done[name];\n        if (!value && doneFn) {\n            doneFn(this, name);\n            status._done[name] = null;\n        }\n        if (was && !value) {\n            if (this.changed)\n                this.changed(this, name);\n            // console.log('called changed: false');\n            return true;\n        }\n        else if (!was && value) {\n            if (this.changed)\n                this.changed(this, name);\n            // console.log('called changed: true');\n            return true;\n        }\n        return false;\n    }\n}\n","export const installedActions = {};\nexport function installAction(name, fn) {\n    installedActions[name.toLowerCase()] = fn;\n}\nexport function getAction(name) {\n    return installedActions[name.toLowerCase()] || null;\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { getAction } from './action';\nimport { Status } from './status';\nimport { Stats } from './stat';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.ai = null;\n        this.leader = null;\n        this.items = null; // inventory\n        this.fov = null;\n        this.memory = null;\n        this.visionDistance = 99;\n        this.data = {};\n        this._costMap = null;\n        this._goalMap = null;\n        this._mapToMe = null;\n        this.next = null; // TODO - can we get rid of this?\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n        this.stats = new Stats();\n        this.status = new Status();\n    }\n    copy(other) {\n        super.copy(other);\n        this.leader = other.leader;\n        this.items = other.items;\n        this.fov = other.fov;\n        this.memory = other.memory;\n        this.visionDistance = other.visionDistance;\n    }\n    destroy() {\n        this.setEntityFlag(Flags.Entity.L_DESTROYED);\n        if (this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n        if (this._mapToMe) {\n            GWU.grid.free(this._mapToMe);\n            this._mapToMe = null;\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    setActorFlag(flag) {\n        this.flags.actor |= flag;\n    }\n    clearActorFlag(flag) {\n        this.flags.actor &= ~flag;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    isDead() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    getAction(name) {\n        const action = this.kind.actions[name];\n        if (action === undefined || action === true) {\n            const main = getAction(name); // default is to do any action\n            return main || false;\n        }\n        else if (action === false) {\n            return false;\n        }\n        return action;\n    }\n    getBumpActions() {\n        return this.kind.bump;\n    }\n    /////////////// VISIBILITY\n    becameVisible() {\n        return (this.hasActorFlag(Flags.Actor.IS_VISIBLE) &&\n            !this.hasActorFlag(Flags.Actor.WAS_VISIBLE));\n    }\n    canSee(x, y) {\n        if (x instanceof Entity.Entity) {\n            if (x instanceof Actor) {\n                if (x.fov)\n                    return x.fov.isDirectlyVisible(this.x, this.y);\n            }\n            return this.canSee(x.x, x.y) && this.kind.isAbleToSee(this, x);\n        }\n        if (this.fov) {\n            return this.fov.isDirectlyVisible(x, y);\n        }\n        else if (this.map) {\n            if (GWU.xy.distanceBetween(this.x, this.y, x, y) >\n                this.visionDistance) {\n                return false;\n            }\n            return GWU.xy.forLineBetween(this.x, this.y, x, y, (i, j) => {\n                if (this.map.cell(i, j).blocksVision())\n                    return false;\n            });\n        }\n        else {\n            return false; // need a map or an fov\n        }\n    }\n    canSeeOrSense(x, y) {\n        if (x instanceof Entity.Entity) {\n            return (this.canSeeOrSense(x.x, x.y) &&\n                (this.kind.isAbleToSee(this, x) ||\n                    this.kind.isAbleToSense(this, x)));\n        }\n        if (this.fov) {\n            return this.fov.isAnyKindOfVisible(x, y);\n        }\n        return this.canSee(x, y);\n    }\n    isAbleToSee(entity) {\n        return this.kind.isAbleToSee(this, entity);\n    }\n    isAbleToSense(entity) {\n        return this.kind.isAbleToSense(this, entity);\n    }\n    ////////////////// ACTOR\n    async act(game) {\n        let startedVisible = false;\n        if (game.player.canSee(this)) {\n            this.setActorFlag(Flags.Actor.IS_VISIBLE);\n            this.lastSeen[0] = this.x;\n            this.lastSeen[1] = this.y;\n            startedVisible = true;\n        }\n        else {\n            if (this.hasActorFlag(Flags.Actor.IS_VISIBLE)) {\n                console.log('not visible');\n            }\n            this.clearActorFlag(Flags.Actor.IS_VISIBLE);\n        }\n        if (this.becameVisible()) {\n            console.log('became visible');\n            game.player.interrupt();\n        }\n        let r = 0;\n        if (this.ai && this.ai.fn) {\n            r = await this.ai.fn(game, this);\n        }\n        if (r == 0 && this.kind.ai) {\n            r = await this.kind.ai.fn(game, this);\n        }\n        if (r) {\n            // did something\n            if (startedVisible || game.player.canSee(this)) {\n                this.lastSeen[0] = this.x;\n                this.lastSeen[1] = this.y;\n            }\n            return r;\n        }\n        // idle - always\n        return this.endTurn();\n    }\n    moveSpeed() {\n        return this.kind.moveSpeed;\n    }\n    startTurn() { }\n    endTurn(pct = 100) {\n        if (this.hasActorFlag(Flags.Actor.IS_VISIBLE)) {\n            this.setActorFlag(Flags.Actor.WAS_VISIBLE);\n        }\n        else {\n            this.clearActorFlag(Flags.Actor.WAS_VISIBLE);\n        }\n        return Math.floor((pct * this.moveSpeed()) / 100);\n    }\n    ///////\n    willAttack(_other) {\n        return true;\n    }\n    canPass(_other) {\n        return false;\n    }\n    ////////////////// INVENTORY\n    avoidsItem(_item) {\n        return false;\n    }\n    canAddItem(_item) {\n        return false;\n    }\n    addItem(_item) { }\n    pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n    // PATHFINDING\n    addToMap(map, x, y) {\n        const mapChanged = super.addToMap(map, x, y);\n        if (mapChanged) {\n            this.clearActorFlag(Flags.Actor.STABLE_COST_MAP);\n        }\n        return mapChanged;\n    }\n    removeFromMap() {\n        super.removeFromMap();\n        if (this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n        if (this._mapToMe) {\n            GWU.grid.free(this._mapToMe);\n            this._mapToMe = null;\n        }\n    }\n    /*\n    Calculates and returns the actor's move cost map.\n    Used in pathfinding.\n    */\n    costMap() {\n        if (!this.map) {\n            throw new Error('Actor must have map to calculate costMap.');\n        }\n        const staleMap = !this.hasActorFlag(Flags.Actor.STABLE_COST_MAP);\n        if (staleMap && this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (!this._costMap) {\n            this._costMap = GWU.grid.alloc(this.map.width, this.map.height);\n        }\n        else if (!staleMap) {\n            return this._costMap;\n        }\n        const kind = this.kind;\n        const map = this.map;\n        this._costMap.update((_v, x, y) => {\n            const cell = map.cell(x, y);\n            if (kind.forbidsCell(cell, this)) {\n                return cell.hasEntityFlag(Flags.Entity.L_BLOCKS_DIAGONAL)\n                    ? GWU.path.OBSTRUCTION\n                    : GWU.path.FORBIDDEN;\n            }\n            else if (kind.avoidsCell(cell, this)) {\n                return GWU.path.AVOIDED;\n            }\n            return GWU.path.OK;\n        });\n        this.setActorFlag(Flags.Actor.STABLE_COST_MAP);\n        /*\n\n            if (cellHasTerrainFlag(i, j, T_OBSTRUCTS_PASSABILITY)\n            && (!cellHasTMFlag(i, j, TM_IS_SECRET) || (discoveredTerrainFlagsAtLoc(i, j) & T_OBSTRUCTS_PASSABILITY)))\n            {\n                playerCostMap[i][j] = monsterCostMap[i][j] = cellHasTerrainFlag(i, j, T_OBSTRUCTS_DIAGONAL_MOVEMENT) ? PDS_OBSTRUCTION : PDS_FORBIDDEN;\n            } else if (cellHasTerrainFlag(i, j, T_SACRED)) {\n                    playerCostMap[i][j] = 1;\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n            } else if (cellHasTerrainFlag(i, j, T_LAVA_INSTA_DEATH)) {\n        monsterCostMap[i][j] = PDS_FORBIDDEN;\n        if (player.status[STATUS_LEVITATING] || !player.status[STATUS_IMMUNE_TO_FIRE]) {\n            playerCostMap[i][j] = 1;\n        } else {\n            playerCostMap[i][j] = PDS_FORBIDDEN;\n        }\n            } else {\n                if (pmap[i][j].flags & HAS_MONSTER) {\n                    monst = monsterAtLoc(i, j);\n                    if ((monst.creatureState == MONSTER_SLEEPING\n                         || monst.turnsSpentStationary > 2\n             || (monst.info.flags & MONST_GETS_TURN_ON_ACTIVATION)\n                         || monst.creatureState == MONSTER_ALLY)\n                        && monst.creatureState != MONSTER_FLEEING)\n                    {\n                        playerCostMap[i][j] = 1;\n                        monsterCostMap[i][j] = PDS_FORBIDDEN;\n                        continue;\n                    }\n                }\n\n                if (cellHasTerrainFlag(i, j, (T_AUTO_DESCENT | T_IS_DF_TRAP))) {\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n          if (player.status[STATUS_LEVITATING]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = PDS_FORBIDDEN;\n          }\n                } else if (cellHasTerrainFlag(i, j, T_IS_FIRE)) {\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n          if (player.status[STATUS_IMMUNE_TO_FIRE]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = PDS_FORBIDDEN;\n          }\n                } else if (cellHasTerrainFlag(i, j, (T_IS_DEEP_WATER | T_SPONTANEOUSLY_IGNITES))) {\n          if (player.status[STATUS_LEVITATING]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = 5;\n          }\n                    monsterCostMap[i][j] = 5;\n        } else if (cellHasTerrainFlag(i, j, T_OBSTRUCTS_PASSABILITY)\n                   && cellHasTMFlag(i, j, TM_IS_SECRET) && !(discoveredTerrainFlagsAtLoc(i, j) & T_OBSTRUCTS_PASSABILITY)\n                   && !(pmap[i][j].flags & IN_FIELD_OF_VIEW))\n             {\n            // Secret door that the player can't currently see\n            playerCostMap[i][j] = 100;\n            monsterCostMap[i][j] = 1;\n                } else {\n                    playerCostMap[i][j] = monsterCostMap[i][j] = 1;\n                }\n            }\n        }\n    }\n        */\n        return this._costMap;\n    }\n    get goalMap() {\n        return this._goalMap;\n    }\n    hasGoal() {\n        return !!this._goalMap;\n    }\n    setGoal(x, y) {\n        const map = this._map;\n        if (!map)\n            throw new Error('No map to set goal with!');\n        if (!this._goalMap) {\n            this._goalMap = GWU.grid.alloc(map.width, map.height);\n        }\n        const goalMap = this._goalMap;\n        GWU.path.calculateDistances(goalMap, x, y, this.costMap());\n        return this._goalMap;\n    }\n    clearGoal() {\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n    }\n    mapToMe() {\n        if (!this.map)\n            throw new Error('No map!');\n        if (!this._mapToMe) {\n            this._mapToMe = GWU.grid.alloc(this.map.width, this.map.height);\n        }\n        if (this._mapToMe.x !== this.x || this._mapToMe.y !== this.y) {\n            GWU.path.calculateDistances(this._mapToMe, this.x, this.y, this.costMap());\n        }\n        return this._mapToMe;\n    }\n}\n","export const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id.toLowerCase()] = handler;\n}\nexport const effectTypes = {};\nexport function installType(id, type) {\n    effectTypes[id] = type;\n}\n// export class Effect {\n//     id = '';\n//     chance = 100 * 100; // 100%\n//     type: string; // self | bolt | beam | ball | burst | adjacent | spread\n//     aim: string; // actor | item | cell\n//     bolt: string | GWU.sprite.SpriteData | null = null;\n//     beam = false;\n//     range = 0;\n//     ball: string | GWU.sprite.SpriteData | null = null;\n//     radius = 0;\n//     center = false;\n//     effects: EffectFn[];\n//     good = false;\n//     seen = false;\n//     next: Effect | null = null;\n//     constructor(config: EffectConfig) {\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         this.aim = config.aim || 'actor';\n//         if (typeof config.chance === 'string') {\n//             // '20%' becomes 2000\n//             config.chance = Math.floor(Number.parseFloat(config.chance) * 100);\n//         }\n//         this.chance = config.chance || 100 * 100;\n//         const type = config.type || 'basic';\n//         const parts = type.split(':');\n//         if (type.startsWith('bolt') || type.startsWith('beam')) {\n//             // bolt:range:sprite\n//             this.type = parts[0];\n//             this.range = parts[1] ? Number.parseInt(parts[1]) : 99;\n//             this.bolt = parts[1] || 'missile';\n//             this.beam = type.startsWith('beam');\n//         } else if (\n//             type.startsWith('ball') ||\n//             type.startsWith('burst') ||\n//             type.startsWith('aura')\n//         ) {\n//             this.type = parts[0];\n//             this.radius = parts[1] ? Number.parseInt(parts[1]) : 2;\n//             this.range = parts[2] ? Number.parseInt(parts[2]) : 99;\n//             this.ball = parts[3] || 'explosion';\n//             this.center = !type.startsWith('aura');\n//         } else {\n//             this.type = 'basic';\n//         }\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         if (Array.isArray(config.effects)) {\n//             this.effects = config.effects.map((e) => {\n//                 if (typeof e === 'function') return e;\n//                 return effectFnFromString(e);\n//             });\n//         } else {\n//             this.effects = [];\n//             Object.entries(config.effects).forEach(([key, value]) => {\n//                 const handler = handlers[key.toLowerCase()];\n//                 if (handler) {\n//                     this.effects.push(handler(value));\n//                 } else if (typeof value === 'function') {\n//                     this.effects.push(value);\n//                 } else {\n//                     throw new Error('Unknown effect: ' + key);\n//                 }\n//             });\n//         }\n//         if (this.effects.length === 0) throw new Error('No effects!');\n//     }\n//     clone(): this {\n//         const other = new (this.constructor as new (\n//             config: EffectConfig\n//         ) => this)(this as EffectConfig);\n//         return other;\n//     }\n//     fire(map: Map.MapType, x: number, y: number, ctx: EffectCtx = {}): boolean {\n//         let didSomething = false;\n//         ctx.good = this.good;\n//         ctx.seen = this.seen;\n//         if (!this.chance || map.rng.chance(this.chance, 10000)) {\n//             // fire\n//             for (let effect of this.effects) {\n//                 if (GWU.data.gameHasEnded) break;\n//                 if (effect(map, x, y, ctx)) {\n//                     didSomething = true;\n//                 } else {\n//                     break;\n//                 }\n//             }\n//         }\n//         if (ctx.aware && didSomething) {\n//             this.seen = true;\n//         }\n//         this.good = ctx.good;\n//         return didSomething;\n//     }\n//     reset() {\n//         this.seen = false;\n//     }\n// }\n// export function effectFnFromString(e: string): EffectFn {\n//     const parts = e.split(':');\n//     if (parts.length === 0) throw new Error('Invalid effect string.');\n//     // @ts-ignore\n//     const name = parts.shift().toLowerCase();\n//     const handler = handlers[name] || null;\n//     if (!handler) {\n//         throw new Error('Failed to find effect handler: ' + name);\n//     }\n//     return handler(parts);\n// }\nexport function make(opts) {\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    let config = {};\n    if (typeof opts === 'string') {\n        // Special case\n        if (opts.toLowerCase().startsWith('spread:')) {\n            const endPos = opts.indexOf(':', 8);\n            const tile = opts.substring(8, endPos);\n            config = {\n                type: 'spread:' + opts.substring(endPos),\n                effects: ['tile:' + tile],\n            };\n        }\n        else {\n            config = { type: 'basic', effects: [opts] };\n        }\n    }\n    else if (typeof opts === 'function') {\n        config = { type: 'basic', effects: [opts] };\n    }\n    else if (Array.isArray(opts)) {\n        config = { type: 'basic', effects: opts };\n    }\n    else {\n        // @ts-ignore\n        if (opts.effect) {\n            // @ts-ignore\n            opts.effects = [opts.effect];\n            delete opts.effect;\n        }\n        // object only\n        if (opts.effects) {\n            Object.assign(config, opts);\n            if (typeof config.effects === 'string') {\n                config.effects = [opts.effects];\n            }\n            else if (typeof config.effects === 'function') {\n                config.effects = [opts.effects];\n            }\n        }\n        else {\n            config.effects = {};\n            Object.entries(opts).forEach(([key, value]) => {\n                const handler = handlers[key.toLowerCase()];\n                if (handler !== undefined) {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else if (typeof value === 'function') {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else {\n                    // @ts-ignore\n                    config[key] = value;\n                }\n            });\n        }\n    }\n    config.type = config.type || 'basic';\n    if (typeof config.type !== 'string')\n        throw new Error('Invalid effect type: ' + JSON.stringify(config.type));\n    const typeParts = config.type.split(':').map((t) => t.trim());\n    const typeName = typeParts.shift();\n    const makeFn = effectTypes[typeName.toLowerCase()];\n    if (!makeFn)\n        throw new Error('Invalid effect type: ' + typeName);\n    const effect = makeFn(config);\n    if (Array.isArray(config.effects)) {\n        config.effects.forEach((e) => {\n            if (typeof e === 'function') {\n                effect.effects.push(e);\n            }\n            else {\n                const parts = e.split(':').map((t) => t.trim());\n                if (parts.length === 1) {\n                    const effect = installedEffects[parts[0]];\n                    if (!effect)\n                        throw new Error('Failed to find effect with id: ' + parts[0]);\n                    effect.effects.push(effect.trigger.bind(effect));\n                }\n                else {\n                    const handler = handlers[parts[0].toLowerCase()];\n                    if (!handler)\n                        throw new Error('Unknown effect: ' + parts[0]);\n                    parts.shift();\n                    effect.effects.push(handler(parts));\n                }\n            }\n        });\n    }\n    else {\n        Object.entries(config.effects).forEach(([key, value]) => {\n            const handler = handlers[key.toLowerCase()];\n            if (!handler)\n                throw new Error('Failed to find handler type: ' + key);\n            effect.effects.push(handler(value));\n        });\n    }\n    if (config.next) {\n        effect.next = make(config.next);\n    }\n    return effect;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'object' && 'trigger' in opts) {\n        return opts;\n    }\n    if (typeof opts === 'string') {\n        const effect = installedEffects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\nfunction isEffect(obj) {\n    return typeof obj === 'object' && 'trigger' in obj;\n}\n//////////////////////////////\n// INSTALL\nexport const installedEffects = {};\nexport function install(id, config) {\n    const effect = isEffect(config) ? config.clone() : make(config);\n    installedEffects[id] = effect;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function resetAll() {\n    Object.values(installedEffects).forEach((e) => (e.seen = false));\n}\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/effect';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string' && !value.includes(':')) {\n                effects[key] = value;\n                return;\n            }\n            try {\n                effects[key] = makeEffect(value);\n            }\n            catch (e) {\n                throw new Error(`Failed to add effect to tile => ${key} : ${JSON.stringify(value)} : ` + e.message);\n            }\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\n// import './tiles';\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nimport * as Flags from '../../flags';\nexport class BasicEffect {\n    constructor(config) {\n        this.effects = [];\n        this.chance = 100 * 100; // 100%\n        this.seen = false;\n        this.flags = 0;\n        this.next = null;\n        if (typeof config === 'object' && !Array.isArray(config)) {\n            this.flags = GWU.flag.from(Flags.Effect, config.flags);\n            if (typeof config.chance === 'string' &&\n                config.chance.endsWith('%')) {\n                this.chance = Number.parseFloat(config.chance) * 100;\n            }\n            else {\n                this.chance = Number.parseInt(config.chance || '10000');\n            }\n        }\n    }\n    clone() {\n        const other = new this.constructor();\n        other.effects = this.effects.slice();\n        other.chance = this.chance;\n        other.seen = false;\n        other.flags = this.flags;\n        other.next = this.next;\n        return other;\n    }\n    trigger(loc, ctx = {}) {\n        if (!ctx.force && this.chance) {\n            const rng = ctx.rng || loc.map.rng || GWU.random;\n            if (!rng.chance(this.chance, 10000))\n                return false;\n        }\n        let didSomething = false;\n        for (let eff of this.effects) {\n            if (eff(loc, ctx)) {\n                didSomething = true;\n            }\n        }\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                return this.next.trigger(loc, ctx);\n            }\n        }\n        return didSomething;\n    }\n}\nexport function makeBasicEffect(config) {\n    if (typeof config !== 'object') {\n        return new BasicEffect();\n    }\n    return new BasicEffect(config);\n}\nEffect.installType('basic', makeBasicEffect);\n","import * as GWU from 'gw-utils';\nimport { BasicEffect } from './basic';\nimport { installType } from '../effect';\nimport * as Flags from '../../flags';\nexport function makeSpreadEffect(config) {\n    return new SpreadEffect(config);\n}\ninstallType('spread', makeSpreadEffect);\nexport class SpreadEffect extends BasicEffect {\n    constructor(config) {\n        super(config);\n        this.grow = 0;\n        this.decrement = 0;\n        this.matchTile = '';\n        if (!config) {\n            config = { grow: 0, decrement: 0, flags: 0 };\n        }\n        if (typeof config === 'string') {\n            config = config.split(':').map((t) => t.trim());\n        }\n        if (Array.isArray(config)) {\n            if (config[0].toLowerCase() === 'spread') {\n                config.shift();\n            }\n            config = {\n                grow: config[0] || '0',\n                decrement: config[1] || '100',\n                flags: config[2] || '0',\n            };\n        }\n        else if (typeof config.type === 'string' &&\n            config.type.includes(':')) {\n            const parts = config.type.split(':').map((t) => t.trim());\n            if (parts[0].toLowerCase() === 'spread') {\n                parts.shift();\n            }\n            config.grow = parts[0] || '0';\n            config.decrement = parts[1] || '100';\n            config.flags = config.flags + '|' + parts[2];\n        }\n        this.grow = Number.parseInt(config.grow || 0);\n        this.decrement = Number.parseInt(config.decrement || 100);\n        this.flags = GWU.flag.from(Flags.Effect, config.flags || 0);\n        this.matchTile = config.matchTile || '';\n    }\n    clone() {\n        const other = super.clone();\n        other.grow = this.grow;\n        other.decrement = this.decrement;\n        other.matchTile = this.matchTile;\n        return other;\n    }\n    trigger(xy, ctx = {}) {\n        const abortIfBlocking = !!(this.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        let didSomething = false;\n        const map = xy.map;\n        const spawnMap = GWU.grid.alloc(map.width, map.height);\n        didSomething = computeSpawnMap(this, xy, spawnMap);\n        if (!didSomething) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (abortIfBlocking && mapDisruptedBy(map, spawnMap)) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, spawnMap, this.flags)) {\n                didSomething = true;\n            }\n        }\n        spawnMap.forEach((v, x, y) => {\n            if (!v)\n                return;\n            spawnMap[x][y] = 1; // convert from generations to off/on/success\n            for (let eff of this.effects) {\n                if (eff({ map, x, y }, ctx)) {\n                    didSomething = true;\n                    spawnMap[x][y] = 2;\n                }\n            }\n        });\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                if (this.flags & Flags.Effect.E_NEXT_EVERYWHERE) {\n                    spawnMap.forEach((v, x, y) => {\n                        if (!v)\n                            return;\n                        if (v == 2 || nextAlways) {\n                            this.next.trigger({ map, x, y }, ctx);\n                        }\n                    });\n                }\n                else {\n                    this.next.trigger({ map, x: xy.x, y: xy.y }, ctx);\n                }\n            }\n        }\n        GWU.grid.free(spawnMap);\n        return didSomething;\n    }\n}\nexport function mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(map.width, map.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(map.width, map.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (map.cell(i, j).isStairs()) {\n                disrupts = true;\n            }\n        }\n        else if (!map.cell(i, j).blocksMove()) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGWU.grid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.matchTile && !isStart && !cell.hasTile(effect.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, loc, spawnMap) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const map = loc.map;\n    let startProb = effect.grow || 0;\n    let probDec = effect.decrement || 0;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, loc.x, loc.y, true)) {\n        return false;\n    }\n    spawnMap[loc.x][loc.y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y])\n            return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const c = map.cell(x, y);\n            return !a.forbidsCell(c);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeActor(a);\n            map.addActor(loc[0], loc[1], a);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y])\n            return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const dest = map.cell(x, y);\n            return !i.forbidsCell(dest);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(i);\n            map.addItem(loc[0], loc[1], i);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import { installHandler } from '../effect';\n//////////////////////////////////////////////\n// EMIT\nexport function makeEmitHandler(config) {\n    if (Array.isArray(config))\n        config = config[0];\n    if (typeof config !== 'string')\n        throw new Error('Invalid EMIT handler config - ' + config);\n    return emitEffect.bind(undefined, config);\n}\nexport function emitEffect(id, loc, ctx) {\n    return loc.map.events.emit(id, loc, ctx);\n}\ninstallHandler('emit', makeEmitHandler);\n","import * as GWU from 'gw-utils';\nimport { installHandler } from '../effect';\n//////////////////////////////////////////////\n// MESSAGE\nexport function makeMessageHandler(src) {\n    if (Array.isArray(src))\n        src = src[0];\n    if (typeof src !== 'string') {\n        throw new Error('Need message for message effect.');\n    }\n    const info = {\n        msg: src,\n    };\n    return messageEffect.bind(undefined, info);\n}\nexport function messageEffect(info, loc, ctx) {\n    const seen = ctx.seen;\n    const msg = info.msg;\n    if (msg &&\n        msg.length &&\n        ctx.aware &&\n        !seen\n    // && map.isVisible(x, y)\n    ) {\n        GWU.message.addAt(loc.x, loc.y, msg, ctx);\n        return true;\n    }\n    return false;\n}\ninstallHandler('msg', makeMessageHandler);\n","import { installHandler } from '../effect';\n//////////////////////////////////////////////\n// ActivateMachine\nexport function makeActivateMachine() {\n    return activateMachine.bind(undefined);\n}\nexport function activateMachine(loc, ctx) {\n    const cell = loc.map.cell(loc.x, loc.y);\n    const machine = cell.machineId;\n    if (!machine)\n        return false;\n    return loc.map.activateMachine(machine, loc.x, loc.y, ctx);\n}\ninstallHandler('activateMachine', makeActivateMachine);\n","import { installHandler } from '../effect';\nexport function makeTileHandler(src) {\n    if (!src)\n        throw new Error('Tile effect needs configuration.');\n    if (typeof src === 'string') {\n        src = { id: src };\n    }\n    else if (Array.isArray(src)) {\n        src = { id: src[0] };\n    }\n    else if (!src.id) {\n        throw new Error('Tile effect needs configuration with id.');\n    }\n    const opts = src;\n    if (opts.id.includes('!')) {\n        opts.superpriority = true;\n    }\n    if (opts.id.includes('~')) {\n        opts.blockedByActors = true;\n        opts.blockedByItems = true;\n    }\n    opts.id = opts.id.replace(/[!~]*/g, '');\n    return tileEffect.bind(opts);\n}\nexport function tileEffect(loc, ctx) {\n    this.machine = ctx.machine || 0;\n    const didSomething = loc.map.setTile(loc.x, loc.y, this.id, this);\n    return didSomething;\n}\ninstallHandler('tile', makeTileHandler);\n","import * as Flags from '../../flags';\nimport { installHandler } from '../effect';\nexport function makeClearHandler(config) {\n    let layers = 0;\n    if (!config) {\n        layers = Flags.Depth.ALL_LAYERS;\n    }\n    else if (typeof config === 'number') {\n        layers = config;\n    }\n    else if (typeof config === 'string') {\n        const parts = config.split(/[,|]/g);\n        layers = parts.reduce((out, v) => {\n            if (typeof v === 'number')\n                return out | v;\n            const depth = Flags.Depth[v] || 0;\n            return out | depth;\n        }, 0);\n    }\n    else {\n        throw new Error('Invalid config for clear effect: ' + JSON.stringify(config));\n    }\n    return clearEffect.bind(undefined, layers);\n}\nexport function clearEffect(layers, loc, _ctx) {\n    if (!layers)\n        return false;\n    const cell = loc.map.cell(loc.x, loc.y);\n    return cell.clearDepth(layers);\n}\ninstallHandler('clear', makeClearHandler);\n","import * as Effect from '../effect';\nexport function makeFeatureHandler(id) {\n    if (Array.isArray(id))\n        id = id[0];\n    if (id && typeof id !== 'string') {\n        id = id.id;\n    }\n    if (!id || !id.length)\n        throw new Error('Feature effect needs ID');\n    return featureEffect.bind(undefined, id);\n}\nexport function featureEffect(id, loc, ctx) {\n    const feat = Effect.installedEffects[id];\n    if (!feat) {\n        throw new Error('Failed to find feature: ' + id);\n    }\n    return feat.trigger(loc, ctx);\n}\nEffect.installHandler('feature', makeFeatureHandler);\nEffect.installHandler('effect', makeFeatureHandler);\nEffect.installHandler('id', makeFeatureHandler);\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nexport function makeNourishEffect(opts) {\n    if (!opts)\n        throw new Error('Invalid Nourish config.');\n    let info = {};\n    if (typeof opts === 'string') {\n        opts = opts.split(':').map((t) => t.trim());\n    }\n    if (Array.isArray(opts)) {\n        info.type = opts[0] || 'inc';\n        info.amount = GWU.range.make(opts[1] || 1);\n    }\n    else if (opts.type || opts.amount) {\n        info.type = opts.type || 'inc';\n        info.amount = GWU.range.make(opts.amount || 1);\n    }\n    else {\n        throw new Error('Invalid Nourish config: ' + JSON.stringify(opts));\n    }\n    return nourishEffect.bind(undefined, info);\n}\nexport function nourishEffect(config, loc, _ctx) {\n    if (!config.amount)\n        return false;\n    // who am I nourishing?\n    const actor = loc.map.actorAt(loc.x, loc.y);\n    if (!actor) {\n        return false;\n    }\n    const stats = actor.stats;\n    const c = stats.get('food');\n    if (!stats.adjust('food', config.type, config.amount))\n        return false;\n    const n = stats.get('food');\n    if (n < c && n / stats.max('food') < 0.1) {\n        GWU.message.addAt(actor.x, actor.y, nourishEffect.default.pukeMsg, {\n            actor,\n        });\n    }\n    return true;\n}\nnourishEffect.default = {\n    pukeMsg: '%you vomit.',\n};\nEffect.installHandler('nourish', makeNourishEffect);\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nexport function makeStatEffect(opts) {\n    if (!opts)\n        throw new Error('Invalid Stat config.');\n    const info = {};\n    if (typeof opts === 'string') {\n        opts = opts.split(':').map((t) => t.trim());\n    }\n    if (Array.isArray(opts)) {\n        info.stat = opts[0];\n        info.type = opts[1] || 'inc';\n        info.amount = GWU.range.make(opts[2] || 1);\n    }\n    else if (opts.type || opts.amount) {\n        info.stat = opts.stat;\n        info.type = opts.type || 'inc';\n        info.amount = GWU.range.make(info.amount || 1);\n    }\n    else {\n        throw new Error('Invalid stat effect configuration: ' + JSON.stringify(opts));\n    }\n    return statEffect.bind(undefined, info);\n}\nexport function statEffect(config, loc, _ctx) {\n    if (!config.amount)\n        return false;\n    // who am I nourishing?\n    const actor = loc.map.actorAt(loc.x, loc.y);\n    if (!actor) {\n        return false;\n    }\n    // sustain?\n    const stats = actor.stats;\n    if (!stats.adjust('food', config.type, config.amount))\n        return false;\n    return true;\n}\nEffect.installHandler('stat', makeStatEffect);\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nGWU.color.install('cellStatusName', 'light_blue');\n// class CellEntities {\n//     cell: Cell;\n//     constructor(cell: Cell) {\n//         this.cell = cell;\n//     }\n//     eachItem(cb: EachCb<Item>): void {\n//         let object: Item | null = this.cell._item;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     eachActor(cb: EachCb<Actor>): void {\n//         let object: Actor | null = this.cell._actor;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     forEach(cb: EachCb<Entity>): void {\n//         this.eachItem(cb);\n//         this.eachActor(cb);\n//     }\n//     some(cb: MatchCb<Entity>): boolean {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         return false;\n//     }\n//     reduce(cb: ReduceCb<Entity>, start?: any): any {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         return start;\n//     }\n// }\nexport class Cell {\n    // toFire: Partial<Effect.EffectCtx>[] = [];\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.x = -1;\n        this.y = -1;\n        // this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.snapshot = GWU.sprite.makeMixer();\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    get hasStableSnapshot() {\n        return this.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    }\n    get hasStableMemory() {\n        return this.hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        // this._actor = other.actor;\n        // this._item = other.item;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n        other.getSnapshot(this.snapshot);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, checkEntities = false) {\n        var _a, _b;\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        if (!checkEntities)\n            return false;\n        if (this.hasItem()) {\n            if ((_a = this.item) === null || _a === void 0 ? void 0 : _a.hasEntityFlag(flag))\n                return true;\n        }\n        if (this.hasActor()) {\n            if ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.hasEntityFlag(flag))\n                return true;\n        }\n        return false;\n    }\n    hasAllEntityFlags(flags, checkEntities = false) {\n        return (this.entityFlags(checkEntities) & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        var _a, _b;\n        let flag = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            if (this.hasItem()) {\n                flag |= ((_a = this.item) === null || _a === void 0 ? void 0 : _a.flags.entity) || 0;\n            }\n            if (this.hasActor()) {\n                flag |= ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.flags.entity) || 0;\n            }\n        }\n        return flag;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n            this.flags.cell &= ~Flags.Cell.STABLE_SNAPSHOT;\n            this.map.needsRedraw = true;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return this.tiles.some((t) => t && t.blocksVision());\n    }\n    blocksPathing() {\n        return (this.tiles.some((t) => t && t.blocksPathing()) &&\n            !this.tiles.some((t) => t && t.hasTileFlag(Flags.Tile.T_BRIDGE)));\n    }\n    blocksMove() {\n        return this.tiles.some((t) => t && t.blocksMove());\n    }\n    blocksEffects() {\n        return this.tiles.some((t) => t && t.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isNull() {\n        return this.tiles.every((t) => !t || t === TILE.tiles.NULL);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    // hasKey(): boolean {\n    //     return this._entities.some(\n    //         (e) => !!e.key && e.key.matches(this.x, this.y)\n    //     );\n    // }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile, opts = {}) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (this.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && this.hasItem())\n            return false;\n        if (opts.blockedByActors && this.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && this.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = this.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === TILE.tiles.NULL) {\n                this.tiles[0] = TILE.get(tile.groundTile);\n            }\n        }\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            this.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            this.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            this.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.needsRedraw = true;\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.snapshot.blackOut();\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    tileWithEffect(name) {\n        return this.tiles.find((t) => t === null || t === void 0 ? void 0 : t.hasEffect(name)) || null;\n    }\n    fireEvent(event, ctx = {}) {\n        // ctx.cell = this;\n        let didSomething = false;\n        // console.log('fire event - %s', event);\n        for (const tile of this.tiles) {\n            if (!tile || !tile.effects)\n                continue;\n            const ev = tile.effects[event];\n            if (ev) {\n                const r = this._activate(ev, ctx);\n                if (r) {\n                    didSomething = true;\n                }\n            }\n        }\n        return didSomething;\n    }\n    _activate(effect, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.installedEffects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = effect.trigger(this, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this.map.itemAt(this.x, this.y);\n    }\n    canAddItem(_item) {\n        return true;\n    }\n    canRemoveItem(_item) {\n        return true;\n    }\n    _addItem(_item) {\n        this.setCellFlag(Flags.Cell.HAS_ITEM);\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    _removeItem(item) {\n        let hasItems = false;\n        let foundIndex = -1;\n        this.map.items.forEach((obj, index) => {\n            if (obj === item) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasItems = true;\n            }\n        });\n        if (!hasItems) {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this.map.actorAt(this.x, this.y);\n    }\n    canAddActor(_actor) {\n        return true;\n    }\n    canRemoveActor(_actor) {\n        return true;\n    }\n    _addActor(actor) {\n        this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        if (actor.isPlayer()) {\n            this.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    _removeActor(actor) {\n        let hasActor = false;\n        let foundIndex = -1;\n        this.map.actors.forEach((obj, index) => {\n            if (obj === actor) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasActor = true;\n            }\n        });\n        if (!hasActor) {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    hasFx() {\n        return !!(this.flags.cell & Flags.Cell.HAS_FX);\n    }\n    get fx() {\n        return this.map.fxAt(this.x, this.y);\n    }\n    _addFx(_fx) {\n        this.setCellFlag(Flags.Cell.HAS_FX);\n        this.needsRedraw = true;\n    }\n    _removeFx(_fx) {\n        if (!this.fx) {\n            this.clearCellFlag(Flags.Cell.HAS_FX);\n        }\n        this.needsRedraw = true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        if (this.hasActor()) {\n            const actor = this.map.actorAt(this.x, this.y);\n            if (actor && actor.sprite.ch)\n                return actor.sprite.ch;\n        }\n        if (this.hasItem()) {\n            const item = this.map.itemAt(this.x, this.y);\n            if (item && item.sprite.ch)\n                return item.sprite.ch;\n        }\n        if (this.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return '=';\n        }\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n    drawStatus(buffer, bounds) {\n        const lines = buffer.wrapText(bounds.x + 1, bounds.y, bounds.width - 1, this.getName(), 'cellStatusName');\n        return lines;\n    }\n    toString() {\n        return `Cell @ ${this.x},${this.y}`;\n    }\n}\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile, _opts) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts) {\n        const cell = this.map.cell(x, y);\n        return cell.setTile(tile, opts);\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // // Bookkeeping for fire, pressure plates and key-activated tiles.\n        // for (let x = 0; x < this.map.width; ++x) {\n        //     for (let y = 0; y < this.map.height; ++y) {\n        //         const cell = this.map.cell(x, y);\n        //         if (\n        //             !cell.hasCellFlag(\n        //                 Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM\n        //             ) &&\n        //             cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)\n        //         ) {\n        //             cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n        //         }\n        //     }\n        // }\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            cell.fireEvent(event, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nconst highlightColor = GWU.color.install('highlight', [100, 100, 0]);\nexport class BasicDrawer {\n    isAnyKindOfVisible(_cell) {\n        return true;\n    }\n    drawInto(dest, map, opts = {}) {\n        const buffer = dest instanceof GWU.buffer.Buffer ? dest : dest.buffer;\n        const offsetX = opts.offsetX || 0;\n        const offsetY = opts.offsetY || 0;\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                if (map.hasXY(x + offsetX, y + offsetY)) {\n                    const cell = map.cell(x + offsetX, y + offsetY);\n                    this.drawCell(mixer, map, cell, opts.fov);\n                    buffer.drawSprite(x, y, mixer);\n                }\n            }\n        }\n    }\n    drawCell(dest, map, cell, fov) {\n        dest.blackOut();\n        // const isVisible = fov ? fov.isAnyKindOfVisible(cell.x, cell.y) : true;\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (cell.needsRedraw || needSnapshot) {\n            this.getAppearance(dest, map, cell);\n            cell.putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            cell.getSnapshot(dest);\n        }\n        this.applyLight(dest, cell, fov);\n        let separate = cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT | Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        if (cell.hasCellFlag(Flags.Cell.IS_CURSOR)) {\n            dest.bg = dest.bg.mix(highlightColor, 50);\n            separate = true;\n        }\n        else if (cell.hasCellFlag(Flags.Cell.IS_HIGHLIGHTED)) {\n            dest.bg = dest.bg.mix(highlightColor, 25);\n            separate = true;\n            dest.invert();\n        }\n        if (separate) {\n            [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n        }\n        return true;\n    }\n    // getCellAppearance(cell: CellType, dest: GWU.sprite.Mixer) {\n    //     dest.blackOut();\n    //     const isVisible = true; // this.fov.isAnyKindOfVisible(x, y);\n    //     const isRevealed = true; // this.fov.isRevealed(x, y);\n    //     const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     if (needSnapshot || (cell.needsRedraw && isVisible)) {\n    //         this.layers.forEach((layer) => layer.putAppearance(dest, cell));\n    //         if (dest.dances) {\n    //             cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n    //         } else {\n    //             cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n    //         }\n    //         dest.bake();\n    //         cell.putSnapshot(dest);\n    //         cell.needsRedraw = false;\n    //         cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     } else {\n    //         cell.getSnapshot(dest);\n    //     }\n    //     if (isVisible) {\n    //         const light = this.light.getLight(cell.x, cell.y);\n    //         dest.multiply(light);\n    //     } else if (isRevealed) {\n    //         dest.scale(50);\n    //     } else {\n    //         dest.blackOut();\n    //     }\n    //     if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n    //         [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n    //     }\n    // }\n    getAppearance(dest, map, cell) {\n        const ground = cell.tiles[Flags.Depth.GROUND];\n        const surface = cell.tiles[Flags.Depth.SURFACE];\n        const liquid = cell.tiles[Flags.Depth.LIQUID];\n        const gas = cell.tiles[Flags.Depth.GAS]; // How to get volume!?!?!?!\n        dest.drawSprite(ground.sprite);\n        if (surface) {\n            dest.drawSprite(surface.sprite);\n        }\n        if (liquid) {\n            dest.drawSprite(liquid.sprite);\n        }\n        if (cell.hasItem()) {\n            const item = map.itemAt(cell.x, cell.y);\n            if (item)\n                item.drawInto(dest);\n        }\n        if (cell.hasActor()) {\n            const actor = map.actorAt(cell.x, cell.y);\n            if (actor)\n                actor.drawInto(dest);\n        }\n        if (gas) {\n            const opacity = GWU.rng.cosmetic.number(50) + 25;\n            dest.drawSprite(gas.sprite, opacity);\n        }\n        if (cell.hasFx()) {\n            const fx = map.fxAt(cell.x, cell.y);\n            if (fx)\n                dest.drawSprite(fx.sprite);\n        }\n        if (dest.dances) {\n            cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        else {\n            cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        dest.bake();\n    }\n    applyLight(dest, cell, fov) {\n        const isVisible = !fov || fov.isAnyKindOfVisible(cell.x, cell.y);\n        const isRevealed = !fov || fov.isRevealed(cell.x, cell.y);\n        const light = cell.map.light.getLight(cell.x, cell.y);\n        dest.multiply(light);\n        // TODO - is Clairy\n        // TODO - is Telepathy\n        if (fov && fov.isCursor(cell.x, cell.y)) {\n            dest.invert();\n        }\n        else if (!isVisible) {\n            if (isRevealed) {\n                dest.scale(70);\n            }\n            else {\n                dest.blackOut();\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\n// import { CellMemory } from './cellMemory';\nimport * as Effect from '../effect';\nimport { BasicDrawer } from '../draw/basic';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        // _memory: GWU.grid.Grid<CellMemory>;\n        // machineCount = 0;\n        // _seed = 0;\n        this.rng = GWU.rng.random;\n        // id = 'MAP';\n        this.actors = [];\n        this.items = [];\n        this.fx = [];\n        this._animations = [];\n        this.events = new GWU.events.EventEmitter();\n        this.flags = { map: 0 };\n        this.layers = [];\n        this.properties = { seed: 0, machineCount: 0 };\n        if (opts.id) {\n            this.properties.id = opts.id;\n        }\n        this.drawer = opts.drawer || new BasicDrawer();\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        // this._memory = GWU.grid.make(\n        //     width,\n        //     height,\n        //     (x, y) => new CellMemory(this, x, y)\n        // );\n        if (opts.seed) {\n            this.properties.seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        // this.fov = new GWU.fov.FovSystem(this, opts);\n        this.initLayers();\n    }\n    get seed() {\n        return this.properties.seed;\n    }\n    set seed(v) {\n        this.properties.seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    get width() {\n        return this.cells.width;\n    }\n    get height() {\n        return this.cells.height;\n    }\n    // memory(x: number, y: number): CellMemory {\n    //     return this._memory[x][y];\n    // }\n    // knowledge(x: number, y: number): CellInfoType {\n    //     if (this.fov.isAnyKindOfVisible(x, y)) return this.cell(x,y);\n    //     return this._memory[x][y];\n    // }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    _cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // items\n    hasItem(x, y) {\n        return this.cell(x, y).hasItem();\n    }\n    itemAt(x, y) {\n        return this.items.find((i) => i.isAt(x, y)) || null;\n    }\n    eachItem(cb) {\n        this.items.forEach(cb);\n    }\n    addItem(x, y, item, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this._cell(x, y);\n        // if (!cell.canAddItem(item)) return false;\n        if (cell._addItem(item)) {\n            const index = this.items.indexOf(item);\n            if (index < 0) {\n                this.items.push(item);\n            }\n            item.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireAddItemEffects(item, cell);\n            }\n            if (index < 0) {\n                this.events.emit('item', this, item, true);\n            }\n            return true;\n        }\n        return false;\n    }\n    _fireAddItemEffects(item, cell) {\n        if (item.key &&\n            item.key.matches(cell.x, cell.y) &&\n            cell.hasEffect('key')) {\n            cell.fireEvent('key', {\n                key: item,\n                item,\n            });\n        }\n        else if (cell.hasEffect('add_item')) {\n            cell.fireEvent('add_item', {\n                key: item,\n                item,\n            });\n        }\n    }\n    addItemNear(x, y, item, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this._cell(i, j);\n            if (cell.hasItem())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (item.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        return this.addItem(loc[0], loc[1], item, fireEffects);\n    }\n    removeItem(item, fireEffects = false) {\n        const cell = this._cell(item.x, item.y);\n        // if (!cell.canRemoveItem(item)) return false;\n        if (cell._removeItem(item)) {\n            if (fireEffects) {\n                this._fireRemoveItemEffects(item, cell);\n            }\n            GWU.arrayDelete(this.items, item);\n            item.removeFromMap();\n            this.events.emit('item', this, item, false);\n            return true;\n        }\n        return false;\n    }\n    _fireRemoveItemEffects(item, cell) {\n        if (item.isKey(cell.x, cell.y) && cell.hasEffect('no_key')) {\n            cell.fireEvent('no_key', {\n                key: item,\n                item,\n            });\n        }\n        else if (cell.hasEffect('remove_item')) {\n            cell.fireEvent('remove_item', {\n                key: item,\n                item,\n            });\n        }\n    }\n    moveItem(item, x, y, fireEffects = false) {\n        if (item.map !== this)\n            throw new Error('Actor not on this map!');\n        const currentCell = this._cell(item.x, item.y);\n        const newCell = this._cell(x, y);\n        // if (!currentCell.canRemoveItem(item)) return false;\n        // if (!newCell.canAddItem(item)) return false;\n        currentCell._removeItem(item);\n        if (newCell._addItem(item)) {\n            if (fireEffects) {\n                this._fireRemoveItemEffects(item, currentCell);\n                this._fireAddItemEffects(item, newCell);\n            }\n            item.addToMap(this, x, y);\n        }\n        return true;\n    }\n    //  moveItem(item: Item, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = item.x;\n    //     const oldY = item.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[item.depth] as Layer.ItemLayer;\n    //     if (!( layer.removeItem(item))) return false;\n    //     if (!( this.addItem(x, y, item))) {\n    //         layer.forceItem(item.x, item.y, item);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (item.lastSeen) {\n    //     //         this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n    //     //         this.clearCellFlag(\n    //     //             item.lastSeen.x,\n    //     //             item.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         item.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.item = item;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     item.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.actors.find((a) => a.isAt(x, y)) || null;\n    }\n    eachActor(cb) {\n        this.actors.forEach(cb);\n    }\n    addActor(x, y, actor, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this._cell(x, y);\n        if (!cell.canAddActor(actor))\n            return false;\n        if (cell._addActor(actor)) {\n            const index = this.actors.indexOf(actor);\n            if (index < 0) {\n                this.actors.push(actor);\n            }\n            actor.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireAddActorEffects(actor, cell);\n            }\n            if (index < 0) {\n                this.events.emit('actor', this, actor, true);\n            }\n            return true;\n        }\n        return false;\n    }\n    _fireAddActorEffects(actor, cell) {\n        if (actor.isKey(cell.x, cell.y) && cell.hasEffect('key')) {\n            cell.fireEvent('key', {\n                key: actor,\n                actor,\n            });\n        }\n        else if (actor.isPlayer() && cell.hasEffect('add_player')) {\n            cell.fireEvent('add_player', {\n                player: actor,\n                actor,\n            });\n        }\n        else if (cell.hasEffect('add_actor')) {\n            cell.fireEvent('add_actor', {\n                actor,\n            });\n        }\n    }\n    addActorNear(x, y, actor, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this.cell(i, j);\n            if (cell.hasActor())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        return this.addActor(loc[0], loc[1], actor, fireEffects);\n    }\n    removeActor(actor, fireEffects = false) {\n        const cell = this._cell(actor.x, actor.y);\n        if (!cell.canRemoveActor(actor))\n            return false;\n        if (cell._removeActor(actor)) {\n            if (fireEffects) {\n                this._fireRemoveActorEffects(actor, cell);\n            }\n            actor.removeFromMap();\n            GWU.arrayDelete(this.actors, actor);\n            this.events.emit('actor', this, actor, false);\n            return true;\n        }\n        return false;\n    }\n    _fireRemoveActorEffects(actor, cell) {\n        if (actor.isKey(actor.x, actor.y) && cell.hasEffect('no_key')) {\n            cell.fireEvent('no_key', {\n                key: actor,\n                actor,\n            });\n        }\n        else if (actor.isPlayer() && cell.hasEffect('remove_player')) {\n            cell.fireEvent('remove_player', {\n                actor,\n                player: actor,\n            });\n        }\n        else if (cell.hasEffect('remove_actor')) {\n            cell.fireEvent('remove_actor', {\n                actor,\n            });\n        }\n    }\n    moveActor(actor, x, y, fireEffects = false) {\n        if (actor.map !== this)\n            throw new Error('Actor not on this map!');\n        const currentCell = this._cell(actor.x, actor.y);\n        const newCell = this._cell(x, y);\n        // if (!currentCell.canRemoveActor(actor)) return false;\n        // if (!newCell.canAddActor(actor)) return false;\n        currentCell._removeActor(actor);\n        if (newCell._addActor(actor)) {\n            actor.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireRemoveActorEffects(actor, currentCell);\n                this._fireAddActorEffects(actor, newCell);\n            }\n        }\n        return true;\n    }\n    //  moveActor(actor: Actor, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = actor.x;\n    //     const oldY = actor.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[actor.depth] as Layer.ActorLayer;\n    //     if (!( layer.removeActor(actor))) return false;\n    //     if (!( layer.addActor(x, y, actor))) {\n    //         layer.forceActor(actor.x, actor.y, actor);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (actor.lastSeen) {\n    //     //         this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(\n    //     //             actor\n    //     //         );\n    //     //         this.clearCellFlag(\n    //     //             actor.lastSeen.x,\n    //     //             actor.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         actor.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.actor = actor;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     actor.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    fxAt(x, y) {\n        return this.fx.find((i) => i.isAt(x, y)) || null;\n    }\n    eachFx(cb) {\n        this.fx.forEach(cb);\n    }\n    addFx(x, y, fx) {\n        const cell = this.get(x, y);\n        if (!cell)\n            return false;\n        fx.x = x;\n        fx.y = y;\n        cell._addFx(fx);\n        this.fx.push(fx);\n        this.events.emit('fx', this, fx, true);\n        return true;\n    }\n    moveFx(fx, x, y) {\n        const current = this.get(fx.x, fx.y);\n        const updated = this.get(x, y);\n        if (!updated)\n            return false;\n        current._removeFx(fx);\n        fx.x = x;\n        fx.y = y;\n        updated._addFx(fx);\n        return true;\n    }\n    removeFx(fx) {\n        const cell = this.get(fx.x, fx.y);\n        GWU.arrayDelete(this.fx, fx);\n        if (cell) {\n            cell._removeFx(fx);\n        }\n        this.events.emit('fx', this, fx, false);\n        return true;\n    }\n    // Information\n    // isVisible(x: number, y: number): boolean {\n    //     return this.fov.isAnyKindOfVisible(x, y);\n    // }\n    hasKey(x, y) {\n        const actor = this.actorAt(x, y);\n        if (actor && actor.isKey(x, y))\n            return true;\n        const item = this.itemAt(x, y);\n        if (item && item.isKey(x, y))\n            return true;\n        return false;\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const getCh = (cell) => {\n            return cell.dump();\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    get needsRedraw() {\n        return this.hasMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v)\n            this.setMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n        else\n            this.clearMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    hasEntityFlag(x, y, flag) {\n        return this.cell(x, y).hasEntityFlag(flag);\n    }\n    hasTileFlag(x, y, flag) {\n        return this.cell(x, y).hasTileFlag(flag);\n    }\n    highlightPath(path, markCursor = true) {\n        this.clearPath();\n        path.forEach((loc) => {\n            this.setCellFlag(loc[0], loc[1], Flags.Cell.IS_HIGHLIGHTED);\n        });\n        if (markCursor && path[0]) {\n            const loc = path[0];\n            this.setCellFlag(loc[0], loc[1], Flags.Cell.IS_CURSOR);\n        }\n        this.needsRedraw = true;\n    }\n    clearPath() {\n        this.cells.forEach((c) => c.clearCellFlag(Flags.Cell.IS_CURSOR | Flags.Cell.IS_HIGHLIGHTED));\n        this.needsRedraw = true;\n    }\n    showCursor(x, y) {\n        this.clearCursor();\n        this.cell(x, y).setCellFlag(Flags.Cell.IS_CURSOR);\n        this.needsRedraw = true;\n    }\n    clearCursor() {\n        this.cells.forEach((c) => c.clearCellFlag(Flags.Cell.IS_CURSOR));\n        this.needsRedraw = true;\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        // this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile\n    // useMemory = false\n    ) {\n        return this.cell(x, y).hasTile(tile);\n        // if (!useMemory) return this.cell(x, y).hasTile(tile);\n        // return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            const name = tile;\n            tile = TILE.get(name);\n            if (!tile)\n                throw new Error('Failed to find tile: ' + name);\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clearTiles(tile);\n    }\n    tick(dt) {\n        let didSomething = false;\n        this._animations.forEach((a) => {\n            didSomething = a.tick(dt) || didSomething;\n        });\n        this._animations = this._animations.filter((a) => a.isRunning());\n        didSomething = this.fireAll('tick') || didSomething;\n        for (let layer of this.layers) {\n            if (layer && layer.tick(dt)) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cell(x, y));\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.actors = src.actors.slice();\n        this.items = src.items.slice();\n        this.flags.map = src.flags.map;\n        // this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.fireEvent(event, ctx);\n    }\n    fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        willFire.forEach((w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    cell.fireEvent(event, {\n                        force: true,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        cell.fireEvent('machine', ctx) || didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    // DRAW\n    drawInto(dest, opts) {\n        this.drawer.drawInto(dest, this, opts);\n    }\n    getAppearanceAt(x, y, dest) {\n        const cell = this.cell(x, y);\n        return this.drawer.drawCell(dest, this, cell);\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n    // redrawCell(x: number, y: number): void {\n    //     // if (clearMemory) {\n    //     //     this.clearMemory(x, y);\n    //     // }\n    //     this.cell(x, y).needsRedraw = true;\n    // }\n    // Animator\n    addAnimation(a) {\n        this._animations.push(a);\n    }\n    removeAnimation(a) {\n        GWU.arrayDelete(this._animations, a);\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import { Map } from '../map/map';\nimport * as Flags from '../flags';\nexport class Memory extends Map {\n    constructor(map) {\n        super(map.width, map.height);\n        // this.actor = actor;\n        this.source = map;\n        this.cells.forEach((c) => c.setCellFlag(Flags.Cell.STABLE_MEMORY));\n    }\n    cell(x, y) {\n        let cell = this.cells[x][y];\n        if (!cell.hasCellFlag(Flags.Cell.STABLE_MEMORY)) {\n            cell = this.source.cell(x, y);\n        }\n        return cell;\n    }\n    memory(x, y) {\n        return this.cells[x][y];\n    }\n    isMemory(x, y) {\n        return this.cells[x][y].hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    setTile() {\n        throw new Error('Cannot set tiles on memory.');\n    }\n    // addItem(x: number, y: number, item: Item, fireEffects: boolean): boolean;\n    // addItem(x: number, y: number, item: Item): boolean;\n    addItem() {\n        throw new Error('Cannot add Items to memory!');\n    }\n    // removeItem(item: Item, fireEffects: boolean): boolean;\n    // removeItem(item: Item): boolean;\n    removeItem() {\n        throw new Error('Cannot remove Items from memory!');\n    }\n    itemAt(x, y) {\n        // if (this.isMemory(x, y)) return null;\n        return this.source.itemAt(x, y);\n    }\n    eachItem(cb) {\n        this.source.eachItem((i) => {\n            if (this.isMemory(i.x, i.y))\n                return;\n            cb(i);\n        });\n    }\n    // addActor(x: number, y: number, actor: Actor, fireEffects: boolean): boolean;\n    // addActor(x: number, y: number, actor: Actor): boolean;\n    addActor() {\n        throw new Error('Cannot add Actors to memory!');\n    }\n    // removeActor(actor: Actor, fireEffects: boolean): boolean;\n    // removeActor(actor: Actor): boolean;\n    removeActor() {\n        throw new Error('Cannot remove Actors from memory!');\n    }\n    actorAt(x, y) {\n        if (this.isMemory(x, y))\n            return null;\n        return this.source.actorAt(x, y);\n    }\n    eachActor(cb) {\n        this.source.eachActor((a) => {\n            if (this.isMemory(a.x, a.y))\n                return;\n            cb(a);\n        });\n    }\n    storeMemory(x, y) {\n        const mem = this.cells[x][y];\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        const cell = this.source.cell(x, y);\n        mem.copy(cell);\n        mem.setCellFlag(Flags.Cell.STABLE_MEMORY);\n        mem.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        mem.map = this; // so that drawing this cell results in using the right map\n        let newList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR);\n        // add any current items+actors\n        // if (cell.hasItem()) {\n        //     mem.clearCellFlag(Flags.Cell.HAS_ITEM);\n        // }\n        if (cell.hasActor()) {\n            mem.clearCellFlag(Flags.Cell.HAS_ANY_ACTOR);\n        }\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        this.light.setLight(x, y, this.source.light.getLight(x, y));\n    }\n    makeVisible(x, y) {\n        const mem = this.memory(x, y);\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        mem.clearCellFlag(Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT);\n        let newList = this.source\n            .cell(x, y)\n            .hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n    }\n    onFovChange(x, y, isVisible) {\n        if (!isVisible) {\n            this.storeMemory(x, y);\n        }\n        else {\n            this.makeVisible(x, y);\n        }\n    }\n}\n","import { Memory } from './memory';\nconst cache = {};\nexport function store(actor, map, memory) {\n    let actorMemory = cache[actor.id];\n    if (!actorMemory) {\n        cache[actor.id] = actorMemory = {};\n    }\n    actorMemory[map.properties.id] = memory;\n}\nexport function get(actor, map) {\n    let actorMemory = cache[actor.id];\n    if (actorMemory) {\n        const memory = actorMemory[map.properties.id];\n        if (memory)\n            return memory;\n    }\n    return new Memory(map);\n}\n","export const ais = {};\nexport function install(name, fn) {\n    ais[name] = fn;\n}\nexport function make(opts) {\n    if (typeof opts === 'string') {\n        opts = { fn: opts };\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    if (typeof opts.fn === 'string') {\n        opts.fn = ais[opts.fn];\n    }\n    if (!opts.fn) {\n        opts.fn = ais.default;\n    }\n    return opts;\n}\n","import * as GWU from 'gw-utils';\nimport { getAction } from '../actor/action';\nimport * as AI from './ai';\nimport { wander } from './wander';\nexport class AICtx {\n    constructor(game, actor, target) {\n        this.item = null;\n        this.count = 0;\n        this.game = game;\n        this.actor = actor;\n        this.target = target || null;\n        this.distanceMap = GWU.grid.alloc(game.map.width, game.map.height);\n        if (target) {\n            const costMap = actor.costMap();\n            GWU.path.calculateDistances(this.distanceMap, target.x, target.y, costMap);\n        }\n    }\n    start() {\n        ++this.count;\n        return this;\n    }\n    done(result) {\n        --this.count;\n        if (this.count == 0) {\n            GWU.grid.free(this.distanceMap);\n        }\n        return result;\n    }\n}\n/*\nhttp://roguebasin.com/index.php/Roguelike_Intelligence_-_Stateless_AIs\n-- Typical AI\n*/\nexport async function typical(game, actor) {\n    if (actor.isDead())\n        return -1;\n    const map = actor.map;\n    if (!map)\n        return -1; // actor not on map ?!?!\n    const target = game.player;\n    const tryAttack = actor.canSee(target) && actor.willAttack(target);\n    if (tryAttack) {\n        const damagePct = 100 - actor.stats.getPct('health');\n        const morale = actor.stats.get('morale');\n        const chargeChance = 100;\n        const retreatChance = 0;\n        const ctx = new AICtx(game, actor, target).start();\n        let result = 0;\n        if (damagePct > morale) {\n            if (canRunAwayFrom(game, actor, target, ctx)) {\n                result = await runAwayFrom(game, actor, target, ctx);\n            }\n            else if (canAttack(game, actor, target, ctx)) {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (tooFarFrom(game, actor, target, ctx) &&\n            canAttack(game, actor, target, ctx) &&\n            canMoveToward(game, actor, target, ctx)) {\n            if (GWU.random.chance(chargeChance)) {\n                result = await moveToward(game, actor, target, ctx);\n            }\n            else {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (tooCloseTo(game, actor, target, ctx) &&\n            canAttack(game, actor, target, ctx) &&\n            canMoveAwayFrom(game, actor, target, ctx)) {\n            if (GWU.random.chance(retreatChance)) {\n                result = await moveAwayFrom(game, actor, target, ctx);\n            }\n            else {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (canAttack(game, actor, target, ctx)) {\n            result = await attack(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n        if (tooFarFrom(game, actor, target, ctx) &&\n            canMoveToward(game, actor, target, ctx)) {\n            result = await moveToward(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n        if (tooCloseTo(game, actor, target, ctx) &&\n            canMoveAwayFrom(game, actor, target, ctx)) {\n            result = await moveAwayFrom(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n    }\n    // TODO - Use scent, menory, other teammates info, ...\n    const wanderOpt = GWU.object.firstOpt('wander', actor.ai, actor.kind.ai, false);\n    if (wanderOpt) {\n        if (actor.goalMap || // we have a current goal\n            typeof wanderOpt !== 'number' || // wander: true\n            GWU.random.chance(wanderOpt) // chance\n        ) {\n            const result = wander(game, actor);\n            if (result)\n                return result;\n        }\n        else {\n            const idle = getAction('idle');\n            if (idle) {\n                return idle(game, actor);\n            }\n        }\n    }\n    const standStill = getAction('standStill');\n    if (!standStill)\n        throw new Error('No standStill action found for actors!');\n    return standStill(game, actor);\n}\nAI.install('typical', typical);\nAI.install('default', typical);\nexport function canMoveToward(game, actor, target, ctx) {\n    // can move?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    const distanceMap = ctx.distanceMap;\n    const canMoveDiagonal = false;\n    // look for distance > current around me\n    let center = distanceMap[actor.x][actor.y];\n    let count = 0;\n    GWU.xy.eachNeighbor(actor.x, actor.y, (x, y) => {\n        if (distanceMap[x][y] < center) {\n            ++count;\n        }\n    }, canMoveDiagonal);\n    return ctx.done(count > 0);\n}\nexport async function moveToward(game, actor, target, ctx) {\n    // pathfinding?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    // distanceMap.dump();\n    const map = game.map;\n    const step = GWU.path.nextStep(ctx.distanceMap, actor.x, actor.y, (x, y) => {\n        const cell = map.cell(x, y);\n        if (!cell)\n            return true;\n        if (cell.hasActor() && cell.actor !== target)\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    });\n    let result = 0;\n    if (!step || (step[0] == 0 && step[1] == 0)) {\n        const standStill = getAction('standStill');\n        if (!standStill)\n            throw new Error('No standStill action found for actors!');\n        result = await standStill(game, actor);\n        return ctx.done(result);\n    }\n    const moveDir = getAction('moveDir');\n    if (!moveDir)\n        throw new Error('No moveDir action found for Actors!');\n    result = await moveDir(game, actor, { dir: step });\n    return ctx.done(result);\n}\nexport function canMoveAwayFrom(game, actor, target, ctx) {\n    // can move?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    const distanceMap = ctx.distanceMap;\n    const canMoveDiagonal = false;\n    // look for distance > current around me\n    let center = distanceMap[actor.x][actor.y];\n    let count = 0;\n    GWU.xy.eachNeighbor(actor.x, actor.y, (x, y) => {\n        const d = distanceMap[x][y];\n        if (d >= GWU.path.NO_PATH)\n            return;\n        if (distanceMap[x][y] > center) {\n            ++count;\n        }\n    }, canMoveDiagonal);\n    return ctx.done(count > 0);\n}\nexport async function moveAwayFrom(_game, actor, _target, _ctx) {\n    // safety/strategy?\n    // always move using safety map?\n    return actor.endTurn();\n}\nexport function canRunAwayFrom(_game, _actor, _target, _ctx) {\n    // can move?\n    return false;\n}\nexport async function runAwayFrom(_game, actor, _target, _ctx) {\n    // move toward loop if away from player\n    return actor.endTurn();\n}\nexport function canAttack(_game, actor, target, _ctx) {\n    // has attack?\n    // attack affects player?\n    // cooldown?\n    return GWU.xy.distanceFromTo(actor, target) <= 1;\n}\nexport async function attack(game, actor, target, _ctx) {\n    console.log('attack!', actor.id, target.id);\n    let attack = actor.getAction('attack');\n    if (!attack)\n        return 0;\n    return attack(game, actor);\n}\nexport function tooFarFrom(_game, actor, target, _ctx) {\n    // diagonal?\n    return GWU.xy.distanceFromTo(actor, target) > 1;\n}\nexport function tooCloseTo(_game, actor, target, _ctx) {\n    return GWU.xy.distanceFromTo(actor, target) < 1;\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { getAction } from '../actor/action';\nexport async function wander(game, actor) {\n    // Do we have a wander target?\n    let goalMap = actor.goalMap;\n    if (!goalMap) {\n        //      pick new wander target\n        const costMap = actor.costMap();\n        const loc = GWU.random.matchingLoc(costMap.width, costMap.height, (x, y) => {\n            return costMap[x][y] > 0 && costMap[x][y] !== GWU.path.NO_PATH;\n        });\n        if (!loc || loc[0] < 0 || loc[1] < 0) {\n            console.log('No wander location found!');\n            return 0;\n        }\n        //      build distance map to target\n        goalMap = actor.setGoal(loc[0], loc[1]);\n    }\n    // take the next step to the target\n    const step = GWU.path.nextStep(goalMap, actor.x, actor.y, (x, y) => {\n        if (!game.map.hasActor(x, y))\n            return false;\n        const other = game.map.actorAt(x, y);\n        if (!other) {\n            console.log(`Cell @ ${x},${y} has actor flag, but no actor.`);\n            game.map.cell(x, y).clearCellFlag(Flags.Cell.HAS_ACTOR);\n            return false;\n        }\n        return !actor.canPass(other);\n    });\n    if (!step) {\n        actor.clearGoal();\n        return 0;\n    }\n    let result = 0;\n    if (!step || (step[0] == 0 && step[1] == 0)) {\n        return 0; // did nothing\n    }\n    const moveDir = getAction('moveDir');\n    if (!moveDir)\n        throw new Error('No moveDir action found for Actors!');\n    result = await moveDir(game, actor, { dir: step });\n    return result;\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nexport function fillSafetyMap(safetyMap, actor, target) {\n    const costGrid = GWU.grid.alloc(actor.costMap());\n    GWU.path.calculateDistances(safetyMap, target.x, target.y, costGrid, true);\n    safetyMap.update((v) => v * -1); // Can set factor to be < -1 e.g. -1.2\n    actor.map.actors.forEach((a) => {\n        if (a.willAttack(actor)) {\n            costGrid[a.x][a.y] = GWU.path.FORBIDDEN; // This is why we allocate a copy\n        }\n    });\n    actor.map.eachCell((c, x, y) => {\n        if (c.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n            safetyMap[x][y] -= GWU.path.AVOIDED; // loop cells are extra good\n        }\n    });\n    GWU.path.rescan(safetyMap, costGrid, true);\n    safetyMap.update((v) => (v <= -30000 ? 30000 : v));\n    GWU.grid.free(costGrid);\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Actor } from './actor';\nimport * as Memory from '../memory';\nimport * as AI from '../ai';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n        this.flags = {\n            actor: Flags.Actor.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.vision = {};\n        this.actions = {};\n        this.bump = ['attack'];\n        this.moveSpeed = 100;\n        if (opts.flags) {\n            this.flags.actor = GWU.flag.from(Flags.Actor, this.flags.actor, opts.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, opts.flags);\n        }\n        if (opts.vision) {\n            this.vision.normal = opts.vision;\n        }\n        this.stats = Object.assign({ health: 1, morale: 100 }, opts.stats);\n        if (opts.actions) {\n            Object.assign(this.actions, opts.actions);\n        }\n        if (opts.moveSpeed) {\n            this.moveSpeed = opts.moveSpeed;\n        }\n        this.ai = AI.make(opts.ai || 'default');\n        if (opts.bump) {\n            if (typeof opts.bump === 'string') {\n                opts.bump = opts.bump.split(/[|,]/g).map((t) => t.trim());\n            }\n            if (typeof opts.bump === 'function') {\n                opts.bump = [opts.bump];\n            }\n            if (Array.isArray(opts.bump)) {\n                this.bump = opts.bump.slice();\n            }\n        }\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n        Object.assign(actor.flags, this.flags);\n        if (options.fov) {\n            actor.fov = options.fov;\n        }\n        if (options.memory) {\n            actor.memory = options.memory;\n        }\n        if (this.vision.normal) {\n            actor.visionDistance = this.vision.normal;\n        }\n        actor.stats.init(this.stats);\n    }\n    addToMap(actor, map) {\n        super.addToMap(actor, map);\n        if (this.hasActorFlag(Flags.Actor.HAS_MEMORY)) {\n            actor.memory = Memory.get(actor, map);\n        }\n        if (this.hasActorFlag(Flags.Actor.USES_FOV)) {\n            actor.fov = new GWU.fov.FovSystem(map);\n            actor.fov.follow = actor;\n            if (actor.memory) {\n                actor.fov.callback = actor.memory;\n            }\n        }\n    }\n    removeFromMap(actor) {\n        super.removeFromMap(actor);\n        if (actor._map && actor.memory) {\n            Memory.store(actor, actor._map, actor.memory);\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    canSeeEntity(_actor, _entity) {\n        return true;\n    }\n    isAbleToSee(_actor, _entity) {\n        return true;\n    }\n    isAbleToSense(_actor, _entity) {\n        return true;\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { installAction } from '../action';\n// BUMP\n//\n// prefixes:\n// @ = only for player\n// + = only for ally\n// - = only for opposed\n// = = only for same kind\n// $ = use my action (if used with one of the above, this comes last)\n//\nexport async function bump(game, actor, ctx = {}) {\n    const other = ctx.actor;\n    if (other) {\n        const bumpActions = other.getBumpActions();\n        for (let action of bumpActions) {\n            if (typeof action === 'string') {\n                if (action.startsWith('$')) {\n                    const selfName = action.substring(1);\n                    let selfAction = other.getAction(selfName);\n                    if (selfAction === false) {\n                        throw new Error('Cannot have bump action for self action that actor cannot do: ' +\n                            action);\n                    }\n                    const ctx2 = Object.assign({}, ctx, { actor });\n                    const result = await selfAction(game, other, ctx2);\n                    if (result)\n                        return result;\n                }\n                else {\n                    const config = actor.getAction(action);\n                    if (config === false) {\n                        throw new Error('Cannot configure actor with bump action they cannot do: ' +\n                            action);\n                    }\n                    else {\n                        action = config;\n                    }\n                    const result = await action(game, actor, ctx);\n                    if (result)\n                        return result;\n                }\n            }\n            else {\n                const result = await action(game, actor, ctx);\n                if (result)\n                    return result;\n            }\n        }\n    }\n    const item = ctx.item;\n    if (item) {\n        // TODO - Item Actions\n    }\n    return 0;\n}\ninstallAction('bump', bump);\n","import { installAction } from '../action';\nexport async function standStill(_game, actor, _ctx) {\n    return actor.endTurn();\n}\ninstallAction('standStill', standStill);\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\n// export class SpriteFX extends FX {\n//     sprite: GWU.sprite.SpriteConfig;\n//     stepCount: number;\n//     x: number;\n//     y: number;\n//     constructor(\n//         map: MapType,\n//         sprite: string | GWU.sprite.SpriteConfig,\n//         x: number,\n//         y: number,\n//         opts: SpriteFxOptions = {}\n//     ) {\n//         const count = opts.blink || 1;\n//         const duration = opts.duration || 1000;\n//         opts.speed = opts.speed || duration / (2 * count - 1);\n//         super(map, opts);\n//         if (typeof sprite === 'string') {\n//             const name = sprite;\n//             sprite = GWU.sprite.sprites[sprite];\n//             if (!sprite) throw new Error('Cannot find sprite! ' + name);\n//         }\n//         this.sprite = sprite;\n//         this.x = x || 0;\n//         this.y = y || 0;\n//         this.stepCount = 2 * count - 1;\n//     }\n//     start() {\n//         this.map.addFx(this.x, this.y, this.sprite);\n//         return super.start();\n//     }\n//     step() {\n//         --this.stepCount;\n//         if (this.stepCount <= 0) return this.stop();\n//         if (this.stepCount % 2 == 0) {\n//             this.map.removeFx(this);\n//         } else {\n//             this.map.addFx(this.x, this.y, this);\n//         }\n//     }\n//     stop(result?: any) {\n//         this.map.removeFx(this);\n//         return super.stop(result);\n//     }\n//     moveDir(dx: number, dy: number) {\n//         return this.moveTo(this.x + dx, this.y + dy);\n//     }\n//     moveTo(x: number, y: number) {\n//         this.map.moveFx(x, y, this);\n//         return true;\n//     }\n// }\nexport async function flashSprite(map, x, y, sprite, duration = 100, count = 1, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ visible: true })\n        .to({ visible: false })\n        .repeat(count)\n        .repeatDelay(duration)\n        .duration(duration)\n        .onUpdate((obj) => {\n        if (obj.visible) {\n            map.addFx(x, y, entity);\n        }\n        else {\n            map.removeFx(entity);\n        }\n    });\n    // realTime\n    animator = animator || GWU.io.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nGWU.sprite.install('bump', 'white', 50);\nexport async function hit(map, target, sprite, duration, animator) {\n    sprite = sprite || 'hit';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('hit', 'red', 50);\nexport async function miss(map, target, sprite, duration, animator) {\n    sprite = sprite || 'miss';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('miss', 'green', 50);\nexport async function fadeInOut(map, x, y, sprite, duration = 100, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite).clone();\n    }\n    else {\n        sprite = GWU.sprite.make(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ opacity: 0 })\n        .to({ opacity: 100 })\n        .repeat(2)\n        .yoyo(true)\n        .duration(Math.floor(duration / 2))\n        .onUpdate((obj) => {\n        entity.sprite.opacity = obj.opacity;\n        map.cell(x, y).needsRedraw = true; // we changed the sprite so redraw\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n    });\n    // realTime\n    animator = animator || GWU.io.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport async function moveSprite(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    const from = { x: GWU.xy.x(source), y: GWU.xy.y(source) };\n    map.addFx(from.x, from.y, entity);\n    let duration = opts.duration ||\n        Math.ceil(16 * (GWU.xy.maxAxisFromTo(source, target) / (opts.speed || 8)));\n    if (GWU.xy.isLoc(target)) {\n        target = { x: target[0], y: target[1] };\n    }\n    const tween = GWU.tween\n        .make(from)\n        .to(target)\n        .duration(duration)\n        .onUpdate((vals) => {\n        // tweens dont update every step, so...\n        // draw line from current pos to vals pos\n        // check each step for blocking...\n        // end at either vals or last blocking spot\n        const dest = { x: entity.x, y: entity.y };\n        const ok = GWU.xy.forLineBetween(dest.x, dest.y, vals.x, vals.y, (x, y) => {\n            if (opts.stepFn) {\n                if (opts.stepFn(x, y)) {\n                    if (!opts.stopBeforeWalls) {\n                        dest.x = x;\n                        dest.y = y;\n                    }\n                    return false;\n                }\n            }\n            else if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (!opts.stopBeforeWalls) {\n                    dest.x = x;\n                    dest.y = y;\n                }\n                return false;\n            }\n            dest.x = x;\n            dest.y = y;\n        });\n        map.moveFx(entity, dest.x, dest.y);\n        if (!ok) {\n            tween.stop();\n        }\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n        return entity;\n    });\n    const animator = opts.animator || map;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport function bolt(map, source, target, sprite, opts = {}) {\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport async function projectile(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    if (sprite.ch && sprite.ch.length == 4) {\n        const dir = GWU.xy.dirFromTo(source, target);\n        let index = 0;\n        if (dir[0] && dir[1]) {\n            index = 2;\n            if (dir[0] != dir[1]) {\n                // remember up is -y\n                index = 3;\n            }\n        }\n        else if (dir[0]) {\n            index = 1;\n        }\n        const ch = sprite.ch[index];\n        sprite = GWU.sprite.make(ch, sprite.fg, sprite.bg);\n    }\n    else if (sprite.ch && sprite.ch.length !== 1) {\n        throw new Error('projectile requires 4 chars - vert,horiz,diag-left,diag-right (e.g: \"|-\\\\/\")');\n    }\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport function beam(map, from, to, sprite, opts = {}) {\n    opts.fade = opts.fade || 100;\n    if (opts.stopAtWalls === undefined)\n        opts.stopAtWalls = true;\n    const line = [];\n    GWU.xy.forLineFromTo(from, to, (x, y) => {\n        if (!map.hasXY(x, y))\n            return false;\n        if (opts.stepFn && opts.stepFn(x, y))\n            return false;\n        if (opts.stopAtWalls || opts.stopBeforeWalls) {\n            if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (opts.stopBeforeWalls)\n                    return false;\n                line.push([x, y]);\n                return false;\n            }\n        }\n        line.push([x, y]);\n        return true;\n    });\n    const duration = opts.duration || Math.ceil(16 * (line.length / (opts.speed || 8)));\n    const animator = opts.animator || map;\n    const promises = [];\n    let lastIndex = -1;\n    const tween = GWU.tween\n        .make({ index: 0 })\n        .to({ index: line.length - 1 })\n        .duration(duration)\n        .onUpdate((vals) => {\n        while (lastIndex < vals.index) {\n            ++lastIndex;\n            const loc = line[lastIndex] || [-1, -1];\n            promises.push(fadeInOut(map, loc[0], loc[1], sprite, opts.fade, animator));\n        }\n    })\n        .onFinish(async () => {\n        await Promise.all(promises);\n        const loc = line[line.length - 1];\n        return { x: loc[0], y: loc[1] };\n    });\n    animator.addAnimation(tween);\n    return tween.start();\n}\nfunction isInShape(shape, cx, cy, allowCenter, x, y) {\n    const sx = Math.abs(x - cx);\n    const sy = Math.abs(y - cy);\n    if (sx == 0 && sy == 0 && !allowCenter)\n        return false;\n    switch (shape) {\n        case '+':\n            return sx == 0 || sy == 0;\n        case 'x':\n        case 'X':\n            return sx == sy;\n        case '*':\n            return sx == 0 || sy == 0 || sx == sy;\n        default:\n            return true;\n    }\n}\nfunction checkExplosionOpts(opts) {\n    opts.speed = opts.speed || 2;\n    opts.fade = opts.fade || 100;\n    opts.shape = opts.shape || 'o';\n    if (opts.center === undefined) {\n        opts.center = true;\n    }\n}\nexport function explosion(map, x, y, radius, sprite, opts = {}) {\n    checkExplosionOpts(opts);\n    opts.animator = opts.animator || map;\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const grid = GWU.grid.alloc(map.width, map.height);\n    const fov = new GWU.fov.FOV({\n        isBlocked(x, y) {\n            return map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE);\n        },\n        hasXY(x, y) {\n            return map.hasXY(x, y);\n        },\n    });\n    fov.calculate(x, y, radius, (x1, y1) => {\n        grid[x1][y1] = 1;\n    });\n    const duration = opts.duration || 32 * (radius / opts.speed);\n    const promises = [];\n    const tween = GWU.tween\n        .make({ r: 0 })\n        .to({ r: radius })\n        .duration(duration)\n        .onUpdate((vals) => {\n        const minX = Math.max(0, x - vals.r);\n        const minY = Math.max(0, y - vals.r);\n        const maxX = Math.min(map.width - 1, x + vals.r);\n        const maxY = Math.min(map.height - 1, y + vals.r);\n        for (let x1 = minX; x1 <= maxX; ++x1) {\n            for (let y1 = minY; y1 <= maxY; ++y1) {\n                if (grid[x1][y1] &&\n                    GWU.xy.distanceBetween(x, y, x1, y1) <= vals.r) {\n                    grid[x1][y1] = 0;\n                    if (isInShape(opts.shape, x, y, opts.center, x1, y1)) {\n                        promises.push(fadeInOut(map, x1, y1, sprite, opts.fade, opts.animator));\n                    }\n                }\n            }\n        }\n    })\n        .onFinish(async (_obj, success) => {\n        GWU.grid.free(grid);\n        await Promise.all(promises);\n        return success;\n    });\n    opts.animator.addAnimation(tween);\n    return tween.start();\n}\n/*\nexport function explosionFor(\n    map: MapType,\n    grid: GWU.grid.NumGrid,\n    x: number,\n    y: number,\n    radius: number,\n    sprite: string | GWU.sprite.SpriteConfig,\n    opts: ExplosionOptions = {}\n) {\n    checkExplosionOpts(opts);\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    const animation = new ExplosionFX(\n        map,\n        grid,\n        x,\n        y,\n        radius,\n        sprite,\n        opts.speed,\n        opts.fade,\n        opts.shape,\n        opts.center,\n        opts.stepFn\n    );\n    return opts.playFn!(animation);\n}\n*/\n","import { installAction } from '../action';\nimport { bump } from './bump';\nimport { standStill } from './standStill';\nimport * as FX from '../../fx';\nexport async function moveDir(game, actor, ctx = {}) {\n    //\n    const step = ctx.dir;\n    if (!step)\n        throw new Error('moveDir called with no direction!');\n    const newX = actor.x + step[0];\n    const newY = actor.y + step[1];\n    const map = game.map;\n    const currentCell = map.cell(actor.x, actor.y);\n    const newCell = map.cell(newX, newY);\n    let result = 0;\n    if (newCell.blocksMove()) {\n        if (ctx.try)\n            return 0;\n        FX.hit(map, newCell, 'hit', 100);\n        actor.clearGoal();\n        return actor.endTurn();\n    }\n    // can we leave?\n    if (!currentCell.canRemoveActor(actor)) {\n        if (ctx.try)\n            return 0;\n        // canActorLeave must add appropriate message\n        return actor.endTurn();\n    }\n    // is there an actor there?\n    if (newCell.hasActor() || newCell.hasItem()) {\n        if (ctx.try)\n            return 0;\n        const ctx2 = { actor: newCell.actor, item: newCell.item };\n        result = await bump(game, actor, ctx2);\n        if (result)\n            return result;\n    }\n    // can we enter?\n    if (!newCell.canAddActor(actor)) {\n        if (ctx.try)\n            return 0;\n        return actor.endTurn();\n    }\n    if (!map.moveActor(actor, newX, newY)) {\n        result = await standStill(game, actor, ctx);\n        return result;\n    }\n    result = actor.endTurn();\n    return result;\n}\ninstallAction('moveDir', moveDir);\n","import * as GWU from 'gw-utils';\nimport { installAction } from '../action';\nimport { moveDir } from './moveDir';\nexport async function idle(game, actor, _ctx) {\n    if (GWU.random.chance(50)) {\n        // do nothing\n        return actor.endTurn();\n    }\n    // try to step in a random direction\n    const dirIndex = GWU.random.number(4);\n    const dir = GWU.xy.DIRS[dirIndex];\n    const result = await moveDir(game, actor, { dir, try: true });\n    if (result)\n        return result;\n    // stand still\n    return actor.endTurn();\n}\ninstallAction('idle', idle);\n","import * as GWU from 'gw-utils';\nimport { installAction } from '../action';\nexport async function pickup(game, actor, ctx = {}) {\n    const map = actor.map;\n    if (!map)\n        throw new Error('Actor not on map!');\n    const item = actor.map.itemAt(actor.x, actor.y);\n    if (!item) {\n        if (!ctx.quiet) {\n            GWU.message.addAt(actor.x, actor.y, 'Nothing to pickup.');\n        }\n        return 0;\n    }\n    if (actor.avoidsItem(item))\n        return 0;\n    const itemAction = item.getAction('pickup');\n    if (itemAction === false) {\n        if (!ctx.quiet) {\n            GWU.message.addAt(actor.x, actor.y, 'You cannot pickup %{the.item}.', {\n                item,\n            });\n        }\n        return 0;\n    }\n    else if (typeof itemAction === 'function') {\n        // You have to do everything\n        const result = await itemAction(game, actor, item);\n        if (result)\n            return result; // handled\n    }\n    // logs error messages\n    if (!actor.canAddItem(item)) {\n        return 0;\n    }\n    if (!actor.map.removeItem(item)) {\n        return 0;\n    }\n    actor.addItem(item);\n    if (!ctx.quiet) {\n        GWU.message.addAt(actor.x, actor.y, 'You pickup %{the:item}.', {\n            item,\n        });\n    }\n    return actor.endTurn();\n}\ninstallAction('pickup', pickup);\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.quantity = other.quantity;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n    getAction(name) {\n        const action = this.kind.actions[name];\n        return action;\n    }\n    getBumpActions() {\n        return this.kind.bump;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n        this.flags = {\n            item: Flags.Item.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.actions = {};\n        this.bump = [];\n        if (config.flags) {\n            this.flags.item = GWU.flag.from(Flags.Item, this.flags.item, config.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, config.flags);\n        }\n        if (config.actions) {\n            Object.entries(config.actions).forEach(([key, value]) => {\n                this.actions[key] = value;\n            });\n        }\n        if (config.bump) {\n            if (typeof config.bump === 'string' ||\n                typeof config.bump === 'function') {\n                config.bump = [config.bump];\n            }\n            if (Array.isArray(config.bump)) {\n                this.bump = config.bump.slice();\n            }\n        }\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n        Object.assign(item.flags, this.flags);\n        item.quantity = options.quantity || 1;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        // fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        // if (this.map.fov.changed) {\n        //     this.fovVersion = this.version;\n        //     this.map.fov.changed = false;\n        // }\n        // if (snap.version !== this.fovVersion) {\n        //     snap.map.fov.copy(this.map.fov);\n        // }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        // if (snap.version < this.fovVersion || this.map.fov.changed) {\n        //     this.map.fov.copy(snap.map.fov);\n        //     this.fovVersion = snap.version;\n        // }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import * as GWU from 'gw-utils';\nexport function getCellPathCost(map, x, y) {\n    const cell = map.cell(x, y);\n    if (cell.blocksMove())\n        return GWU.path.OBSTRUCTION;\n    if (cell.blocksPathing())\n        return GWU.path.FORBIDDEN;\n    if (cell.hasActor())\n        return 10;\n    return 1;\n}\nexport function fillCostMap(map, costMap) {\n    costMap.update((_v, x, y) => getCellPathCost(map, x, y));\n}\nexport function getPathBetween(map, x0, y0, x1, y1, options = {}) {\n    const distanceMap = GWU.grid.alloc(map.width, map.height);\n    const costMap = GWU.grid.alloc(map.width, map.height);\n    fillCostMap(map, costMap);\n    GWU.path.calculateDistances(distanceMap, x0, y0, costMap, options.eightWays, GWU.xy.straightDistanceBetween(x0, y0, x1, y1) + 1);\n    const path = GWU.path.getPath(distanceMap, x1, y1, (x, y) => map.cell(x, y).blocksMove(), options.eightWays);\n    GWU.grid.free(costMap);\n    GWU.grid.free(distanceMap);\n    return path;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    spawn(map, x = -1, y = -1, opts = {}) {\n        var _a;\n        opts.canSpawn = opts.canSpawn || GWU.TRUE;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_a = opts.machine) !== null && _a !== void 0 ? _a : 0;\n        const leader = this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addLeader(leader, map, x, y, opts)) {\n            return null;\n        }\n        return leader;\n    }\n    _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        entries.forEach(([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                this._spawnMember(kindId, map, leader, opts);\n            }\n        });\n        return count;\n    }\n    _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1, -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addMember(member, map, x, y, leader, opts)) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canSpawn(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n","export const actions = {};\nexport function installCommand(name, fn) {\n    actions[name] = fn;\n}\nexport function getCommand(name) {\n    return actions[name];\n}\n","import { installCommand } from './command';\nimport * as Actor from '../actor';\n// COMMANDS\n// this === GAME\nexport async function moveDir(actor, e) {\n    const dir = e.dir;\n    if (!actor.map || !dir)\n        return -1;\n    return Actor.actions.moveDir(this, actor, e);\n}\ninstallCommand('moveDir', moveDir);\n","import * as GWU from 'gw-utils';\nimport { installCommand } from './command';\nexport async function pickup(actor, _ev) {\n    if (!actor.map)\n        return -1;\n    const playerAction = actor.getAction('pickup');\n    if (!playerAction) {\n        GWU.message.addAt(actor.x, actor.y, 'You cannot pickup items.');\n        return actor.endTurn();\n    }\n    else {\n        // You have to do everything\n        const result = await playerAction(this, actor);\n        if (result)\n            return result; // handled\n    }\n    // Should never get here, but...\n    const standStill = actor.getAction('standStill');\n    if (!standStill)\n        throw new Error('Actor cannot stand still.');\n    return standStill(this, actor);\n}\ninstallCommand('pickup', pickup);\n","/*\n    Attributes\n    ========================\n\n    To configure attributes, set the defaults:\n\n    Attribute.install(')\n\n    const attr = new Attributes(10);\n\n    attr.set('str', 10);\n    attr.set('dex', 10);\n    ...\n    attr.set('chr', 10);\n\n    // to get the current value\n    attr.get('str');\n\n    // To raise an attribute permanently\n    attr.gain('chr', 1);\n\n    // To raise an attribute temporarily\n    attr.gain('chr', 1, false);\n\n    // To lower an attribute permanently\n    attr.drain('chr', 1, true);\n\n    // to lower an attribute temporarily\n    attr.drain('chr', 1);\n\n    // to restore (remove) all temporary changes\n    attr.restore();\n\n    // to add a temporary change that can be removed by itself\n    attr.addBonus('str', 1);\n\n    // to remove the bonus\n    attr.clearBonus('str', 1);\n\n    // adjustments (bonuses) are also possible via:\n    attr.adjust('str', { bonus: 1 });\n\n    // But adjustments can also set the\n    attr.adjust('str', { fixed: 14 });      // temporarily sets base\n    attr.adjust('str', { base: 21 });       // resets the base\n    attr.adjust('str', { restore: true });  // removes all bonuses/penalties\n    attr.adjust('str', { min: 10 });        // limits value\n    attr.adjust('str', { max: 30 });        // limits value\n    attr.adjust('str', { sustain: true });  // turns off lowering values\n*/\nexport class Attributes {\n    constructor(baseValues) {\n        this._base = {};\n        this._max = {};\n        this._bonus = {};\n        this._sustain = {};\n        this._value = {};\n        this.changed = null;\n        this.init(baseValues);\n    }\n    init(baseValues) {\n        for (let k in attributes) {\n            const v = typeof baseValues === 'number' ? baseValues : attributes[k];\n            this.set(k, v);\n        }\n        if (typeof baseValues !== 'number') {\n            for (let k in baseValues) {\n                this.set(k, baseValues[k]);\n            }\n        }\n    }\n    forEach(fn) {\n        Object.keys(attributes).forEach((k) => fn(this.get(k)));\n    }\n    // modifier(name: string) {\n    //     return Math.floor((this.get(name) - 10) / 2);\n    // }\n    get(name) {\n        return this._value[name] || 0;\n    }\n    set(name, value = 0) {\n        this._value[name] = value;\n        this._base[name] = value;\n        this._max[name] = value;\n        this._bonus[name] = [];\n        return value;\n    }\n    base(name) {\n        return this._base[name] || 0;\n    }\n    max(name) {\n        return this._max[name] || 0;\n    }\n    sustain(name) {\n        return this._sustain[name] || false;\n    }\n    gain(name, delta, raiseMax = true) {\n        if (delta < 0 && this._sustain[name])\n            return 0;\n        this._base[name] += delta;\n        if (raiseMax && this._base[name] > this._max[name]) {\n            this._max[name] = this._base[name];\n        }\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    drain(name, loss, lowerMax = false) {\n        if (loss < 0)\n            loss = -loss;\n        const changed = this.gain(name, -loss, false);\n        if (changed && lowerMax) {\n            this._max[name] = this._base[name];\n        }\n        return changed;\n    }\n    restore(name) {\n        this._base[name] = this._max[name];\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    addBonus(name, bonus) {\n        return this._addBonus(name, { bonus });\n    }\n    _addBonus(name, bonus) {\n        if (typeof bonus === 'number')\n            bonus = { bonus };\n        if (this._value[name] === undefined) {\n            this.set(name, 0);\n        }\n        this._bonus[name].push(bonus);\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    clearBonus(name, bonus) {\n        return this._clearBonus(name, { bonus });\n    }\n    _clearBonus(name, bonus) {\n        if (typeof bonus === 'number')\n            bonus = { bonus };\n        let arr = this._bonus[name] || [];\n        let key = JSON.stringify(bonus);\n        let index = arr.findIndex((o) => {\n            return JSON.stringify(o) == key;\n        });\n        if (index > -1) {\n            arr.splice(index, 1);\n            let old = this.get(name);\n            return this._calcValue(name) - old;\n        }\n        return 0;\n    }\n    _calcValue(name) {\n        let allAdjustments = {};\n        this._bonus[name].forEach((adj) => this._applyAdjustment(allAdjustments, adj));\n        this._sustain[name] = allAdjustments.sustain || false;\n        let value = this._base[name] || 0;\n        if (allAdjustments.fixed !== undefined) {\n            value = allAdjustments.fixed;\n        }\n        else {\n            value += allAdjustments.bonus || 0;\n            if (allAdjustments.min !== undefined) {\n                value = Math.max(allAdjustments.min, value);\n            }\n            if (allAdjustments.max !== undefined) {\n                value = Math.min(allAdjustments.max, value);\n            }\n        }\n        return (this._value[name] = value);\n    }\n    adjust(name, adj) {\n        let delta = undefined;\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        if (adj.base) {\n            delta = this.gain(name, adj.base);\n        }\n        else if (adj.restore) {\n            delta = this.restore(name);\n            if (delta == 0)\n                delta = undefined;\n        }\n        else {\n            delta = this._addBonus(name, adj);\n        }\n        if (this.changed && delta !== undefined)\n            this.changed(this, name);\n        return delta;\n    }\n    clearAdjustment(name, adj) {\n        let delta = undefined;\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        if (adj.base) {\n            delta = this.drain(name, adj.base, true);\n        }\n        else if (adj.restore) {\n            // do nothing...\n        }\n        else {\n            delta = this._clearBonus(name, adj);\n        }\n        if (this.changed && delta !== undefined)\n            this.changed(this, name);\n        return delta;\n    }\n    _applyAdjustment(total, opts) {\n        if (opts.bonus) {\n            total.bonus = (total.bonus || 0) + opts.bonus;\n        }\n        if (opts.fixed !== undefined) {\n            total.fixed = Math.max(total.fixed || 0, opts.fixed);\n        }\n        if (opts.min !== undefined) {\n            total.min = Math.max(total.min || 0, opts.min);\n        }\n        if (opts.max !== undefined) {\n            total.max = Math.max(total.max || 0, opts.max);\n        }\n        if (opts.sustain !== undefined) {\n            total.sustain = opts.sustain;\n        }\n    }\n}\nexport const attributes = {};\nexport function installAttribute(attr) {\n    if (typeof attr === 'string') {\n        attributes[attr] = 0;\n        return;\n    }\n    // clear existing\n    Object.keys(attributes).forEach((k) => {\n        delete attributes[k];\n    });\n    Object.assign(attributes, attr);\n}\nexport function makeAttributes(defaults) {\n    return new Attributes(defaults);\n}\n/*\nfunction adjust(being, ...args) {\n    let adj;\n    if (args.length == 1 && typeof args[0] == 'number') {\n        adj = RUT.Attributes.map((key) => {\n            return { name: key, bonus: args[0] };\n        });\n    } else {\n        adj = normalize_adjustment(args);\n    }\n\n    let results = adj.reduce((out, a) => {\n        let delta = undefined;\n        if (a.base) {\n            delta = being.attributes.addBase(a.name, a.base);\n        } else if (a.restore) {\n            delta = being.attributes.restoreBase(a.name);\n            if (delta == 0) delta = undefined;\n        } else {\n            delta = being.attributes.addBonus(a.name, a);\n        }\n        if (delta !== undefined) {\n            out[a.name] = delta;\n        }\n        return out;\n    }, {});\n    being.changed({ attributes: results });\n\n    return results;\n};\n\n function clearAdjustment(being, ...args) {\n    let adj;\n    if (args.length == 1 && typeof args[0] == 'number') {\n        adj = RUT.Attributes.map((key) => {\n            return { name: key, bonus: args[0] };\n        });\n    } else {\n        adj = normalize_adjustment(args);\n    }\n\n    let results = adj.reduce((out, a) => {\n        let delta = 0;\n        delta += being.attributes.clearBonus(a.name, a);\n\n        out[a.name] = delta;\n        return out;\n    }, {});\n    being.changed({ attributes: results });\n    return results;\n};\n\nRUT.Attribute.rollAttributes = function (opts = {}) {\n    let dice = [];\n    let total = 0;\n\n    if (RUT.Calc.isValue(opts)) opts = { value: opts };\n    Object.defaults(opts, RUT.Config.Attribute.rollAttributes);\n\n    let attributes = RUT.Config.Attributes;\n\n    let min_average = Math.max(opts.min_average - 5, 0);\n    let max_average = Math.min(opts.max_average - 5, RUT.Config.ATTRIBUTE_MAX);\n\n    let min_total = min_average * attributes.length;\n    let max_total = max_average * attributes.length;\n\n    do {\n        total = 0;\n        dice = [];\n        for (let i = 0; i < 18; ++i) {\n            dice.push(RUT.RNG.rollDie(3 + (i % 3)));\n            total += dice[i];\n        }\n    } while (total <= min_total || total > max_total);\n\n    let values = attributes.reduce((out, name, i) => {\n        let index = 3 * i;\n        let value = 5 + dice[index] + dice[index + 1] + dice[index + 2];\n        if (opts.value) {\n            value = RUT.Calc.calc(opts.value);\n        } else if (opts[name]) {\n            value = RUT.Calc.calc(opts[name]);\n        }\n        out[name] = value;\n        return out;\n    }, {});\n    return values;\n};\nRUT.Config.Attribute.rollAttributes = { min_average: 11, max_average: 14 };\n*/\n/*\nexport function normalize_adjustment(args: ) {\n    if (args.length == 3) {\n        let opts = args[2];\n        if (RUT.Calc.isValue(opts)) {\n            opts = { bonus: opts };\n        }\n        let name = `${args[0]}.${args[1]}`;\n        return [Object.assign({ name }, opts)];\n    }\n    if (args.length == 2) {\n        let opts = args[1];\n        if (opts === true || opts === false) {\n            opts = { has: opts };\n        } else if (RUT.Calc.isValue(opts)) {\n            opts = { bonus: opts };\n        }\n        return [Object.assign({ name: args[0] }, opts)];\n    }\n\n    let opts = args[0];\n    if (opts.name) {\n        return [opts];\n    }\n    if (opts.attribute) {\n        opts.name = opts.attribute;\n        return [opts];\n    }\n    if (opts.restore) {\n        if (opts.restore == 'all') {\n            return RUT.Attributes.map((a) => {\n                return { name: a, restore: true };\n            });\n        }\n        return [{ name: opts.restore, restore: true }];\n    }\n    if (opts.skill) {\n        opts.name = opts.skill;\n        return [opts];\n    }\n    if (opts.stat) {\n        opts.name = opts.stat;\n        return [opts];\n    }\n    if (opts.save) {\n        opts.name = opts.save;\n        return [opts];\n    }\n    // if (opts.saves) {\n    //   opts.name = opts.saves;\n    //   return [opts];\n    // }\n    if (opts.ability) {\n        opts.name = opts.ability;\n        return [opts];\n    }\n\n    // now we assume that each key is for a separate skill...\n    return Object.keys(opts).reduce((out, key) => {\n        let opt = opts[key];\n        if (key == 'reset' || key == 'restore') {\n            if (typeof opt == 'string') opt = [opt];\n            opt.forEach((a) => {\n                out.push({ name: a, restore: true });\n            });\n        } else {\n            if (typeof opt == 'number' || Array.isArray(opt)) {\n                opt = { bonus: opt };\n            } else if (opt === true || opt === false) {\n                opt = { has: opt };\n            } else if (opt == 'reset' || opt == 'restore') {\n                opt = { restore: true };\n            } else if (opt == 'sustain') {\n                opt = { sustain: true };\n            }\n            out.push(Object.assign({ name: key }, opt));\n        }\n        return out;\n    }, []);\n}\n*/\n","/*\nSkills\n\nSkills generally fall into 2 categories - binary and progressive.\n\n\n// Create a skills object\nconst skills = new Skills();\n\n// set skills\nskills.set('diving', true); // = { has: true, level: 0 }\nskills.set('diving', 10); // = { has: true, level: 10 }\n\nskills.remove('diving'); // {}\n\n// adjustments\nskills.adjust('diving', { bonus: 1 });\nskills.adjust('diving', { disadvantage: true });\nskills.adjust('diving', { advantage: 3 });\nskills.adjust('diving', { fixed: 10 });\nskills.adjust('diving', { critical: 5 });\n\n\n\n\n\n*/\nclass Skill {\n    constructor(name) {\n        this.name = name;\n    }\n    get has() {\n        return this._bool('_has');\n    }\n    get level() {\n        return this._int('_level');\n    }\n    get disadvantage() {\n        return this._bool('_disadvantage');\n    }\n    get advantage() {\n        return this._bool('_advantage');\n    }\n    get fixed() {\n        return this._int('_fixed');\n    }\n    get bonus() {\n        const b = this._int('_bonus') || 0;\n        if (!this._parent)\n            return b;\n        return b + this._parent.bonus;\n    }\n    get succeed() {\n        return this._bool('_succeed');\n    }\n    get fail() {\n        return this._bool('_fail');\n    }\n    set(value) {\n        if (value === false) {\n            this._has = false;\n            this._level = 0;\n        }\n        else {\n            this._has = true;\n            this._level = value === true ? 0 : value;\n        }\n    }\n    _value(name) {\n        if (this[name] !== undefined) {\n            // @ts-ignore\n            return this[name];\n        }\n        if (this._parent) {\n            // @ts-ignore\n            return this._parent._value(name);\n        }\n        return undefined;\n    }\n    _bool(name) {\n        return !!this._value(name);\n    }\n    _int(name) {\n        return this._value(name);\n    }\n    adjust(adj) {\n        Object.entries(adj).forEach(([key, value]) => {\n            key = '_' + key;\n            if (value === undefined)\n                return;\n            if (key === '_fixed') {\n                if (typeof value !== 'number') {\n                    throw new Error('fixed skill adjustment must be a number.');\n                }\n                value = Math.max(value, this._fixed || 0);\n            }\n            else if (key === '_bonus') {\n                if (typeof value !== 'number') {\n                    throw new Error('fixed skill adjustment must be a number.');\n                }\n                value = value + (this._bonus || 0);\n            }\n            // @ts-ignore\n            this[key] = value;\n        });\n    }\n    clear(adj) {\n        Object.keys(adj).forEach((key) => {\n            key = '_' + key;\n            // @ts-ignore\n            if (this[key] !== undefined) {\n                // @ts-ignore\n                this[key] = undefined;\n            }\n        });\n    }\n}\nexport class Skills {\n    constructor(vals = {}) {\n        this._skills = {};\n        Object.entries(vals).forEach(([key, value]) => {\n            this.set(key, value);\n        });\n    }\n    set(name, value) {\n        const s = this.get(name);\n        s.set(value);\n        return s;\n    }\n    get(name) {\n        let s = this._skills[name];\n        if (s)\n            return s;\n        s = this._skills[name] = new Skill(name);\n        const index = name.lastIndexOf('.');\n        if (index > 0) {\n            s._parent = this.get(name.substring(0, index));\n        }\n        else {\n            s.set(false);\n        }\n        return s;\n    }\n    adjust(name, adj) {\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        let s = this.get(name);\n        s.adjust(adj);\n        return s;\n    }\n}\n","// import * as GWM from 'gw-map';\nimport * as GWU from 'gw-utils';\nimport { Actor } from '../actor';\nimport { Memory } from '../memory';\nexport class Player extends Actor {\n    constructor(kind) {\n        super(kind);\n    }\n    interrupt() {\n        this.clearGoal();\n    }\n    addToMap(map, x, y) {\n        if (!super.addToMap(map, x, y))\n            return false;\n        this.memory = new Memory(map);\n        this.fov = new GWU.fov.FovSystem(map, { callback: this.memory });\n        this.fov.updateFor(this); // initial update\n        return true;\n    }\n    removeFromMap() {\n        // TODO - save/restore these\n        this.fov = null;\n        this.memory = null;\n        super.removeFromMap();\n    }\n    endTurn(pct = 100) {\n        if (this.fov)\n            this.fov.updateFor(this);\n        this.lastSeen[0] = this.x;\n        this.lastSeen[1] = this.y;\n        return super.endTurn(pct);\n    }\n}\nPlayer.default = {\n    ch: '@',\n    fg: 'white',\n    name: 'You',\n};\n","import * as Actor from '../actor';\nimport * as Skills from './skill';\nimport * as Attributes from './attribute';\nimport { Player } from './player';\nimport * as Flags from '../flags';\nexport class PlayerKind extends Actor.ActorKind {\n    constructor(opts = {}) {\n        super((() => {\n            if (!opts.sprite) {\n                opts.ch = opts.ch || Player.default.ch;\n                opts.fg = opts.fg || Player.default.fg;\n            }\n            if (!opts.name) {\n                opts.name = Player.default.name;\n            }\n            return opts;\n        })());\n        this.flags.actor |= Flags.Actor.IS_PLAYER;\n        this.attributes = new Attributes.Attributes(opts.attributes || {});\n        this.skills = new Skills.Skills(opts.skills || {});\n    }\n    make(options) {\n        const actor = new Player(this);\n        this.init(actor, options);\n        return actor;\n    }\n}\n","import { PlayerKind } from './kind';\nimport * as Actor from '../actor';\nexport function make(id, makeOptions) {\n    let kind;\n    if (typeof id === 'string') {\n        // @ts-ignore\n        kind = Actor.get(id);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + id);\n        if (!(kind instanceof PlayerKind))\n            throw new Error('Not a player kind.');\n    }\n    else if (id instanceof PlayerKind) {\n        kind = id;\n    }\n    else {\n        kind = makeKind(id);\n    }\n    return kind.make(makeOptions);\n}\nexport function install(id, kind) {\n    if (kind instanceof PlayerKind) {\n        Actor.kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    Actor.kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof PlayerKind)\n        return id;\n    const k = Actor.kinds[id];\n    if (k && !(k instanceof PlayerKind)) {\n        throw new Error('No a player kind.');\n    }\n    return k;\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new PlayerKind(config);\n}\n","import * as GWU from 'gw-utils';\nimport * as Command from '../command';\nimport * as Actor from '../actor';\nexport class Game {\n    constructor(opts) {\n        this.result = undefined;\n        this.mouse = false;\n        this.fov = false;\n        this.running = false;\n        this.keymap = {};\n        this.ui = opts.ui || new GWU.ui.UI(opts);\n        this._makeMap = opts.makeMap;\n        this._makePlayer = opts.makePlayer;\n        this._startMap = opts.startMap;\n        if (opts.keymap) {\n            Object.assign(this.keymap, opts.keymap);\n        }\n        if (opts.mouse) {\n            this.mouse = true;\n        }\n        if (opts.fov) {\n            this.fov = true;\n        }\n    }\n    async start() {\n        this.layer = new GWU.ui.Layer(this.ui);\n        this.buffer = this.layer.buffer;\n        this.io = this.layer.io;\n        this.running = true;\n        this.scheduler = new GWU.scheduler.Scheduler();\n        this.player = this._makePlayer();\n        this.map = this._makeMap(0);\n        this._startMap(this.map, this.player);\n        this.map.actors.forEach((a) => {\n            this.scheduler.push(a, a.moveSpeed());\n        });\n        this.draw();\n        while (this.running) {\n            await this.animate();\n            await this.runTurn();\n        }\n        return this.result;\n    }\n    draw() {\n        const memory = this.player.memory;\n        if (this.fov && memory) {\n            memory.drawInto(this.buffer, { fov: this.player.fov });\n            this.buffer.render();\n            return;\n        }\n        if (this.map && this.map.needsRedraw) {\n            this.map.drawInto(this.buffer);\n            this.buffer.render();\n        }\n    }\n    finish(result) {\n        this.running = false;\n        this.layer.finish();\n        this.result = result;\n    }\n    async runTurn() {\n        const actor = this.scheduler.pop();\n        if (!actor) {\n            this.finish();\n            return;\n        }\n        let nextTime = 0;\n        while (nextTime === 0) {\n            if (actor === this.player) {\n                nextTime = await this.playerTurn(actor);\n            }\n            else if ('act' in actor) {\n                nextTime = await actor.act(this);\n            }\n            else if ('tick' in actor) {\n                nextTime = await actor.tick(); // dt === 100 -- TODO\n            }\n            this.draw();\n        }\n        if (nextTime >= 0) {\n            this.scheduler.push(actor, nextTime);\n        }\n    }\n    async animate() {\n        if (!this.layer.io._tweens.length)\n            return;\n        const timer = setInterval(() => {\n            const tick = GWU.io.makeTickEvent(16);\n            this.layer.io.enqueue(tick);\n        }, 16);\n        while (this.layer.io._tweens.length) {\n            const ev = await this.layer.io.nextTick();\n            if (ev && ev.dt) {\n                this.layer.io._tweens.forEach((a) => a && a.tick(ev.dt));\n                this.layer.io._tweens = this.layer.io._tweens.filter((a) => a && a.isRunning());\n            }\n            this.draw();\n        }\n        clearInterval(timer);\n    }\n    async playerTurn(player) {\n        let done = 0;\n        const timer = setInterval(() => {\n            const tick = GWU.io.makeTickEvent(16);\n            // console.log('-tick', Date.now());\n            this.layer.io.enqueue(tick);\n        }, 16);\n        let elapsed = 0;\n        while (!done && this.running) {\n            const ev = await this.layer.io.nextEvent(-1);\n            if (ev) {\n                if (ev.type === GWU.io.KEYPRESS) {\n                    this.map.clearPath();\n                    if (this.player.hasGoal()) {\n                        this.player.clearGoal();\n                    }\n                    else {\n                        const handler = GWU.io.handlerFor(ev, this.keymap);\n                        if (handler) {\n                            if (typeof handler === 'string') {\n                                const action = Command.getCommand(handler);\n                                if (action) {\n                                    done = await action.call(this, player, ev);\n                                }\n                            }\n                            else if (typeof handler === 'function') {\n                                done = await handler.call(this, player, ev);\n                            }\n                        }\n                    }\n                }\n                else if (ev.type === GWU.io.TICK) {\n                    this.layer.tick(ev); // timeouts\n                    elapsed += ev.dt || 16;\n                    // console.log('-- event', elapsed);\n                }\n                else if (this.mouse && ev.type === GWU.io.MOUSEMOVE) {\n                    if (!this.player.hasGoal()) {\n                        // console.log('mouse', ev.x, ev.y);\n                        const mapToPlayer = this.player.mapToMe();\n                        const path = GWU.path.getPath(mapToPlayer, ev.x, ev.y, GWU.FALSE);\n                        if (path) {\n                            this.map.highlightPath(path, true);\n                        }\n                        else {\n                            this.map.clearPath();\n                        }\n                        this.draw();\n                    }\n                }\n                else if (this.mouse && ev.type === GWU.io.CLICK) {\n                    console.log('click', ev.x, ev.y);\n                    if (this.player.hasGoal()) {\n                        this.player.clearGoal();\n                    }\n                    else {\n                        this.player.setGoal(ev.x, ev.y);\n                    }\n                }\n            }\n            if (elapsed < 50) {\n                continue;\n            }\n            elapsed -= 50;\n            if (this.player.hasGoal()) {\n                const goalMap = this.player.goalMap;\n                const step = GWU.path.nextStep(goalMap, this.player.x, this.player.y, (x, y) => this.map.hasActor(x, y) &&\n                    this.map.actorAt(x, y) !== this.player);\n                if (!step) {\n                    this.player.clearGoal();\n                }\n                else {\n                    const action = Actor.getAction('moveDir');\n                    if (!action)\n                        throw new Error('Failed to find moveDir action.');\n                    done = await action(this, this.player, { dir: step });\n                    if (done) {\n                        const mapToPlayer = this.player.mapToMe();\n                        const path = GWU.path.getPath(mapToPlayer, goalMap.x, goalMap.y, GWU.FALSE);\n                        if (path && path.length) {\n                            // path.shift(); //remove player location\n                            this.map.highlightPath(path, true);\n                        }\n                        else {\n                            this.map.clearPath();\n                        }\n                    }\n                }\n            }\n        }\n        clearInterval(timer);\n        return done;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Tile from './tile';\nimport '../effect/handlers';\nimport '../effect/types';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([30, 30, 30]).rand(20, 0, 0, 0),\n    bg: GWU.color.from([2, 2, 10]).rand(0, 2, 2, 0),\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: 'TILE:DOOR_OPEN',\n        open: 'TILE:DOOR_OPEN_ALWAYS',\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            effects: 'TILE:DOOR~!',\n        },\n        enter: null,\n        open: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: 'EMIT:UP_STAIRS',\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: 'EMIT:DOWN_STAIRS',\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: GWU.color.from([5, 8, 20]).dance(10, 0, 4, 15),\n    bg: GWU.color.from([10, 15, 41]).dance(6, 5, 5, 5),\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([5, 8, 10]).dance(10, 0, 4, 15),\n    bg: GWU.color.from([10, 30, 30]).dance(6, 0, 10, 10),\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    flags: 'T_SHALLOW_WATER',\n    // depth: 'LIQUID', // 'SURFACE'?\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '\\u2630',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_LIST_IN_SIDEBAR","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","T_IS_DEEP_LIQUID","T_SHALLOW_WATER","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_SAFE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","lastId","kind","_map","key","machineHome","lastSeen","depth","light","flags","entity","next","id","map","setEntityFlag","Flags.Entity","L_ON_MAP","addToMap","clearEntityFlag","removeFromMap","sprite","isDestroyed","hasEntityFlag","L_DESTROYED","other","constructor","copy","Object","assign","canBeSeen","tag","tags","includes","matches","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","buffer","bounds","drawStatus","dest","_observer","drawSprite","name","EntityKind","config","requiredTileTags","flavor","description","make","split","t","trim","slice","init","_entity","length","hasAllTileTags","hasAnyTileTag","_opts","mixer","Mixer","getAppearanceAt","wrapText","width","makeOpts","PainMessages","msgs","_msgs","forEach","m","add","msg","push","pct","singular","index","clamp","Math","floor","_format","replace","painMessages","Stats","_max","_rate","_value","max","round","get","set","v","range","value","amount","allowOver","min","raiseValue","gain","lowerValue","drain","turns","count","r","elapsed","undefined","type","from","c","Error","Status","_set","_time","_count","_done","changed","clearTime","clearCount","setOff","_update","done","_addDone","current","delta","status","cleared","noticed","removeTime","rec","was","doneFn","installedActions","installAction","fn","toLowerCase","getAction","Entity.Entity","super","ai","leader","items","fov","memory","visionDistance","data","_costMap","_goalMap","_mapToMe","actor","Flags.Depth","ACTOR","stats","grid","free","hasActorFlag","Flags.Actor","IS_PLAYER","action","actions","bump","IS_VISIBLE","WAS_VISIBLE","isDirectlyVisible","canSee","isAbleToSee","xy","distanceBetween","forLineBetween","i","j","blocksVision","canSeeOrSense","isAbleToSense","isAnyKindOfVisible","game","startedVisible","player","setActorFlag","console","log","clearActorFlag","becameVisible","interrupt","endTurn","moveSpeed","_other","_item","item","pickupItem","dropItem","mapChanged","STABLE_COST_MAP","staleMap","alloc","height","update","_v","path","OBSTRUCTION","FORBIDDEN","AVOIDED","OK","goalMap","calculateDistances","costMap","handlers","installHandler","handler","effectTypes","installType","startsWith","endPos","indexOf","tile","substring","effects","Array","isArray","effect","entries","JSON","stringify","typeName","shift","makeFn","e","parts","installedEffects","trigger","bind","install","obj","clone","_a","_b","_c","_d","dissipate","priority","groundTile","article","tileMech","hasEffect","Flags.Tile","T_IS_FLAMMABLE","arraysIntersect","every","blocksMove","hasTileFlag","T_PATHING_BLOCKER","arg","color","result","fg","toString","options","_e","_f","base","extends","tiles","text","search","Number","parseInt","makeEffect","message","Flags.TileMech","ch","bg","opacity","all","args","BasicEffect","chance","seen","Flags.Effect","endsWith","parseFloat","loc","ctx","force","rng","random","didSomething","eff","nextAlways","E_NEXT_ALWAYS","makeBasicEffect","makeSpreadEffect","SpreadEffect","grow","decrement","matchTile","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","spawnMap","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","E_NEXT_EVERYWHERE","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","cellIsOk","isStart","hasXY","hasCellFlag","Flags.Cell","EVENT_PROTECTED","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","hasTile","dir","x2","y2","madeChange","startProb","probDec","fill","DIRS","clearAll","clear","clearDepth","GAS","LIQUID","SURFACE","GROUND","blockingMap","eachActor","a","matchingLocNear","removeActor","addActor","eachItem","removeItem","addItem","makeEmitHandler","emitEffect","events","emit","makeMessageHandler","src","info","messageEffect","aware","addAt","makeActivateMachine","activateMachine","machine","machineId","makeTileHandler","superpriority","blockedByActors","blockedByItems","tileEffect","setTile","makeClearHandler","layers","reduce","out","ALL_LAYERS","clearEffect","_ctx","makeFeatureHandler","featureEffect","feat","Effect.installedEffects","makeNourishEffect","nourishEffect","actorAt","adjust","n","default","pukeMsg","makeStatEffect","stat","statEffect","values","chokeCount","TILE.tiles","NULL","snapshot","makeMixer","TILE.get","hasStableSnapshot","STABLE_SNAPSHOT","hasStableMemory","getSnapshot","checkEntities","some","hasItem","hasActor","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","withEntities","needsRedraw","CHANGED","TILE.Tile","highestPriorityTile","cb","find","blocksPathing","T_BRIDGE","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","blocksLayer","blockedByOtherLayers","highestPriority","ground","depthTile","glowLightChanged","setMapFlag","Flags.Map","MAP_SIDEBAR_TILES_CHANGED","setCellFlag","CAUGHT_FIRE_THIS_TURN","blackOut","tileFlag","tileMechFlag","hasTileMechFlag","event","ev","_activate","itemAt","hasItems","foundIndex","clearCellFlag","_actor","isPlayer","actors","HAS_FX","fx","fxAt","_fx","MapLayer","properties","_x","_y","_tile","_dt","TileLayer","GasLayer","volume","startingVolume","spread","d","clearTile","total","highestVolume","startingTile","highestTile","updateCellVolume","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","fire","TM_EXPLOSIVE_PROMOTE","x0","y0","fireEvent","highlightColor","BasicDrawer","_cell","Buffer","offsetX","offsetY","drawCell","needSnapshot","getAppearance","putSnapshot","applyLight","separate","L_VISUALLY_DISTINCT","IS_CURSOR","mix","IS_HIGHLIGHTED","invert","surface","liquid","gas","drawInto","cosmetic","number","hasFx","dances","COLORS_DANCE","bake","isVisible","isRevealed","getLight","multiply","isCursor","scale","_animations","EventEmitter","seed","machineCount","drawer","cells","LightSystem","initLayers","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","layer","isAt","fireEffects","_addItem","_fireAddItemEffects","_removeItem","_fireRemoveItemEffects","arrayDelete","isKey","currentCell","newCell","hasPlayer","canAddActor","_addActor","_fireAddActorEffects","canRemoveActor","_removeActor","_fireRemoveActorEffects","_addFx","updated","_removeFx","fmt","dump","hasMapFlag","MAP_NEEDS_REDRAW","clearMapFlag","markCursor","clearPath","clearCursor","l","boundary","isBoundaryXY","clearTiles","dt","tick","filter","isRunning","fireAll","willFire","EVENT_FIRED_THIS_TURN","promoteChance","w","originX","originY","eachGlowLight","_cb","isDark","h","Memory","source","isMemory","mem","currentList","newList","setLight","makeVisible","storeMemory","cache","store","actorMemory","ais","AICtx","target","distanceMap","async","typical","isDead","willAttack","damagePct","getPct","morale","chargeChance","retreatChance","start","canAttack","attack","tooFarFrom","canMoveToward","moveToward","tooCloseTo","canMoveAwayFrom","moveAwayFrom","wanderOpt","object","firstOpt","matchingLoc","NO_PATH","setGoal","step","nextStep","canPass","clearGoal","moveDir","wander","idle","standStill","center","_game","_target","distanceFromTo","safetyMap","costGrid","eachCell","rescan","ActorKind","Entity.EntityKind","DEFAULT","DEFAULT_ACTOR","vision","normal","health","AI.make","HAS_MEMORY","Memory.get","USES_FOV","FovSystem","follow","callback","Memory.store","list","remove","makeOptions","makeKind","kinds","randomKind","match","forbidTags","k","bumpActions","getBumpActions","selfName","selfAction","ctx2","flashSprite","duration","animator","Entity.make","addFx","tween","visible","to","repeat","repeatDelay","onUpdate","removeFx","io","loop","addAnimation","hit","fadeInOut","yoyo","onFinish","moveSprite","ceil","maxAxisFromTo","speed","isLoc","vals","stepFn","stopBeforeWalls","moveFx","stop","isInShape","shape","cx","cy","allowCenter","sx","abs","sy","dirFromTo","fade","stopAtWalls","line","forLineFromTo","promises","lastIndex","Promise","radius","checkExplosionOpts","FOV","isBlocked","calculate","x1","y1","minX","minY","maxX","maxY","_obj","success","newX","newY","try","FX.hit","moveActor","dirIndex","pickup","quiet","avoidsItem","itemAction","canAddItem","pain","made","quantity","ITEM","ItemKind","Flags.Item","updateChokepoints","updateCounts","passMap","passableArcCount","oldX","CLOCK_DIRS","oldY","cellCount","floodFillCount","i2","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","prefab","charToTile","isStringArray","len","updateChokeCounts","layerVersion","lightVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","getCellPathCost","fillCostMap","eightWays","straightDistanceBetween","getPath","members","horde","frequency","Flags","canSpawn","TRUE","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted","installCommand","getCommand","Actor.actions.moveDir","_ev","playerAction","Attributes","baseValues","_base","_bonus","_sustain","attributes","keys","raiseMax","old","_calcValue","loss","lowerMax","bonus","_addBonus","_clearBonus","arr","findIndex","o","splice","allAdjustments","adj","_applyAdjustment","sustain","fixed","restore","Skill","has","_bool","level","_int","disadvantage","advantage","b","_parent","succeed","fail","_has","_level","_fixed","Skills","_skills","s","lastIndexOf","Player","updateFor","PlayerKind","Actor.ActorKind","Attributes.Attributes","skills","Skills.Skills","attr","defaults","Actor.kinds","mouse","running","keymap","ui","UI","_makeMap","makeMap","_makePlayer","makePlayer","_startMap","startMap","Layer","scheduler","Scheduler","draw","animate","runTurn","render","finish","nextTime","playerTurn","act","_tweens","timer","setInterval","makeTickEvent","enqueue","nextTick","clearInterval","nextEvent","KEYPRESS","hasGoal","handlerFor","Command.getCommand","call","TICK","MOUSEMOVE","mapToPlayer","mapToMe","FALSE","highlightPath","CLICK","Actor.getAction","rand","enter","open","close","dance"],"mappings":"qjBAAWA,UACX,SAAWA,GACPA,EAAMA,EAAkB,YAAK,GAAK,aAClCA,EAAMA,EAAc,OAAI,GAAK,SAC7BA,EAAMA,EAAe,QAAI,GAAK,UAC9BA,EAAMA,EAAY,KAAI,GAAK,OAC3BA,EAAMA,EAAa,MAAI,GAAK,QAC5BA,EAAMA,EAAc,OAAI,GAAK,SAC7BA,EAAMA,EAAW,IAAI,GAAK,MAC1BA,EAAMA,EAAU,GAAI,GAAK,KACzBA,EAAMA,EAAU,GAAI,GAAK,KAT7B,CAUGA,IAAUA,EAAQ,KCVrB,MAAMC,EAAKC,EAAIC,KAAKC,GACb,IAAIC,GACX,SAAWA,GAEPA,EAAOA,EAAoB,YAAIJ,EAAG,IAAM,cACxCI,EAAOA,EAA4B,oBAAIJ,EAAG,IAAM,sBAChDI,EAAOA,EAAsB,cAAIJ,EAAG,IAAM,gBAC1CI,EAAOA,EAAwB,gBAAIJ,EAAG,IAAM,kBAC5CI,EAAOA,EAAyB,iBAAIJ,EAAG,IAAM,mBAC7CI,EAAOA,EAAwB,gBAAIJ,EAAG,IAAM,kBAC5CI,EAAOA,EAAqB,aAAIJ,EAAG,IAAM,eACzCI,EAAOA,EAAuB,eAAIJ,EAAG,IAAM,iBAC3CI,EAAOA,EAAwB,gBAAIJ,EAAG,KAAO,kBAC7CI,EAAOA,EAAyB,iBAAIJ,EAAG,IAAM,mBAC7CI,EAAOA,EAA0B,kBAAIJ,EAAG,KAAO,oBAC/CI,EAAOA,EAA8B,sBAAIJ,EAAG,KAAO,wBACnDI,EAAOA,EAA0B,kBAAIJ,EAAG,KAAO,oBAC/CI,EAAOA,EAA4B,oBAAIJ,EAAG,KAAO,sBACjDI,EAAOA,EAAwB,gBAAIJ,EAAG,KAAO,kBAC7CI,EAAOA,EAAkC,0BAAIJ,EAAG,KAAO,4BACvDI,EAAOA,EAAiB,SAAIJ,EAAG,KAAO,WACtCI,EAAOA,EAAsB,cAAIA,EAAOC,mBAAqB,gBAC7DD,EAAOA,EAAqB,aAAIA,EAAOC,mBAAqB,eAC5DD,EAAOA,EAA4B,oBAAIA,EAAOE,eAC1CF,EAAOG,iBACPH,EAAOI,aACPJ,EAAOK,gBACPL,EAAOM,iBACPN,EAAOO,iBAAmB,sBAC9BP,EAAOA,EAAuB,eAAIA,EAAOQ,cAAgBR,EAAOS,iBAAmB,iBACnFT,EAAOA,EAAwB,gBAAIA,EAAOQ,eAAiB,kBAC3DR,EAAOA,EAA2B,mBAAIA,EAAOQ,eAAiB,qBAC9DR,EAAOA,EAAqB,aAAIA,EAAOQ,cACnCR,EAAOS,gBACPT,EAAOK,gBACPL,EAAOI,aACPJ,EAAOM,iBACPN,EAAOU,mBAAqB,eAChCV,EAAOA,EAA4B,oBAAIA,EAAOW,aAC1CX,EAAOE,eACPF,EAAOO,gBACPP,EAAOG,kBAAoB,sBAvCnC,CAwCGH,IAAWA,EAAS,KC1CvB,MAAMJ,EAAKC,EAAIC,KAAKC,GACb,IAAIa,ECFAC,GDGX,SAAWD,GACPA,EAAMA,EAAiB,UAAIhB,EAAG,IAAM,YACpCgB,EAAMA,EAAkB,WAAIhB,EAAG,IAAM,aACrCgB,EAAMA,EAAgB,SAAIhB,EAAG,IAAM,WACnCgB,EAAMA,EAAuB,gBAAIhB,EAAG,IAAM,kBAC1CgB,EAAMA,EAAkB,WAAIhB,EAAG,IAAM,aACrCgB,EAAMA,EAAmB,YAAIhB,EAAG,IAAM,cACtCgB,EAAMA,EAAe,QAAI,GAAK,UAPlC,CAQGA,IAAUA,EAAQ,KCVrB,SAAWC,GACPA,EAAKA,EAAc,QAAI,GAAK,UADhC,CAEGA,IAASA,EAAO,KCFnB,MAAMjB,EAAKC,EAAIC,KAAKC,GAGb,IAAIe,GACX,SAAWA,GACPA,EAAKA,EAAe,SAAIlB,EAAG,IAAM,WACjCkB,EAAKA,EAAqB,eAAIlB,EAAG,IAAM,iBACvCkB,EAAKA,EAAa,OAAIlB,EAAG,IAAM,SAC/BkB,EAAKA,EAAmB,aAAIlB,EAAG,IAAM,eACrCkB,EAAKA,EAAsB,gBAAIlB,EAAG,IAAM,kBACxCkB,EAAKA,EAAqB,eAAIlB,EAAG,IAAM,iBACvCkB,EAAKA,EAA8B,wBAAIlB,EAAG,IAAM,0BAChDkB,EAAKA,EAAgB,UAAIlB,EAAG,IAAM,YAClCkB,EAAKA,EAA0B,oBAAIlB,EAAG,IAAM,sBAC5CkB,EAAKA,EAAkB,YAAIlB,EAAG,IAAM,cACpCkB,EAAKA,EAAgB,UAAIlB,EAAG,KAAO,YACnCkB,EAAKA,EAAe,SAAIlB,EAAG,KAAO,WAClCkB,EAAKA,EAAkB,YAAIlB,EAAG,KAAO,cACrCkB,EAAKA,EAAoB,cAAIlB,EAAG,KAAO,gBACvCkB,EAAKA,EAAe,SAAIlB,EAAG,KAAO,WAClCkB,EAAKA,EAAgB,UAAIlB,EAAG,KAAO,YACnCkB,EAAKA,EAA0B,oBAAIlB,EAAG,KAAO,sBAC7CkB,EAAKA,EAAkB,YAAIlB,EAAG,KAAO,cACrCkB,EAAKA,EAAiB,WAAIlB,EAAG,KAAO,aACpCkB,EAAKA,EAAsB,gBAAIlB,EAAG,KAAO,kBACzCkB,EAAKA,EAAuB,iBAAIlB,EAAG,KAAO,mBAC1CkB,EAAKA,EAA4B,sBAAIlB,EAAG,KAAO,wBAC/CkB,EAAKA,EAAmB,aAAIA,EAAKC,YAAcD,EAAKE,cAAgBF,EAAKG,UAAY,eACrFH,EAAKA,EAAwB,kBAAIA,EAAKI,eAClCJ,EAAKK,OACLL,EAAKM,aACLN,EAAKO,wBACLP,EAAKQ,cAAgB,oBACzBR,EAAKA,EAAwB,kBAAIA,EAAKI,eAClCJ,EAAKS,UACLT,EAAKK,OACLL,EAAKM,aACLN,EAAKU,UACLV,EAAKO,wBACLP,EAAKW,aAAe,oBACxBX,EAAKA,EAA6B,uBAAIA,EAAKI,eACvCJ,EAAKK,OACLL,EAAKM,aACLN,EAAKO,yBAA2B,yBACpCP,EAAKA,EAAyB,mBAAIA,EAAKI,eACnCJ,EAAKS,UACLT,EAAKK,OACLL,EAAKM,aACLN,EAAKO,yBAA2B,qBACpCP,EAAKA,EAAsB,gBAAIA,EAAKI,eAAiBJ,EAAKS,UAAYT,EAAKK,OAASL,EAAKM,cAAgB,kBACzGN,EAAKA,EAAoB,cAAIA,EAAKM,aAAeN,EAAKK,QAAU,gBAChEL,EAAKA,EAAuB,iBAAIA,EAAKI,eAAiBJ,EAAKK,OAASL,EAAKM,cAAgB,mBAWzFN,EAAKA,EAAuB,iBAAIA,EAAKK,OAASL,EAAKI,eAAiBJ,EAAKM,cAAgB,mBACzFN,EAAKA,EAAmB,aAAIA,EAAKY,iBAAmBZ,EAAKa,iBAAmB,eA3DhF,CA4DGb,IAASA,EAAO,KChEnB,MAAMlB,EAAKC,EAAIC,KAAKC,GAGb,IAAI6B,GACX,SAAWA,GAePA,EAASA,EAAsB,YAAIhC,EAAG,IAAM,cAC5CgC,EAASA,EAAgC,sBAAIhC,EAAG,KAAO,wBACvDgC,EAASA,EAAqC,2BAAIhC,EAAG,KAAO,6BAC5DgC,EAASA,EAA+B,qBAAIhC,EAAG,KAAO,uBACtDgC,EAASA,EAAsC,4BAAIhC,EAAG,KAAO,8BAnBjE,CA2BGgC,IAAaA,EAAW,KC/B3B,MAAMhC,EAAKC,EAAIC,KAAKC,GAGb,IAAI8B,GACX,SAAWA,GACPA,EAAKA,EAA+B,yBAAIjC,EAAG,IAAM,2BACjDiC,EAAKA,EAAyB,mBAAIjC,EAAG,IAAM,qBAC3CiC,EAAKA,EAAuB,iBAAIjC,EAAG,IAAM,mBACzCiC,EAAKA,EAA4B,sBAAIjC,EAAG,IAAM,wBAC9CiC,EAAKA,EAA4B,sBAAIjC,EAAG,IAAM,wBAC9CiC,EAAKA,EAAsB,gBAAIjC,EAAG,IAAM,kBACxCiC,EAAKA,EAAiB,WAAIjC,EAAG,IAAM,aACnCiC,EAAKA,EAAoB,cAAIjC,EAAG,IAAM,gBACtCiC,EAAKA,EAAmB,aAAIjC,EAAG,IAAM,eACrCiC,EAAKA,EAAyB,mBAAIjC,EAAG,IAAM,qBAC3CiC,EAAKA,EAAyB,mBAAIjC,EAAG,KAAO,qBAC5CiC,EAAKA,EAAkB,YAAIjC,EAAG,KAAO,cACrCiC,EAAKA,EAAmB,aAAIjC,EAAG,KAAO,eACtCiC,EAAKA,EAAoB,cAAIjC,EAAG,KAAO,gBACvCiC,EAAKA,EAAsB,gBAAIjC,EAAG,KAAO,kBAEzCiC,EAAKA,EAAiB,WAAIjC,EAAG,KAAO,aACpCiC,EAAKA,EAAgB,UAAIjC,EAAG,KAAO,YACnCiC,EAAKA,EAA0B,oBAAIjC,EAAG,KAAO,sBAC7CiC,EAAKA,EAAe,SAAIjC,EAAG,KAAO,WAClCiC,EAAKA,EAAa,OAAIjC,EAAG,KAAO,SAChCiC,EAAKA,EAAsB,gBAAIjC,EAAG,KAAO,kBACzCiC,EAAKA,EAAgB,UAAIjC,EAAG,KAAO,YACnCiC,EAAKA,EAAqB,eAAIjC,EAAG,KAAO,iBACxCiC,EAAKA,EAAe,SAAIjC,EAAG,KAAO,WAClCiC,EAAKA,EAAyB,mBAAIjC,EAAG,KAAO,qBAC5CiC,EAAKA,EAAiB,WAAIjC,EAAG,KAAO,aACpCiC,EAAKA,EAAmB,aAAIjC,EAAG,KAAO,eACtCiC,EAAKA,EAAc,QAAIA,EAAKC,cAAgB,UAC5CD,EAAKA,EAAoB,cAAIA,EAAKE,mBAAqBF,EAAKG,oBAAsB,gBAClFH,EAAKA,EAA2B,qBAAIA,EAAKI,SACrCJ,EAAKK,oBACLL,EAAKM,cACLN,EAAKO,mBACLP,EAAKQ,yBACLR,EAAKS,iBACLT,EAAKU,WACLV,EAAKW,cACLX,EAAKY,aACLZ,EAAKa,cACLb,EAAKc,aAAe,uBACxBd,EAAKA,EAAoB,cAAIA,EAAKe,WAAaf,EAAKgB,WAAa,gBACjEhB,EAAKA,EAAqB,eAAIA,EAAKI,SAAWJ,EAAKiB,eAAiB,iBACpEjB,EAAKA,EAAmB,aAAIA,EAAKC,cAAgB,eA5CrD,CA6CGD,IAASA,EAAO,KCjDnB,MAAMjC,EAAKC,EAAIC,KAAKC,GAGb,IAAIgD,GACX,SAAWA,GACPA,EAAIA,EAAiB,YAAInD,EAAG,IAAM,cAClCmD,EAAIA,EAAsB,iBAAInD,EAAG,IAAM,mBACvCmD,EAAIA,EAAoB,eAAInD,EAAG,IAAM,iBACrCmD,EAAIA,EAAqB,gBAAInD,EAAG,IAAM,kBACtCmD,EAAIA,EAAmB,cAAInD,EAAG,IAAM,gBACpCmD,EAAIA,EAAgB,WAAInD,EAAG,IAAM,aACjCmD,EAAIA,EAAkB,aAAInD,EAAG,IAAM,eACnCmD,EAAIA,EAAqB,gBAAInD,EAAG,IAAM,kBACtCmD,EAAIA,EAAgB,WAAInD,EAAG,IAAM,aACjCmD,EAAIA,EAA+B,0BAAInD,EAAG,KAAO,4BACjDmD,EAAIA,EAAiB,YAAI,GAAK,cAXlC,CAYGA,IAAQA,EAAM,KChBjB,MAAMnD,EAAKC,EAAIC,KAAKC,GAGb,IAAIiD,GACX,SAAWA,GAEPA,EAAOA,EAAsB,cAAIpD,EAAG,IAAM,gBAC1CoD,EAAOA,EAA0B,kBAAIpD,EAAG,IAAM,oBAC9CoD,EAAOA,EAAgB,QAAIpD,EAAG,IAAM,UACpCoD,EAAOA,EAAwB,gBAAIpD,EAAG,IAAM,kBAG5CoD,EAAOA,EAAoB,YAAIpD,EAAG,IAAM,cAExCoD,EAAOA,EAA4B,oBAAIpD,EAAG,IAAM,sBAChDoD,EAAOA,EAA0B,kBAAIpD,EAAG,IAAM,oBAC9CoD,EAAOA,EAA8B,sBAAIpD,EAAG,IAAM,wBAClDoD,EAAOA,EAA2B,mBAAIpD,EAAG,IAAM,qBAC/CoD,EAAOA,EAA4B,oBAAIpD,EAAG,IAAM,sBAChDoD,EAAOA,EAAkC,0BAAIpD,EAAG,KAAO,4BACvDoD,EAAOA,EAAwB,gBAAIpD,EAAG,KAAO,kBAC7CoD,EAAOA,EAAqB,aAAIpD,EAAG,KAAO,eAG1CoD,EAAOA,EAA6B,qBAAIpD,EAAG,KAAO,uBAClDoD,EAAOA,EAAyB,iBAAIpD,EAAG,KAAO,mBAC9CoD,EAAOA,EAAyB,iBAAIpD,EAAG,KAAO,mBAC9CoD,EAAOA,EAA2B,mBAAIpD,EAAG,KAAO,qBAChDoD,EAAOA,EAAyB,iBAAIpD,EAAG,KAAO,mBAC9CoD,EAAOA,EAAuB,eAAIpD,EAAG,KAAO,iBAC5CoD,EAAOA,EAAwB,gBAAIpD,EAAG,KAAO,kBAC7CoD,EAAOA,EAAuB,eAAIpD,EAAG,KAAO,iBAC5CoD,EAAOA,EAAoB,YAAIpD,EAAG,KAAO,cACzCoD,EAAOA,EAAqB,aAAIpD,EAAG,KAAO,eAC1CoD,EAAOA,EAAqB,aAAIA,EAAOC,eACnCD,EAAOE,gBACPF,EAAOG,eACPH,EAAOI,aAAe,eAC1BJ,EAAOA,EAAwB,gBAAIA,EAAOK,mBAAqBL,EAAOM,qBAAuB,kBAG7FN,EAAOA,EAAmC,2BAAIpD,EAAG,KAAO,6BACxDoD,EAAOA,EAA8B,sBAAIpD,EAAG,KAAO,wBACnDoD,EAAOA,EAAyB,iBAAIpD,EAAG,KAAO,mBAvClD,CAwCGoD,IAAWA,EAAS,KC5CvB,MAAMpD,EAAKC,EAAIC,KAAKC,GACb,IAAIwD,GACX,SAAWA,GACPA,EAAMA,EAAkC,2BAAI3D,EAAG,IAAM,6BACrD2D,EAAMA,EAAyB,kBAAI3D,EAAG,IAAM,oBAC5C2D,EAAMA,EAAkC,2BAAI3D,EAAG,IAAM,6BACrD2D,EAAMA,EAA+B,wBAAI3D,EAAG,IAAM,0BAClD2D,EAAMA,EAAgC,yBAAI3D,EAAG,IAAM,2BACnD2D,EAAMA,EAAuB,gBAAI3D,EAAG,KAAO,kBAN/C,CAiCG2D,IAAUA,EAAQ,uQCnCd,MAAMC,EACTC,YAAYC,EAAGC,EAAGC,GACdC,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,WAAaA,EAEtBH,QAAQC,EAAGC,GACP,OAAOE,KAAKH,IAAMA,GAAKG,KAAKF,IAAMA,GCP1C,IAAIG,EAAS,EACN,MAAM9D,EACTyD,YAAYM,GACRF,KAAKG,KAAO,KACZH,KAAKI,IAAM,KACXJ,KAAKK,YAAc,EACnBL,KAAKM,SAAW,EAAE,GAAI,GACtBN,KAAKO,MAAQ,EACbP,KAAKQ,MAAQ,KACbR,KAAKS,MAAQ,CAAEC,OAAQ,GACvBV,KAAKW,KAAO,KACZX,KAAKH,GAAK,EACVG,KAAKF,GAAK,EACVE,KAAKE,KAAOA,EACZF,KAAKY,GAAK,MAAOX,EAErBY,UACI,OAAOb,KAAKG,KAEhBP,SAASiB,EAAKhB,EAAGC,GAIb,OAHAE,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKc,cAAcC,EAAaC,UAC5BhB,KAAKG,OAASU,IAGlBb,KAAKG,KAAOU,EACZb,KAAKE,KAAKe,SAASjB,KAAMa,IAClB,GAEXjB,gBACII,KAAKkB,gBAAgBH,EAAaC,UAClChB,KAAKE,KAAKiB,cAAcnB,MAE5BoB,aACI,OAAOpB,KAAKE,KAAKkB,OAErBC,kBACI,OAAOrB,KAAKsB,cAAcP,EAAaQ,aAE3C3B,KAAKC,EAAGC,GACJ,OAAOE,KAAKH,IAAMA,GAAKG,KAAKF,IAAMA,EAEtCF,QACI,MAAM4B,EAAQ,IAAIxB,KAAKyB,YAAYzB,KAAKE,MAExC,OADAsB,EAAME,KAAK1B,MACJwB,EAEX5B,KAAK4B,GACDxB,KAAKO,MAAQiB,EAAMjB,MACnBP,KAAKQ,MAAQgB,EAAMhB,MACnBmB,OAAOC,OAAO5B,KAAKS,MAAOe,EAAMf,OAChCT,KAAKW,KAAOa,EAAMb,KAClBX,KAAKH,EAAI2B,EAAM3B,EACfG,KAAKF,EAAI0B,EAAM1B,EACfE,KAAKE,KAAOsB,EAAMtB,KAClBF,KAAKY,GAAKY,EAAMZ,GAEpBhB,YACI,OAAOI,KAAKE,KAAK2B,UAAU7B,MAE/BJ,UACII,KAAKS,MAAMC,QAAUK,EAAaQ,YAEtC3B,cAAc3D,GACV,SAAU+D,KAAKS,MAAMC,OAASzE,GAElC2D,kBAAkBa,GACd,OAAQT,KAAKS,MAAMC,OAASD,KAAWA,EAE3Cb,cAAc3D,GACV+D,KAAKS,MAAMC,QAAUzE,EAEzB2D,gBAAgB3D,GACZ+D,KAAKS,MAAMC,SAAWzE,EAE1B2D,OAAOkC,GACH,OAAO9B,KAAKE,KAAK6B,KAAKC,SAASF,GAEnClC,aACI,OAAOI,KAAKsB,cAAcP,EAAapE,eAE3CiD,eACI,OAAOI,KAAKsB,cAAcP,EAAanE,iBAE3CgD,gBACI,OAAOI,KAAKsB,cAAcP,EAAapE,eAE3CiD,gBACI,OAAOI,KAAKsB,cAAcP,EAAatE,kBAE3CmD,MAAMC,EAAGC,GACL,OAAOE,KAAKI,KAAOJ,KAAKI,IAAI6B,QAAQpC,EAAGC,GAE3CF,YAAYsC,GACR,OAAOlC,KAAKE,KAAKiC,YAAYD,EAAMlC,MAEvCJ,WAAWsC,GACP,OAAOlC,KAAKE,KAAKkC,WAAWF,EAAMlC,MAEtCJ,QAAQyC,GACJ,OAAOrC,KAAKE,KAAKoC,QAAQtC,KAAMqC,GAEnCzC,eAAeyC,GACX,OAAOrC,KAAKE,KAAKqC,eAAevC,KAAMqC,GAE1CzC,UAAUyC,GACN,OAAOrC,KAAKE,KAAKsC,UAAUxC,KAAMqC,GAErCzC,QAAQ6C,GACJ,OAAOzC,KAAKE,KAAKwC,QAAQ1C,KAAMyC,GAEnC7C,WAAW+C,EAAQC,GACf,OAAO5C,KAAKE,KAAK2C,WAAW7C,KAAM2C,EAAQC,GAE9ChD,SAASkD,EAAMC,GACXD,EAAKE,WAAWhD,KAAKoB,QAEzBxB,WACI,MAAO,GAAGI,KAAKyB,YAAYwB,QAAQjD,KAAKY,QAAQZ,KAAKH,KAAKG,KAAKF,KCtHhE,MAAMoD,EACTtD,YAAYuD,GACRnD,KAAK+B,KAAO,GACZ/B,KAAKoD,iBAAmB,GACxBpD,KAAKY,GAAKuC,EAAOvC,IAAMuC,EAAOF,KAC9BjD,KAAKiD,KAAOE,EAAOF,KACnBjD,KAAKqD,OAASF,EAAOE,QAAUrD,KAAKiD,KACpCjD,KAAKsD,YAAcH,EAAOG,aAAetD,KAAKqD,OAC9CrD,KAAKoB,OAASpF,EAAIoF,OAAOmC,KAAKJ,EAAO/B,OAAS+B,EAAO/B,OAAS+B,GAC1DA,EAAOpB,OACoB,iBAAhBoB,EAAOpB,KACd/B,KAAK+B,KAAOoB,EAAOpB,KAAKyB,MAAM,QAAQ3C,KAAK4C,GAAMA,EAAEC,SAGnD1D,KAAK+B,KAAOoB,EAAOpB,KAAK4B,SAG5BR,EAAOC,mBACgC,iBAA5BD,EAAOC,iBACdpD,KAAKoD,iBAAmBD,EAAOC,iBAC1BI,MAAM,QACN3C,KAAK4C,GAAMA,EAAEC,SAGlB1D,KAAKoD,iBAAmBD,EAAOC,iBAC1BO,QACA9C,KAAK4C,GAAMA,EAAEC,UAI9B9D,KAAKyC,GACD,MAAM3B,EAAS,IAAIvE,EAAO6D,MAE1B,OADAA,KAAK4D,KAAKlD,EAAQ2B,GACX3B,EAEXd,KAAKc,EAAQ2B,EAAO,IACZA,EAAKhC,cACLK,EAAOL,YAAcgC,EAAKhC,aAGlCT,SAASiE,EAAS1D,IAClBP,cAAciE,IACdjE,UAAUiE,GACN,OAAO,EAEXjE,YAAYsC,EAAM2B,GACd,SAAI7D,KAAKoD,iBAAiBU,QACrB5B,EAAK6B,eAAe/D,KAAKoD,mBAKlCxD,WAAWsC,EAAM2B,GACb,SAAI7D,KAAKoD,iBAAiBU,QACrB5B,EAAK8B,cAAchE,KAAKoD,mBAKjCxD,QAAQiE,EAASI,GACb,OAAOjE,KAAKiD,KAEhBrD,eAAeiE,EAASI,GACpB,OAAOjE,KAAKsD,YAEhB1D,UAAUiE,EAASI,GACf,OAAOjE,KAAKqD,OAEhBzD,QAAQiE,EAASpB,GACb,OAAOA,EAEX7C,WAAWc,EAAQiC,EAAQC,GACvB,IAAKlC,EAAOG,IACR,OAAO,EACX,GAAIH,EAAOW,YACP,OAAO,EACX,MAAM6C,EAAQ,IAAIlI,EAAIoF,OAAO+C,MAI7B,OAHAzD,EAAOG,IAAIuD,gBAAgB1D,EAAOb,EAAGa,EAAOZ,EAAGoE,GAC/CvB,EAAOK,WAAWJ,EAAO/C,EAAI,EAAG+C,EAAO9C,EAAGoE,GAC1CvB,EAAO0B,SAASzB,EAAO/C,EAAI,EAAG+C,EAAO9C,EAAG8C,EAAO0B,MAAQ,EAAG5D,EAAO4B,UAAW,UACrE,GAGR,SAASiB,EAAKlB,EAAMkC,EAAW,IAElC,OADa,IAAIrB,EAAWb,GAChBkB,KAAKgB,6DF5Ed,SAAqB1E,EAAGC,EAAGC,GAC9B,OAAO,IAAIJ,EAAQE,EAAGC,EAAGC,mCGXtB,MAAMyE,EACT5E,YAAY6E,EAAO,IACfzE,KAAK0E,MAAQ,GACbD,EAAKE,SAASC,GAAM5E,KAAK6E,IAAID,KAEjChF,IAAIkF,GAEA,OADA9E,KAAK0E,MAAMK,KAAKD,GACT9E,KAEXJ,IAAIoF,EAAKC,GAAW,GAChB,MAAMC,EAAQlJ,EAAImJ,MAAMC,KAAKC,MAAML,EAAMhF,KAAK0E,MAAMZ,QAAS,EAAG9D,KAAK0E,MAAMZ,OAAS,GAC9EgB,EAAM9E,KAAK0E,MAAMQ,GACvB,OAAOlF,KAAKsF,QAAQR,EAAKG,GAE7BrF,QAAQkF,EAAKG,GAAW,GACpB,OAAOH,EAAIS,QAAQ,qBAAsBN,EAAW,KAAO,OAG5D,MAAMO,EAAe,GClBrB,MAAMC,EACT7F,YAAYyC,EAAO,IACfrC,KAAK0F,KAAO,GACZ1F,KAAK2F,MAAQ,GACb3F,KAAK4F,OAAS,GACd5F,KAAK4D,KAAKvB,GAEdzC,IAAIqD,GACA,OAAOjD,KAAK4F,OAAO3C,IAAS,EAEhCrD,OAAOqD,GACH,MAAM4C,EAAM7F,KAAK6F,IAAI5C,GACrB,OAAO4C,EAAMT,KAAKU,MAAO,IAAM9F,KAAK+F,IAAI9C,GAAS4C,GAAO,EAE5DjG,IAAIqD,GACA,OAAOjD,KAAK0F,KAAKzC,IAAS,EAE9BrD,MAAMqD,GACF,OAAOjD,KAAK2F,MAAM1C,IAAS,KAE/BrD,KAAKyC,GACD,IAAK,IAAIY,KAAQZ,EACbrC,KAAKgG,IAAI/C,EAAMZ,EAAKY,IAG5BrD,IAAIqD,EAAMgD,EAAGJ,GACT,GAAiB,iBAANI,EAAgB,CAEvBA,EADUjK,EAAIkK,MAAM3C,KAAK0C,GACnBE,QAEVnG,KAAK4F,OAAO3C,GAAQgD,EACpBjG,KAAK0F,KAAKzC,GAAQ4C,GAAOI,EAE7BrG,KAAKqD,EAAMmD,EAAQC,GAAY,GACL,iBAAXD,IACPA,EAASpK,EAAIkK,MAAMC,MAAMC,IAE7B,IAAIH,EAAIjG,KAAK4F,OAAO3C,GAAQmD,EACvBC,IACDJ,EAAIb,KAAKkB,IAAIL,EAAGjG,KAAK0F,KAAKzC,KAE9BjD,KAAK4F,OAAO3C,GAAQgD,EAExBrG,MAAMqD,EAAMmD,GACc,iBAAXA,IACPA,EAASpK,EAAIkK,MAAMC,MAAMC,IAE7BpG,KAAK4F,OAAO3C,GAAQmC,KAAKS,IAAI,EAAG7F,KAAK4F,OAAO3C,GAAQmD,GAExDxG,SAASqD,EAAMmD,EAAQG,GAAa,GACV,iBAAXH,IACPA,EAASpK,EAAIkK,MAAMC,MAAMC,IAE7BpG,KAAK0F,KAAKzC,IAASmD,EACfG,GACAvG,KAAKwG,KAAKvD,EAAMmD,GAGxBxG,UAAUqD,EAAMmD,EAAQK,GAAa,GACX,iBAAXL,IACPA,EAASpK,EAAIkK,MAAMC,MAAMC,IAE7BpG,KAAK0F,KAAKzC,GAAQmC,KAAKS,IAAI,EAAG7F,KAAK0F,KAAKzC,GAAQmD,GAC5CK,GACAzG,KAAK0G,MAAMzD,EAAMmD,GAGzBxG,SAASqD,EAAM0D,EAAOC,EAAQ,GAC1B,MAAMC,EAAK7G,KAAK2F,MAAM1C,GAAQjD,KAAK2F,MAAM1C,IAAS,CAAE6D,QAAS,GAC7DD,EAAEF,MAAQA,EACVE,EAAED,MAAQA,EAEdhH,WACI,IAAK,IAAIqD,KAAQjD,KAAK0F,KAAM,CACxB,MAAMmB,EAAI7G,KAAK2F,MAAM1C,GACrB4D,EAAEC,SAAW,EACTD,EAAEC,SAAWD,EAAEF,QACf3G,KAAKwG,KAAKvD,EAAM4D,EAAED,OAClBC,EAAEC,SAAWD,EAAEF,QAI3B/G,QAAQqD,EAAMkD,QACIY,IAAVZ,IACAA,EAAQnG,KAAK0F,KAAKzC,IACtBjD,KAAK4F,OAAO3C,GAAQkD,EAExBvG,OAAOqD,EAAM+D,EAAMZ,GAEf,MAAMH,GADNG,EAASpK,EAAIkK,MAAMe,KAAKb,IACPD,QACXe,EAAIlH,KAAK+F,IAAI9C,GACnB,GAAa,QAAT+D,EACAhH,KAAKwG,KAAKvD,EAAMmD,QAEf,GAAa,QAATY,EACLhH,KAAK0G,MAAMzD,EAAMmD,QAEhB,GAAa,QAATY,EACLhH,KAAKgG,IAAI/C,EAAMmD,QAEd,GAAa,QAATY,EAAgB,CACrB,MAAMf,EAAIG,EAAOD,QACbnG,KAAK+F,IAAI9C,GAAQgD,GACjBjG,KAAKgG,IAAI/C,EAAMgD,OAGlB,CAAA,GAAa,QAATe,EAML,MAAM,IAAIG,MAAM,6BAA+BH,GAL3ChH,KAAK+F,IAAI9C,GAAQgD,GACjBjG,KAAKgG,IAAI/C,EAAMgD,GAMvB,OAAOiB,IAAMlH,KAAK+F,IAAI9C,IClHvB,MAAMmE,EACTxH,cACII,KAAKqH,KAAO,GACZrH,KAAKsH,MAAQ,GACbtH,KAAKuH,OAAS,GACdvH,KAAKwH,MAAQ,GACbxH,KAAK4F,OAAS,GACd5F,KAAKyH,QAAU,KAEnB7H,MAAMqD,GAIF,OAHAjD,KAAK0H,UAAUzE,GACfjD,KAAK2H,WAAW1E,GAChBjD,KAAK4H,OAAO3E,GACLjD,KAAK6H,QAAQ5E,GAExBrD,IAAIqD,GACA,OAAOjD,KAAK4F,OAAO3C,KAAS,EAEhCrD,IAAIqD,GACA,OAAOjD,KAAK4F,OAAO3C,KAAS,EAEhCrD,SAASqD,EAAM6E,GACPA,IACK9H,KAAKwH,MAAMvE,KACZjD,KAAKwH,MAAMvE,GAAQ6E,IAe/BlI,SAASqD,EAAM2D,EAAOkB,GAIlB,OAHe9H,KACRuH,OAAOtE,GAAQmC,KAAKS,IAAIe,EADhB5G,KAC8BuH,OAAOtE,IAAS,GAC7DjD,KAAK+H,SAAS9E,EAAM6E,GACb9H,KAAK6H,QAAQ5E,GAaxBrD,UAAUqD,EAAM2D,EAAQ,EAAGkB,GACH,mBAATlB,IACPkB,EAAOlB,EACPA,EAAQ,GAKZ,OAHe5G,KACRuH,OAAOtE,IADCjD,KACeuH,OAAOtE,IAAS,GAAK2D,EACnD5G,KAAK+H,SAAS9E,EAAM6E,GACb9H,KAAK6H,QAAQ5E,GAYxBrD,UAAUqD,EAAM2D,EAAQ,GAGpB,OAFe5G,KACRuH,OAAOtE,GAAQmC,KAAKS,IAAI,GADhB7F,KAC2BuH,OAAOtE,IAAS,GAAK2D,GACxD5G,KAAK6H,QAAQ5E,GAWxBrD,WAAWqD,GAGP,OAFejD,KACRuH,OAAOtE,GAAQ,EACfjD,KAAK6H,QAAQ5E,GAQxBrD,MAAMqD,EAAM6E,GAIR,OAHe9H,KACRqH,KAAKpE,IAAQ,EACpBjD,KAAK+H,SAAS9E,EAAM6E,GACb9H,KAAK6H,QAAQ5E,GAQxBrD,OAAOqD,GAGH,OAFejD,KACRqH,KAAKpE,IAAQ,EACbjD,KAAK6H,QAAQ5E,GAaxBrD,QAAQqD,EAAMkD,EAAO2B,GAKjB3B,EAAQnK,EAAIkK,MAAM3C,KAAK4C,GAAOA,QAC9B,MAAM6B,EALShI,KAKQsH,MAAMrE,IAAS,EAGtC,OARejD,KAMRsH,MAAMrE,GAAQmC,KAAKS,IAAIM,EAAO6B,GACrChI,KAAK+H,SAAS9E,EAAM6E,GACb9H,KAAK6H,QAAQ5E,GAaxBrD,QAAQqD,EAAMkD,EAAQ,EAAG2B,GACD,mBAAT3B,IACP2B,EAAO3B,EACPA,EAAQ,GASZ,OAHAA,EAAQnK,EAAIkK,MAAM3C,KAAK4C,GAAOA,QAJfnG,KAKRsH,MAAMrE,IALEjD,KAKcsH,MAAMrE,IAAS,GAAKkD,EACjDnG,KAAK+H,SAAS9E,EAAM6E,GACb9H,KAAK6H,QAAQ5E,GAUxBrD,WAAWqD,EAAMkD,EAAQ,GAIrB,OAFAA,EAAQnK,EAAIkK,MAAM3C,KAAK4C,GAAOA,QADfnG,KAERsH,MAAMrE,GAAQmC,KAAKS,IAAI,GAFf7F,KAE0BsH,MAAMrE,IAAS,GAAKkD,GACtDnG,KAAK6H,QAAQ5E,GASxBrD,UAAUqD,GAGN,OAFejD,KACRsH,MAAMrE,GAAQ,EACdjD,KAAK6H,QAAQ5E,GAUxBrD,cAAcqI,EAAQ,GAClB,MAAMC,EAASlI,KACTmI,EAAU,GAChB,IAAIC,GAAU,EACd,IAAK,IAAInF,KAAQiF,EAAOZ,MAChBtH,KAAKqI,WAAWpF,EAAMgF,KACtBG,GAAU,EACVD,EAAQlF,IAAQ,GAGxB,QAAOmF,GAAUD,EAQrBvI,QAAQqD,GACJ,MAAMiF,EAASlI,KACTsI,EAAMtI,KAAK4F,OACjB,IAAI2C,EAAMD,EAAIrF,GACVkD,EAASmC,EAAIrF,GACbiF,EAAOb,KAAKpE,IACRiF,EAAOZ,MAAMrE,GAAQ,GACrBiF,EAAOX,OAAOtE,GAAQ,IACtB,EACR,MAAMuF,EAASxI,KAAKwH,MAAMvE,GAK1B,OAJKkD,GAASqC,IACVA,EAAOxI,KAAMiD,GACbiF,EAAOV,MAAMvE,GAAQ,OAErBsF,IAAQpC,KAMFoC,IAAOpC,MALTnG,KAAKyH,SACLzH,KAAKyH,QAAQzH,KAAMiD,IAEhB,IC5OZ,MAAMwF,EAAmB,GACzB,SAASC,EAAczF,EAAM0F,GAChCF,EAAiBxF,EAAK2F,eAAiBD,EAEpC,SAASE,EAAU5F,GACtB,OAAOwF,EAAiBxF,EAAK2F,gBAAkB,KCC5C,MAAM7L,UAAc+L,EACvBlJ,YAAYM,GACR6I,MAAM7I,GACNF,KAAKgJ,GAAK,KACVhJ,KAAKiJ,OAAS,KACdjJ,KAAKkJ,MAAQ,KACblJ,KAAKmJ,IAAM,KACXnJ,KAAKoJ,OAAS,KACdpJ,KAAKqJ,eAAiB,GACtBrJ,KAAKsJ,KAAO,GACZtJ,KAAKuJ,SAAW,KAChBvJ,KAAKwJ,SAAW,KAChBxJ,KAAKyJ,SAAW,KAChBzJ,KAAKW,KAAO,KAEZX,KAAKS,MAAMiJ,MAAQ,EACnB1J,KAAKO,MAAQoJ,EAAYC,MACzB5J,KAAKE,KAAOA,EACZF,KAAK6J,MAAQ,IAAIpE,EACjBzF,KAAKkI,OAAS,IAAId,EAEtBxH,KAAK4B,GACDuH,MAAMrH,KAAKF,GACXxB,KAAKiJ,OAASzH,EAAMyH,OACpBjJ,KAAKkJ,MAAQ1H,EAAM0H,MACnBlJ,KAAKmJ,IAAM3H,EAAM2H,IACjBnJ,KAAKoJ,OAAS5H,EAAM4H,OACpBpJ,KAAKqJ,eAAiB7H,EAAM6H,eAEhCzJ,UACII,KAAKc,cAAcC,EAAaQ,aAC5BvB,KAAKuJ,WACLvN,EAAI8N,KAAKC,KAAK/J,KAAKuJ,UACnBvJ,KAAKuJ,SAAW,MAEhBvJ,KAAKwJ,WACLxN,EAAI8N,KAAKC,KAAK/J,KAAKwJ,UACnBxJ,KAAKwJ,SAAW,MAEhBxJ,KAAKyJ,WACLzN,EAAI8N,KAAKC,KAAK/J,KAAKyJ,UACnBzJ,KAAKyJ,SAAW,MAGxB7J,aAAa3D,GACT,SAAU+D,KAAKS,MAAMiJ,MAAQzN,GAEjC2D,iBAAiBa,GACb,OAAQT,KAAKS,MAAMiJ,MAAQjJ,KAAWA,EAE1Cb,aACI,OAAOI,KAAKS,MAAMiJ,MAEtB9J,aAAa3D,GACT+D,KAAKS,MAAMiJ,OAASzN,EAExB2D,eAAe3D,GACX+D,KAAKS,MAAMiJ,QAAUzN,EAEzB2D,WACI,OAAOI,KAAKgK,aAAaC,EAAYC,WAEzCtK,SACI,OAAOI,KAAKsB,cAAcP,EAAaQ,aAE3C3B,UAAUqD,GACN,MAAMkH,EAASnK,KAAKE,KAAKkK,QAAQnH,GACjC,QAAe8D,IAAXoD,IAAmC,IAAXA,EAAiB,CAEzC,OADatB,EAAU5F,KACR,EAEd,OAAe,IAAXkH,GAGFA,EAEXvK,iBACI,OAAOI,KAAKE,KAAKmK,KAGrBzK,gBACI,OAAQI,KAAKgK,aAAaC,EAAYK,cACjCtK,KAAKgK,aAAaC,EAAYM,aAEvC3K,OAAOC,EAAGC,GACN,OAAID,aAAaiJ,EACTjJ,aAAa9C,GACT8C,EAAEsJ,IACKtJ,EAAEsJ,IAAIqB,kBAAkBxK,KAAKH,EAAGG,KAAKF,GAE7CE,KAAKyK,OAAO5K,EAAEA,EAAGA,EAAEC,IAAME,KAAKE,KAAKwK,YAAY1K,KAAMH,GAE5DG,KAAKmJ,IACEnJ,KAAKmJ,IAAIqB,kBAAkB3K,EAAGC,KAEhCE,KAAKa,QACN7E,EAAI2O,GAAGC,gBAAgB5K,KAAKH,EAAGG,KAAKF,EAAGD,EAAGC,GAC1CE,KAAKqJ,iBAGFrN,EAAI2O,GAAGE,eAAe7K,KAAKH,EAAGG,KAAKF,EAAGD,EAAGC,GAAG,CAACgL,EAAGC,KACnD,GAAI/K,KAAKa,IAAIqB,KAAK4I,EAAGC,GAAGC,eACpB,OAAO,MAOvBpL,cAAcC,EAAGC,GACb,OAAID,aAAaiJ,EACL9I,KAAKiL,cAAcpL,EAAEA,EAAGA,EAAEC,KAC7BE,KAAKE,KAAKwK,YAAY1K,KAAMH,IACzBG,KAAKE,KAAKgL,cAAclL,KAAMH,IAEtCG,KAAKmJ,IACEnJ,KAAKmJ,IAAIgC,mBAAmBtL,EAAGC,GAEnCE,KAAKyK,OAAO5K,EAAGC,GAE1BF,YAAYc,GACR,OAAOV,KAAKE,KAAKwK,YAAY1K,KAAMU,GAEvCd,cAAcc,GACV,OAAOV,KAAKE,KAAKgL,cAAclL,KAAMU,GAGzCd,UAAUwL,GACN,IAAIC,GAAiB,EACjBD,EAAKE,OAAOb,OAAOzK,OACnBA,KAAKuL,aAAatB,EAAYK,YAC9BtK,KAAKM,SAAS,GAAKN,KAAKH,EACxBG,KAAKM,SAAS,GAAKN,KAAKF,EACxBuL,GAAiB,IAGbrL,KAAKgK,aAAaC,EAAYK,aAC9BkB,QAAQC,IAAI,eAEhBzL,KAAK0L,eAAezB,EAAYK,aAEhCtK,KAAK2L,kBACLH,QAAQC,IAAI,kBACZL,EAAKE,OAAOM,aAEhB,IAAI/E,EAAI,EAOR,OANI7G,KAAKgJ,IAAMhJ,KAAKgJ,GAAGL,KACnB9B,QAAU7G,KAAKgJ,GAAGL,GAAGyC,EAAMpL,OAEtB,GAAL6G,GAAU7G,KAAKE,KAAK8I,KACpBnC,QAAU7G,KAAKE,KAAK8I,GAAGL,GAAGyC,EAAMpL,OAEhC6G,IAEIwE,GAAkBD,EAAKE,OAAOb,OAAOzK,SACrCA,KAAKM,SAAS,GAAKN,KAAKH,EACxBG,KAAKM,SAAS,GAAKN,KAAKF,GAErB+G,GAGJ7G,KAAK6L,UAEhBjM,YACI,OAAOI,KAAKE,KAAK4L,UAErBlM,aACAA,QAAQoF,EAAM,KAOV,OANIhF,KAAKgK,aAAaC,EAAYK,YAC9BtK,KAAKuL,aAAatB,EAAYM,aAG9BvK,KAAK0L,eAAezB,EAAYM,aAE7BnF,KAAKC,MAAOL,EAAMhF,KAAK8L,YAAe,KAGjDlM,WAAWmM,GACP,OAAO,EAEXnM,QAAQmM,GACJ,OAAO,EAGXnM,WAAWoM,GACP,OAAO,EAEXpM,WAAWoM,GACP,OAAO,EAEXpM,QAAQoM,IACRpM,WAAWqM,EAAM5J,GACb,OAAOrC,KAAKE,KAAKgM,WAAWlM,KAAMiM,EAAM5J,GAE5CzC,SAASqM,EAAM5J,GACX,OAAOrC,KAAKE,KAAKiM,SAASnM,KAAMiM,EAAM5J,GAG1CzC,SAASiB,EAAKhB,EAAGC,GACb,MAAMsM,EAAarD,MAAM9H,SAASJ,EAAKhB,EAAGC,GAI1C,OAHIsM,GACApM,KAAK0L,eAAezB,EAAYoC,iBAE7BD,EAEXxM,gBACImJ,MAAM5H,gBACFnB,KAAKuJ,WACLvN,EAAI8N,KAAKC,KAAK/J,KAAKuJ,UACnBvJ,KAAKuJ,SAAW,MAEhBvJ,KAAKwJ,WACLxN,EAAI8N,KAAKC,KAAK/J,KAAKwJ,UACnBxJ,KAAKwJ,SAAW,MAEhBxJ,KAAKyJ,WACLzN,EAAI8N,KAAKC,KAAK/J,KAAKyJ,UACnBzJ,KAAKyJ,SAAW,MAOxB7J,UACI,IAAKI,KAAKa,IACN,MAAM,IAAIsG,MAAM,6CAEpB,MAAMmF,GAAYtM,KAAKgK,aAAaC,EAAYoC,iBAKhD,GAJIC,GAAYtM,KAAKuJ,WACjBvN,EAAI8N,KAAKC,KAAK/J,KAAKuJ,UACnBvJ,KAAKuJ,SAAW,MAEfvJ,KAAKuJ,UAGL,IAAK+C,EACN,OAAOtM,KAAKuJ,cAHZvJ,KAAKuJ,SAAWvN,EAAI8N,KAAKyC,MAAMvM,KAAKa,IAAIyD,MAAOtE,KAAKa,IAAI2L,QAK5D,MAAMtM,EAAOF,KAAKE,KACZW,EAAMb,KAAKa,IAgFjB,OA/EAb,KAAKuJ,SAASkD,QAAO,CAACC,EAAI7M,EAAGC,KACzB,MAAMoC,EAAOrB,EAAIqB,KAAKrC,EAAGC,GACzB,OAAII,EAAKiC,YAAYD,EAAMlC,MAChBkC,EAAKZ,cAAcP,EAAalE,mBACjCb,EAAI2Q,KAAKC,YACT5Q,EAAI2Q,KAAKE,UAEV3M,EAAKkC,WAAWF,EAAMlC,MACpBhE,EAAI2Q,KAAKG,QAEb9Q,EAAI2Q,KAAKI,MAEpB/M,KAAKuL,aAAatB,EAAYoC,iBAmEvBrM,KAAKuJ,SAEhByD,cACI,OAAOhN,KAAKwJ,SAEhB5J,UACI,QAASI,KAAKwJ,SAElB5J,QAAQC,EAAGC,GACP,MAAMe,EAAMb,KAAKG,KACjB,IAAKU,EACD,MAAM,IAAIsG,MAAM,4BACfnH,KAAKwJ,WACNxJ,KAAKwJ,SAAWxN,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,SAElD,MAAMQ,EAAUhN,KAAKwJ,SAErB,OADAxN,EAAI2Q,KAAKM,mBAAmBD,EAASnN,EAAGC,EAAGE,KAAKkN,WACzClN,KAAKwJ,SAEhB5J,YACQI,KAAKwJ,WACLxN,EAAI8N,KAAKC,KAAK/J,KAAKwJ,UACnBxJ,KAAKwJ,SAAW,MAGxB5J,UACI,IAAKI,KAAKa,IACN,MAAM,IAAIsG,MAAM,WAOpB,OANKnH,KAAKyJ,WACNzJ,KAAKyJ,SAAWzN,EAAI8N,KAAKyC,MAAMvM,KAAKa,IAAIyD,MAAOtE,KAAKa,IAAI2L,SAExDxM,KAAKyJ,SAAS5J,IAAMG,KAAKH,GAAKG,KAAKyJ,SAAS3J,IAAME,KAAKF,GACvD9D,EAAI2Q,KAAKM,mBAAmBjN,KAAKyJ,SAAUzJ,KAAKH,EAAGG,KAAKF,EAAGE,KAAKkN,WAE7DlN,KAAKyJ,UCxWb,MAAM0D,EAAW,GACjB,SAASC,EAAexM,EAAIyM,GAC/BF,EAASvM,EAAGgI,eAAiByE,EAE1B,MAAMC,EAAc,GACpB,SAASC,EAAY3M,EAAIoG,GAC5BsG,EAAY1M,GAAMoG,EAqHf,SAASzD,EAAKlB,GACjB,IAAKA,EACD,MAAM,IAAI8E,MAAM,iCACpB,IAAIhE,EAAS,GACb,GAAoB,iBAATd,EAEP,GAAIA,EAAKuG,cAAc4E,WAAW,WAAY,CAC1C,MAAMC,EAASpL,EAAKqL,QAAQ,IAAK,GAC3BC,EAAOtL,EAAKuL,UAAU,EAAGH,GAC/BtK,EAAS,CACL6D,KAAM,UAAY3E,EAAKuL,UAAUH,GACjCI,QAAS,CAAC,QAAUF,SAIxBxK,EAAS,CAAE6D,KAAM,QAAS6G,QAAS,CAACxL,QAGnB,mBAATA,EACZc,EAAS,CAAE6D,KAAM,QAAS6G,QAAS,CAACxL,IAE/ByL,MAAMC,QAAQ1L,GACnBc,EAAS,CAAE6D,KAAM,QAAS6G,QAASxL,IAI/BA,EAAK2L,SAEL3L,EAAKwL,QAAU,CAACxL,EAAK2L,eACd3L,EAAK2L,QAGZ3L,EAAKwL,SACLlM,OAAOC,OAAOuB,EAAQd,IACQ,iBAAnBc,EAAO0K,SAGiB,mBAAnB1K,EAAO0K,WAFnB1K,EAAO0K,QAAU,CAACxL,EAAKwL,YAO3B1K,EAAO0K,QAAU,GACjBlM,OAAOsM,QAAQ5L,GAAMsC,SAAQ,EAAEvE,EAAK+F,WAEhBY,IADAoG,EAAS/M,EAAIwI,gBAKH,mBAAVzC,EAFZhD,EAAO0K,QAAQzN,GAAO+F,EAQtBhD,EAAO/C,GAAO+F,OAM9B,GADAhD,EAAO6D,KAAO7D,EAAO6D,MAAQ,QACF,iBAAhB7D,EAAO6D,KACd,MAAM,IAAIG,MAAM,wBAA0B+G,KAAKC,UAAUhL,EAAO6D,OACpE,MACMoH,EADYjL,EAAO6D,KAAKxD,MAAM,KAAK3C,KAAK4C,GAAMA,EAAEC,SAC3B2K,QACrBC,EAAShB,EAAYc,EAASxF,eACpC,IAAK0F,EACD,MAAM,IAAInH,MAAM,wBAA0BiH,GAC9C,MAAMJ,EAASM,EAAOnL,GAmCtB,OAlCI2K,MAAMC,QAAQ5K,EAAO0K,SACrB1K,EAAO0K,QAAQlJ,SAAS4J,IACpB,GAAiB,mBAANA,EACPP,EAAOH,QAAQ9I,KAAKwJ,OAEnB,CACD,MAAMC,EAAQD,EAAE/K,MAAM,KAAK3C,KAAK4C,GAAMA,EAAEC,SACxC,GAAqB,IAAjB8K,EAAM1K,OAAc,CACpB,MAAMkK,EAASS,EAAiBD,EAAM,IACtC,IAAKR,EACD,MAAM,IAAI7G,MAAM,kCAAoCqH,EAAM,IAC9DR,EAAOH,QAAQ9I,KAAKiJ,EAAOU,QAAQC,KAAKX,QAEvC,CACD,MAAMX,EAAUF,EAASqB,EAAM,GAAG5F,eAClC,IAAKyE,EACD,MAAM,IAAIlG,MAAM,mBAAqBqH,EAAM,IAC/CA,EAAMH,QACNL,EAAOH,QAAQ9I,KAAKsI,EAAQmB,SAMxC7M,OAAOsM,QAAQ9K,EAAO0K,SAASlJ,SAAQ,EAAEvE,EAAK+F,MAC1C,MAAMkH,EAAUF,EAAS/M,EAAIwI,eAC7B,IAAKyE,EACD,MAAM,IAAIlG,MAAM,gCAAkC/G,GACtD4N,EAAOH,QAAQ9I,KAAKsI,EAAQlH,OAGhChD,EAAOxC,OACPqN,EAAOrN,KAAO4C,EAAKJ,EAAOxC,OAEvBqN,EAEJ,SAAS/G,EAAK5E,GACjB,IAAKA,EACD,MAAM,IAAI8E,MAAM,4CACpB,GAAoB,iBAAT9E,GAAqB,YAAaA,EACzC,OAAOA,EAEX,GAAoB,iBAATA,EAAmB,CAC1B,MAAM2L,EAASS,EAAiBpM,GAChC,GAAI2L,EACA,OAAOA,EACX,MAAM,IAAI7G,MAAM,oBAAsB9E,GAE1C,OAAOkB,EAAKlB,GAOT,MAAMoM,EAAmB,GACzB,SAASG,EAAQhO,EAAIuC,GACxB,MAAM6K,EANgB,iBADRa,EAOU1L,IANU,YAAa0L,EAMb1L,EAAO2L,QAAUvL,EAAKJ,GAP5D,IAAkB0L,EASd,OADAJ,EAAiB7N,GAAMoN,EAChBA,ECxPJ,MAAM/Q,EACT2C,YAAYuD,GACR,IAAI4L,EAAIC,EAAIC,EAAIC,EAChBlP,KAAKkF,OAAS,EACdlF,KAAKmP,UAAY,IACjBnP,KAAK6N,QAAU,GACf7N,KAAKoP,SAAW,GAChBpP,KAAKO,MAAQ,EACbP,KAAKQ,MAAQ,KACbR,KAAKqP,WAAa,KAClBrP,KAAK+B,KAAO,GACZ/B,KAAKY,GAAKuC,EAAOvC,IAAM,MACvBZ,KAAKmP,UAAwC,QAA3BJ,EAAK5L,EAAOgM,iBAA8B,IAAPJ,EAAgBA,EAAK/O,KAAKmP,UAC/EnP,KAAKoP,SAAsC,QAA1BJ,EAAK7L,EAAOiM,gBAA6B,IAAPJ,EAAgBA,EAAKhP,KAAKoP,SAC7EpP,KAAKO,MAAgC,QAAvB0O,EAAK9L,EAAO5C,aAA0B,IAAP0O,EAAgBA,EAAKjP,KAAKO,MACvEP,KAAKQ,MAAQ2C,EAAO3C,OAAS,KAC7BR,KAAKqP,WAAalM,EAAOkM,YAAc,KACvCrP,KAAKoB,OAASpF,EAAIoF,OAAOmC,KAAKJ,GAC9BnD,KAAKiD,KAAOE,EAAOF,MAAQ,OAC3BjD,KAAKsD,YAAcH,EAAOG,aAAetD,KAAKiD,KAC9CjD,KAAKqD,OAASF,EAAOE,QAAUrD,KAAKiD,KACpCjD,KAAKsP,QAAoC,QAAzBJ,EAAK/L,EAAOmM,eAA4B,IAAPJ,EAAgBA,EAAK,KACtElP,KAAKS,MAAQ0C,EAAO1C,OAAS,CAAEC,OAAQ,EAAGiN,KAAM,EAAG4B,SAAU,GACzDpM,EAAO0K,SACPlM,OAAOC,OAAO5B,KAAK6N,QAAS1K,EAAO0K,SAEnC7N,KAAKwP,UAAU,UACfxP,KAAKS,MAAMkN,MAAQ8B,EAAWC,gBAE9BvM,EAAOpB,OACoB,iBAAhBoB,EAAOpB,KACdoB,EAAOpB,KACFyB,MAAM,QACN3C,KAAK4C,GAAMA,EAAEC,SACbiB,SAASlB,IACVzD,KAAK+B,KAAKgD,KAAKtB,MAInBzD,KAAK+B,KAAOoB,EAAOpB,KAAK4B,QAAQ9C,KAAK4C,GAAMA,EAAEC,UAIzD9D,OAAOkC,GACH,OAAO9B,KAAK+B,KAAKC,SAASF,GAE9BlC,UAAUmC,GACN,OAAO/F,EAAI2T,gBAAgB3P,KAAK+B,KAAMA,GAE1CnC,WAAWmC,GACP,OAAOA,EAAK6N,OAAOnM,GAAMzD,KAAK+B,KAAKC,SAASyB,KAEhD7D,cAAc3D,GACV,SAAU+D,KAAKS,MAAMC,OAASzE,GAElC2D,YAAY3D,GACR,SAAU+D,KAAKS,MAAMkN,KAAO1R,GAEhC2D,gBAAgB3D,GACZ,SAAU+D,KAAKS,MAAM8O,SAAWtT,GAEpC2D,kBAAkB3D,GACd,OAAQ+D,KAAKS,MAAMC,OAASzE,KAAUA,EAE1C2D,gBAAgB3D,GACZ,OAAQ+D,KAAKS,MAAMkN,KAAO1R,KAAUA,EAExC2D,oBAAoB3D,GAChB,OAAQ+D,KAAKS,MAAM8O,SAAWtT,KAAUA,EAE5C2D,eACI,SAAUI,KAAKS,MAAMC,OAASK,EAAanE,iBAE/CgD,aACI,SAAUI,KAAKS,MAAMC,OAASK,EAAapE,eAE/CiD,gBACI,OAAQI,KAAK6P,cAAgB7P,KAAK8P,YAAYL,EAAWM,mBAE7DnQ,gBACI,SAAUI,KAAKS,MAAMC,OAASK,EAAatE,kBAE/CmD,UAAUqD,GACN,OAAOA,KAAQjD,KAAK6N,QAExBjO,QAAQoQ,GACJ,IAAI3N,EAAO,GAUX,GATmB,kBAAR2N,GAGa,iBAARA,EAFZ3N,EAAKiN,QAAUU,EAKVA,IACL3N,EAAO2N,IAEN3N,EAAKiN,UAAYjN,EAAK4N,MACvB,OAAOjQ,KAAKiD,KAChB,IAAIiN,EAASlQ,KAAKiD,KAClB,GAAIZ,EAAK4N,MAAO,CACZ,IAAIA,EAAQ5N,EAAK4N,OACE,IAAf5N,EAAK4N,QACLA,EAAQjQ,KAAKoB,OAAO+O,IAAM,SAET,iBAAVF,IACPA,EAAQjU,EAAIiU,MAAMhJ,KAAKgJ,GAAOG,YAElCF,EAAS,IAAID,KAASjQ,KAAKiD,QAE/B,GAAIZ,EAAKiN,QAAS,CAIdY,GAHsC,iBAAjB7N,EAAKiN,QACpBjN,EAAKiN,QACLtP,KAAKsP,SAAW,KACH,IAAMY,EAE7B,OAAOA,EAEXtQ,eAAeyC,GACX,OAAOrC,KAAKsD,aAAetD,KAAKsC,QAAQD,GAE5CzC,UAAUyC,GACN,OAAOrC,KAAKqD,QAAUrD,KAAKsC,QAAQD,IAGpC,SAASkB,EAAK8M,GACjB,IAAItB,EAAIC,EAAIC,EAAIC,EAAIoB,EAAIC,EACxB,IAAIC,EAAO,CAAE3C,QAAS,GAAIpN,MAAO,GAAIW,OAAQ,GAAIgO,SAAU,IAC3D,GAAIiB,EAAQI,UACRD,EAAOE,EAAML,EAAQI,UAChBD,GACD,MAAM,IAAIrJ,MAAM,6BAA+BkJ,EAAQI,SAE/D,IAAIrB,EAAWoB,EAAKpB,SACpB,GAAgC,iBAArBiB,EAAQjB,SAAuB,CACtC,IAAIuB,EAAON,EAAQjB,SAAS7J,QAAQ,KAAM,IACtCL,EAAQyL,EAAKC,OAAO,QACxB,GAAa,GAAT1L,EACAkK,EAAWoB,EAAKpB,SAAWyB,OAAOC,SAASH,QAE1C,IAAc,GAAVzL,EACL,GAA+B,GAA3ByL,EAAKC,OAAO,YAAkB,CAC9B,MAAMjD,EAAO+C,EAAMC,GACnB,IAAKhD,EACD,MAAM,IAAIxG,MAAM,sCAAwCwJ,EAAO,KACnEvB,EAAWzB,EAAKyB,cAGhBA,EAAWyB,OAAOC,SAASH,OAG9B,CACD,MAAM/P,EAAK+P,EAAK/C,UAAU,EAAG1I,GACvB+C,EAAQ4I,OAAOC,SAASH,EAAK/C,UAAU1I,IACvCyI,EAAO+C,EAAM9P,GACnB,IAAK+M,EACD,MAAM,IAAIxG,MAAM,sCAAwCvG,EAAK,KACjEwO,EAAWzB,EAAKyB,SAAWnH,aAGLlB,IAArBsJ,EAAQjB,WACbA,EAAWiB,EAAQjB,UAEvB,MAAMvB,EAAU,GAChBlM,OAAOC,OAAOiM,EAAS2C,EAAK3C,SACxBwC,EAAQxC,SACRlM,OAAOsM,QAAQoC,EAAQxC,SAASlJ,SAAQ,EAAEvE,EAAK+F,MAC3C,GAAc,OAAVA,EAIJ,GAAqB,iBAAVA,GAAuBA,EAAMnE,SAAS,KAIjD,IACI6L,EAAQzN,GAAO2Q,EAAW5K,GAE9B,MAAOoI,GACH,MAAM,IAAIpH,MAAM,mCAAmC/G,OAAS8N,KAAKC,UAAUhI,QAAcoI,EAAEyC,cAP3FnD,EAAQzN,GAAO+F,cAJR0H,EAAQzN,MAe3B,MAAMK,EAAQ,CACVC,OAAQ1E,EAAIC,KAAKgL,KAAKlG,EAAcyP,EAAK/P,MAAMC,OAAQ2P,EAAQ5P,OAC/DkN,KAAM3R,EAAIC,KAAKgL,KAAKwI,EAAYe,EAAK/P,MAAMkN,KAAM0C,EAAQ5P,OACzD8O,SAAUvT,EAAIC,KAAKgL,KAAKgK,EAAgBT,EAAK/P,MAAM8O,SAAUc,EAAQ5P,QAEzE,IAAIF,EAAQiQ,EAAKjQ,OAAS,EACtB8P,EAAQ9P,QAEJA,EADyB,iBAAlB8P,EAAQ9P,MACPoJ,EAAY0G,EAAQ9P,OAGpB8P,EAAQ9P,OAGxB,IAAIC,EAAQgQ,EAAKhQ,MACb6P,EAAQ7P,MACRA,EAAQxE,EAAIwE,MAAM+C,KAAK8M,EAAQ7P,OAER,OAAlB6P,EAAQ7P,QACbA,EAAQ,MAEZ,MAAM2C,EAAS,CACXvC,GAAIyP,EAAQzP,GACZH,MAAAA,EACA0O,UAAwC,QAA5BJ,EAAKsB,EAAQlB,iBAA8B,IAAPJ,EAAgBA,EAAKyB,EAAKrB,UAC1EtB,QAAAA,EACAuB,SAAAA,EACA7O,MAAOA,EACPC,MAAAA,EACA6O,WAAYgB,EAAQhB,YAAc,KAClC6B,GAA0B,QAArBlC,EAAKqB,EAAQa,UAAuB,IAAPlC,EAAgBA,EAAKwB,EAAKpP,OAAO8P,GACnEf,GAA0B,QAArBlB,EAAKoB,EAAQF,UAAuB,IAAPlB,EAAgBA,EAAKuB,EAAKpP,OAAO+O,GACnEgB,GAA0B,QAArBjC,EAAKmB,EAAQc,UAAuB,IAAPjC,EAAgBA,EAAKsB,EAAKpP,OAAO+P,GACnEC,QAAoC,QAA1Bd,EAAKD,EAAQe,eAA4B,IAAPd,EAAgBA,EAAKE,EAAKpP,OAAOgQ,QAC7EnO,KAAMoN,EAAQpN,MAAQuN,EAAKvN,KAC3BK,YAAa+M,EAAQ/M,aAAekN,EAAKlN,YACzCD,OAAQgN,EAAQhN,QAAUmN,EAAKnN,OAC/BiM,QAAoC,QAA1BiB,EAAKF,EAAQf,eAA4B,IAAPiB,EAAgBA,EAAKC,EAAKlB,QACtEvN,KAAMsO,EAAQtO,MAAQ,MAG1B,OADa,IAAI9E,EAAKkG,GAGnB,MAAMuN,EAAQ,GACRW,EAAM,GACZ,SAAStL,EAAInF,GAChB,OAAIA,aAAc3D,EACP2D,EACO,iBAAPA,EACA8P,EAAM9P,IAAO,KACjByQ,EAAIzQ,IAAO,KAEf,SAASgO,EAAQhO,KAAO0Q,GAC3B,IAAIjB,EAAUiB,EAAK,GACA,GAAfA,EAAKxN,SACLuM,EAAUiB,EAAK,GACfjB,EAAQI,QAAUa,EAAK,IAE3BjB,EAAQzP,GAAKA,EACb,MAAM+M,EAAOpK,EAAK8M,GAIlB,OAHA1C,EAAKzI,MAAQmM,EAAIvN,OACjBuN,EAAItM,KAAK4I,GACT+C,EAAM9P,GAAM+M,EACLA,ECvPJ,MAAMlN,EAAQ,MAAExD,EAAMc,SAAAA,sGDyPtB,SAAoB2S,GACvB/O,OAAOsM,QAAQyC,GAAO/L,SAAQ,EAAE/D,EAAIuC,MAChCyL,EAAQhO,EAAIuC,SEzPb,MAAMoO,EACT3R,YAAYuD,GACRnD,KAAK6N,QAAU,GACf7N,KAAKwR,OAAS,IACdxR,KAAKyR,MAAO,EACZzR,KAAKS,MAAQ,EACbT,KAAKW,KAAO,KACU,iBAAXwC,GAAwB2K,MAAMC,QAAQ5K,KAC7CnD,KAAKS,MAAQzE,EAAIC,KAAKgL,KAAKyK,EAAcvO,EAAO1C,OACnB,iBAAlB0C,EAAOqO,QACdrO,EAAOqO,OAAOG,SAAS,KACvB3R,KAAKwR,OAA4C,IAAnCX,OAAOe,WAAWzO,EAAOqO,QAGvCxR,KAAKwR,OAASX,OAAOC,SAAS3N,EAAOqO,QAAU,UAI3D5R,QACI,MAAM4B,EAAQ,IAAIxB,KAAKyB,YAMvB,OALAD,EAAMqM,QAAU7N,KAAK6N,QAAQlK,QAC7BnC,EAAMgQ,OAASxR,KAAKwR,OACpBhQ,EAAMiQ,MAAO,EACbjQ,EAAMf,MAAQT,KAAKS,MACnBe,EAAMb,KAAOX,KAAKW,KACXa,EAEX5B,QAAQiS,EAAKC,EAAM,IACf,IAAKA,EAAIC,OAAS/R,KAAKwR,OAAQ,CAE3B,KADYM,EAAIE,KAAOH,EAAIhR,IAAImR,KAAOhW,EAAIiW,QACjCT,OAAOxR,KAAKwR,OAAQ,KACzB,OAAO,EAEf,IAAIU,GAAe,EACnB,IAAK,IAAIC,KAAOnS,KAAK6N,QACbsE,EAAIN,EAAKC,KACTI,GAAe,GAGvB,GAAIlS,KAAKW,KAAM,CACX,MAAMyR,KAAgBpS,KAAKS,MAAQiR,EAAaW,eAChD,GAAIH,GAAgBE,EAChB,OAAOpS,KAAKW,KAAK+N,QAAQmD,EAAKC,GAGtC,OAAOI,GAGR,SAASI,GAAgBnP,GAC5B,MAAsB,iBAAXA,EACA,IAAIoO,EAER,IAAIA,EAAYpO,GCnDpB,SAASoP,GAAiBpP,GAC7B,OAAO,IAAIqP,GAAarP,KDoDT,QAASmP,IClD5B/E,EAAY,SAAUgF,IACf,MAAMC,WAAqBjB,EAC9B3R,YAAYuD,GAWR,GAVA4F,MAAM5F,GACNnD,KAAKyS,KAAO,EACZzS,KAAK0S,UAAY,EACjB1S,KAAK2S,UAAY,GACZxP,IACDA,EAAS,CAAEsP,KAAM,EAAGC,UAAW,EAAGjS,MAAO,IAEvB,iBAAX0C,IACPA,EAASA,EAAOK,MAAM,KAAK3C,KAAK4C,GAAMA,EAAEC,UAExCoK,MAAMC,QAAQ5K,GACkB,WAA5BA,EAAO,GAAGyF,eACVzF,EAAOkL,QAEXlL,EAAS,CACLsP,KAAMtP,EAAO,IAAM,IACnBuP,UAAWvP,EAAO,IAAM,MACxB1C,MAAO0C,EAAO,IAAM,UAGvB,GAA2B,iBAAhBA,EAAO6D,MACnB7D,EAAO6D,KAAKhF,SAAS,KAAM,CAC3B,MAAMwM,EAAQrL,EAAO6D,KAAKxD,MAAM,KAAK3C,KAAK4C,GAAMA,EAAEC,SACnB,WAA3B8K,EAAM,GAAG5F,eACT4F,EAAMH,QAEVlL,EAAOsP,KAAOjE,EAAM,IAAM,IAC1BrL,EAAOuP,UAAYlE,EAAM,IAAM,MAC/BrL,EAAO1C,MAAQ0C,EAAO1C,MAAQ,IAAM+N,EAAM,GAE9CxO,KAAKyS,KAAO5B,OAAOC,SAAS3N,EAAOsP,MAAQ,GAC3CzS,KAAK0S,UAAY7B,OAAOC,SAAS3N,EAAOuP,WAAa,KACrD1S,KAAKS,MAAQzE,EAAIC,KAAKgL,KAAKyK,EAAcvO,EAAO1C,OAAS,GACzDT,KAAK2S,UAAYxP,EAAOwP,WAAa,GAEzC/S,QACI,MAAM4B,EAAQuH,MAAM+F,QAIpB,OAHAtN,EAAMiR,KAAOzS,KAAKyS,KAClBjR,EAAMkR,UAAY1S,KAAK0S,UACvBlR,EAAMmR,UAAY3S,KAAK2S,UAChBnR,EAEX5B,QAAQ+K,EAAImH,EAAM,IACd,MAAMc,KAAqB5S,KAAKS,MAAQiR,EAAamB,uBACrD,IAAIX,GAAe,EACnB,MAAMrR,EAAM8J,EAAG9J,IACTiS,EAAW9W,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,QAE/C,GADA0F,EAAea,GAAgB/S,KAAM2K,EAAImI,IACpCZ,EAED,OADAlW,EAAI8N,KAAKC,KAAK+I,IACP,EAEX,GAAIF,GAAmBI,GAAenS,EAAKiS,GAEvC,OADA9W,EAAI8N,KAAKC,KAAK+I,IACP,EA+BX,GA7BI9S,KAAKS,MAAQiR,EAAauB,sBAEtBC,GAAkBrS,EAAKiS,KACvBZ,GAAe,GAGnBlS,KAAKS,MAAQiR,EAAayB,kBAEtBC,GAAcvS,EAAKiS,KACnBZ,GAAe,GAGnBlS,KAAKS,MAAQiR,EAAa2B,cAEtBC,GAAWzS,EAAKiS,EAAU9S,KAAKS,SAC/ByR,GAAe,GAGvBY,EAASnO,SAAQ,CAACsB,EAAGpG,EAAGC,KACpB,GAAKmG,EAAL,CAEA6M,EAASjT,GAAGC,GAAK,EACjB,IAAK,IAAIqS,KAAOnS,KAAK6N,QACbsE,EAAI,CAAEtR,IAAAA,EAAKhB,EAAAA,EAAGC,EAAAA,GAAKgS,KACnBI,GAAe,EACfY,EAASjT,GAAGC,GAAK,OAIzBE,KAAKW,KAAM,CACX,MAAMyR,KAAgBpS,KAAKS,MAAQiR,EAAaW,gBAC5CH,GAAgBE,KACZpS,KAAKS,MAAQiR,EAAa6B,kBAC1BT,EAASnO,SAAQ,CAACsB,EAAGpG,EAAGC,KACfmG,IAEI,GAALA,GAAUmM,IACVpS,KAAKW,KAAK+N,QAAQ,CAAE7N,IAAAA,EAAKhB,EAAAA,EAAGC,EAAAA,GAAKgS,MAKzC9R,KAAKW,KAAK+N,QAAQ,CAAE7N,IAAAA,EAAKhB,EAAG8K,EAAG9K,EAAGC,EAAG6K,EAAG7K,GAAKgS,IAKzD,OADA9V,EAAI8N,KAAKC,KAAK+I,GACPZ,GAGR,SAASc,GAAenS,EAAK2S,EAAcC,EAAiB,EAAGC,EAAiB,GACnF,MAAMC,EAAe3X,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,QACnD,IAAIoH,GAAW,EAEf5X,EAAI2O,GAAGkJ,QAAQhT,EAAIyD,MAAOzD,EAAI2L,QAAQ,CAAC1B,EAAGC,KACtC,MAAM+I,EAAQhJ,EAAI2I,EACZM,EAAQhJ,EAAI2I,EACdF,EAAazN,IAAI+N,EAAOC,GACpBlT,EAAIqB,KAAK4I,EAAGC,GAAGiJ,aACfJ,GAAW,GAGT/S,EAAIqB,KAAK4I,EAAGC,GAAG8E,eACrB8D,EAAa7I,GAAGC,GAAK,MAG7B,IAAIkJ,GAAQ,EACZ,IAAK,IAAInJ,EAAI,EAAGA,EAAI6I,EAAarP,QAAUsP,IAAY9I,EACnD,IAAK,IAAIC,EAAI,EAAGA,EAAI4I,EAAanH,SAAWoH,IAAY7I,EAC1B,GAAtB4I,EAAa7I,GAAGC,KACZkJ,GACAN,EAAaO,UAAUpJ,EAAGC,EAAG,EAAG,GAChCkJ,GAAQ,GAGRL,GAAW,GAQ3B,OADA5X,EAAI8N,KAAKC,KAAK4J,GACPC,EAGX,SAASO,GAASnG,EAAQnN,EAAKhB,EAAGC,EAAGsU,GACjC,IAAKvT,EAAIwT,MAAMxU,EAAGC,GACd,OAAO,EACX,MAAMoC,EAAOrB,EAAIqB,KAAKrC,EAAGC,GACzB,GAAIoC,EAAKoS,YAAYC,EAAWC,iBAC5B,OAAO,EACX,GAAItS,EAAKuS,kBAAoBzG,EAAO2E,YAAcyB,EAC9C,OAAO,EAEX,GAAIpG,EAAOvN,MAAQiR,EAAagD,kBAC5B,IAAK7T,EAAIqB,KAAKrC,EAAGC,GAAG6U,SAChB,OAAO,OAEV,GAAI3G,EAAOvN,MAAQiR,EAAakD,mBAAoB,CACrD,IAAIC,GAAK,EAMT,GALA7Y,EAAI2O,GAAGmK,aAAajV,EAAGC,GAAG,CAACgL,EAAGC,KACtBlK,EAAIqB,KAAK4I,EAAGC,GAAG4J,WACfE,GAAK,MAEV,IACEA,EACD,OAAO,OAEV,GAAI7G,EAAOvN,MAAQiR,EAAaqD,iBAAkB,CACnD,IAAIF,GAAK,EACT,GAAIhU,EAAIqB,KAAKrC,EAAGC,GAAG6U,SACf,OAAO,EAMX,GALA3Y,EAAI2O,GAAGmK,aAAajV,EAAGC,GAAG,CAACgL,EAAGC,KACtBlK,EAAIqB,KAAK4I,EAAGC,GAAG4J,WACfE,GAAK,MAEV,IACEA,EACD,OAAO,EAGf,QAAI7G,EAAO2E,YAAcyB,IAAYlS,EAAK8S,QAAQhH,EAAO2E,YAKtD,SAASI,GAAgB/E,EAAQ6D,EAAKiB,GACzC,IAAIhI,EAAGC,EAAGkK,EAAKxR,EAAGyR,EAAIC,EAClBC,EAKJ,MAAMvU,EAAMgR,EAAIhR,IAChB,IAAIwU,EAAYrH,EAAOyE,MAAQ,EAC3B6C,EAAUtH,EAAO0E,WAAa,EAElC,GADAI,EAASyC,KAAK,IACTpB,GAASnG,EAAQnN,EAAKgR,EAAIhS,EAAGgS,EAAI/R,GAAG,GACrC,OAAO,EAEXgT,EAASjB,EAAIhS,GAAGgS,EAAI/R,GAAK2D,EAAI,EAC7B,IAAImD,EAAQ,EACZ,GAAIyO,EAQA,IAPAD,GAAa,EACTC,GAAa,MACbC,EAAUA,GAAW,KAErBA,GAAW,IACXA,EAAUD,GAEPD,GAAcC,EAAY,GAAG,CAGhC,IAFAD,GAAa,EACb3R,IACKqH,EAAI,EAAGA,EAAIjK,EAAIyD,MAAOwG,IACvB,IAAKC,EAAI,EAAGA,EAAIlK,EAAI2L,OAAQzB,IACxB,GAAI+H,EAAShI,GAAGC,IAAMtH,EAAI,EACtB,IAAKwR,EAAM,EAAGA,EAAM,EAAGA,IACnBC,EAAKpK,EAAI9O,EAAI2O,GAAG6K,KAAKP,GAAK,GAC1BE,EAAKpK,EAAI/O,EAAI2O,GAAG6K,KAAKP,GAAK,GACtBnC,EAASuB,MAAMa,EAAIC,KAClBrC,EAASoC,GAAIC,IACdtU,EAAImR,IAAIR,OAAO6D,IACflB,GAASnG,EAAQnN,EAAKqU,EAAIC,GAAI,KAC9BrC,EAASoC,GAAIC,GAAM1R,EACnB2R,GAAa,IACXxO,GAMtByO,GAAaC,EAGrB,OAAO1O,EAAQ,EAEZ,SAAS0M,GAAWzS,EAAKiS,EAAUrS,EAAQ,GAC9C,IAAIyR,GAAe,EACnB,MAAMuD,GAAYhV,EAAQiR,EAAa2B,gBAAkB3B,EAAa2B,aAwBtE,OAvBAP,EAASnO,SAAQ,CAACsB,EAAG6E,EAAGC,KACpB,IAAK9E,EACD,OACJ,MAAM/D,EAAOrB,EAAIqB,KAAK4I,EAAGC,GACrB0K,EACAvT,EAAKwT,SAGDjV,EAAQiR,EAAanS,aACrB2C,EAAKyT,WAAWhM,EAAYiM,KAE5BnV,EAAQiR,EAAapS,gBACrB4C,EAAKyT,WAAWhM,EAAYkM,QAE5BpV,EAAQiR,EAAarS,iBACrB6C,EAAKyT,WAAWhM,EAAYmM,SAE5BrV,EAAQiR,EAAatS,gBACrB8C,EAAKyT,WAAWhM,EAAYoM,SAGpC7D,GAAe,KAEZA,EAEJ,SAASgB,GAAkBrS,EAAKmV,GACnC,IAAI9D,GAAe,EAmBnB,OAlBArR,EAAIoV,WAAWC,IACX,IAAKF,EAAYE,EAAErW,GAAGqW,EAAEpW,GACpB,OACJ,MAAM+R,EAAMhR,EAAImR,IAAImE,gBAAgBD,EAAErW,EAAGqW,EAAEpW,GAAG,CAACD,EAAGC,KAC9C,IAAKe,EAAIwT,MAAMxU,EAAGC,GACd,OAAO,EACX,GAAIkW,EAAYnW,GAAGC,GACf,OAAO,EACX,MAAMoH,EAAIrG,EAAIqB,KAAKrC,EAAGC,GACtB,OAAQoW,EAAE/T,YAAY+E,MAEtB2K,GAAOA,EAAI,IAAM,GAAKA,EAAI,IAAM,IAChChR,EAAIuV,YAAYF,GAChBrV,EAAIwV,SAASxE,EAAI,GAAIA,EAAI,GAAIqE,GAE7BhE,GAAe,MAGhBA,EAEJ,SAASkB,GAAcvS,EAAKmV,GAC/B,IAAI9D,GAAe,EAmBnB,OAlBArR,EAAIyV,UAAUxL,IACV,IAAKkL,EAAYlL,EAAEjL,GAAGiL,EAAEhL,GACpB,OACJ,MAAM+R,EAAMhR,EAAImR,IAAImE,gBAAgBrL,EAAEjL,EAAGiL,EAAEhL,GAAG,CAACD,EAAGC,KAC9C,IAAKe,EAAIwT,MAAMxU,EAAGC,GACd,OAAO,EACX,GAAIkW,EAAYnW,GAAGC,GACf,OAAO,EACX,MAAMgD,EAAOjC,EAAIqB,KAAKrC,EAAGC,GACzB,OAAQgL,EAAE3I,YAAYW,MAEtB+O,GAAOA,EAAI,IAAM,GAAKA,EAAI,IAAM,IAChChR,EAAI0V,WAAWzL,GACfjK,EAAI2V,QAAQ3E,EAAI,GAAIA,EAAI,GAAI/G,GAE5BoH,GAAe,MAGhBA,ECtTJ,SAASuE,GAAgBtT,GAG5B,GAFI2K,MAAMC,QAAQ5K,KACdA,EAASA,EAAO,IACE,iBAAXA,EACP,MAAM,IAAIgE,MAAM,iCAAmChE,GACvD,OAAOuT,GAAW/H,UAAK5H,EAAW5D,GAE/B,SAASuT,GAAW9V,EAAIiR,EAAKC,GAChC,OAAOD,EAAIhR,IAAI8V,OAAOC,KAAKhW,EAAIiR,EAAKC,GCPjC,SAAS+E,GAAmBC,GAG/B,GAFIhJ,MAAMC,QAAQ+I,KACdA,EAAMA,EAAI,IACK,iBAARA,EACP,MAAM,IAAI3P,MAAM,oCAEpB,MAAM4P,EAAO,CACTjS,IAAKgS,GAET,OAAOE,GAAcrI,UAAK5H,EAAWgQ,GAElC,SAASC,GAAcD,EAAMlF,EAAKC,GACrC,MAAML,EAAOK,EAAIL,KACX3M,EAAMiS,EAAKjS,IACjB,UAAIA,GACAA,EAAIhB,QACJgO,EAAImF,QACHxF,KAGDzV,EAAIgV,QAAQkG,MAAMrF,EAAIhS,EAAGgS,EAAI/R,EAAGgF,EAAKgN,IAC9B,GCtBR,SAASqF,KACZ,OAAOC,GAAgBzI,UAAK5H,GAEzB,SAASqQ,GAAgBvF,EAAKC,GACjC,MACMuF,EADOxF,EAAIhR,IAAIqB,KAAK2P,EAAIhS,EAAGgS,EAAI/R,GAChBwX,UACrB,QAAKD,GAEExF,EAAIhR,IAAIuW,gBAAgBC,EAASxF,EAAIhS,EAAGgS,EAAI/R,EAAGgS,GCVnD,SAASyF,GAAgBT,GAC5B,IAAKA,EACD,MAAM,IAAI3P,MAAM,oCACpB,GAAmB,iBAAR2P,EACPA,EAAM,CAAElW,GAAIkW,QAEX,GAAIhJ,MAAMC,QAAQ+I,GACnBA,EAAM,CAAElW,GAAIkW,EAAI,SAEf,IAAKA,EAAIlW,GACV,MAAM,IAAIuG,MAAM,4CAEpB,MAAM9E,EAAOyU,EASb,OARIzU,EAAKzB,GAAGoB,SAAS,OACjBK,EAAKmV,eAAgB,GAErBnV,EAAKzB,GAAGoB,SAAS,OACjBK,EAAKoV,iBAAkB,EACvBpV,EAAKqV,gBAAiB,GAE1BrV,EAAKzB,GAAKyB,EAAKzB,GAAG2E,QAAQ,SAAU,IAC7BoS,GAAWhJ,KAAKtM,GAEpB,SAASsV,GAAW9F,EAAKC,GAC5B9R,KAAKqX,QAAUvF,EAAIuF,SAAW,EAE9B,OADqBxF,EAAIhR,IAAI+W,QAAQ/F,EAAIhS,EAAGgS,EAAI/R,EAAGE,KAAKY,GAAIZ,MCxBzD,SAAS6X,GAAiB1U,GAC7B,IAAI2U,EAAS,EACb,GAAK3U,EAGA,GAAsB,iBAAXA,EACZ2U,EAAS3U,MAER,CAAA,GAAsB,iBAAXA,EAUZ,MAAM,IAAIgE,MAAM,oCAAsC+G,KAAKC,UAAUhL,IARrE2U,EADc3U,EAAOK,MAAM,SACZuU,QAAO,CAACC,EAAK/R,KACxB,GAAiB,iBAANA,EACP,OAAO+R,EAAM/R,EAEjB,OAAO+R,GADOrO,EAAY1D,IAAM,KAEjC,QAZH6R,EAASnO,EAAYsO,WAiBzB,OAAOC,GAAYvJ,UAAK5H,EAAW+Q,GAEhC,SAASI,GAAYJ,EAAQjG,EAAKsG,GACrC,IAAKL,EACD,OAAO,EAEX,OADajG,EAAIhR,IAAIqB,KAAK2P,EAAIhS,EAAGgS,EAAI/R,GACzB6V,WAAWmC,GC3BpB,SAASM,GAAmBxX,GAM/B,GALIkN,MAAMC,QAAQnN,KACdA,EAAKA,EAAG,IACRA,GAAoB,iBAAPA,IACbA,EAAKA,EAAGA,KAEPA,IAAOA,EAAGkD,OACX,MAAM,IAAIqD,MAAM,2BACpB,OAAOkR,GAAc1J,UAAK5H,EAAWnG,GAElC,SAASyX,GAAczX,EAAIiR,EAAKC,GACnC,MAAMwG,EAAOC,EAAwB3X,GACrC,IAAK0X,EACD,MAAM,IAAInR,MAAM,2BAA6BvG,GAEjD,OAAO0X,EAAK5J,QAAQmD,EAAKC,GCdtB,SAAS0G,GAAkBnW,GAC9B,IAAKA,EACD,MAAM,IAAI8E,MAAM,2BACpB,IAAI4P,EAAO,GAIX,GAHoB,iBAAT1U,IACPA,EAAOA,EAAKmB,MAAM,KAAK3C,KAAK4C,GAAMA,EAAEC,UAEpCoK,MAAMC,QAAQ1L,GACd0U,EAAK/P,KAAO3E,EAAK,IAAM,MACvB0U,EAAK3Q,OAASpK,EAAIkK,MAAM3C,KAAKlB,EAAK,IAAM,OAEvC,CAAA,IAAIA,EAAK2E,OAAQ3E,EAAK+D,OAKvB,MAAM,IAAIe,MAAM,2BAA6B+G,KAAKC,UAAU9L,IAJ5D0U,EAAK/P,KAAO3E,EAAK2E,MAAQ,MACzB+P,EAAK3Q,OAASpK,EAAIkK,MAAM3C,KAAKlB,EAAK+D,QAAU,GAKhD,OAAOqS,GAAc9J,UAAK5H,EAAWgQ,GAElC,SAAS0B,GAActV,EAAQ0O,EAAKsG,GACvC,IAAKhV,EAAOiD,OACR,OAAO,EAEX,MAAMsD,EAAQmI,EAAIhR,IAAI6X,QAAQ7G,EAAIhS,EAAGgS,EAAI/R,GACzC,IAAK4J,EACD,OAAO,EAEX,MAAMG,EAAQH,EAAMG,MACd3C,EAAI2C,EAAM9D,IAAI,QACpB,IAAK8D,EAAM8O,OAAO,OAAQxV,EAAO6D,KAAM7D,EAAOiD,QAC1C,OAAO,EACX,MAAMwS,EAAI/O,EAAM9D,IAAI,QAMpB,OALI6S,EAAI1R,GAAK0R,EAAI/O,EAAMhE,IAAI,QAAU,IACjC7J,EAAIgV,QAAQkG,MAAMxN,EAAM7J,EAAG6J,EAAM5J,EAAG2Y,GAAcI,QAAQC,QAAS,CAC/DpP,MAAAA,KAGD,ECtCJ,SAASqP,GAAe1W,GAC3B,IAAKA,EACD,MAAM,IAAI8E,MAAM,wBACpB,MAAM4P,EAAO,GAIb,GAHoB,iBAAT1U,IACPA,EAAOA,EAAKmB,MAAM,KAAK3C,KAAK4C,GAAMA,EAAEC,UAEpCoK,MAAMC,QAAQ1L,GACd0U,EAAKiC,KAAO3W,EAAK,GACjB0U,EAAK/P,KAAO3E,EAAK,IAAM,MACvB0U,EAAK3Q,OAASpK,EAAIkK,MAAM3C,KAAKlB,EAAK,IAAM,OAEvC,CAAA,IAAIA,EAAK2E,OAAQ3E,EAAK+D,OAMvB,MAAM,IAAIe,MAAM,sCAAwC+G,KAAKC,UAAU9L,IALvE0U,EAAKiC,KAAO3W,EAAK2W,KACjBjC,EAAK/P,KAAO3E,EAAK2E,MAAQ,MACzB+P,EAAK3Q,OAASpK,EAAIkK,MAAM3C,KAAKwT,EAAK3Q,QAAU,GAKhD,OAAO6S,GAAWtK,UAAK5H,EAAWgQ,GAE/B,SAASkC,GAAW9V,EAAQ0O,EAAKsG,GACpC,IAAKhV,EAAOiD,OACR,OAAO,EAEX,MAAMsD,EAAQmI,EAAIhR,IAAI6X,QAAQ7G,EAAIhS,EAAGgS,EAAI/R,GACzC,IAAK4J,EACD,OAAO,EAIX,QADcA,EAAMG,MACT8O,OAAO,OAAQxV,EAAO6D,KAAM7D,EAAOiD,QPrBlDgH,EAAe,OAAQqJ,ICgBvBrJ,EAAe,MAAOyJ,IChBtBzJ,EAAe,kBAAmB+J,ICgBlC/J,EAAe,OAAQmK,ICCvBnK,EAAe,QAASyK,MCZF,UAAWO,MACX,SAAUA,MACV,KAAMA,ICsB5BK,GAAcI,QAAU,CACpBC,QAAS,iBAES,UAAWN,MCPX,OAAQO,uJZuNvB,SAAoBlL,GACvBlM,OAAOsM,QAAQJ,GAASlJ,SAAQ,EAAE/D,EAAIuC,MAClCyL,EAAQhO,EAAIuC,gBAGb,WACHxB,OAAOuX,OAAOzK,GAAkB9J,SAAS4J,GAAOA,EAAEkD,MAAO,0ca/PzDxB,MAAMrB,QAAQ,iBAAkB,cA2D7B,MAAM5Q,GAET4B,YAAYiB,EAAKhB,EAAGC,EAAGuP,GAYnB,GAXArP,KAAKmZ,WAAa,EAClBnZ,KAAKsX,UAAY,EACjBtX,KAAKH,GAAK,EACVG,KAAKF,GAAK,EAEVE,KAAKS,MAAQ,CAAEyB,KAAMqS,EAAWtW,cAChC+B,KAAK0Q,MAAQ,CAAC0I,EAAWC,MACzBrZ,KAAKa,IAAMA,EACXb,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKsZ,SAAWtd,EAAIoF,OAAOmY,YACvBlK,EAAY,CACZ,MAAM1B,EAAO6L,EAASnK,GACtBrP,KAAK4X,QAAQjK,IAGrB/N,YAAYkD,GACRA,EAAKpB,KAAK1B,KAAKsZ,UAEnB1Z,YAAYkX,GACR9W,KAAKsZ,SAAS5X,KAAKoV,GAEvB2C,wBACI,OAAOzZ,KAAKsU,YAAYC,EAAWmF,iBAEvCC,sBACI,OAAO3Z,KAAKsU,YAAYC,EAAWjW,eAEvCsB,KAAK4B,GACDG,OAAOC,OAAO5B,KAAKS,MAAOe,EAAMf,OAChCT,KAAKmZ,WAAa3X,EAAM2X,WACxBnZ,KAAK0Q,MAAM5M,OAAStC,EAAMkP,MAAM5M,OAChC,IAAK,IAAIgH,EAAI,EAAGA,EAAI9K,KAAK0Q,MAAM5M,SAAUgH,EACrC9K,KAAK0Q,MAAM5F,GAAKtJ,EAAMkP,MAAM5F,GAEhC9K,KAAKsX,UAAY9V,EAAM8V,UAGvBtX,KAAKa,IAAMW,EAAMX,IACjBb,KAAKH,EAAI2B,EAAM3B,EACfG,KAAKF,EAAI0B,EAAM1B,EACf0B,EAAMoY,YAAY5Z,KAAKsZ,UAE3B1Z,YAAY3D,GACR,SAAU+D,KAAKS,MAAMyB,KAAOjG,GAEhC2D,YAAY3D,GACR+D,KAAKS,MAAMyB,MAAQjG,EAEvB2D,cAAc3D,GACV+D,KAAKS,MAAMyB,OAASjG,EAExB2D,cAAc3D,EAAM4d,GAAgB,GAChC,IAAI9K,EAAIC,EACR,QAAIhP,KAAK0Q,MAAMoJ,MAAMrW,GAAMA,GAAKA,EAAEhD,MAAMC,OAASzE,OAE5C4d,OAED7Z,KAAK+Z,aACoB,QAApBhL,EAAK/O,KAAKiM,YAAyB,IAAP8C,OAAgB,EAASA,EAAGzN,cAAcrF,SAG3E+D,KAAKga,cACqB,QAArBhL,EAAKhP,KAAK0J,aAA0B,IAAPsF,OAAgB,EAASA,EAAG1N,cAAcrF,MAKpF2D,kBAAkBa,EAAOoZ,GAAgB,GACrC,OAAQ7Z,KAAKia,YAAYJ,GAAiBpZ,IAAUA,EAExDb,YAAY3D,GACR,OAAO+D,KAAK0Q,MAAMoJ,MAAMrW,GAAMA,GAAKA,EAAEhD,MAAMkN,KAAO1R,IAEtD2D,gBAAgBa,GACZ,OAAQT,KAAKka,YAAczZ,IAAUA,EAEzCb,gBAAgB3D,GACZ,OAAO+D,KAAK0Q,MAAMoJ,MAAMrW,GAAMA,GAAKA,EAAEhD,MAAM8O,SAAWtT,IAE1D2D,oBAAoBa,GAChB,OAAQT,KAAKma,gBAAkB1Z,IAAUA,EAE7Cb,WAAWkC,GACP,OAAO9B,KAAK0Q,MAAMoJ,MAAMnM,GAASA,GAAQA,EAAKyM,OAAOtY,KAEzDlC,eAAemC,GACX,OAAO/B,KAAK0Q,MAAMoJ,MAAMnM,GACbA,GAAQA,EAAK0M,WAAWtY,KAGvCnC,cAAcmC,GACV,OAAO/B,KAAK0Q,MAAMoJ,MAAMnM,GACbA,GAAQA,EAAK2M,UAAUvY,KAGtCnC,YACI,OAAOI,KAAKS,MAAMyB,KAEtBtC,YAAY2a,GAAe,GACvB,IAAIxL,EAAIC,EACR,IAAI/S,EAAO+D,KAAK0Q,MAAMqH,QAAO,CAACC,EAAKvU,IAAMuU,GAAOvU,EAAIA,EAAEhD,MAAMC,OAAS,IAAI,GASzE,OARI6Z,IACIva,KAAK+Z,YACL9d,IAA8B,QAApB8S,EAAK/O,KAAKiM,YAAyB,IAAP8C,OAAgB,EAASA,EAAGtO,MAAMC,SAAW,GAEnFV,KAAKga,aACL/d,IAA+B,QAArB+S,EAAKhP,KAAK0J,aAA0B,IAAPsF,OAAgB,EAASA,EAAGvO,MAAMC,SAAW,IAGrFzE,EAEX2D,YACI,OAAOI,KAAK0Q,MAAMqH,QAAO,CAACC,EAAKvU,IAAMuU,GAAOvU,EAAIA,EAAEhD,MAAMkN,KAAO,IAAI,GAEvE/N,gBACI,OAAOI,KAAK0Q,MAAMqH,QAAO,CAACC,EAAKvU,IAAMuU,GAAOvU,EAAIA,EAAEhD,MAAM8O,SAAW,IAAI,GAE3EiL,kBACI,SAAUxa,KAAKS,MAAMyB,KAAOqS,EAAWtW,cAE3Cuc,gBAAgBvU,GACRA,GACAjG,KAAKS,MAAMyB,MAAQqS,EAAWtW,aAC9B+B,KAAKS,MAAMyB,OAASqS,EAAWmF,gBAC/B1Z,KAAKa,IAAI2Z,aAAc,GAGvBxa,KAAKS,MAAMyB,OAASqS,EAAWtW,aAGvCwJ,cACI,SAAUzH,KAAKS,MAAMyB,KAAOqS,EAAWkG,SAE3C7a,cAAcW,GACV,MAAMoN,EAAO3N,KAAK0Q,MAAMnQ,GACxB,OAAOoN,EAAOA,EAAKyB,SAAWgK,EAAWC,KAAKjK,SAElDxP,kBACI,OAAOI,KAAK0Q,MAAMqH,QAAO,CAACC,EAAKvU,IAAM2B,KAAKS,IAAImS,EAAKvU,EAAIA,EAAE2L,SAAW,IAAIgK,EAAWC,KAAKjK,UAE5FxP,UAAUW,GACN,OAAOP,KAAK0Q,MAAMnQ,IAAU,KAEhCX,QAAQ+N,GACJ,OAAKA,GAECA,aAAgB+M,IAClB/M,EAAO6L,EAAS7L,IAEb3N,KAAK0Q,MAAM1O,SAAS2L,IAJhB3N,KAAK0Q,MAAMoJ,MAAMrW,GAAMA,IAMtC7D,aAAaW,GACT,MAAMkD,EAAIzD,KAAK0Q,MAAMnQ,GACrB,QAASkD,GAAKA,IAAM2V,EAAWC,KAEnCzZ,sBACI,OAAOI,KAAK0Q,MAAMqH,QAAO,CAACC,EAAKrK,IACtBA,GAEDA,EAAKyB,UAAY4I,EAAI5I,SACdzB,EAFAqK,GAIZoB,EAAWC,MAElB1L,WACI,OAAO3N,KAAK2a,sBAEhB/a,SAASgb,GACL5a,KAAK0Q,MAAM/L,SAASlB,GAAMA,GAAKmX,EAAGnX,KAEtC7D,mBAAmB3D,GACf,OAAO+D,KAAK0Q,MAAMmK,MAAMpX,GAAMA,GAAKA,EAAEhD,MAAMC,OAASzE,KAAS,KAEjE2D,aAAa3D,GACT,OAAO+D,KAAK0Q,MAAMmK,MAAMpX,GAAMA,GAAKA,EAAEhD,MAAMkN,KAAO1R,KAAS,KAE/D2D,iBAAiB3D,GACb,OAAO+D,KAAK0Q,MAAMmK,MAAMpX,GAAMA,GAAKA,EAAEhD,MAAM8O,SAAWtT,KAAS,KAEnE2D,eACI,OAAOI,KAAK0Q,MAAMoJ,MAAMrW,GAAMA,GAAKA,EAAEuH,iBAEzCpL,gBACI,OAAQI,KAAK0Q,MAAMoJ,MAAMrW,GAAMA,GAAKA,EAAEqX,oBACjC9a,KAAK0Q,MAAMoJ,MAAMrW,GAAMA,GAAKA,EAAEqM,YAAYL,EAAWsL,YAE9Dnb,aACI,OAAOI,KAAK0Q,MAAMoJ,MAAMrW,GAAMA,GAAKA,EAAEoM,eAEzCjQ,gBACI,OAAOI,KAAK0Q,MAAMoJ,MAAMrW,GAAMA,GAAKA,EAAEgR,kBAEzC7U,YAAYW,GACR,OAAOP,KAAK0Q,MAAMoJ,MAAMrW,GAAMA,MACvBA,EAAEhD,MAAMkN,KAAOqN,EAAW/d,KAAKge,wBAClCxX,EAAElD,OAASA,IAGnBX,SACI,OAAOI,KAAK0Q,MAAMd,OAAOnM,IAAOA,GAAKA,IAAM2V,EAAWC,OAE1DzZ,aACI,OAAQI,KAAK6P,aAEjBjQ,SACI,OAAOI,KAAKkb,kBAAkBna,EAAajE,cAE/C8C,WACI,OAAOI,KAAK8P,YAAYL,EAAWhS,cAEvCmC,UAEI,OAASI,KAAKsB,cAAcP,EAAaoa,uBACpCnb,KAAK8P,YAAYL,EAAWM,mBAErCnQ,aACI,OAAOI,KAAKsU,YAAYC,EAAW3V,cAEvCgB,qBACI,OAAOI,KAAKsB,cAAcP,EAAaqa,qBAU3Cxb,QAAQ+N,EAAMtL,EAAO,IACjB,KAAMsL,aAAgB+M,IAClB/M,EAAO6L,EAAS7L,KAEZ,OAAO,EAEf,MAAM3F,EAAUhI,KAAK0Q,MAAM/C,EAAKpN,QAAU6Y,EAAWC,KACrD,GAAIrR,IAAY2F,EACZ,OAAO,EACX,IAAKtL,EAAKmV,eAMFxP,EAAQoH,SAAWzB,EAAKyB,SACxB,OAAO,EAGf,GAAIpP,KAAKqb,YAAY1N,EAAKpN,OACtB,OAAO,EACX,GAAI8B,EAAKqV,gBAAkB1X,KAAK+Z,UAC5B,OAAO,EACX,GAAI1X,EAAKoV,iBAAmBzX,KAAKga,WAC7B,OAAO,EACX,GAAI3X,EAAKiZ,sBAAwBtb,KAAKub,kBAAoB5N,EAAKyB,SAC3D,OAAO,EAEX,GAAIzB,EAAKpN,MAAQoJ,EAAYoM,QAAUpI,EAAK0B,WAAY,CACpD,MAAMmM,EAASxb,KAAKyb,UAAU9R,EAAYoM,QACrCyF,GAAUA,IAAWpC,EAAWC,OACjCrZ,KAAK0Q,MAAM,GAAK8I,EAAS7L,EAAK0B,aA6BtC,OA1BArP,KAAK0Q,MAAM/C,EAAKpN,OAASoN,EACzB3N,KAAKwa,aAAc,EACf7M,EAAKrM,cAAcP,EAAazE,mBAChC0D,KAAK2V,WAAWhM,EAAYmM,SAE5BzT,EAAKgV,UACLrX,KAAKsX,UAAYjV,EAAKgV,SAEtBrP,EAAQxH,QAAUmN,EAAKnN,QACvBR,KAAKa,IAAIL,MAAMkb,kBAAmB,GAElC1T,EAAQ1G,cAAcP,EAAa3E,qBACnCuR,EAAKrM,cAAcP,EAAa3E,oBAChC4D,KAAKa,IAAI8a,WAAWC,EAAUC,2BAE9BlO,EAAKmC,YAAYL,EAAW9R,YAC5BqC,KAAK8b,YAAYvH,EAAWwH,wBAUzB,EAEXnc,WAAW+N,GACP3N,KAAK0Q,MAAM,GAAK0I,EAAWC,KAC3B,IAAK,IAAIvO,EAAI,EAAGA,EAAI9K,KAAK0Q,MAAM5M,SAAUgH,EACrC9K,KAAK0Q,MAAM5F,GAAK,KAEhB6C,GACA3N,KAAK4X,QAAQjK,GAEjB3N,KAAKwa,aAAc,EAEvB5a,MAAM+N,GACF3N,KAAK0Q,MAAQ,CAAC0I,EAAWC,MACzBrZ,KAAKS,MAAMyB,KAAO,EAClBlC,KAAKwa,aAAc,EACnBxa,KAAKmZ,WAAa,EAClBnZ,KAAKsX,UAAY,EACb3J,GACA3N,KAAK4X,QAAQjK,GAEjB3N,KAAKsZ,SAAS0C,WAElBpc,WAAWW,GACP,OAAa,GAATA,GACAP,KAAK0Q,MAAM,GAAK0I,EAAWC,KAC3BrZ,KAAKwa,aAAc,GACZ,GAEoB,OAAtBxa,KAAK0Q,MAAMnQ,KAChBP,KAAK0Q,MAAMnQ,GAAS,KACpBP,KAAKwa,aAAc,GACZ,GAIf5a,qBAAqBqc,EAAUC,EAAe,GAC1C,IAAK,IAAIpR,EAAI,EAAGA,EAAI9K,KAAK0Q,MAAM5M,SAAUgH,EAAG,CACxC,MAAM6C,EAAO3N,KAAK0Q,MAAM5F,GACnB6C,IAEAA,EAAKmC,YAAYmM,KAElBC,IAAiBvO,EAAKwO,gBAAgBD,IAE1Clc,KAAK2V,WAAW7K,MAIxBlL,cAAcgb,GACV5a,KAAK0Q,MAAM/L,SAASgJ,IACZA,GAAQA,EAAKnN,OACboa,EAAGjN,EAAKnN,UAIpBZ,eAAeqD,GACX,OAAOjD,KAAK0Q,MAAMmK,MAAMpX,GAAMA,MAAAA,OAA6B,EAASA,EAAE+L,UAAUvM,MAAU,KAE9FrD,UAAUwc,EAAOtK,EAAM,IAEnB,IAAII,GAAe,EAEnB,IAAK,MAAMvE,KAAQ3N,KAAK0Q,MAAO,CAC3B,IAAK/C,IAASA,EAAKE,QACf,SACJ,MAAMwO,EAAK1O,EAAKE,QAAQuO,GACxB,GAAIC,EAAI,CACMrc,KAAKsc,UAAUD,EAAIvK,KAEzBI,GAAe,IAI3B,OAAOA,EAEXtS,UAAUoO,EAAQ8D,GACQ,iBAAX9D,IACPA,EAASuK,EAAwBvK,IAErC,IAAIkE,GAAe,EAMnB,OALIlE,IAEAkE,EAAelE,EAAOU,QAAQ1O,KAAM8R,IAGjCI,EAEXtS,UAAUqD,GACN,IAAK,IAAI0K,KAAQ3N,KAAK0Q,MAClB,GAAI/C,GAAQA,EAAK6B,UAAUvM,GACvB,OAAO,EAEf,OAAO,EAGXrD,UACI,OAAOI,KAAKsU,YAAYC,EAAWnW,UAEvC6N,WACI,OAAOjM,KAAKa,IAAI0b,OAAOvc,KAAKH,EAAGG,KAAKF,GAExCF,WAAWoM,GACP,OAAO,EAEXpM,cAAcoM,GACV,OAAO,EAEXpM,SAASoM,GAIL,OAHAhM,KAAK8b,YAAYvH,EAAWnW,UAC5B4B,KAAKwa,aAAc,GAEZ,EAEX5a,YAAYqM,GACR,IAAIuQ,GAAW,EACXC,GAAc,EAYlB,OAXAzc,KAAKa,IAAIqI,MAAMvE,SAAQ,CAACkK,EAAK3J,KACrB2J,IAAQ5C,EACRwQ,EAAavX,EAER2J,EAAIhP,IAAMG,KAAKH,GAAKgP,EAAI/O,IAAME,KAAKF,IACxC0c,GAAW,MAGdA,GACDxc,KAAK0c,cAAcnI,EAAWnW,YAE9Bqe,EAAa,KAEjBzc,KAAKwa,aAAc,GAEZ,GAGX5a,WACI,OAAOI,KAAKsU,YAAYC,EAAWvV,WAEvCY,YACI,OAAOI,KAAKsU,YAAYC,EAAWxV,YAEvC2K,YACI,OAAO1J,KAAKa,IAAI6X,QAAQ1Y,KAAKH,EAAGG,KAAKF,GAEzCF,YAAY+c,GACR,OAAO,EAEX/c,eAAe+c,GACX,OAAO,EAEX/c,UAAU8J,GAON,OANA1J,KAAK8b,YAAYvH,EAAWvV,WACxB0K,EAAMkT,YACN5c,KAAK8b,YAAYvH,EAAWxV,YAEhCiB,KAAKwa,aAAc,GAEZ,EAEX5a,aAAa8J,GACT,IAAIsQ,GAAW,EACXyC,GAAc,EAYlB,OAXAzc,KAAKa,IAAIgc,OAAOlY,SAAQ,CAACkK,EAAK3J,KACtB2J,IAAQnF,EACR+S,EAAavX,EAER2J,EAAIhP,IAAMG,KAAKH,GAAKgP,EAAI/O,IAAME,KAAKF,IACxCka,GAAW,MAGdA,GACDha,KAAK0c,cAAcnI,EAAWvV,UAAYuV,EAAWxV,cAErD0d,EAAa,KAEjBzc,KAAKwa,aAAc,GAEZ,GAEX5a,QACI,SAAUI,KAAKS,MAAMyB,KAAOqS,EAAWuI,QAE3CC,SACI,OAAO/c,KAAKa,IAAImc,KAAKhd,KAAKH,EAAGG,KAAKF,GAEtCF,OAAOqd,GACHjd,KAAK8b,YAAYvH,EAAWuI,QAC5B9c,KAAKwa,aAAc,EAEvB5a,UAAUqd,GACDjd,KAAK+c,IACN/c,KAAK0c,cAAcnI,EAAWuI,QAElC9c,KAAKwa,aAAc,EAEvB5a,iBACI,OAAOI,KAAK2a,sBAAsBrX,YAEtC1D,YACI,OAAOI,KAAK2a,sBAAsBtX,OAEtCzD,QAAQyC,EAAO,IACX,OAAOrC,KAAK2a,sBAAsBrY,QAAQD,GAE9CzC,OACI,GAAII,KAAKga,WAAY,CACjB,MAAMtQ,EAAQ1J,KAAKa,IAAI6X,QAAQ1Y,KAAKH,EAAGG,KAAKF,GAC5C,GAAI4J,GAASA,EAAMtI,OAAO8P,GACtB,OAAOxH,EAAMtI,OAAO8P,GAE5B,GAAIlR,KAAK+Z,UAAW,CAChB,MAAM9N,EAAOjM,KAAKa,IAAI0b,OAAOvc,KAAKH,EAAGG,KAAKF,GAC1C,GAAImM,GAAQA,EAAK7K,OAAO8P,GACpB,OAAOjF,EAAK7K,OAAO8P,GAE3B,OAAIlR,KAAK8P,YAAYL,EAAWsL,UACrB,IAEJ/a,KAAK2a,sBAAsBvZ,OAAO8P,IAAM,IAEnDtR,WAAW+C,EAAQC,GAEf,OADcD,EAAO0B,SAASzB,EAAO/C,EAAI,EAAG+C,EAAO9C,EAAG8C,EAAO0B,MAAQ,EAAGtE,KAAKsC,UAAW,kBAG5F1C,WACI,MAAO,UAAUI,KAAKH,KAAKG,KAAKF,KCrkBjC,MAAMod,GACTtd,YAAYiB,EAAKoC,EAAO,SACpBjD,KAAKyH,SAAU,EACfzH,KAAKa,IAAMA,EACXb,KAAKO,OAAS,EACdP,KAAKmd,WAAa,GAClBnd,KAAKiD,KAAOA,EAEhBrD,KAAKmM,IACLnM,SACAA,QAAQwd,EAAIC,EAAIC,EAAOrZ,GACnB,OAAO,EAEXrE,UAAUwd,EAAIC,GACV,OAAO,EAEXzd,SAASwd,EAAIC,EAAIV,GACb,OAAO,EAEX/c,WAAWwd,EAAIC,EAAIV,GACf,OAAO,EAEX/c,YAAY+c,GACR,OAAO,EAEX/c,QAAQwd,EAAIC,EAAIrR,GACZ,OAAO,EAEXpM,UAAUwd,EAAIC,EAAIrR,GACd,OAAO,EAEXpM,WAAWoM,GACP,OAAO,EAGXpM,KAAK2d,GACD,OAAO,GCnCR,MAAMC,WAAkBN,GAC3Btd,YAAYiB,EAAKoC,EAAO,QACpB8F,MAAMlI,EAAKoC,GAEfrD,QAAQC,EAAGC,EAAG6N,EAAMtL,GAEhB,OADarC,KAAKa,IAAIqB,KAAKrC,EAAGC,GAClB8X,QAAQjK,EAAMtL,GAE9BzC,UAAUC,EAAGC,GAET,OADaE,KAAKa,IAAIqB,KAAKrC,EAAGC,GAClB6V,WAAW3V,KAAKO,OAEhCX,KAAK2d,GAgBD,OAAO,GC1BR,MAAME,WAAiBD,GAC1B5d,YAAYiB,EAAKoC,EAAO,OACpB8F,MAAMlI,EAAKoC,GACXjD,KAAK0d,OAAS1hB,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,OAAQ,GAExD5M,QACII,KAAK0d,OAAOnI,KAAK,GAErB3V,QAAQC,EAAGC,EAAG6N,EAAMtL,EAAO,IACvB,IAAKA,EAAKqb,OACN,OAAO,EAEX,OADa1d,KAAKa,IAAIqB,KAAKrC,EAAGC,GACrB2b,UAAU9N,EAAKpN,SAAWoN,GAC/B3N,KAAK0d,OAAO7d,GAAGC,IAAMuC,EAAKqb,QACnB,KAEN3U,MAAM6O,QAAQ/X,EAAGC,EAAG6N,EAAMtL,KAG/BrC,KAAK0d,OAAO7d,GAAGC,GAAKuC,EAAKqb,OACzB1d,KAAKyH,SAAU,GACR,GAEX7H,UAAUC,EAAGC,GAET,QADaE,KAAKa,IAAIqB,KAAKrC,EAAGC,GACrB6V,WAAW3V,KAAKO,SACrBP,KAAK0d,OAAO7d,GAAGC,GAAK,GACb,GAIfF,KAAK4B,GACDxB,KAAK0d,OAAOhc,KAAKF,EAAMkc,QACvB1d,KAAKyH,QAAUjG,EAAMiG,QAEzB7H,KAAK2d,GACD,IAAKvd,KAAKyH,QACN,OAAO,EACXzH,KAAKyH,SAAU,EACf,MAAMkW,EAAiB3d,KAAK0d,OAO5B,OANA1d,KAAK0d,OAAS1hB,EAAI8N,KAAKyC,MAAMvM,KAAKa,IAAIyD,MAAOtE,KAAKa,IAAI2L,QAEtDxM,KAAKmP,UAAUwO,GAEf3d,KAAK4d,OAAOD,GACZ3hB,EAAI8N,KAAKC,KAAK4T,IACP,EAEX/d,UAAU8d,GACNA,EAAOjR,QAAO,CAACxG,EAAGpG,EAAGC,KACjB,IAAKmG,EACD,OAAO,EACX,MAAM0H,EAAO3N,KAAKa,IAAIqB,KAAKrC,EAAGC,GAAG2b,UAAUzb,KAAKO,OAChD,GAAIoN,GAAQA,EAAKwB,UAAW,CACxB,IAAI0O,EAAIzY,KAAKS,IAAI,GAAMI,EAAI0H,EAAKwB,UAAa,KAC7ClJ,EAAIb,KAAKS,IAAI,EAAGI,EAAI4X,GAQxB,OANI5X,EACAjG,KAAKyH,SAAU,EAGfzH,KAAK8d,UAAUje,EAAGC,GAEfmG,KAGfrG,YAAY8d,GACR,OAAOtY,KAAKC,MAA6B,GAAvBD,KAAKkB,IAAIoX,EAAQ,KAEvC9d,iBAAiBC,EAAGC,EAAG6d,GACnB,IAAII,EAAQ,EACRnX,EAAQ,EACRoX,EAAgB,EACpB,MAAM9b,EAAOlC,KAAKa,IAAIqB,KAAKrC,EAAGC,GAC9B,IAAIme,EAAe/b,EAAKuZ,UAAUzb,KAAKO,OACnC2d,EAAcD,EAClB,GAAI/b,EAAKZ,cAAcP,EAAaxE,cAKhC,OAJAyD,KAAK0d,OAAO7d,GAAGC,GAAK,OAChB6d,EAAe9d,GAAGC,IAClBE,KAAK8d,UAAUje,EAAGC,IAI1B,IAAK,IAAIgL,EAAI1F,KAAKS,IAAI,EAAGhG,EAAI,GAAIiL,EAAI1F,KAAKkB,IAAIzG,EAAI,EAAG8d,EAAerZ,SAAUwG,EAC1E,IAAK,IAAIC,EAAI3F,KAAKS,IAAI,EAAG/F,EAAI,GAAIiL,EAAI3F,KAAKkB,IAAIxG,EAAI,EAAG6d,EAAenR,UAAWzB,EAAG,CAC9E,MAAM9E,EAAI0X,EAAe7S,GAAGC,GACvB7I,EAAKZ,cAAcP,EAAaxE,kBAC/BqK,EACEX,EAAI+X,IACJA,EAAgB/X,EAChBiY,EAAcle,KAAKa,IAAIqB,KAAK4I,EAAGC,GAAG0Q,UAAUzb,KAAKO,SAGzDwd,GAAS9X,EAGjB,MAAMA,EAAIb,KAAKC,MAAe,GAAR0Y,EAAcnX,GAAS,GAC7C5G,KAAK0d,OAAO7d,GAAGC,GAAKmG,EAChBA,EAAI,GAAKiY,IACJD,GAAgBA,IAAiBC,GAClChc,EAAK0V,QAAQsG,IAGjBjY,EAAI,IACJ/D,EAAKsY,aAAc,GAG3B5a,OAAO+d,GACH,IAAK,IAAI9d,EAAI,EAAGA,EAAI8d,EAAerZ,QAASzE,EACxC,IAAK,IAAIC,EAAI,EAAGA,EAAI6d,EAAenR,SAAU1M,EACzCE,KAAKme,iBAAiBte,EAAGC,EAAG6d,IC7G5C,MAAM7hB,GAAQ6N,EACRyU,GAAcrd,EACdsd,GAAY5O,EACZ6O,GAAgBrN,EAChBsN,GAAYhK,EACX,MAAMiK,WAAkBhB,GAC3B5d,YAAYiB,EAAKoC,EAAO,QACpB8F,MAAMlI,EAAKoC,GAEfrD,KAAK2d,GAGD,IAAK,IAAI1d,EAAI,EAAGA,EAAIG,KAAKa,IAAIyD,QAASzE,EAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIE,KAAKa,IAAI2L,SAAU1M,EAAG,CACzBE,KAAKa,IAAIqB,KAAKrC,EAAGC,GACzB4c,cAAc6B,GAAUxC,uBAIrC,IAAK,IAAIlc,EAAI,EAAGA,EAAIG,KAAKa,IAAIyD,QAASzE,EAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIE,KAAKa,IAAI2L,SAAU1M,EAAG,CACtC,MAAMoC,EAAOlC,KAAKa,IAAIqB,KAAKrC,EAAGC,GAC9B,GAAIoC,EAAK4N,YAAYuO,GAAU1gB,cACzBuE,EAAKzB,MAAMyB,KAAOqc,GAAUxC,uBAAwB,CACtD/b,KAAKye,aAAa5e,EAAGC,GAAG,GACxB,IAAK,IAAI+d,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,MAAM5I,EAAMjZ,EAAI2O,GAAG6K,KAAKqI,GACxB7d,KAAKye,aAAa5e,EAAIoV,EAAI,GAAInV,EAAImV,EAAI,MAKtD,OAAO,EAEXrV,aAAaC,EAAGC,EAAG4e,GAAe,GAC9B,IAAIC,EAAiB,EAAGC,EAA4B,EAAGC,EAAyB,EAC5EC,GAAc,EAAOC,GAAqB,EAC9C,MAAM7c,EAAOlC,KAAKa,IAAIqB,KAAKrC,EAAGC,GAC9B,IAAKoC,EAAK4N,YAAYuO,GAAU3O,gBAC5B,OAAO,EAoBX,GAjBAxN,EAAK8c,UAAUrR,IACPA,EAAKmC,YAAYuO,GAAUY,sBAC3BtR,EAAKyB,SAAWwP,IAChBA,EAA4BjR,EAAKyB,aAIzClN,EAAK8c,UAAUrR,IACX,GAAIA,EAAKlN,MAAMkN,KAAO0Q,GAAU3O,iBAC3B/B,EAAKpN,QAAUzE,GAAM8Z,KAClBjI,EAAKyB,UAAYwP,GAA4B,CACjD,MAAM5Q,EAASkR,EAAYvR,EAAKE,QAAQsR,MACpCnR,GAAUA,EAAOwD,OAASmN,IAC1BA,EAAiB3Q,EAAOwD,YAIhCkN,GACCC,GAAkB3e,KAAKa,IAAImR,IAAIR,OAAOmN,EAAgB,KAAS,CAEhEG,GAAc,EAEV5c,EAAKia,gBAAgBmC,GAAcc,wBACnCpjB,EAAI2O,GAAGmK,aAAajV,EAAGC,GAAG,CAACuf,EAAIC,KAC3B,MAAM1G,EAAI5Y,KAAKa,IAAIqB,KAAKmd,EAAIC,IACxB1G,EAAEtX,cAAc8c,GAAY7hB,eAC5Bqc,EAAE9I,YAAYuO,GAAU1gB,YACxBib,EAAEuD,gBAAgBmC,GAAcc,0BAC9BP,KAGNA,GAA0B,IAC1BE,GAAqB,IAG7B,IAAI3C,EAAQ,OACR2C,GAAsB7c,EAAKsN,UAAU,aACrC4M,EAAQ,WAWZla,EAAKqd,UAAUnD,EAAO,CAClBrK,OAAO,IAEX7P,EAAKsY,aAAc,EAEvB,OAAOsE,4FCjGf,MAAMU,GAAiBxjB,EAAIiU,MAAMrB,QAAQ,YAAa,CAAC,IAAK,IAAK,IAC1D,MAAM6Q,GACT7f,mBAAmB8f,GACf,OAAO,EAEX9f,SAASkD,EAAMjC,EAAKwB,EAAO,IACvB,MAAMM,EAASG,aAAgB9G,EAAI2G,OAAOgd,OAAS7c,EAAOA,EAAKH,OACzDid,EAAUvd,EAAKud,SAAW,EAC1BC,EAAUxd,EAAKwd,SAAW,EAC1B3b,EAAQ,IAAIlI,EAAIoF,OAAO+C,MAC7B,IAAK,IAAItE,EAAI,EAAGA,EAAI8C,EAAO2B,QAASzE,EAChC,IAAK,IAAIC,EAAI,EAAGA,EAAI6C,EAAO6J,SAAU1M,EACjC,GAAIe,EAAIwT,MAAMxU,EAAI+f,EAAS9f,EAAI+f,GAAU,CACrC,MAAM3d,EAAOrB,EAAIqB,KAAKrC,EAAI+f,EAAS9f,EAAI+f,GACvC7f,KAAK8f,SAAS5b,EAAOrD,EAAKqB,EAAMG,EAAK8G,KACrCxG,EAAOK,WAAWnD,EAAGC,EAAGoE,IAKxCtE,SAASkD,EAAMjC,EAAKqB,EAAMiH,GACtBrG,EAAKkZ,WAEL,MAAM+D,GAAgB7d,EAAKoS,YAAYC,EAAWmF,iBAC9CxX,EAAKsY,aAAeuF,GACpB/f,KAAKggB,cAAcld,EAAMjC,EAAKqB,GAC9BA,EAAK+d,YAAYnd,GACjBZ,EAAKsY,aAAc,EACnBtY,EAAK4Z,YAAYvH,EAAWmF,kBAG5BxX,EAAK0X,YAAY9W,GAErB9C,KAAKkgB,WAAWpd,EAAMZ,EAAMiH,GAC5B,IAAIgX,EAAWje,EAAKZ,cAAcP,EAAaqf,oBAAsBrf,EAAa3E,mBAAmB,GAarG,OAZI8F,EAAKoS,YAAYC,EAAW8L,YAC5Bvd,EAAKqO,GAAKrO,EAAKqO,GAAGmP,IAAId,GAAgB,IACtCW,GAAW,GAENje,EAAKoS,YAAYC,EAAWgM,kBACjCzd,EAAKqO,GAAKrO,EAAKqO,GAAGmP,IAAId,GAAgB,IACtCW,GAAW,EACXrd,EAAK0d,UAELL,KACCrd,EAAKqN,GAAIrN,EAAKqO,IAAMnV,EAAIiU,MAAMkQ,SAASrd,EAAKqN,GAAIrN,EAAKqO,MAEnD,EAiCXvR,cAAckD,EAAMjC,EAAKqB,GACrB,MAAMsZ,EAAStZ,EAAKwO,MAAM/G,EAAYoM,QAChC0K,EAAUve,EAAKwO,MAAM/G,EAAYmM,SACjC4K,EAASxe,EAAKwO,MAAM/G,EAAYkM,QAChC8K,EAAMze,EAAKwO,MAAM/G,EAAYiM,KAQnC,GAPA9S,EAAKE,WAAWwY,EAAOpa,QACnBqf,GACA3d,EAAKE,WAAWyd,EAAQrf,QAExBsf,GACA5d,EAAKE,WAAW0d,EAAOtf,QAEvBc,EAAK6X,UAAW,CAChB,MAAM9N,EAAOpL,EAAI0b,OAAOra,EAAKrC,EAAGqC,EAAKpC,GACjCmM,GACAA,EAAK2U,SAAS9d,GAEtB,GAAIZ,EAAK8X,WAAY,CACjB,MAAMtQ,EAAQ7I,EAAI6X,QAAQxW,EAAKrC,EAAGqC,EAAKpC,GACnC4J,GACAA,EAAMkX,SAAS9d,GAEvB,GAAI6d,EAAK,CACL,MAAMvP,EAAUpV,EAAIgW,IAAI6O,SAASC,OAAO,IAAM,GAC9Che,EAAKE,WAAW2d,EAAIvf,OAAQgQ,GAEhC,GAAIlP,EAAK6e,QAAS,CACd,MAAMhE,EAAKlc,EAAImc,KAAK9a,EAAKrC,EAAGqC,EAAKpC,GAC7Bid,GACAja,EAAKE,WAAW+Z,EAAG3b,QAEvB0B,EAAKke,OACL9e,EAAK4Z,YAAYvH,EAAW0M,cAG5B/e,EAAKwa,cAAcnI,EAAW0M,cAElCne,EAAKoe,OAETthB,WAAWkD,EAAMZ,EAAMiH,GACnB,MAAMgY,GAAahY,GAAOA,EAAIgC,mBAAmBjJ,EAAKrC,EAAGqC,EAAKpC,GACxDshB,GAAcjY,GAAOA,EAAIiY,WAAWlf,EAAKrC,EAAGqC,EAAKpC,GACjDU,EAAQ0B,EAAKrB,IAAIL,MAAM6gB,SAASnf,EAAKrC,EAAGqC,EAAKpC,GACnDgD,EAAKwe,SAAS9gB,GAGV2I,GAAOA,EAAIoY,SAASrf,EAAKrC,EAAGqC,EAAKpC,GACjCgD,EAAK0d,SAECW,IACFC,EACAte,EAAK0e,MAAM,IAGX1e,EAAKkZ,aChId,MAAM9c,GACTU,YAAY0E,EAAOkI,EAAQnK,EAAO,IAI9BrC,KAAKgS,IAAMhW,EAAIgW,IAAIC,OAEnBjS,KAAK6c,OAAS,GACd7c,KAAKkJ,MAAQ,GACblJ,KAAK+c,GAAK,GACV/c,KAAKyhB,YAAc,GACnBzhB,KAAK2W,OAAS,IAAI3a,EAAI2a,OAAO+K,aAC7B1hB,KAAKS,MAAQ,CAAEI,IAAK,GACpBb,KAAK8X,OAAS,GACd9X,KAAKmd,WAAa,CAAEwE,KAAM,EAAGC,aAAc,GACvCvf,EAAKzB,KACLZ,KAAKmd,WAAWvc,GAAKyB,EAAKzB,IAE9BZ,KAAK6hB,OAASxf,EAAKwf,QAAU,IAAIpC,GACjCzf,KAAK8hB,MAAQ9lB,EAAI8N,KAAKvG,KAAKe,EAAOkI,GAAQ,CAAC3M,EAAGC,IAAM,IAAI9B,GAAKgC,KAAMH,EAAGC,KAMlEuC,EAAKsf,OACL3hB,KAAKmd,WAAWwE,KAAOtf,EAAKsf,KAC5B3hB,KAAKgS,IAAMhW,EAAIgW,IAAIzO,KAAKlB,EAAKsf,OAEjC3hB,KAAKQ,MAAQ,IAAIxE,EAAIwE,MAAMuhB,YAAY/hB,KAAMqC,GAE7CrC,KAAKgiB,aAETL,WACI,OAAO3hB,KAAKmd,WAAWwE,KAE3BA,SAAS1b,GACLjG,KAAKmd,WAAWwE,KAAO1b,EACvBjG,KAAKgS,IAAMhW,EAAIgW,IAAIzO,KAAK0C,GAE5B3B,YACI,OAAOtE,KAAK8hB,MAAMxd,MAEtBkI,aACI,OAAOxM,KAAK8hB,MAAMtV,OAUtB5M,aACII,KAAKiiB,SAAStY,EAAYoM,OAAQ,IAAImM,GAAgBliB,KAAM,WAC5DA,KAAKiiB,SAAStY,EAAYmM,QAAS,IAAIqM,GAAgBniB,KAAM,YAC7DA,KAAKiiB,SAAStY,EAAYiM,IAAK,IAAIwM,GAAepiB,KAAM,QAE5DJ,SAASW,EAAO8hB,GACS,iBAAV9hB,IACPA,EAAQoJ,EAAYpJ,IAExB8hB,EAAM9hB,MAAQA,EACdP,KAAK8X,OAAOvX,GAAS8hB,EAEzBziB,YAAYW,GAIR,GAHqB,iBAAVA,IACPA,EAAQoJ,EAAYpJ,KAEnBA,EACD,MAAM,IAAI4G,MAAM,4CACbnH,KAAK8X,OAAOvX,GAEvBX,SAASW,GAIL,MAHqB,iBAAVA,IACPA,EAAQoJ,EAAYpJ,IAEjBP,KAAK8X,OAAOvX,IAAU,KAEjCX,MAAMC,EAAGC,GACL,OAAOE,KAAK8hB,MAAMzN,MAAMxU,EAAGC,GAE/BF,aAAaC,EAAGC,GACZ,OAAY,GAALD,GAAe,GAALC,GAAUD,GAAKG,KAAKsE,MAAQ,GAAKxE,GAAKE,KAAKwM,OAAS,EAEzE5M,KAAKC,EAAGC,GACJ,OAAOE,KAAK8hB,MAAMjiB,GAAGC,GAEzBF,MAAMC,EAAGC,GACL,OAAOE,KAAK8hB,MAAMjiB,GAAGC,GAEzBF,IAAIC,EAAGC,GACH,OAAOE,KAAK8hB,MAAM/b,IAAIlG,EAAGC,GAE7BF,SAASgb,GACL5a,KAAK8hB,MAAMnd,SAAQ,CAACzC,EAAMrC,EAAGC,IAAM8a,EAAG1Y,EAAMrC,EAAGC,EAAGE,QAGtDJ,QAAQC,EAAGC,GACP,OAAOE,KAAKkC,KAAKrC,EAAGC,GAAGia,UAE3Bna,OAAOC,EAAGC,GACN,OAAOE,KAAKkJ,MAAM2R,MAAM/P,GAAMA,EAAEwX,KAAKziB,EAAGC,MAAO,KAEnDF,SAASgb,GACL5a,KAAKkJ,MAAMvE,QAAQiW,GAEvBhb,QAAQC,EAAGC,EAAGmM,EAAMsW,GAAc,GAC9B,IAAKviB,KAAKqU,MAAMxU,EAAGC,GACf,OAAO,EACX,MAAMoC,EAAOlC,KAAK0f,MAAM7f,EAAGC,GAE3B,GAAIoC,EAAKsgB,SAASvW,GAAO,CACrB,MAAM/G,EAAQlF,KAAKkJ,MAAMwE,QAAQzB,GAWjC,OAVI/G,EAAQ,GACRlF,KAAKkJ,MAAMnE,KAAKkH,GAEpBA,EAAKhL,SAASjB,KAAMH,EAAGC,GACnByiB,GACAviB,KAAKyiB,oBAAoBxW,EAAM/J,GAE/BgD,EAAQ,GACRlF,KAAK2W,OAAOC,KAAK,OAAQ5W,KAAMiM,GAAM,IAElC,EAEX,OAAO,EAEXrM,oBAAoBqM,EAAM/J,GAClB+J,EAAK7L,KACL6L,EAAK7L,IAAI6B,QAAQC,EAAKrC,EAAGqC,EAAKpC,IAC9BoC,EAAKsN,UAAU,OACftN,EAAKqd,UAAU,MAAO,CAClBnf,IAAK6L,EACLA,KAAAA,IAGC/J,EAAKsN,UAAU,aACpBtN,EAAKqd,UAAU,WAAY,CACvBnf,IAAK6L,EACLA,KAAAA,IAIZrM,YAAYC,EAAGC,EAAGmM,EAAMsW,GAAc,GAClC,MAAM1Q,EAAM7R,KAAKgS,IAAImE,gBAAgBtW,EAAGC,GAAG,CAACgL,EAAGC,KAC3C,IAAK/K,KAAKqU,MAAMvJ,EAAGC,GACf,OAAO,EACX,MAAM7I,EAAOlC,KAAK0f,MAAM5U,EAAGC,GAC3B,OAAI7I,EAAK6X,aAEL7X,EAAK2N,eAEL5D,EAAK7J,WAAWF,OAIxB,SAAK2P,GAAOA,EAAI,GAAK,IAEd7R,KAAKwW,QAAQ3E,EAAI,GAAIA,EAAI,GAAI5F,EAAMsW,GAE9C3iB,WAAWqM,EAAMsW,GAAc,GAC3B,MAAMrgB,EAAOlC,KAAK0f,MAAMzT,EAAKpM,EAAGoM,EAAKnM,GAErC,QAAIoC,EAAKwgB,YAAYzW,KACbsW,GACAviB,KAAK2iB,uBAAuB1W,EAAM/J,GAEtClG,EAAI4mB,YAAY5iB,KAAKkJ,MAAO+C,GAC5BA,EAAK9K,gBACLnB,KAAK2W,OAAOC,KAAK,OAAQ5W,KAAMiM,GAAM,IAC9B,GAIfrM,uBAAuBqM,EAAM/J,GACrB+J,EAAK4W,MAAM3gB,EAAKrC,EAAGqC,EAAKpC,IAAMoC,EAAKsN,UAAU,UAC7CtN,EAAKqd,UAAU,SAAU,CACrBnf,IAAK6L,EACLA,KAAAA,IAGC/J,EAAKsN,UAAU,gBACpBtN,EAAKqd,UAAU,cAAe,CAC1Bnf,IAAK6L,EACLA,KAAAA,IAIZrM,SAASqM,EAAMpM,EAAGC,EAAGyiB,GAAc,GAC/B,GAAItW,EAAKpL,MAAQb,KACb,MAAM,IAAImH,MAAM,0BACpB,MAAM2b,EAAc9iB,KAAK0f,MAAMzT,EAAKpM,EAAGoM,EAAKnM,GACtCijB,EAAU/iB,KAAK0f,MAAM7f,EAAGC,GAW9B,OARAgjB,EAAYJ,YAAYzW,GACpB8W,EAAQP,SAASvW,KACbsW,IACAviB,KAAK2iB,uBAAuB1W,EAAM6W,GAClC9iB,KAAKyiB,oBAAoBxW,EAAM8W,IAEnC9W,EAAKhL,SAASjB,KAAMH,EAAGC,KAEpB,EAsCXF,UAAUC,EAAGC,GACT,OAAOE,KAAKkC,KAAKrC,EAAGC,GAAGkjB,YAE3BpjB,QAAQC,EAAGC,GACP,OAAOE,KAAK6c,OAAOhC,MAAM3E,GAAMA,EAAEoM,KAAKziB,EAAGC,MAAO,KAEpDF,UAAUgb,GACN5a,KAAK6c,OAAOlY,QAAQiW,GAExBhb,SAASC,EAAGC,EAAG4J,EAAO6Y,GAAc,GAChC,IAAKviB,KAAKqU,MAAMxU,EAAGC,GACf,OAAO,EACX,MAAMoC,EAAOlC,KAAK0f,MAAM7f,EAAGC,GAC3B,IAAKoC,EAAK+gB,YAAYvZ,GAClB,OAAO,EACX,GAAIxH,EAAKghB,UAAUxZ,GAAQ,CACvB,MAAMxE,EAAQlF,KAAK6c,OAAOnP,QAAQhE,GAWlC,OAVIxE,EAAQ,GACRlF,KAAK6c,OAAO9X,KAAK2E,GAErBA,EAAMzI,SAASjB,KAAMH,EAAGC,GACpByiB,GACAviB,KAAKmjB,qBAAqBzZ,EAAOxH,GAEjCgD,EAAQ,GACRlF,KAAK2W,OAAOC,KAAK,QAAS5W,KAAM0J,GAAO,IAEpC,EAEX,OAAO,EAEX9J,qBAAqB8J,EAAOxH,GACpBwH,EAAMmZ,MAAM3gB,EAAKrC,EAAGqC,EAAKpC,IAAMoC,EAAKsN,UAAU,OAC9CtN,EAAKqd,UAAU,MAAO,CAClBnf,IAAKsJ,EACLA,MAAAA,IAGCA,EAAMkT,YAAc1a,EAAKsN,UAAU,cACxCtN,EAAKqd,UAAU,aAAc,CACzBjU,OAAQ5B,EACRA,MAAAA,IAGCxH,EAAKsN,UAAU,cACpBtN,EAAKqd,UAAU,YAAa,CACxB7V,MAAAA,IAIZ9J,aAAaC,EAAGC,EAAG4J,EAAO6Y,GAAc,GACpC,MAAM1Q,EAAM7R,KAAKgS,IAAImE,gBAAgBtW,EAAGC,GAAG,CAACgL,EAAGC,KAC3C,IAAK/K,KAAKqU,MAAMvJ,EAAGC,GACf,OAAO,EACX,MAAM7I,EAAOlC,KAAKkC,KAAK4I,EAAGC,GAC1B,OAAI7I,EAAK8X,cAEL9X,EAAK2N,eAELnG,EAAMtH,WAAWF,OAIzB,SAAK2P,GAAOA,EAAI,GAAK,IAEd7R,KAAKqW,SAASxE,EAAI,GAAIA,EAAI,GAAInI,EAAO6Y,GAEhD3iB,YAAY8J,EAAO6Y,GAAc,GAC7B,MAAMrgB,EAAOlC,KAAK0f,MAAMhW,EAAM7J,EAAG6J,EAAM5J,GACvC,QAAKoC,EAAKkhB,eAAe1Z,OAErBxH,EAAKmhB,aAAa3Z,KACd6Y,GACAviB,KAAKsjB,wBAAwB5Z,EAAOxH,GAExCwH,EAAMvI,gBACNnF,EAAI4mB,YAAY5iB,KAAK6c,OAAQnT,GAC7B1J,KAAK2W,OAAOC,KAAK,QAAS5W,KAAM0J,GAAO,IAChC,IAIf9J,wBAAwB8J,EAAOxH,GACvBwH,EAAMmZ,MAAMnZ,EAAM7J,EAAG6J,EAAM5J,IAAMoC,EAAKsN,UAAU,UAChDtN,EAAKqd,UAAU,SAAU,CACrBnf,IAAKsJ,EACLA,MAAAA,IAGCA,EAAMkT,YAAc1a,EAAKsN,UAAU,iBACxCtN,EAAKqd,UAAU,gBAAiB,CAC5B7V,MAAAA,EACA4B,OAAQ5B,IAGPxH,EAAKsN,UAAU,iBACpBtN,EAAKqd,UAAU,eAAgB,CAC3B7V,MAAAA,IAIZ9J,UAAU8J,EAAO7J,EAAGC,EAAGyiB,GAAc,GACjC,GAAI7Y,EAAM7I,MAAQb,KACd,MAAM,IAAImH,MAAM,0BACpB,MAAM2b,EAAc9iB,KAAK0f,MAAMhW,EAAM7J,EAAG6J,EAAM5J,GACxCijB,EAAU/iB,KAAK0f,MAAM7f,EAAGC,GAW9B,OARAgjB,EAAYO,aAAa3Z,GACrBqZ,EAAQG,UAAUxZ,KAClBA,EAAMzI,SAASjB,KAAMH,EAAGC,GACpByiB,IACAviB,KAAKsjB,wBAAwB5Z,EAAOoZ,GACpC9iB,KAAKmjB,qBAAqBzZ,EAAOqZ,MAGlC,EAuCXnjB,KAAKC,EAAGC,GACJ,OAAOE,KAAK+c,GAAGlC,MAAM/P,GAAMA,EAAEwX,KAAKziB,EAAGC,MAAO,KAEhDF,OAAOgb,GACH5a,KAAK+c,GAAGpY,QAAQiW,GAEpBhb,MAAMC,EAAGC,EAAGid,GACR,MAAM7a,EAAOlC,KAAK+F,IAAIlG,EAAGC,GACzB,QAAKoC,IAEL6a,EAAGld,EAAIA,EACPkd,EAAGjd,EAAIA,EACPoC,EAAKqhB,OAAOxG,GACZ/c,KAAK+c,GAAGhY,KAAKgY,GACb/c,KAAK2W,OAAOC,KAAK,KAAM5W,KAAM+c,GAAI,IAC1B,GAEXnd,OAAOmd,EAAIld,EAAGC,GACV,MAAMkI,EAAUhI,KAAK+F,IAAIgX,EAAGld,EAAGkd,EAAGjd,GAC5B0jB,EAAUxjB,KAAK+F,IAAIlG,EAAGC,GAC5B,QAAK0jB,IAELxb,EAAQyb,UAAU1G,GAClBA,EAAGld,EAAIA,EACPkd,EAAGjd,EAAIA,EACP0jB,EAAQD,OAAOxG,IACR,GAEXnd,SAASmd,GACL,MAAM7a,EAAOlC,KAAK+F,IAAIgX,EAAGld,EAAGkd,EAAGjd,GAM/B,OALA9D,EAAI4mB,YAAY5iB,KAAK+c,GAAIA,GACrB7a,GACAA,EAAKuhB,UAAU1G,GAEnB/c,KAAK2W,OAAOC,KAAK,KAAM5W,KAAM+c,GAAI,IAC1B,EAMXnd,OAAOC,EAAGC,GACN,MAAM4J,EAAQ1J,KAAK0Y,QAAQ7Y,EAAGC,GAC9B,GAAI4J,GAASA,EAAMmZ,MAAMhjB,EAAGC,GACxB,OAAO,EACX,MAAMmM,EAAOjM,KAAKuc,OAAO1c,EAAGC,GAC5B,SAAImM,IAAQA,EAAK4W,MAAMhjB,EAAGC,IAI9BF,MAAMgb,GACF,OAAO5a,KAAK8hB,MAAMlb,OAAM,CAAC1E,EAAMrC,EAAGC,IAAM8a,EAAG1Y,EAAMrC,EAAGC,EAAGE,QAE3DJ,KAAK8jB,EAAKjY,EAAMD,QAAQC,KAIpBzL,KAAK8hB,MAAM6B,KAAKD,GAHF,CAACxhB,GACJA,EAAKyhB,QAEclY,GAGlC7L,WAAW3D,GACP,SAAU+D,KAAKS,MAAMI,IAAM5E,GAE/B2D,WAAW3D,GACP+D,KAAKS,MAAMI,KAAO5E,EAEtB2D,aAAa3D,GACT+D,KAAKS,MAAMI,MAAQ5E,EAEvBue,kBACI,OAAOxa,KAAK4jB,WAAWhI,EAAUiI,kBAErCrJ,gBAAgBvU,GACRA,EACAjG,KAAK2b,WAAWC,EAAUiI,kBAE1B7jB,KAAK8jB,aAAalI,EAAUiI,kBAEpCjkB,YAAYC,EAAGC,EAAG7D,GACd,OAAO+D,KAAKkC,KAAKrC,EAAGC,GAAGwU,YAAYrY,GAEvC2D,YAAYC,EAAGC,EAAG7D,GACd+D,KAAKkC,KAAKrC,EAAGC,GAAGgc,YAAY7f,GAEhC2D,cAAcC,EAAGC,EAAG7D,GAChB+D,KAAKkC,KAAKrC,EAAGC,GAAG4c,cAAczgB,GAElC2D,cAAcC,EAAGC,EAAG7D,GAChB,OAAO+D,KAAKkC,KAAKrC,EAAGC,GAAGwB,cAAcrF,GAEzC2D,YAAYC,EAAGC,EAAG7D,GACd,OAAO+D,KAAKkC,KAAKrC,EAAGC,GAAGgQ,YAAY7T,GAEvC2D,cAAc+M,EAAMoX,GAAa,GAK7B,GAJA/jB,KAAKgkB,YACLrX,EAAKhI,SAASkN,IACV7R,KAAK8b,YAAYjK,EAAI,GAAIA,EAAI,GAAI0C,EAAWgM,mBAE5CwD,GAAcpX,EAAK,GAAI,CACvB,MAAMkF,EAAMlF,EAAK,GACjB3M,KAAK8b,YAAYjK,EAAI,GAAIA,EAAI,GAAI0C,EAAW8L,WAEhDrgB,KAAKwa,aAAc,EAEvB5a,YACII,KAAK8hB,MAAMnd,SAASuC,GAAMA,EAAEwV,cAAcnI,EAAW8L,UAAY9L,EAAWgM,kBAC5EvgB,KAAKwa,aAAc,EAEvB5a,WAAWC,EAAGC,GACVE,KAAKikB,cACLjkB,KAAKkC,KAAKrC,EAAGC,GAAGgc,YAAYvH,EAAW8L,WACvCrgB,KAAKwa,aAAc,EAEvB5a,cACII,KAAK8hB,MAAMnd,SAASuC,GAAMA,EAAEwV,cAAcnI,EAAW8L,aACrDrgB,KAAKwa,aAAc,EAEvB5a,QACII,KAAKQ,MAAMkb,kBAAmB,EAE9B1b,KAAK8X,OAAOnT,SAASuf,GAAMA,EAAExO,UAEjC9V,UAAUC,EAAGC,EAAG6N,GACC3N,KAAKkC,KAAKrC,EAAGC,GACrB4V,MAAM/H,GAGf/N,KAAK+N,EAAMwW,GAGP,IAAIrZ,EAAGC,EACP,IAHA4C,EAAO6L,EAAS7L,GAChBwW,EAAW3K,EAAS2K,GAAYxW,GAE3B7C,EAAI,EAAGA,EAAI9K,KAAKsE,QAASwG,EAC1B,IAAKC,EAAI,EAAGA,EAAI/K,KAAKwM,SAAUzB,EAAG,CACjB/K,KAAK8hB,MAAMhX,GAAGC,GACtB2K,MAAM1V,KAAKokB,aAAatZ,EAAGC,GAAKoZ,EAAWxW,IAI5D/N,QAAQC,EAAGC,EAAG6N,GAGV,OAAO3N,KAAKkC,KAAKrC,EAAGC,GAAGkV,QAAQrH,GAInC/N,UAAUC,EAAGC,EAAG6N,GACZ,OAAO3N,KAAK4X,QAAQ/X,EAAGC,EAAG6N,EAAM,CAAE6J,eAAe,IAErD5X,QAAQC,EAAGC,EAAG6N,EAAMtL,GAChB,KAAMsL,aAAgB+M,GAAY,CAC9B,MAAMzX,EAAO0K,EAEb,KADAA,EAAO6L,EAASvW,IAEZ,MAAM,IAAIkE,MAAM,wBAA0BlE,IAErC,IAATZ,IACAA,EAAO,CAAEmV,eAAe,IAE5B,MAAMjX,EAAQoN,EAAKpN,OAAS,EACtB8hB,EAAQriB,KAAK8X,OAAOvX,IAAUP,KAAK8X,OAAO,GAChD,OAAMuK,aAAiBH,IAEhBG,EAAMzK,QAAQ/X,EAAGC,EAAG6N,EAAMtL,GAErCzC,WAAWC,EAAGC,EAAG6N,GACA3N,KAAKkC,KAAKrC,EAAGC,GACrBukB,WAAW1W,GAEpB/N,KAAK0kB,GACD,IAAIpS,GAAe,EACnBlS,KAAKyhB,YAAY9c,SAASuR,IACtBhE,EAAegE,EAAEqO,KAAKD,IAAOpS,KAEjClS,KAAKyhB,YAAczhB,KAAKyhB,YAAY+C,QAAQtO,GAAMA,EAAEuO,cACpDvS,EAAelS,KAAK0kB,QAAQ,SAAWxS,EACvC,IAAK,IAAImQ,KAASriB,KAAK8X,OACfuK,GAASA,EAAMkC,KAAKD,KACpBpS,GAAe,GAGvB,OAAOA,EAEXtS,KAAKkX,GACD,GAAI9W,KAAKyB,cAAgBqV,EAAIrV,YACzB,MAAM,IAAI0F,MAAM,mCACpB,GAAInH,KAAKsE,QAAUwS,EAAIxS,OAAStE,KAAKwM,SAAWsK,EAAItK,OAChD,MAAM,IAAIrF,MAAM,kCACpBnH,KAAK8hB,MAAMnd,SAAQ,CAACuC,EAAGrH,EAAGC,KACtBoH,EAAExF,KAAKoV,EAAI5U,KAAKrC,EAAGC,OAEvBE,KAAK8X,OAAOnT,SAAQ,CAACuf,EAAG3jB,KACpB2jB,EAAExiB,KAAKoV,EAAIgB,OAAOvX,OAEtBP,KAAK6c,OAAS/F,EAAI+F,OAAOlZ,QACzB3D,KAAKkJ,MAAQ4N,EAAI5N,MAAMvF,QACvB3D,KAAKS,MAAMI,IAAMiW,EAAIrW,MAAMI,IAE3Bb,KAAKQ,MAAMkB,KAAKoV,EAAItW,OACpBR,KAAKgS,IAAM8E,EAAI9E,IACfhS,KAAKmd,WAAaxb,OAAOC,OAAO,GAAIkV,EAAIqG,YAE5Cvd,QAEI,MAAM4B,EAAQ,IAAIxB,KAAKyB,YAAYzB,KAAKsE,MAAOtE,KAAKwM,QAEpD,OADAhL,EAAME,KAAK1B,MACJwB,EAEX5B,KAAKwc,EAAOvc,EAAGC,EAAGgS,EAAM,IAEpB,OADa9R,KAAKkC,KAAKrC,EAAGC,GACdyf,UAAUnD,EAAOtK,GAEjClS,QAAQwc,EAAOtK,EAAM,IAEjB,MAAM6S,EAAW3oB,EAAI8N,KAAKyC,MAAMvM,KAAKsE,MAAOtE,KAAKwM,QAqDjD,OAnDAxM,KAAK8hB,MAAMnd,SAAQ,CAACzC,EAAMrC,EAAGC,KACzBoC,EAAKwa,cAAcnI,EAAWqQ,sBAAwBrQ,EAAWC,iBACjEtS,EAAK8c,UAAUrR,IACX,MAAM0O,EAAK1O,EAAKE,QAAQuO,GACxB,IAAKC,EACD,OACJ,MAAMrO,EAASkR,EAAY7C,GAC3B,IAAKrO,EACD,OACJ,IAAI6W,EAAgB,EAEhB7W,EAAOwD,OAAS,GAChBqT,EAAgB,EAChB7oB,EAAI2O,GAAGmK,aAAajV,EAAGC,GAAG,CAACgL,EAAGC,KAC1B,MAAM6N,EAAI5Y,KAAKkC,KAAK4I,EAAGC,GAClB6N,EAAEtX,cAAcP,EAAatE,mBAC9Bmc,EAAE6C,UAAU9N,EAAKpN,QACb2B,EAAKuZ,UAAU9N,EAAKpN,QACvBqY,EAAEtE,YAAYC,EAAWwH,yBAE1B8I,IAAkB,EAAI7W,EAAOwD,WAElC,IAGHqT,EAAgB7W,EAAOwD,QAAU,KAEhCtP,EAAKoS,YAAYC,EAAWwH,wBAC7B/b,KAAKgS,IAAIR,OAAOqT,EAAe,OAC/BF,EAAS9kB,GAAGC,IAAM9D,EAAIC,KAAKC,GAAGyR,EAAKpN,cAM/CuR,EAAIC,OAAQ,EACZ4S,EAAShgB,SAAQ,CAACmgB,EAAGjlB,EAAGC,KACpB,IAAKglB,EACD,OACJ,MAAM5iB,EAAOlC,KAAKkC,KAAKrC,EAAGC,GAC1B,IAAIoC,EAAKoS,YAAYC,EAAWqQ,uBAEhC,IAAK,IAAIrkB,EAAQ,EAAGA,GAASoJ,EAAYiM,MAAOrV,EACxCukB,EAAI9oB,EAAIC,KAAKC,GAAGqE,IAChB2B,EAAKqd,UAAUnD,EAAO,CAClBrK,OAAO,OAKvB/V,EAAI8N,KAAKC,KAAK4a,IArDK,EAwDvB/kB,gBAAgB0X,EAAWyN,EAASC,EAASlT,EAAM,IAC/C,IAAII,GAAe,EACnBJ,EAAIiT,QAAUA,EACdjT,EAAIkT,QAAUA,EACd,IAAK,IAAInlB,EAAI,EAAGA,EAAIG,KAAKsE,QAASzE,EAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIE,KAAKwM,SAAU1M,EAAG,CAClC,MAAMoC,EAAOlC,KAAKkC,KAAKrC,EAAGC,GACtBoC,EAAKoV,YAAcA,IAEnBpV,EAAKsN,UAAU,aACf0C,EACIhQ,EAAKqd,UAAU,UAAWzN,IAAQI,IAIlD,OAAOA,EAGXtS,SAASkD,EAAMT,GACXrC,KAAK6hB,OAAOjB,SAAS9d,EAAM9C,KAAMqC,GAErCzC,gBAAgBC,EAAGC,EAAGgD,GAClB,MAAMZ,EAAOlC,KAAKkC,KAAKrC,EAAGC,GAC1B,OAAOE,KAAK6hB,OAAO/B,SAAShd,EAAM9C,KAAMkC,GAG5CtC,SAASC,EAAGC,GACR,OAAOE,KAAKkC,KAAKrC,EAAGC,GAAGka,WAE3Bpa,cAAcgb,GACV5a,KAAK8hB,MAAMnd,SAAQ,CAACzC,EAAMrC,EAAGC,KACzBoC,EAAK+iB,eAAezkB,GAAUoa,EAAG/a,EAAGC,EAAGU,QAI/CZ,iBAAiBslB,IAEjBtlB,aAAaslB,IAGbtlB,kBACI,OAAOI,KAAKQ,MAAMiH,QAEtB7H,gBAAgBC,EAAGC,GACf,OAAQE,KAAKQ,MAAM2kB,OAAOtlB,EAAGC,GAEjCF,aAAaC,EAAGC,GACZ,OAAOE,KAAKkC,KAAKrC,EAAGC,GAAGkL,eAS3BpL,aAAasW,GACTlW,KAAKyhB,YAAY1c,KAAKmR,GAE1BtW,gBAAgBsW,GACZla,EAAI4mB,YAAY5iB,KAAKyhB,YAAavL,IAGnC,SAAS3S,GAAKuhB,EAAGM,EAAG/iB,EAAO,GAAI8hB,GACd,iBAAT9hB,IACPA,EAAO,CAAEsL,KAAMtL,IAEf8hB,IACA9hB,EAAK8hB,SAAWA,IAEF,IAAd9hB,EAAKsL,OACLtL,EAAKsL,KAAO,UAEM,IAAlBtL,EAAK8hB,WACL9hB,EAAK8hB,SAAW,QAEpB,MAAMtjB,EAAM,IAAI3B,GAAI4lB,EAAGM,EAAG/iB,GAc1B,OAbIA,EAAKsL,OACL9M,EAAI0U,KAAKlT,EAAKsL,KAAMtL,EAAK8hB,UACzBtjB,EAAIL,MAAMiM,UAWP5L,EC1vBJ,MAAMwkB,WAAenmB,GACxBU,YAAYiB,GACRkI,MAAMlI,EAAIyD,MAAOzD,EAAI2L,QAErBxM,KAAKslB,OAASzkB,EACdb,KAAK8hB,MAAMnd,SAASuC,GAAMA,EAAE4U,YAAYvH,EAAWjW,iBAEvDsB,KAAKC,EAAGC,GACJ,IAAIoC,EAAOlC,KAAK8hB,MAAMjiB,GAAGC,GAIzB,OAHKoC,EAAKoS,YAAYC,EAAWjW,iBAC7B4D,EAAOlC,KAAKslB,OAAOpjB,KAAKrC,EAAGC,IAExBoC,EAEXtC,OAAOC,EAAGC,GACN,OAAOE,KAAK8hB,MAAMjiB,GAAGC,GAEzBF,SAASC,EAAGC,GACR,OAAOE,KAAK8hB,MAAMjiB,GAAGC,GAAGwU,YAAYC,EAAWjW,eAEnDsB,UACI,MAAM,IAAIuH,MAAM,+BAIpBvH,UACI,MAAM,IAAIuH,MAAM,+BAIpBvH,aACI,MAAM,IAAIuH,MAAM,oCAEpBvH,OAAOC,EAAGC,GAEN,OAAOE,KAAKslB,OAAO/I,OAAO1c,EAAGC,GAEjCF,SAASgb,GACL5a,KAAKslB,OAAOhP,UAAUxL,IACd9K,KAAKulB,SAASza,EAAEjL,EAAGiL,EAAEhL,IAEzB8a,EAAG9P,MAKXlL,WACI,MAAM,IAAIuH,MAAM,gCAIpBvH,cACI,MAAM,IAAIuH,MAAM,qCAEpBvH,QAAQC,EAAGC,GACP,OAAIE,KAAKulB,SAAS1lB,EAAGC,GACV,KACJE,KAAKslB,OAAO5M,QAAQ7Y,EAAGC,GAElCF,UAAUgb,GACN5a,KAAKslB,OAAOrP,WAAWC,IACflW,KAAKulB,SAASrP,EAAErW,EAAGqW,EAAEpW,IAEzB8a,EAAG1E,MAGXtW,YAAYC,EAAGC,GACX,MAAM0lB,EAAMxlB,KAAK8hB,MAAMjiB,GAAGC,GACpB2lB,EAAcD,EAAIlkB,cAAcP,EAAa3E,mBAAmB,GAEhE8F,EAAOlC,KAAKslB,OAAOpjB,KAAKrC,EAAGC,GACjC0lB,EAAI9jB,KAAKQ,GACTsjB,EAAI1J,YAAYvH,EAAWjW,eAC3BknB,EAAI9I,cAAcnI,EAAWmF,iBAC7B8L,EAAI3kB,IAAMb,KACV,IAAI0lB,EAAUF,EAAIlkB,cAAcP,EAAa3E,mBAKzC8F,EAAK8X,YACLwL,EAAI9I,cAAcnI,EAAWtV,eAE7BwmB,GAAeC,GACf1lB,KAAK2b,WAAWC,EAAUC,2BAE9B7b,KAAKQ,MAAMmlB,SAAS9lB,EAAGC,EAAGE,KAAKslB,OAAO9kB,MAAM6gB,SAASxhB,EAAGC,IAE5DF,YAAYC,EAAGC,GACX,MAAM0lB,EAAMxlB,KAAKoJ,OAAOvJ,EAAGC,GACrB2lB,EAAcD,EAAIlkB,cAAcP,EAAa3E,mBAAmB,GAEtEopB,EAAI9I,cAAcnI,EAAWjW,cAAgBiW,EAAWmF,iBAIpD+L,GAHUzlB,KAAKslB,OACdpjB,KAAKrC,EAAGC,GACRwB,cAAcP,EAAa3E,mBAAmB,IAE/C4D,KAAK2b,WAAWC,EAAUC,2BAGlCjc,YAAYC,EAAGC,EAAGqhB,GACTA,EAIDnhB,KAAK4lB,YAAY/lB,EAAGC,GAHpBE,KAAK6lB,YAAYhmB,EAAGC,ICvGhC,MAAMgmB,GAAQ,GACP,SAASC,GAAMrc,EAAO7I,EAAKuI,GAC9B,IAAI4c,EAAcF,GAAMpc,EAAM9I,IACzBolB,IACDF,GAAMpc,EAAM9I,IAAMolB,EAAc,IAEpCA,EAAYnlB,EAAIsc,WAAWvc,IAAMwI,EAE9B,SAASrD,GAAI2D,EAAO7I,GACvB,IAAImlB,EAAcF,GAAMpc,EAAM9I,IAC9B,GAAIolB,EAAa,CACb,MAAM5c,EAAS4c,EAAYnlB,EAAIsc,WAAWvc,IAC1C,GAAIwI,EACA,OAAOA,EAEf,OAAO,IAAIic,GAAOxkB,oEChBf,MAAMolB,GAAM,GACZ,SAASrX,GAAQ3L,EAAM0F,GAC1Bsd,GAAIhjB,GAAQ0F,EAET,SAASpF,GAAKlB,GAajB,MAZoB,iBAATA,IACPA,EAAO,CAAEsG,GAAItG,IAEG,mBAATA,IACPA,EAAO,CAAEsG,GAAItG,IAEM,iBAAZA,EAAKsG,KACZtG,EAAKsG,GAAKsd,GAAI5jB,EAAKsG,KAElBtG,EAAKsG,KACNtG,EAAKsG,GAAKsd,GAAIpN,SAEXxW,ECbJ,MAAM6jB,GACTtmB,YAAYwL,EAAM1B,EAAOyc,GAOrB,GANAnmB,KAAKiM,KAAO,KACZjM,KAAK4G,MAAQ,EACb5G,KAAKoL,KAAOA,EACZpL,KAAK0J,MAAQA,EACb1J,KAAKmmB,OAASA,GAAU,KACxBnmB,KAAKomB,YAAcpqB,EAAI8N,KAAKyC,MAAMnB,EAAKvK,IAAIyD,MAAO8G,EAAKvK,IAAI2L,QACvD2Z,EAAQ,CACR,MAAMjZ,EAAUxD,EAAMwD,UACtBlR,EAAI2Q,KAAKM,mBAAmBjN,KAAKomB,YAAaD,EAAOtmB,EAAGsmB,EAAOrmB,EAAGoN,IAG1EtN,QAEI,QADEI,KAAK4G,MACA5G,KAEXJ,KAAKsQ,GAKD,QAJElQ,KAAK4G,MACW,GAAd5G,KAAK4G,OACL5K,EAAI8N,KAAKC,KAAK/J,KAAKomB,aAEhBlW,GAORmW,eAAeC,GAAQlb,EAAM1B,GAChC,GAAIA,EAAM6c,SACN,OAAQ,EAEZ,IADY7c,EAAM7I,IAEd,OAAQ,EACZ,MAAMslB,EAAS/a,EAAKE,OAEpB,GADkB5B,EAAMe,OAAO0b,IAAWzc,EAAM8c,WAAWL,GAC5C,CACX,MAAMM,EAAY,IAAM/c,EAAMG,MAAM6c,OAAO,UACrCC,EAASjd,EAAMG,MAAM9D,IAAI,UACzB6gB,EAAe,IACfC,EAAgB,EAChB/U,EAAM,IAAIoU,GAAM9a,EAAM1B,EAAOyc,GAAQW,QAC3C,IAAI5W,EAAS,EACb,GAAIuW,EAAYE,EAOZ,OAHSI,GAAU3b,EAAM1B,EAAOyc,KAC5BjW,QAAe8W,GAAO5b,EAAM1B,EAAOyc,IAEhCrU,EAAIhK,KAAKoI,GAEpB,GAAI+W,GAAW7b,EAAM1B,EAAOyc,IACxBY,GAAU3b,EAAM1B,EAAOyc,IACvBe,GAAc9b,EAAM1B,EAAOyc,EAAQrU,GAOnC,OALI5B,EADAlU,EAAIiW,OAAOT,OAAOoV,SACHO,GAAW/b,EAAM1B,EAAOyc,EAAQrU,SAGhCkV,GAAO5b,EAAM1B,EAAOyc,GAEhCrU,EAAIhK,KAAKoI,GAEpB,GAAIkX,GAAWhc,EAAM1B,EAAOyc,IACxBY,GAAU3b,EAAM1B,EAAOyc,IACvBkB,GAAgBjc,EAAM1B,EAAOyc,EAAQrU,GAOrC,OALI5B,EADAlU,EAAIiW,OAAOT,OAAOqV,SACHS,GAAalc,EAAM1B,SAGnBsd,GAAO5b,EAAM1B,EAAOyc,GAEhCrU,EAAIhK,KAAKoI,GAEpB,GAAI6W,GAAU3b,EAAM1B,EAAOyc,GAEvB,OADAjW,QAAe8W,GAAO5b,EAAM1B,EAAOyc,GAC5BrU,EAAIhK,KAAKoI,GAEpB,GAAI+W,GAAW7b,EAAM1B,EAAOyc,IACxBe,GAAc9b,EAAM1B,EAAOyc,EAAQrU,GAEnC,OADA5B,QAAeiX,GAAW/b,EAAM1B,EAAOyc,EAAQrU,GACxCA,EAAIhK,KAAKoI,GAEpB,GAAIkX,GAAWhc,EAAM1B,EAAOyc,IACxBkB,GAAgBjc,EAAM1B,EAAOyc,EAAQrU,GAErC,OADA5B,QAAeoX,GAAalc,EAAM1B,GAC3BoI,EAAIhK,KAAKoI,GAIxB,MAAMqX,EAAYvrB,EAAIwrB,OAAOC,SAAS,SAAU/d,EAAMV,GAAIU,EAAMxJ,KAAK8I,IAAI,GACzE,GAAIue,EACA,GAAI7d,EAAMsD,SACe,iBAAdua,GACPvrB,EAAIiW,OAAOT,OAAO+V,GACpB,CACE,MAAMrX,EClGXmW,eAAsBjb,EAAM1B,GAE/B,IAAIsD,EAAUtD,EAAMsD,QACpB,IAAKA,EAAS,CAEV,MAAME,EAAUxD,EAAMwD,UAChB2E,EAAM7V,EAAIiW,OAAOyV,YAAYxa,EAAQ5I,MAAO4I,EAAQV,QAAQ,CAAC3M,EAAGC,IAC3DoN,EAAQrN,GAAGC,GAAK,GAAKoN,EAAQrN,GAAGC,KAAO9D,EAAI2Q,KAAKgb,UAE3D,IAAK9V,GAAOA,EAAI,GAAK,GAAKA,EAAI,GAAK,EAE/B,OADArG,QAAQC,IAAI,6BACL,EAGXuB,EAAUtD,EAAMke,QAAQ/V,EAAI,GAAIA,EAAI,IAGxC,MAAMgW,EAAO7rB,EAAI2Q,KAAKmb,SAAS9a,EAAStD,EAAM7J,EAAG6J,EAAM5J,GAAG,CAACD,EAAGC,KAC1D,IAAKsL,EAAKvK,IAAImZ,SAASna,EAAGC,GACtB,OAAO,EACX,MAAM0B,EAAQ4J,EAAKvK,IAAI6X,QAAQ7Y,EAAGC,GAClC,OAAK0B,GAKGkI,EAAMqe,QAAQvmB,IAJlBgK,QAAQC,IAAI,UAAU5L,KAAKC,mCAC3BsL,EAAKvK,IAAIqB,KAAKrC,EAAGC,GAAG4c,cAAcnI,EAAWvV,YACtC,MAIf,IAAK6oB,EAED,OADAne,EAAMse,YACC,EAEX,IAAI9X,EAAS,EACb,IAAK2X,GAAoB,GAAXA,EAAK,IAAsB,GAAXA,EAAK,GAC/B,OAAO,EAEX,MAAMI,EAAUpf,EAAU,WAC1B,IAAKof,EACD,MAAM,IAAI9gB,MAAM,uCAEpB,OADA+I,QAAe+X,EAAQ7c,EAAM1B,EAAO,CAAEuL,IAAK4S,IACpC3X,ED0DgBgY,CAAO9c,EAAM1B,GAC5B,GAAIwG,EACA,OAAOA,MAEV,CACD,MAAMiY,EAAOtf,EAAU,QACvB,GAAIsf,EACA,OAAOA,EAAK/c,EAAM1B,GAI9B,MAAM0e,EAAavf,EAAU,cAC7B,IAAKuf,EACD,MAAM,IAAIjhB,MAAM,0CACpB,OAAOihB,EAAWhd,EAAM1B,GAIrB,SAASwd,GAAc9b,EAAM1B,EAAOyc,EAAQrU,GAG/C,MAAMsU,GADNtU,GAAOA,GAAO,IAAIoU,GAAM9a,EAAM1B,EAAOyc,IAASW,SACtBV,YAGxB,IAAIiC,EAASjC,EAAY1c,EAAM7J,GAAG6J,EAAM5J,GACpC8G,EAAQ,EAMZ,OALA5K,EAAI2O,GAAGmK,aAAapL,EAAM7J,EAAG6J,EAAM5J,GAAG,CAACD,EAAGC,KAClCsmB,EAAYvmB,GAAGC,GAAKuoB,KAClBzhB,KANc,GASjBkL,EAAIhK,KAAKlB,EAAQ,GAErByf,eAAec,GAAW/b,EAAM1B,EAAOyc,EAAQrU,GAElDA,GAAOA,GAAO,IAAIoU,GAAM9a,EAAM1B,EAAOyc,IAASW,QAE9C,MAAMjmB,EAAMuK,EAAKvK,IACXgnB,EAAO7rB,EAAI2Q,KAAKmb,SAAShW,EAAIsU,YAAa1c,EAAM7J,EAAG6J,EAAM5J,GAAG,CAACD,EAAGC,KAClE,MAAMoC,EAAOrB,EAAIqB,KAAKrC,EAAGC,GACzB,OAAKoC,OAEDA,EAAK8X,YAAc9X,EAAKwH,QAAUyc,MAElCjkB,EAAK2N,iBAIb,IAAIK,EAAS,EACb,IAAK2X,GAAoB,GAAXA,EAAK,IAAsB,GAAXA,EAAK,GAAU,CACzC,MAAMO,EAAavf,EAAU,cAC7B,IAAKuf,EACD,MAAM,IAAIjhB,MAAM,0CAEpB,OADA+I,QAAekY,EAAWhd,EAAM1B,GACzBoI,EAAIhK,KAAKoI,GAEpB,MAAM+X,EAAUpf,EAAU,WAC1B,IAAKof,EACD,MAAM,IAAI9gB,MAAM,uCAEpB,OADA+I,QAAe+X,EAAQ7c,EAAM1B,EAAO,CAAEuL,IAAK4S,IACpC/V,EAAIhK,KAAKoI,GAEb,SAASmX,GAAgBjc,EAAM1B,EAAOyc,EAAQrU,GAGjD,MAAMsU,GADNtU,GAAOA,GAAO,IAAIoU,GAAM9a,EAAM1B,EAAOyc,IAASW,SACtBV,YAGxB,IAAIiC,EAASjC,EAAY1c,EAAM7J,GAAG6J,EAAM5J,GACpC8G,EAAQ,EASZ,OARA5K,EAAI2O,GAAGmK,aAAapL,EAAM7J,EAAG6J,EAAM5J,GAAG,CAACD,EAAGC,KAC5BsmB,EAAYvmB,GAAGC,IAChB9D,EAAI2Q,KAAKgb,SAEdvB,EAAYvmB,GAAGC,GAAKuoB,KAClBzhB,KATc,GAYjBkL,EAAIhK,KAAKlB,EAAQ,GAErByf,eAAeiB,GAAagB,EAAO5e,EAAO6e,EAASpQ,GAGtD,OAAOzO,EAAMmC,UAUV,SAASkb,GAAUuB,EAAO5e,EAAOyc,EAAQhO,GAI5C,OAAOnc,EAAI2O,GAAG6d,eAAe9e,EAAOyc,IAAW,EAE5CE,eAAeW,GAAO5b,EAAM1B,EAAOyc,EAAQhO,GAC9C3M,QAAQC,IAAI,UAAW/B,EAAM9I,GAAIulB,EAAOvlB,IACxC,IAAIomB,EAAStd,EAAMb,UAAU,UAC7B,OAAKme,EAEEA,EAAO5b,EAAM1B,GADT,EAGR,SAASud,GAAWqB,EAAO5e,EAAOyc,EAAQhO,GAE7C,OAAOnc,EAAI2O,GAAG6d,eAAe9e,EAAOyc,GAAU,EAE3C,SAASiB,GAAWkB,EAAO5e,EAAOyc,EAAQhO,GAC7C,OAAOnc,EAAI2O,GAAG6d,eAAe9e,EAAOyc,GAAU,KA/FvC,UAAWG,OACX,UAAWA,uDEpHf,SAAuBmC,EAAW/e,EAAOyc,GAC5C,MAAMuC,EAAW1sB,EAAI8N,KAAKyC,MAAM7C,EAAMwD,WACtClR,EAAI2Q,KAAKM,mBAAmBwb,EAAWtC,EAAOtmB,EAAGsmB,EAAOrmB,EAAG4oB,GAAU,GACrED,EAAUhc,QAAQxG,IAAW,EAALA,IACxByD,EAAM7I,IAAIgc,OAAOlY,SAASuR,IAClBA,EAAEsQ,WAAW9c,KACbgf,EAASxS,EAAErW,GAAGqW,EAAEpW,GAAK9D,EAAI2Q,KAAKE,cAGtCnD,EAAM7I,IAAI8nB,UAAS,CAACzhB,EAAGrH,EAAGC,KAClBoH,EAAEoN,YAAYC,EAAW7V,cACzB+pB,EAAU5oB,GAAGC,IAAM9D,EAAI2Q,KAAKG,YAGpC9Q,EAAI2Q,KAAKic,OAAOH,EAAWC,GAAU,GACrCD,EAAUhc,QAAQxG,GAAOA,IAAM,IAAQ,IAAQA,IAC/CjK,EAAI8N,KAAKC,KAAK2e,mIFwKX,SAAwBJ,EAAO3L,EAAQ4L,EAASpQ,GAEnD,OAAO,eAEJkO,eAA2BiC,EAAO5e,EAAO6e,EAASpQ,GAErD,OAAOzO,EAAMmC,gEG1LV,MAAMgd,WAAkBC,EAC3BlpB,YAAYyC,GACR0G,MAAM1G,GACNrC,KAAKS,MAAQ,CACTiJ,MAAOO,EAAY8e,QACnBroB,OAAQK,EAAaioB,eAEzBhpB,KAAKipB,OAAS,GACdjpB,KAAKoK,QAAU,GACfpK,KAAKqK,KAAO,CAAC,UACbrK,KAAK8L,UAAY,IACbzJ,EAAK5B,QACLT,KAAKS,MAAMiJ,MAAQ1N,EAAIC,KAAKgL,KAAKgD,EAAajK,KAAKS,MAAMiJ,MAAOrH,EAAK5B,OACrET,KAAKS,MAAMC,OAAS1E,EAAIC,KAAKgL,KAAKlG,EAAcf,KAAKS,MAAMC,OAAQ2B,EAAK5B,QAExE4B,EAAK4mB,SACLjpB,KAAKipB,OAAOC,OAAS7mB,EAAK4mB,QAE9BjpB,KAAK6J,MAAQlI,OAAOC,OAAO,CAAEunB,OAAQ,EAAGxC,OAAQ,KAAOtkB,EAAKwH,OACxDxH,EAAK+H,SACLzI,OAAOC,OAAO5B,KAAKoK,QAAS/H,EAAK+H,SAEjC/H,EAAKyJ,YACL9L,KAAK8L,UAAYzJ,EAAKyJ,WAE1B9L,KAAKgJ,GAAKogB,GAAQ/mB,EAAK2G,IAAM,WACzB3G,EAAKgI,OACoB,iBAAdhI,EAAKgI,OACZhI,EAAKgI,KAAOhI,EAAKgI,KAAK7G,MAAM,SAAS3C,KAAK4C,GAAMA,EAAEC,UAE7B,mBAAdrB,EAAKgI,OACZhI,EAAKgI,KAAO,CAAChI,EAAKgI,OAElByD,MAAMC,QAAQ1L,EAAKgI,QACnBrK,KAAKqK,KAAOhI,EAAKgI,KAAK1G,UAIlC/D,KAAKyQ,GACD,MAAM3G,EAAQ,IAAI3M,EAAMiD,MAExB,OADAA,KAAK4D,KAAK8F,EAAO2G,GACV3G,EAEX9J,KAAK8J,EAAO2G,EAAU,IAClBtH,MAAMnF,KAAK8F,EAAO2G,GAClB1O,OAAOC,OAAO8H,EAAMjJ,MAAOT,KAAKS,OAC5B4P,EAAQlH,MACRO,EAAMP,IAAMkH,EAAQlH,KAEpBkH,EAAQjH,SACRM,EAAMN,OAASiH,EAAQjH,QAEvBpJ,KAAKipB,OAAOC,SACZxf,EAAML,eAAiBrJ,KAAKipB,OAAOC,QAEvCxf,EAAMG,MAAMjG,KAAK5D,KAAK6J,OAE1BjK,SAAS8J,EAAO7I,GACZkI,MAAM9H,SAASyI,EAAO7I,GAClBb,KAAKgK,aAAaC,EAAYof,cAC9B3f,EAAMN,OAASkgB,GAAW5f,EAAO7I,IAEjCb,KAAKgK,aAAaC,EAAYsf,YAC9B7f,EAAMP,IAAM,IAAInN,EAAImN,IAAIqgB,UAAU3oB,GAClC6I,EAAMP,IAAIsgB,OAAS/f,EACfA,EAAMN,SACNM,EAAMP,IAAIugB,SAAWhgB,EAAMN,SAIvCxJ,cAAc8J,GACVX,MAAM5H,cAAcuI,GAChBA,EAAMvJ,MAAQuJ,EAAMN,QACpBugB,GAAajgB,EAAOA,EAAMvJ,KAAMuJ,EAAMN,QAG9CxJ,aAAa3D,GACT,SAAU+D,KAAKS,MAAMiJ,MAAQzN,GAEjC2D,aAAa+c,EAAQ9Y,GACjB,OAAO,EAEXjE,YAAY+c,EAAQ9Y,GAChB,OAAO,EAEXjE,cAAc+c,EAAQ9Y,GAClB,OAAO,EAEXjE,YAAYsC,EAAMwH,GACd,QAAIX,MAAM5G,YAAYD,EAAMwH,MAExBxH,EAAK2N,aAIbjQ,WAAWsC,EAAMwH,GACb,QAAIX,MAAM3G,WAAWF,EAAMwH,OAEvBxH,EAAK2N,gBAEL3N,EAAK4Y,iBAIblb,UAAU8J,EAAOrH,GACb,MAAMgB,EAASqG,EAAMkT,WAAa,WAAa5c,KAAKqD,OACpD,OAAIhB,GAAQA,EAAK8H,OACN9G,EAAS,YAEbA,EAEXzD,WAAW8J,EAAOuC,EAAMhI,GACpB,QAAKjI,EAAI4tB,KAAK7kB,KAAK2E,EAAO,QAASuC,GAKvCrM,SAAS8J,EAAOuC,EAAMhI,GAClB,QAAKjI,EAAI4tB,KAAKC,OAAOngB,EAAO,QAASuC,IC1HtC,SAAS1I,GAAKwT,EAAM+S,GACvB,IAAI5pB,EACJ,GAAoB,iBAAT6W,GAGP,GADA7W,EAAO6F,GAAIgR,IACN7W,EACD,MAAM,IAAIiH,MAAM,8BAAgC4P,QAGpD7W,EADK6W,aAAgB8R,GACd9R,EAGAgT,GAAShT,GAEpB,OAAO7W,EAAKqD,KAAKumB,GAQd,MAAME,GAAQ,GAWd,SAASjkB,GAAInF,GAChB,OAAIA,aAAcioB,GACPjoB,EACJopB,GAAMppB,GAEV,SAASmpB,GAAShT,GACrB,MAAM5T,EAASxB,OAAOC,OAAO,GAAImV,GACjC,OAAO,IAAI8R,GAAU1lB,GAElB,SAAS8mB,GAAW5nB,EAAO,IAC9B,MAAM6nB,EAAQ,CACVnoB,KAAM,GACNooB,WAAY,IAEI,iBAAT9nB,IACPA,EAAO,CACHN,KAAMM,IAGW,iBAAdA,EAAKN,KACZM,EAAKN,KACAyB,MAAM,SACN3C,KAAK4C,GAAMA,EAAEC,SACbiB,SAASlB,IACNA,EAAE+J,WAAW,KACb0c,EAAMC,WAAWplB,KAAKtB,EAAEmK,UAAU,GAAGlK,QAGrCwmB,EAAMnoB,KAAKgD,KAAKtB,MAInBqK,MAAMC,QAAQ1L,EAAKN,QACxBmoB,EAAMnoB,KAAOM,EAAKN,KAAK4B,SAEI,iBAApBtB,EAAK8nB,WACZD,EAAMC,WAAa9nB,EAAK8nB,WAAW3mB,MAAM,SAAS3C,KAAK4C,GAAMA,EAAEC,SAE1DoK,MAAMC,QAAQ1L,EAAK8nB,cACxBD,EAAMC,WAAa9nB,EAAK8nB,WAAWxmB,SAEvC,MAAM1B,EAAUN,OAAOuX,OAAO8Q,IAAOxF,QAAQ4F,KACrCF,EAAMnoB,KAAK+B,SAAW9H,EAAI2T,gBAAgBua,EAAMnoB,KAAMqoB,EAAEroB,UAExDmoB,EAAMC,aAAcnuB,EAAI2T,gBAAgBua,EAAMC,WAAYC,EAAEroB,SAKpE,OADYM,EAAK2P,KAAOhW,EAAIgW,IAAIC,QACrBhG,KAAKhK,IAAY,KC1EzBokB,eAAehc,GAAKe,EAAM1B,EAAOoI,EAAM,IAC1C,MAAMtQ,EAAQsQ,EAAIpI,MAClB,GAAIlI,EAAO,CACP,MAAM6oB,EAAc7oB,EAAM8oB,iBAC1B,IAAK,IAAIngB,KAAUkgB,EACf,GAAsB,iBAAXlgB,EACP,GAAIA,EAAOqD,WAAW,KAAM,CACxB,MAAM+c,EAAWpgB,EAAOyD,UAAU,GAClC,IAAI4c,EAAahpB,EAAMqH,UAAU0hB,GACjC,IAAmB,IAAfC,EACA,MAAM,IAAIrjB,MAAM,iEACZgD,GAER,MAAMsgB,EAAO9oB,OAAOC,OAAO,GAAIkQ,EAAK,CAAEpI,MAAAA,IAChCwG,QAAesa,EAAWpf,EAAM5J,EAAOipB,GAC7C,GAAIva,EACA,OAAOA,MAEV,CACD,MAAM/M,EAASuG,EAAMb,UAAUsB,GAC/B,IAAe,IAAXhH,EACA,MAAM,IAAIgE,MAAM,2DACZgD,GAGJA,EAAShH,EAEb,MAAM+M,QAAe/F,EAAOiB,EAAM1B,EAAOoI,GACzC,GAAI5B,EACA,OAAOA,MAGd,CACD,MAAMA,QAAe/F,EAAOiB,EAAM1B,EAAOoI,GACzC,GAAI5B,EACA,OAAOA,GAQvB,OAJa4B,EAAI7F,KAIV,ECpDJoa,eAAe+B,GAAWE,EAAO5e,EAAOyO,GAC3C,OAAOzO,EAAMmC,UCoDVwa,eAAeqE,GAAY7pB,EAAKhB,EAAGC,EAAGsB,EAAQupB,EAAW,IAAK/jB,EAAQ,EAAGgkB,GACtD,iBAAXxpB,IACPA,EAASpF,EAAIoF,OAAO6F,KAAK7F,IAE7B,MAAMV,EAASmqB,EAAY,CAAE5nB,KAAM,KAAM7B,OAAAA,IACzCP,EAAIiqB,MAAMjrB,EAAGC,EAAGY,GAChB,MAAMqqB,EAAQ/uB,EAAI+uB,MACbxnB,KAAK,CAAEynB,SAAS,IAChBC,GAAG,CAAED,SAAS,IACdE,OAAOtkB,GACPukB,YAAYR,GACZA,SAASA,GACTS,UAAUvc,IACPA,EAAImc,QACJnqB,EAAIiqB,MAAMjrB,EAAGC,EAAGY,GAGhBG,EAAIwqB,SAAS3qB,MAMrB,OAFAkqB,EAAWA,GAAY5uB,EAAIsvB,GAAGC,MACrBC,aAAaT,GACfA,EAAMjE,QAGVT,eAAeoF,GAAI5qB,EAAKslB,EAAQ/kB,EAAQupB,EAAUC,GACrDxpB,EAASA,GAAU,MACnBupB,EAAWA,GAAY,UACjBD,GAAY7pB,EAAKslB,EAAOtmB,EAAGsmB,EAAOrmB,EAAGsB,EAAQupB,EAAU,EAAGC,GAS7DvE,eAAeqF,GAAU7qB,EAAKhB,EAAGC,EAAGsB,EAAQupB,EAAW,IAAKC,GAO/D,MAAMlqB,EAASmqB,EAAY,CAAE5nB,KAAM,KAAM7B,OALrCA,EADkB,iBAAXA,EACEpF,EAAIoF,OAAO6F,KAAK7F,GAAQ0N,QAGxB9S,EAAIoF,OAAOmC,KAAKnC,KAG7BP,EAAIiqB,MAAMjrB,EAAGC,EAAGY,GAChB,MAAMqqB,EAAQ/uB,EAAI+uB,MACbxnB,KAAK,CAAE6N,QAAS,IAChB6Z,GAAG,CAAE7Z,QAAS,MACd8Z,OAAO,GACPS,MAAK,GACLhB,SAASvlB,KAAKC,MAAMslB,EAAW,IAC/BS,UAAUvc,IACXnO,EAAOU,OAAOgQ,QAAUvC,EAAIuC,QAC5BvQ,EAAIqB,KAAKrC,EAAGC,GAAG0a,aAAc,KAE5BoR,UAAS,KACV/qB,EAAIwqB,SAAS3qB,MAKjB,OAFAkqB,EAAWA,GAAY5uB,EAAIsvB,GAAGC,MACrBC,aAAaT,GACfA,EAAMjE,QAEVT,eAAewF,GAAWhrB,EAAKykB,EAAQa,EAAQ/kB,EAAQiB,EAAO,IAC3C,iBAAXjB,IACPA,EAASpF,EAAIoF,OAAO6F,KAAK7F,IAE7B,MAAMV,EAASmqB,EAAY,CAAE5nB,KAAM,KAAM7B,OAAAA,IACnC6F,EAAO,CAAEpH,EAAG7D,EAAI2O,GAAG9K,EAAEylB,GAASxlB,EAAG9D,EAAI2O,GAAG7K,EAAEwlB,IAChDzkB,EAAIiqB,MAAM7jB,EAAKpH,EAAGoH,EAAKnH,EAAGY,GAC1B,IAAIiqB,EAAWtoB,EAAKsoB,UAChBvlB,KAAK0mB,KAAW9vB,EAAI2O,GAAGohB,cAAczG,EAAQa,IAAW9jB,EAAK2pB,OAAS,GAA5D,IACVhwB,EAAI2O,GAAGshB,MAAM9F,KACbA,EAAS,CAAEtmB,EAAGsmB,EAAO,GAAIrmB,EAAGqmB,EAAO,KAEvC,MAAM4E,EAAQ/uB,EAAI+uB,MACbxnB,KAAK0D,GACLgkB,GAAG9E,GACHwE,SAASA,GACTS,UAAUc,IAKX,MAAMppB,EAAO,CAAEjD,EAAGa,EAAOb,EAAGC,EAAGY,EAAOZ,GAChC+U,EAAK7Y,EAAI2O,GAAGE,eAAe/H,EAAKjD,EAAGiD,EAAKhD,EAAGosB,EAAKrsB,EAAGqsB,EAAKpsB,GAAG,CAACD,EAAGC,KACjE,GAAIuC,EAAK8pB,QACL,GAAI9pB,EAAK8pB,OAAOtsB,EAAGC,GAKf,OAJKuC,EAAK+pB,kBACNtpB,EAAKjD,EAAIA,EACTiD,EAAKhD,EAAIA,IAEN,OAGV,GAAIe,EAAIS,cAAczB,EAAGC,EAAGiB,EAAapE,eAK1C,OAJK0F,EAAK+pB,kBACNtpB,EAAKjD,EAAIA,EACTiD,EAAKhD,EAAIA,IAEN,EAEXgD,EAAKjD,EAAIA,EACTiD,EAAKhD,EAAIA,KAEbe,EAAIwrB,OAAO3rB,EAAQoC,EAAKjD,EAAGiD,EAAKhD,GAC3B+U,GACDkW,EAAMuB,UAGTV,UAAS,KACV/qB,EAAIwqB,SAAS3qB,GACNA,KAIX,OAFiB2B,EAAKuoB,UAAY/pB,GACzB2qB,aAAaT,GACfA,EAAMjE,QA0EjB,SAASyF,GAAUC,EAAOC,EAAIC,EAAIC,EAAa9sB,EAAGC,GAC9C,MAAM8sB,EAAKxnB,KAAKynB,IAAIhtB,EAAI4sB,GAClBK,EAAK1nB,KAAKynB,IAAI/sB,EAAI4sB,GACxB,GAAU,GAANE,GAAiB,GAANE,IAAYH,EACvB,OAAO,EACX,OAAQH,GACJ,IAAK,IACD,OAAa,GAANI,GAAiB,GAANE,EACtB,IAAK,IACL,IAAK,IACD,OAAOF,GAAME,EACjB,IAAK,IACD,OAAa,GAANF,GAAiB,GAANE,GAAWF,GAAME,EACvC,QACI,OAAO,GF7MnBpkB,EAAc,OAAQ2B,ICnDtB3B,EAAc,aAAc0f,MC2ExBhnB,OAAOwN,QAAQ,OAAQ,QAAS,MAMhCxN,OAAOwN,QAAQ,MAAO,MAAO,MAM7BxN,OAAOwN,QAAQ,OAAQ,QAAS,oEAL7ByX,eAAoBxlB,EAAKslB,EAAQ/kB,EAAQupB,EAAUC,GACtDxpB,EAASA,GAAU,OACnBupB,EAAWA,GAAY,UACjBD,GAAY7pB,EAAKslB,EAAOtmB,EAAGsmB,EAAOrmB,EAAGsB,EAAQupB,EAAU,EAAGC,oCAqF7D,SAAc/pB,EAAKykB,EAAQa,EAAQ/kB,EAAQiB,EAAO,IACrD,OAAOwpB,GAAWhrB,EAAKykB,EAAQa,EAAQ/kB,EAAQiB,eAE5CgkB,eAA0BxlB,EAAKykB,EAAQa,EAAQ/kB,EAAQiB,EAAO,IAIjE,GAHsB,iBAAXjB,IACPA,EAASpF,EAAIoF,OAAO6F,KAAK7F,IAEzBA,EAAO8P,IAA0B,GAApB9P,EAAO8P,GAAGpN,OAAa,CACpC,MAAMmR,EAAMjZ,EAAI2O,GAAGoiB,UAAUzH,EAAQa,GACrC,IAAIjhB,EAAQ,EACR+P,EAAI,IAAMA,EAAI,IACd/P,EAAQ,EACJ+P,EAAI,IAAMA,EAAI,KAEd/P,EAAQ,IAGP+P,EAAI,KACT/P,EAAQ,GAEZ,MAAMgM,EAAK9P,EAAO8P,GAAGhM,GACrB9D,EAASpF,EAAIoF,OAAOmC,KAAK2N,EAAI9P,EAAO+O,GAAI/O,EAAO+P,SAE9C,GAAI/P,EAAO8P,IAA2B,IAArB9P,EAAO8P,GAAGpN,OAC5B,MAAM,IAAIqD,MAAM,gFAEpB,OAAO0kB,GAAWhrB,EAAKykB,EAAQa,EAAQ/kB,EAAQiB,SAE5C,SAAcxB,EAAKoG,EAAMgkB,EAAI7pB,EAAQiB,EAAO,IAC/CA,EAAK2qB,KAAO3qB,EAAK2qB,MAAQ,SACAjmB,IAArB1E,EAAK4qB,cACL5qB,EAAK4qB,aAAc,GACvB,MAAMC,EAAO,GACblxB,EAAI2O,GAAGwiB,cAAclmB,EAAMgkB,GAAI,CAACprB,EAAGC,MAC1Be,EAAIwT,MAAMxU,EAAGC,OAEduC,EAAK8pB,SAAU9pB,EAAK8pB,OAAOtsB,EAAGC,OAE9BuC,EAAK4qB,aAAe5qB,EAAK+pB,kBACrBvrB,EAAIS,cAAczB,EAAGC,EAAGiB,EAAapE,gBACjC0F,EAAK+pB,iBAETc,EAAKnoB,KAAK,CAAClF,EAAGC,KADH,IAKnBotB,EAAKnoB,KAAK,CAAClF,EAAGC,KACP,OAEX,MAAM6qB,EAAWtoB,EAAKsoB,UAAYvlB,KAAK0mB,KAAWoB,EAAKppB,QAAUzB,EAAK2pB,OAAS,GAAnC,IACtCpB,EAAWvoB,EAAKuoB,UAAY/pB,EAC5BusB,EAAW,GACjB,IAAIC,GAAa,EACjB,MAAMtC,EAAQ/uB,EAAI+uB,MACbxnB,KAAK,CAAE2B,MAAO,IACd+lB,GAAG,CAAE/lB,MAAOgoB,EAAKppB,OAAS,IAC1B6mB,SAASA,GACTS,UAAUc,IACX,KAAOmB,EAAYnB,EAAKhnB,OAAO,GACzBmoB,EACF,MAAMxb,EAAMqb,EAAKG,IAAc,EAAE,GAAI,GACrCD,EAASroB,KAAK2mB,GAAU7qB,EAAKgR,EAAI,GAAIA,EAAI,GAAIzQ,EAAQiB,EAAK2qB,KAAMpC,QAGnEgB,UAASvF,gBACJiH,QAAQjc,IAAI+b,GAClB,MAAMvb,EAAMqb,EAAKA,EAAKppB,OAAS,GAC/B,MAAO,CAAEjE,EAAGgS,EAAI,GAAI/R,EAAG+R,EAAI,OAG/B,OADA+Y,EAASY,aAAaT,GACfA,EAAMjE,mBA2BV,SAAmBjmB,EAAKhB,EAAGC,EAAGytB,EAAQnsB,EAAQiB,EAAO,KAR5D,SAA4BA,GACxBA,EAAK2pB,MAAQ3pB,EAAK2pB,OAAS,EAC3B3pB,EAAK2qB,KAAO3qB,EAAK2qB,MAAQ,IACzB3qB,EAAKmqB,MAAQnqB,EAAKmqB,OAAS,SACPzlB,IAAhB1E,EAAKgmB,SACLhmB,EAAKgmB,QAAS,GAIlBmF,CAAmBnrB,GACnBA,EAAKuoB,SAAWvoB,EAAKuoB,UAAY/pB,EAEX,iBAAXO,IACPA,EAASpF,EAAIoF,OAAO6F,KAAK7F,IAE7B,MAAM0I,EAAO9N,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,QAC/B,IAAIxQ,EAAImN,IAAIskB,IAAI,CACxBC,UAAS,CAAC7tB,EAAGC,IACFe,EAAIS,cAAczB,EAAGC,EAAGiB,EAAapE,eAEhD0X,MAAK,CAACxU,EAAGC,IACEe,EAAIwT,MAAMxU,EAAGC,KAGxB6tB,UAAU9tB,EAAGC,EAAGytB,GAAQ,CAACK,EAAIC,KAC7B/jB,EAAK8jB,GAAIC,GAAM,KAEnB,MAAMlD,EAAWtoB,EAAKsoB,UAAkB4C,EAASlrB,EAAK2pB,MAApB,GAC5BoB,EAAW,GACXrC,EAAQ/uB,EAAI+uB,MACbxnB,KAAK,CAAEsD,EAAG,IACVokB,GAAG,CAAEpkB,EAAG0mB,IACR5C,SAASA,GACTS,UAAUc,IACX,MAAM4B,EAAO1oB,KAAKS,IAAI,EAAGhG,EAAIqsB,EAAKrlB,GAC5BknB,EAAO3oB,KAAKS,IAAI,EAAG/F,EAAIosB,EAAKrlB,GAC5BmnB,EAAO5oB,KAAKkB,IAAIzF,EAAIyD,MAAQ,EAAGzE,EAAIqsB,EAAKrlB,GACxConB,EAAO7oB,KAAKkB,IAAIzF,EAAI2L,OAAS,EAAG1M,EAAIosB,EAAKrlB,GAC/C,IAAK,IAAI+mB,EAAKE,EAAMF,GAAMI,IAAQJ,EAC9B,IAAK,IAAIC,EAAKE,EAAMF,GAAMI,IAAQJ,EAC1B/jB,EAAK8jB,GAAIC,IACT7xB,EAAI2O,GAAGC,gBAAgB/K,EAAGC,EAAG8tB,EAAIC,IAAO3B,EAAKrlB,IAC7CiD,EAAK8jB,GAAIC,GAAM,EACXtB,GAAUlqB,EAAKmqB,MAAO3sB,EAAGC,EAAGuC,EAAKgmB,OAAQuF,EAAIC,IAC7CT,EAASroB,KAAK2mB,GAAU7qB,EAAK+sB,EAAIC,EAAIzsB,EAAQiB,EAAK2qB,KAAM3qB,EAAKuoB,eAM5EgB,UAASvF,MAAO6H,EAAMC,KACvBnyB,EAAI8N,KAAKC,KAAKD,SACRwjB,QAAQjc,IAAI+b,GACXe,KAGX,OADA9rB,EAAKuoB,SAASY,aAAaT,GACpBA,EAAMjE,WC3TVT,eAAe4B,GAAQ7c,EAAM1B,EAAOoI,EAAM,IAE7C,MAAM+V,EAAO/V,EAAImD,IACjB,IAAK4S,EACD,MAAM,IAAI1gB,MAAM,qCACpB,MAAMinB,EAAO1kB,EAAM7J,EAAIgoB,EAAK,GACtBwG,EAAO3kB,EAAM5J,EAAI+nB,EAAK,GACtBhnB,EAAMuK,EAAKvK,IACXiiB,EAAcjiB,EAAIqB,KAAKwH,EAAM7J,EAAG6J,EAAM5J,GACtCijB,EAAUliB,EAAIqB,KAAKksB,EAAMC,GAC/B,IAAIne,EAAS,EACb,GAAI6S,EAAQlT,aACR,OAAIiC,EAAIwc,IACG,GACXC,GAAO1tB,EAAKkiB,EAAS,MAAO,KAC5BrZ,EAAMse,YACCte,EAAMmC,WAGjB,IAAKiX,EAAYM,eAAe1Z,GAC5B,OAAIoI,EAAIwc,IACG,EAEJ5kB,EAAMmC,UAGjB,GAAIkX,EAAQ/I,YAAc+I,EAAQhJ,UAAW,CACzC,GAAIjI,EAAIwc,IACJ,OAAO,EACX,MAAM7D,EAAO,CAAE/gB,MAAOqZ,EAAQrZ,MAAOuC,KAAM8W,EAAQ9W,MAEnD,GADAiE,QAAe7F,GAAKe,EAAM1B,EAAO+gB,GAC7Bva,EACA,OAAOA,EAGf,OAAK6S,EAAQE,YAAYvZ,GAKpB7I,EAAI2tB,UAAU9kB,EAAO0kB,EAAMC,IAIhCne,EAASxG,EAAMmC,UACRqE,IAJHA,QAAekY,GAAWhd,EAAM1B,GACzBwG,GANH4B,EAAIwc,IACG,EACJ5kB,EAAMmC,UCvCdwa,eAAe8B,GAAK/c,EAAM1B,EAAOyO,GACpC,GAAInc,EAAIiW,OAAOT,OAAO,IAElB,OAAO9H,EAAMmC,UAGjB,MAAM4iB,EAAWzyB,EAAIiW,OAAO6O,OAAO,GAC7B7L,EAAMjZ,EAAI2O,GAAG6K,KAAKiZ,GAClBve,QAAe+X,GAAQ7c,EAAM1B,EAAO,CAAEuL,IAAAA,EAAKqZ,KAAK,IACtD,OAAIpe,GAGGxG,EAAMmC,UCbVwa,eAAeqI,GAAOtjB,EAAM1B,EAAOoI,EAAM,IAE5C,IADYpI,EAAM7I,IAEd,MAAM,IAAIsG,MAAM,qBACpB,MAAM8E,EAAOvC,EAAM7I,IAAI0b,OAAO7S,EAAM7J,EAAG6J,EAAM5J,GAC7C,IAAKmM,EAID,OAHK6F,EAAI6c,OACL3yB,EAAIgV,QAAQkG,MAAMxN,EAAM7J,EAAG6J,EAAM5J,EAAG,sBAEjC,EAEX,GAAI4J,EAAMklB,WAAW3iB,GACjB,OAAO,EACX,MAAM4iB,EAAa5iB,EAAKpD,UAAU,UAClC,IAAmB,IAAfgmB,EAMA,OALK/c,EAAI6c,OACL3yB,EAAIgV,QAAQkG,MAAMxN,EAAM7J,EAAG6J,EAAM5J,EAAG,iCAAkC,CAClEmM,KAAAA,IAGD,EAEN,GAA0B,mBAAf4iB,EAA2B,CAEvC,MAAM3e,QAAe2e,EAAWzjB,EAAM1B,EAAOuC,GAC7C,GAAIiE,EACA,OAAOA,EAGf,OAAKxG,EAAMolB,WAAW7iB,IAGjBvC,EAAM7I,IAAI0V,WAAWtK,IAG1BvC,EAAM8M,QAAQvK,GACT6F,EAAI6c,OACL3yB,EAAIgV,QAAQkG,MAAMxN,EAAM7J,EAAG6J,EAAM5J,EAAG,0BAA2B,CAC3DmM,KAAAA,IAGDvC,EAAMmC,WAXF,EFmBfnD,EAAc,UAAWuf,IClCzBvf,EAAc,OAAQyf,IC4BtBzf,EAAc,SAAUgmB,oLtCzBjB,SAAqB9tB,EAAImuB,GACxBjhB,MAAMC,QAAQghB,KACdA,EAAO,IAAIvqB,EAAauqB,IAE5BvpB,EAAa5E,GAAMmuB,WAEhB,SAAiBnuB,GACpB,MAAMgE,EAAIY,EAAa5E,GACvB,IAAKgE,EACD,MAAM,IAAIuC,MAAM,+BAAiCvG,GACrD,OAAOgE,4DgCZJ,SAAoBvC,EAAMynB,GAC7B,MAAM5pB,EAAO+pB,GAAW5nB,GACxB,IAAKnC,EACD,MAAM,IAAIiH,MAAM,uCAAyC+G,KAAKC,UAAU9L,IAC5E,OAAOnC,EAAKqD,KAAKumB,qBAGd,SAAiBlpB,EAAIV,GACxB,GAAIA,aAAgB2oB,GAEhB,OADAmB,GAAMppB,GAAMV,EACLA,EAEX,MAAM8uB,EAAOjF,GAAS7pB,GAGtB,OAFA8uB,EAAKpuB,GAAKA,EACVopB,GAAMppB,GAAMouB,EACLA,qFO/BJ,MAAMhyB,WAAab,EACtByD,YAAYM,GACR6I,MAAM7I,GACNF,KAAKivB,SAAW,EAChBjvB,KAAKW,KAAO,KAEZX,KAAKS,MAAMwL,KAAO,EAClBjM,KAAKO,MAAQzE,EAAMozB,KACnBlvB,KAAKE,KAAOA,EAEhBN,KAAK4B,GACDuH,MAAMrH,KAAKF,GACXxB,KAAKivB,SAAWztB,EAAMytB,SAE1BrvB,YACI,OAAOI,KAAKS,MAAMwL,KAEtBrM,YAAY3D,GACR,SAAU+D,KAAKS,MAAMwL,KAAOhQ,GAEhC2D,gBAAgBa,GACZ,OAAQT,KAAKS,MAAMwL,KAAOxL,KAAWA,EAEzCb,UAAUqD,GAEN,OADejD,KAAKE,KAAKkK,QAAQnH,GAGrCrD,iBACI,OAAOI,KAAKE,KAAKmK,MC1BlB,MAAM8kB,WAAiBrG,EAC1BlpB,YAAYuD,GACR4F,MAAM5F,GACNnD,KAAKS,MAAQ,CACTwL,KAAMmjB,EAAWrG,QACjBroB,OAAQK,EAAaioB,eAEzBhpB,KAAKoK,QAAU,GACfpK,KAAKqK,KAAO,GACRlH,EAAO1C,QACPT,KAAKS,MAAMwL,KAAOjQ,EAAIC,KAAKgL,KAAKmoB,EAAYpvB,KAAKS,MAAMwL,KAAM9I,EAAO1C,OACpET,KAAKS,MAAMC,OAAS1E,EAAIC,KAAKgL,KAAKlG,EAAcf,KAAKS,MAAMC,OAAQyC,EAAO1C,QAE1E0C,EAAOiH,SACPzI,OAAOsM,QAAQ9K,EAAOiH,SAASzF,SAAQ,EAAEvE,EAAK+F,MAC1CnG,KAAKoK,QAAQhK,GAAO+F,KAGxBhD,EAAOkH,OACoB,iBAAhBlH,EAAOkH,MACS,mBAAhBlH,EAAOkH,OACdlH,EAAOkH,KAAO,CAAClH,EAAOkH,OAEtByD,MAAMC,QAAQ5K,EAAOkH,QACrBrK,KAAKqK,KAAOlH,EAAOkH,KAAK1G,UAIpC/D,KAAKyQ,GACD,MAAMpE,EAAO,IAAIjP,GAAKgD,MAEtB,OADAA,KAAK4D,KAAKqI,EAAMoE,GACTpE,EAEXrM,KAAKqM,EAAMoE,EAAU,IACjBtH,MAAMnF,KAAKqI,EAAMoE,GACjB1O,OAAOC,OAAOqK,EAAKxL,MAAOT,KAAKS,OAC/BwL,EAAKgjB,SAAW5e,EAAQ4e,UAAY,GChBrC,MAAMjF,GAAQ,GAWd,SAASjkB,GAAInF,GAChB,OAAIA,aAAcuuB,GACPvuB,EACJopB,GAAMppB,GAEV,SAASmpB,GAAShT,GACrB,MAAM5T,EAASxB,OAAOC,OAAO,GAAImV,GACjC,OAAO,IAAIoY,GAAShsB,GAEjB,SAAS8mB,GAAW5nB,EAAO,IAC9B,MAAM6nB,EAAQ,CACVnoB,KAAM,GACNooB,WAAY,IAEI,iBAAT9nB,IACPA,EAAO,CACHN,KAAMM,IAGW,iBAAdA,EAAKN,KACZM,EAAKN,KACAyB,MAAM,SACN3C,KAAK4C,GAAMA,EAAEC,SACbiB,SAASlB,IACNA,EAAE+J,WAAW,KACb0c,EAAMC,WAAWplB,KAAKtB,EAAEmK,UAAU,GAAGlK,QAGrCwmB,EAAMnoB,KAAKgD,KAAKtB,MAInBqK,MAAMC,QAAQ1L,EAAKN,QACxBmoB,EAAMnoB,KAAOM,EAAKN,KAAK4B,SAEI,iBAApBtB,EAAK8nB,WACZD,EAAMC,WAAa9nB,EAAK8nB,WAAW3mB,MAAM,SAAS3C,KAAK4C,GAAMA,EAAEC,SAE1DoK,MAAMC,QAAQ1L,EAAK8nB,cACxBD,EAAMC,WAAa9nB,EAAK8nB,WAAWxmB,SAEvC,MAAM1B,EAAUN,OAAOuX,OAAO8Q,IAAOxF,QAAQ4F,KACrCF,EAAMnoB,KAAK+B,SAAW9H,EAAI2T,gBAAgBua,EAAMnoB,KAAMqoB,EAAEroB,UAExDmoB,EAAMC,aAAcnuB,EAAI2T,gBAAgBua,EAAMC,WAAYC,EAAEroB,SAKpE,OADYM,EAAK2P,KAAOhW,EAAIgW,IAAIC,QACrBhG,KAAKhK,IAAY,mEAlFzB,SAAc8U,EAAM+S,GACvB,IAAI5pB,EACJ,GAAoB,iBAAT6W,GAGP,GADA7W,EAAO6F,GAAIgR,IACN7W,EACD,MAAM,IAAIiH,MAAM,8BAAgC4P,QAGpD7W,EADK6W,aAAgBoY,GACdpY,EAGAgT,GAAShT,GAEpB,OAAO7W,EAAKqD,KAAKumB,eAEd,SAAoBznB,EAAMynB,GAC7B,MAAM5pB,EAAO+pB,GAAW5nB,GACxB,IAAKnC,EACD,MAAM,IAAIiH,MAAM,uCAAyC+G,KAAKC,UAAU9L,IAC5E,OAAOnC,EAAKqD,KAAKumB,qBAGd,SAAiBlpB,EAAIV,GACxB,GAAIA,aAAgBivB,GAEhB,OADAnF,GAAMppB,GAAMV,EACLA,EAEX,MAAM8uB,EAAOjF,GAAS7pB,GAGtB,OAFA8uB,EAAKpuB,GAAKA,EACVopB,GAAMppB,GAAMouB,EACLA,sCCvBJ,SAASK,GAAkBxuB,EAAKyuB,GACnC,MAAMC,EAAUvzB,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,QACxC1C,EAAO9N,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,QAC3C,IAAK,IAAI1B,EAAI,EAAGA,EAAIjK,EAAIyD,MAAOwG,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlK,EAAI2L,OAAQzB,IAAK,CACjC,MAAM7I,EAAOrB,EAAIqB,KAAK4I,EAAGC,IACpB7I,EAAK4Y,kBAAmB5Y,EAAK2N,cAC7B3N,EAAKZ,cAAc8c,EAAYhD,qBAMhCmU,EAAQzkB,GAAGC,GAAK,EAJhBwkB,EAAQzkB,GAAGC,GAAK,EAQ5B,IAAIykB,EAEJ,IAAK,IAAI1kB,EAAI,EAAGA,EAAIykB,EAAQjrB,MAAQ,EAAGwG,IACnC,IAAK,IAAIC,EAAI,EAAGA,EAAIwkB,EAAQ/iB,OAAS,EAAGzB,IAEpC,GADAlK,EAAIqB,KAAK4I,EAAGC,GAAGtK,MAAMyB,OAASqS,EAAW5V,cACrC4wB,EAAQzkB,GAAGC,MACTlK,EAAIqB,KAAK4I,EAAGC,GAAGtK,MAAMyB,KAAOqS,EAAW7V,YAAa,CACtD8wB,EAAmB,EACnB,IAAK,IAAIva,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMwa,EAAO3kB,EAAI9O,EAAI2O,GAAG+kB,YAAYza,EAAM,GAAK,GAAG,GAC5C0a,EAAO5kB,EAAI/O,EAAI2O,GAAG+kB,YAAYza,EAAM,GAAK,GAAG,GAC5CmZ,EAAOtjB,EAAI9O,EAAI2O,GAAG+kB,WAAWza,GAAK,GAClCoZ,EAAOtjB,EAAI/O,EAAI2O,GAAG+kB,WAAWza,GAAK,GACxC,IAAKpU,EAAIwT,MAAM+Z,EAAMC,IACjBkB,EAAQnB,GAAMC,MACbxtB,EAAIwT,MAAMob,EAAME,IACbJ,EAAQE,GAAME,OACZH,EAAmB,EAAG,EAClBD,EAAQzkB,EAAI,GAAGC,IAAOwkB,EAAQzkB,EAAI,GAAGC,MACrCwkB,EAAQzkB,GAAGC,EAAI,IAAOwkB,EAAQzkB,GAAGC,EAAI,MACvClK,EAAIqB,KAAK4I,EAAGC,GAAGtK,MAAMyB,MACjBqS,EAAW5V,eAEnB,QAOxB,GAAI2wB,EAAc,CASd,IAAK,IAAIxkB,EAAI,EAAGA,EAAIjK,EAAIyD,MAAOwG,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlK,EAAI2L,OAAQzB,IAC5BlK,EAAIqB,KAAK4I,EAAGC,GAAGoO,WAAa,IAQpC,IAAK,IAAIrO,EAAI,EAAGA,EAAIjK,EAAIyD,MAAOwG,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlK,EAAI2L,OAAQzB,IAAK,CACjC,MAAM7I,EAAOrB,EAAIqB,KAAK4I,EAAGC,GACzB,GAAIwkB,EAAQzkB,GAAGC,IACX7I,EAAKzB,MAAMyB,KAAOqS,EAAW5V,cAC7B,IAAK,IAAIsW,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMmZ,EAAOtjB,EAAI9O,EAAI2O,GAAG6K,KAAKP,GAAK,GAC5BoZ,EAAOtjB,EAAI/O,EAAI2O,GAAG6K,KAAKP,GAAK,GAClC,GAAIpU,EAAIwT,MAAM+Z,EAAMC,IAChBkB,EAAQnB,GAAMC,MACZxtB,EAAIqB,KAAKksB,EAAMC,GAAM5tB,MAAMyB,KACzBqS,EAAW5V,eAAgB,CAI/BmL,EAAKyL,KAAK,GACVga,EAAQzkB,GAAGC,GAAK,EAChB,IAAI6kB,EAAYC,GAAehvB,EAAKiJ,EAAMylB,EAASnB,EAAMC,GAIzD,GAHAkB,EAAQzkB,GAAGC,GAAK,EAGZ6kB,GAAa,EAAG,CAEhB,IAAK,IAAIE,EAAK,EAAGA,EAAKhmB,EAAKxF,MAAOwrB,IAC9B,IAAK,IAAIC,EAAK,EAAGA,EAAKjmB,EAAK0C,OAAQujB,IAC3BjmB,EAAKgmB,GAAIC,IACTH,EACI/uB,EAAIqB,KAAK4tB,EAAIC,GAAI5W,aACrBtY,EAAIqB,KAAK4tB,EAAIC,GAAI5W,WAAayW,EAC9B/uB,EAAIqB,KAAK4tB,EAAIC,GAAItvB,MAAMyB,OAASqS,EAC3B3V,cAKbgxB,EAAY1tB,EAAKiX,aACjBjX,EAAKiX,WAAayW,EAClB1tB,EAAKzB,MAAMyB,MAAQqS,EAAW3V,kBAS9D5C,EAAI8N,KAAKC,KAAKwlB,GACdvzB,EAAI8N,KAAKC,KAAKD,GAIX,SAAS+lB,GAAehvB,EAAKmvB,EAAST,EAASU,EAAQC,GAC1D,SAASC,EAAStwB,EAAGC,GACjB,IAAI8G,EAAyB,GAAjB2oB,EAAQ1vB,GAAGC,GAAU,IAAO,EAIxC,OAHIe,EAAIqB,KAAKrC,EAAGC,GAAGW,MAAMyB,KAAOqS,EAAWpW,qBACvCyI,EAAQ,KAELA,EAEX,IAAIA,EAAQ,EACZ,MAAMwpB,EAAO,CAAC,CAACH,EAAQC,IACjBnmB,EAAO,GACb,KAAOqmB,EAAKtsB,QAAQ,CAChB,MAAMmI,EAAOmkB,EAAKC,MAClBtmB,EAAKhF,KAAKkH,GACV,MAAMpM,EAAIoM,EAAK,GACTnM,EAAImM,EAAK,GACf,IAAI+jB,EAAQnwB,GAAGC,GAAf,CAEAkwB,EAAQnwB,GAAGC,GAAK,EAChB8G,GAASupB,EAAStwB,EAAGC,GACrB,IAAK,IAAImV,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMmZ,EAAOvuB,EAAI7D,EAAI2O,GAAG6K,KAAKP,GAAK,GAC5BoZ,EAAOvuB,EAAI9D,EAAI2O,GAAG6K,KAAKP,GAAK,GAClC,GAAIpU,EAAIwT,MAAM+Z,EAAMC,IAChBkB,EAAQnB,GAAMC,KACb2B,EAAQ5B,GAAMC,GAAO,CACtB,MAAMpiB,EAAOlC,EAAKsmB,OAAS,EAAE,GAAI,GACjCpkB,EAAK,GAAKmiB,EACVniB,EAAK,GAAKoiB,EACV+B,EAAKrrB,KAAKkH,MAItB,OAAO7G,KAAKkB,IAAIM,EAAO,KAKpB,SAAS0pB,GAAgBzvB,GAC5BA,EAAI8nB,SAAS4H,IACbC,GAAe3vB,GACf4vB,GAAe5vB,GAEZ,SAAS0vB,GAAeruB,EAAMkb,EAAIC,EAAIld,IACpC+B,EAAK4Y,kBAAmB5Y,EAAK2N,cAC7B3N,EAAKZ,cAAc8c,EAAYhD,qBAKhClZ,EAAKzB,MAAMyB,MAAQqS,EAAW7V,WAJ9BwD,EAAKzB,MAAMyB,OAASqS,EAAW7V,WAQhC,SAAS8xB,GAAe3vB,GAC3B,IAAI6vB,EACAtC,EAAMC,EAAMpZ,EAAK0b,EACjBC,EAAYC,EAAiBC,EACjC,MAAMV,EAAOp0B,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,OAAQ,GACnD,IAAIukB,GAAW,EACf,KAAOA,GACHA,GAAW,EACXX,EAAKzrB,SAAQ,CAACsB,EAAGpG,EAAGC,KAChB,IAAKmG,EACD,OACJ,MAAM/D,EAAOrB,EAAIqB,KAAKrC,EAAGC,GAEzB,GADAswB,EAAKvwB,GAAGC,GAAK,EACRoC,EAAKoS,YAAYC,EAAW7V,YAAjC,CAIA,IAAKiyB,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CAG7B,GAFAvC,EAAOvuB,EAAI7D,EAAI2O,GAAG+kB,WAAWiB,GAAM,GACnCtC,EAAOvuB,EAAI9D,EAAI2O,GAAG+kB,WAAWiB,GAAM,IAC9B9vB,EAAIwT,MAAM+Z,EAAMC,GACjB,SAEJ,IADaxtB,EAAIqB,KAAKksB,EAAMC,GAClB/Z,YAAYC,EAAW7V,YAC7B,MAGR,GAAY,GAARiyB,EAAJ,CAUA,IAFAC,EAAaC,EAAkBC,EAAsB,EACrDJ,GAAW,EACNzb,EAAM0b,EAAM1b,EAAM0b,EAAO,EAAG1b,IAAO,CAGpC,GAFAmZ,EAAOvuB,EAAI7D,EAAI2O,GAAG+kB,WAAWza,EAAM,GAAG,GACtCoZ,EAAOvuB,EAAI9D,EAAI2O,GAAG+kB,WAAWza,EAAM,GAAG,IACjCpU,EAAIwT,MAAM+Z,EAAMC,GACjB,SAEJ,GADgBxtB,EAAIqB,KAAKksB,EAAMC,GACnB/Z,YAAYC,EAAW7V,aAE/B,GADAoyB,KACKJ,IACDE,IACAF,GAAW,EACPE,EAAa,GACb,WAIHF,IACDI,EAAsBD,IACtBA,EAAkBC,GAEtBA,EAAsB,EACtBJ,GAAW,GAMnB,GAHIA,GAAYI,EAAsBD,IAClCA,EAAkBC,GAEJ,GAAdF,GAAmBC,GAAmB,EAMtC,IALA3uB,EAAKwa,cAAcnI,EAAW7V,YAKzBuW,EAAM,EAAGA,EAAM,EAAGA,IACnBmZ,EAAOvuB,EAAI7D,EAAI2O,GAAG+kB,WAAWza,GAAK,GAClCoZ,EAAOvuB,EAAI9D,EAAI2O,GAAG+kB,WAAWza,GAAK,GAC9BpU,EAAIwT,MAAM+Z,EAAMC,IAChBxtB,EAAIqB,KAAKksB,EAAMC,GAAM/Z,YAAYC,EAAW7V,cAC5C0xB,EAAKhC,GAAMC,GAAQ,EACnB0C,GAAW,QAO5B,SAASC,GAAkBnwB,EAAKiJ,GACnC,IAAK,IAAIjK,EAAI,EAAGA,EAAIgB,EAAIyD,QAASzE,EAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIe,EAAI2L,SAAU1M,EAAG,CAEjC,GADae,EAAIqB,KAAKrC,EAAGC,GAChBW,MAAMyB,KAAOqS,EAAW7V,WAC7BoL,EAAKjK,GAAGC,GAAK,OAEZ,GAAID,EAAI,GAAKC,EAAI,EAAG,CACrB,MAAMmxB,EAAKpwB,EAAIqB,KAAKrC,EAAGC,EAAI,GACrBoxB,EAAOrwB,EAAIqB,KAAKrC,EAAI,EAAGC,GACzBmxB,EAAGxwB,MAAMyB,KAAOqS,EAAW7V,YAC3BwyB,EAAKzwB,MAAMyB,KAAOqS,EAAW7V,aAC7BoL,EAAKjK,GAAGC,GAAK,KAM1B,SAAS2wB,GAAe5vB,GAE3B,MAAMiJ,EAAO9N,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,QAG3C,IAAI2kB,EAFJH,GAAkBnwB,EAAKiJ,GAGvB,IAAK,IAAIgB,EAAI,EAAGA,EAAIhB,EAAKxF,MAAOwG,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAK0C,OAAQzB,IAAK,CAElC,GADalK,EAAIqB,KAAK4I,EAAGC,GAChBtK,MAAMyB,KAAOqS,EAAW7V,WAAY,CACzCyyB,GAAsB,EACtB,IAAK,IAAIlc,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,IAAImZ,EAAOtjB,EAAI9O,EAAI2O,GAAG+kB,WAAWza,GAAK,GAClCoZ,EAAOtjB,EAAI/O,EAAI2O,GAAG+kB,WAAWza,GAAK,GACtC,GAAIpU,EAAIwT,MAAM+Z,EAAMC,KACfvkB,EAAKskB,GAAMC,MACVxtB,EAAIqB,KAAKksB,EAAMC,GAAM5tB,MAAMyB,KACzBqS,EAAW7V,YAAa,CAC5ByyB,GAAsB,EACtB,OAGHA,IACDrnB,EAAKgB,GAAGC,GAAK,EACblK,EAAIqB,KAAK4I,EAAGC,GAAGtK,MAAMyB,OAASqS,EAAW7V,aAKzD1C,EAAI8N,KAAKC,KAAKD,GCrTX,MAAMsnB,GACTxxB,YAAYiB,GACRb,KAAKa,IAAM,IAAI3B,GAAI2B,EAAIyD,MAAOzD,EAAI2L,QAClCxM,KAAKqxB,QAAU,GCJhB,SAASC,GAAUzwB,EAAKhB,EAAGC,GAC9B,OAAQ9D,EAAI2O,GAAG4mB,SAAS1xB,EAAGC,GAAG,CAACgL,EAAGC,IACvBlK,EAAIqB,KAAK4I,EAAGC,GAAGymB,eACrB,mEpBgwBF,SAAcC,EAAQC,EAAYrvB,EAAO,IAC5C,IAEIxB,EAFA2L,EAAS,EACTlI,EAAQ,EA2BZ,MAlCwB,iBASXmtB,IACTA,EAASA,EAAOjuB,MAAM,QAR9B,SAAuB2C,GACnB,OAAO2H,MAAMC,QAAQ5H,IAA8B,iBAAbA,EAAM,GASxCwrB,CAAcF,IAadjlB,EAASilB,EAAOjlB,OAChBlI,EAAQmtB,EAAOntB,MACfzD,EAAM0C,GAAKe,EAAOkI,EAAQnK,GAC1BovB,EAAO9sB,SAAQ,CAACsB,EAAGpG,EAAGC,KAClB,MAAM6N,EAAO+jB,EAAWzrB,IAAM,QAC9BpF,EAAI+W,QAAQ/X,EAAGC,EAAG6N,QAjBtBnB,EAASilB,EAAO3tB,OAChBQ,EAAQmtB,EAAO1Z,QAAO,CAAC6Z,EAAK1E,IAAS9nB,KAAKS,IAAI+rB,EAAK1E,EAAKppB,SAAS,GACjEjD,EAAM0C,GAAKe,EAAOkI,EAAQnK,GAC1BovB,EAAO9sB,SAAQ,CAACuoB,EAAMptB,KAClB,IAAK,IAAID,EAAI,EAAGA,EAAIyE,IAASzE,EAAG,CAC5B,MAAMqR,EAAKgc,EAAKrtB,IAAM,IAChB8N,EAAO+jB,EAAWxgB,IAAO,QAC/BrQ,EAAI+W,QAAQ/X,EAAGC,EAAG6N,QAa9B9M,EAAIL,MAAMiM,SACH5L,WkB9xBJ,SAAiBA,EAAKgxB,GAAoB,GAC7CvB,GAAgBzvB,GAChBwuB,GAAkBxuB,EAAKgxB,qKCGpB,MACHjyB,YAAYiB,GACRb,KAAKqxB,QAAU,EACfrxB,KAAK8xB,aAAe,GACpB9xB,KAAK+xB,aAAe,EAEpB/xB,KAAK+J,KAAO,GACZ/J,KAAKa,IAAMA,EACXb,KAAKgyB,YAAch2B,EAAI8N,KAAKvG,KAAK1C,EAAIyD,MAAOzD,EAAI2L,QAChDxM,KAAK8xB,aAAejxB,EAAIiX,OAAOjX,KAAI,IAAM,IAE7CjB,YACMI,KAAKqxB,QACP,MAAMY,EAAOjyB,KAAK+J,KAAKjG,OACjB9D,KAAK+J,KAAKsmB,MACV,IAAIe,GAASpxB,KAAKa,KAuCxB,OAtCAoxB,EAAKpxB,IAAIJ,MAAMI,IAAMb,KAAKa,IAAIJ,MAAMI,IACpCb,KAAKgyB,YAAYvlB,QAAO,CAACxG,EAAGpG,EAAGC,KAC3B,MAAMoyB,EAAUlyB,KAAKa,IAAIqB,KAAKrC,EAAGC,GAIjC,GAHIoyB,EAAQzqB,UACRxB,EAAIjG,KAAKqxB,SAETprB,IAAMgsB,EAAKZ,QAAS,CACHY,EAAKpxB,IAAIqB,KAAKrC,EAAGC,GACzB4B,KAAKwwB,GAElB,OAAOjsB,KAGPjG,KAAKa,IAAIL,MAAMiH,UACfzH,KAAK+xB,aAAe/xB,KAAKqxB,QACzBrxB,KAAKa,IAAIL,MAAMiH,SAAU,GAEzBwqB,EAAKZ,UAAYrxB,KAAK+xB,cACtBE,EAAKpxB,IAAIL,MAAMkB,KAAK1B,KAAKa,IAAIL,OAUjCR,KAAKa,IAAIiX,OAAOnT,SAAQ,CAAC0d,EAAOnd,KAC5B,MAAMitB,EAAYF,EAAKpxB,IAAIiX,OAAO5S,GAC9Bmd,EAAM5a,UACNzH,KAAK8xB,aAAa5sB,GAASlF,KAAKqxB,SAEhCrxB,KAAK8xB,aAAa5sB,KAAW+sB,EAAKZ,SAClCc,EAAUzwB,KAAK2gB,MAGvB4P,EAAKZ,QAAUrxB,KAAKqxB,QACbY,EAEXryB,YAAYqyB,GACRjyB,KAAKgyB,YAAYvlB,QAAO,CAACxG,EAAGpG,EAAGC,KAC3B,GAAImG,EAAIgsB,EAAKZ,QACT,OAAOprB,EACX,MAAMmsB,EAAWpyB,KAAKa,IAAIqB,KAAKrC,EAAGC,GAClC,GAAImG,EAAIgsB,EAAKZ,SAAWe,EAAS3qB,QAAS,CACtC,MAAMyqB,EAAUD,EAAKpxB,IAAIqB,KAAKrC,EAAGC,GAEjC,OADAsyB,EAAS1wB,KAAKwwB,GACPD,EAAKZ,QAEhB,OAAOprB,MAGPgsB,EAAKZ,QAAUrxB,KAAK+xB,cAAgB/xB,KAAKa,IAAIL,MAAMiH,WACnDzH,KAAKa,IAAIL,MAAMkB,KAAKuwB,EAAKpxB,IAAIL,OAC7BR,KAAK+xB,aAAeE,EAAKZ,SAO7BrxB,KAAK8xB,aAAantB,SAAQ,CAACsB,EAAGf,KAC1B,GAAIe,EAAIgsB,EAAKZ,QACT,OACJ,MAAMgB,EAAYryB,KAAKa,IAAIiX,OAAO5S,GAClC,GAAIe,EAAIgsB,EAAKZ,SAAWgB,EAAU5qB,QAAS,CACvC,MAAM6qB,EAAWL,EAAKpxB,IAAIiX,OAAO5S,GACjCmtB,EAAU3wB,KAAK4wB,GACftyB,KAAK8xB,aAAa5sB,GAAS+sB,EAAKZ,YAGxCrxB,KAAKqxB,QAAUY,EAAKZ,QAExBzxB,QAAQqyB,GACJjyB,KAAK+J,KAAKhF,KAAKktB,oBElGhB,SAASM,GAAgB1xB,EAAKhB,EAAGC,GACpC,MAAMoC,EAAOrB,EAAIqB,KAAKrC,EAAGC,GACzB,OAAIoC,EAAK2N,aACE7T,EAAI2Q,KAAKC,YAChB1K,EAAK4Y,gBACE9e,EAAI2Q,KAAKE,UAChB3K,EAAK8X,WACE,GACJ,EAEJ,SAASwY,GAAY3xB,EAAKqM,GAC7BA,EAAQT,QAAO,CAACC,EAAI7M,EAAGC,IAAMyyB,GAAgB1xB,EAAKhB,EAAGC,2FAElD,SAAwBe,EAAKwe,EAAIC,EAAIsO,EAAIC,EAAIxd,EAAU,IAC1D,MAAM+V,EAAcpqB,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,QAC5CU,EAAUlR,EAAI8N,KAAKyC,MAAM1L,EAAIyD,MAAOzD,EAAI2L,QAC9CgmB,GAAY3xB,EAAKqM,GACjBlR,EAAI2Q,KAAKM,mBAAmBmZ,EAAa/G,EAAIC,EAAIpS,EAASmD,EAAQoiB,UAAWz2B,EAAI2O,GAAG+nB,wBAAwBrT,EAAIC,EAAIsO,EAAIC,GAAM,GAC9H,MAAMlhB,EAAO3Q,EAAI2Q,KAAKgmB,QAAQvM,EAAawH,EAAIC,GAAI,CAAChuB,EAAGC,IAAMe,EAAIqB,KAAKrC,EAAGC,GAAG+P,cAAcQ,EAAQoiB,WAGlG,OAFAz2B,EAAI8N,KAAKC,KAAKmD,GACdlR,EAAI8N,KAAKC,KAAKqc,GACPzZ,KClBJ,MAAMjN,GAETE,YAAYuD,GACRnD,KAAK+B,KAAO,GACZ/B,KAAK4yB,QAAU,GAEf5yB,KAAKS,MAAQ,CAAEoyB,MAAO,GAClB1vB,EAAOpB,OACoB,iBAAhBoB,EAAOpB,KACd/B,KAAK+B,KAAOoB,EAAOpB,KAAKyB,MAAM,QAAQ3C,KAAK4C,GAAMA,EAAEC,SAGnD1D,KAAK+B,KAAOoB,EAAOpB,KAAK4B,SAGhC3D,KAAKiJ,OAAS9F,EAAO8F,OACjB9F,EAAOyvB,SACPjxB,OAAOsM,QAAQ9K,EAAOyvB,SAASjuB,SAAQ,EAAE/D,EAAIsF,MACzClG,KAAK4yB,QAAQhyB,GAAM5E,EAAIkK,MAAM3C,KAAK2C,MAG1ClG,KAAK8yB,UAAY92B,EAAI82B,UAAUvvB,KAAKJ,EAAO2vB,WAAa,KAExD9yB,KAAKS,MAAMoyB,MAAQ72B,EAAIC,KAAKgL,KAAK8rB,EAAO5vB,EAAO1C,OAGnDb,MAAMiB,EAAKhB,GAAI,EAAIC,GAAI,EAAIuC,EAAO,IAC9B,IAAI0M,EACJ1M,EAAK2wB,SAAW3wB,EAAK2wB,UAAYh3B,EAAIi3B,KACrC5wB,EAAK2P,IAAM3P,EAAK2P,KAAOnR,EAAImR,IAC3B3P,EAAKgV,QAAkC,QAAvBtI,EAAK1M,EAAKgV,eAA4B,IAAPtI,EAAgBA,EAAK,EACpE,MAAM9F,EAASjJ,KAAKkzB,aAAaryB,EAAKhB,EAAGC,EAAGuC,GAC5C,OAAK4G,GAELjJ,KAAKmzB,cAAclqB,EAAQpI,EAAKwB,GACzB4G,GAFI,KAIfrJ,aAAaiB,EAAKhB,EAAGC,EAAGuC,GACpB,MAAM+wB,EAAaC,GAAUrzB,KAAKiJ,QAClC,IAAKmqB,EACD,MAAM,IAAIjsB,MAAM,gCAAkCnH,KAAKiJ,QAE3D,GAAIpJ,GAAK,GAAKC,GAAK,GACXszB,EAAWhxB,WAAWvB,EAAIqB,KAAKrC,EAAGC,IAClC,OAAO,KAEf,MAAMmJ,EAASqqB,GAAWF,EAAY,CAAE/yB,YAAagC,EAAKgV,UAC1D,IAAKpO,EACD,MAAM,IAAI9B,MAAM,iCAAmCnH,KAAKiJ,QAC5D,OAAIpJ,EAAI,GAAKC,EAAI,MACZD,EAAGC,GAAKE,KAAKuzB,eAAetqB,EAAQpI,EAAKwB,IAAS,EAAE,GAAI,GACrDxC,EAAI,GAAKC,EAAI,GACN,KAIVE,KAAKwzB,WAAWvqB,EAAQpI,EAAKhB,EAAGC,EAAGuC,GAGjC4G,EAFI,KAIfrJ,WAAWqJ,EAAQpI,EAAKhB,EAAGC,EAAGmE,GAC1B,OAAOpD,EAAIwV,SAASxW,EAAGC,EAAGmJ,GAE9BrJ,WAAW6zB,EAAQ5yB,EAAKhB,EAAGC,EAAGmJ,EAAQhF,GAElC,OADAwvB,EAAOxqB,OAASA,EACTpI,EAAIwV,SAASxW,EAAGC,EAAG2zB,GAE9B7zB,cAAcqJ,EAAQpI,EAAKwB,GACvB,MAAM4L,EAAUtM,OAAOsM,QAAQjO,KAAK4yB,SACpC,GAAsB,GAAlB3kB,EAAQnK,OACR,OAAO,EAQX,OANAmK,EAAQtJ,SAAQ,EAAE+uB,EAAQC,MACtB,MAAM/sB,EAAQ+sB,EAAWxtB,MAAM9D,EAAK2P,KACpC,IAAK,IAAIlH,EAAI,EAAGA,EAAIlE,IAASkE,EACzB9K,KAAK4zB,aAAaF,EAAQ7yB,EAAKoI,EAAQ5G,MAJnC,EAShBzC,aAAa8zB,EAAQ7yB,EAAKoI,EAAQ5G,GAC9B,MAAMnC,EAAOmzB,GAAUK,GACvB,IAAKxzB,EACD,MAAM,IAAIiH,MAAM,gCAAkCusB,GAEtD,MAAMD,EAASH,GAAWpzB,EAAM,CAAEG,YAAagC,EAAKgV,UACpD,IAAKoc,EACD,MAAM,IAAItsB,MAAM,iCAAmCusB,GACvD,MAAO7zB,EAAGC,GAAKE,KAAK6zB,eAAeJ,EAAQ5yB,EAAKoI,EAAQ5G,IAAS,EAC5D,GAAI,GAET,OAAIxC,EAAI,GAAKC,EAAI,EACN,KAGNE,KAAK8zB,WAAWL,EAAQ5yB,EAAKhB,EAAGC,EAAGmJ,EAAQ5G,GAGzCoxB,EAFI,KAIf7zB,eAAeqJ,EAAQpI,EAAKwB,GAcxB,OAbUA,EAAK2P,IAAI0V,YAAY7mB,EAAIyD,MAAOzD,EAAI2L,QAAQ,CAAC3M,EAAGC,KACtD,MAAMoC,EAAOrB,EAAIqB,KAAKrC,EAAGC,GACzB,OAAIoC,EAAK8X,eAEJ3X,EAAK2wB,SAASnzB,EAAGC,MAElBmJ,EAAO7G,WAAWF,KAElB6xB,GAAclzB,EAAKhB,EAAGC,QAOlCF,eAAe8J,EAAO7I,EAAKoI,EAAQ5G,GAe/B,OAdUA,EAAK2P,IAAImE,gBAAgBlN,EAAOpJ,EAAGoJ,EAAOnJ,GAAG,CAACD,EAAGC,KACvD,IAAKe,EAAIwT,MAAMxU,EAAGC,GACd,OAAO,EACX,MAAMoC,EAAOrB,EAAIqB,KAAKrC,EAAGC,GACzB,OAAIoC,EAAK8X,cAGLtQ,EAAMtH,WAAWF,KAEjB6xB,GAAclzB,EAAKhB,EAAGC,QChI/B,MAAMk0B,GAAS,GACf,SAASplB,GAAQhO,EAAIiyB,GAQxB,MAPqB,iBAAVA,IACPA,EAAQ,CAAE5pB,OAAQ4pB,IAEhBA,aAAiBnzB,KACnBmzB,EAAQ,IAAInzB,GAAMmzB,IAEtBmB,GAAOpzB,GAAMiyB,EACNA,gFAEJ,SAAoBmB,GACvBryB,OAAOsM,QAAQ+lB,GAAQrvB,SAAQ,EAAE/D,EAAIuC,MACjCyL,GAAQhO,EAAIuC,YAGb,SAAcvC,GACjB,OAAIA,aAAclB,GACPkB,EAEO,iBAAPA,EACAozB,GAAOpzB,GAEX,IAAIlB,GAAMkB,WAEd,SAAgByB,EAAO,IAC1B,MAAM6nB,EAAQ,CACVnoB,KAAM,GACNooB,WAAY,GACZ1pB,MAAO,EACPwzB,YAAa,EACb1zB,MAAO,GAES,iBAAT8B,IACPA,EAAO,CACHN,KAAMM,IAGd,MAAM2P,EAAM3P,EAAK2P,KAAOhW,EAAIgW,IAAIC,OA6ChC,GA5CyB,iBAAd5P,EAAKN,KACZM,EAAKN,KACAyB,MAAM,SACN3C,KAAK4C,GAAMA,EAAEC,SACbiB,SAASlB,IACNA,EAAE+J,WAAW,KACb0c,EAAMC,WAAWplB,KAAKtB,EAAEmK,UAAU,GAAGlK,QAGrCwmB,EAAMnoB,KAAKgD,KAAKtB,MAInBqK,MAAMC,QAAQ1L,EAAKN,QACxBmoB,EAAMnoB,KAAOM,EAAKN,KAAK4B,SAEI,iBAApBtB,EAAK8nB,WACZD,EAAMC,WAAa9nB,EAAK8nB,WAAW3mB,MAAM,SAAS3C,KAAK4C,GAAMA,EAAEC,SAE1DoK,MAAMC,QAAQ1L,EAAK8nB,cACxBD,EAAMC,WAAa9nB,EAAK8nB,WAAWxmB,SAEnCtB,EAAK5B,OACqB,iBAAf4B,EAAK5B,OACZ4B,EAAK5B,MACA+C,MAAM,QACN3C,KAAK4C,GAAMA,EAAEC,SACbiB,SAAS1I,IACV,GAAIA,EAAKuR,WAAW,KAAM,CACtB,MAAMpN,EAAMnE,EAAK2R,UAAU,GAC3Bsc,EAAM+J,aAAelB,EAAM3yB,QAG3B8pB,EAAMzpB,OAASsyB,EAAM92B,MAKjCoG,EAAK4xB,cACL/J,EAAM+J,YAAcj4B,EAAIC,KAAKgL,KAAK8rB,EAAO1wB,EAAK4xB,cAE9C5xB,EAAK9B,QACL2pB,EAAM3pB,MAAQ8B,EAAK9B,OAEnB2pB,EAAM3pB,OAAS8B,EAAK6xB,UAAW,CAC/B,KAAOliB,EAAIR,OAAOnP,EAAK6xB,YACnBhK,EAAM3pB,OAAS,EAEnB2pB,EAAM+J,aAAelB,EAAMoB,gBAE/B,MAAMlyB,EAAUN,OAAOuX,OAAO8a,IAAQxP,QAAQ4F,KACtCF,EAAMnoB,KAAK+B,SAAW9H,EAAI2T,gBAAgBua,EAAMnoB,KAAMqoB,EAAEroB,WAExDmoB,EAAMC,aAAcnuB,EAAI2T,gBAAgBua,EAAMC,WAAYC,EAAEroB,WAE5DmoB,EAAMzpB,SAAW2pB,EAAE3pB,MAAMoyB,MAAQ3I,EAAMzpB,WAGvCypB,EAAM+J,aAAe7J,EAAE3pB,MAAMoyB,MAAQ3I,EAAM+J,iBAKnD,GAAI/J,EAAM3pB,MACN,OAAOyR,EAAI/F,KAAKhK,IAAY,KAEhC,MAAM1B,EAAQ2pB,EAAM3pB,MACd6zB,EAAUnyB,EAAQpB,KAAKukB,GAAMA,EAAE0N,UAAUvyB,KACzC2E,EAAQ8M,EAAIqiB,SAASD,GAC3B,OAAIlvB,EAAQ,EACD,KACJjD,EAAQiD,MCjHZ,MAAMkF,GAAU,GAChB,SAASkqB,GAAerxB,EAAM0F,GACjCyB,GAAQnH,GAAQ0F,EAEb,SAAS4rB,GAAWtxB,GACvB,OAAOmH,GAAQnH,GCDZojB,eAAe4B,GAAQve,EAAO6E,GACjC,MAAM0G,EAAM1G,EAAE0G,IACd,OAAKvL,EAAM7I,KAAQoU,EAEZuf,GAAsBx0B,KAAM0J,EAAO6E,IAD9B,ECLT8X,eAAeqI,GAAOhlB,EAAO+qB,GAChC,IAAK/qB,EAAM7I,IACP,OAAQ,EACZ,MAAM6zB,EAAehrB,EAAMb,UAAU,UACrC,IAAK6rB,EAED,OADA14B,EAAIgV,QAAQkG,MAAMxN,EAAM7J,EAAG6J,EAAM5J,EAAG,4BAC7B4J,EAAMmC,UAEZ,CAED,MAAMqE,QAAewkB,EAAa10B,KAAM0J,GACxC,GAAIwG,EACA,OAAOA,EAGf,MAAMkY,EAAa1e,EAAMb,UAAU,cACnC,IAAKuf,EACD,MAAM,IAAIjhB,MAAM,6BACpB,OAAOihB,EAAWpoB,KAAM0J,GDV5B4qB,GAAe,UAAWrM,ICY1BqM,GAAe,SAAU5F,6JC4BlB,MAAMiG,GACT/0B,YAAYg1B,GACR50B,KAAK60B,MAAQ,GACb70B,KAAK0F,KAAO,GACZ1F,KAAK80B,OAAS,GACd90B,KAAK+0B,SAAW,GAChB/0B,KAAK4F,OAAS,GACd5F,KAAKyH,QAAU,KACfzH,KAAK4D,KAAKgxB,GAEdh1B,KAAKg1B,GACD,IAAK,IAAIxK,KAAK4K,GAAY,CACtB,MAAM/uB,EAA0B,iBAAf2uB,EAA0BA,EAAaI,GAAW5K,GACnEpqB,KAAKgG,IAAIokB,EAAGnkB,GAEhB,GAA0B,iBAAf2uB,EACP,IAAK,IAAIxK,KAAKwK,EACV50B,KAAKgG,IAAIokB,EAAGwK,EAAWxK,IAInCxqB,QAAQ+I,GACJhH,OAAOszB,KAAKD,IAAYrwB,SAASylB,GAAMzhB,EAAG3I,KAAK+F,IAAIqkB,MAKvDxqB,IAAIqD,GACA,OAAOjD,KAAK4F,OAAO3C,IAAS,EAEhCrD,IAAIqD,EAAMkD,EAAQ,GAKd,OAJAnG,KAAK4F,OAAO3C,GAAQkD,EACpBnG,KAAK60B,MAAM5xB,GAAQkD,EACnBnG,KAAK0F,KAAKzC,GAAQkD,EAClBnG,KAAK80B,OAAO7xB,GAAQ,GACbkD,EAEXvG,KAAKqD,GACD,OAAOjD,KAAK60B,MAAM5xB,IAAS,EAE/BrD,IAAIqD,GACA,OAAOjD,KAAK0F,KAAKzC,IAAS,EAE9BrD,QAAQqD,GACJ,OAAOjD,KAAK+0B,SAAS9xB,KAAS,EAElCrD,KAAKqD,EAAMgF,EAAOitB,GAAW,GACzB,GAAIjtB,EAAQ,GAAKjI,KAAK+0B,SAAS9xB,GAC3B,OAAO,EACXjD,KAAK60B,MAAM5xB,IAASgF,EAChBitB,GAAYl1B,KAAK60B,MAAM5xB,GAAQjD,KAAK0F,KAAKzC,KACzCjD,KAAK0F,KAAKzC,GAAQjD,KAAK60B,MAAM5xB,IAEjC,IAAIkyB,EAAMn1B,KAAK+F,IAAI9C,GACnB,OAAOjD,KAAKo1B,WAAWnyB,GAAQkyB,EAEnCv1B,MAAMqD,EAAMoyB,EAAMC,GAAW,GACrBD,EAAO,IACPA,GAAQA,GACZ,MAAM5tB,EAAUzH,KAAKwG,KAAKvD,GAAOoyB,GAAM,GAIvC,OAHI5tB,GAAW6tB,IACXt1B,KAAK0F,KAAKzC,GAAQjD,KAAK60B,MAAM5xB,IAE1BwE,EAEX7H,QAAQqD,GACJjD,KAAK60B,MAAM5xB,GAAQjD,KAAK0F,KAAKzC,GAC7B,IAAIkyB,EAAMn1B,KAAK+F,IAAI9C,GACnB,OAAOjD,KAAKo1B,WAAWnyB,GAAQkyB,EAEnCv1B,SAASqD,EAAMsyB,GACX,OAAOv1B,KAAKw1B,UAAUvyB,EAAM,CAAEsyB,MAAAA,IAElC31B,UAAUqD,EAAMsyB,GACS,iBAAVA,IACPA,EAAQ,CAAEA,MAAAA,SACYxuB,IAAtB/G,KAAK4F,OAAO3C,IACZjD,KAAKgG,IAAI/C,EAAM,GAEnBjD,KAAK80B,OAAO7xB,GAAM8B,KAAKwwB,GACvB,IAAIJ,EAAMn1B,KAAK+F,IAAI9C,GACnB,OAAOjD,KAAKo1B,WAAWnyB,GAAQkyB,EAEnCv1B,WAAWqD,EAAMsyB,GACb,OAAOv1B,KAAKy1B,YAAYxyB,EAAM,CAAEsyB,MAAAA,IAEpC31B,YAAYqD,EAAMsyB,GACO,iBAAVA,IACPA,EAAQ,CAAEA,MAAAA,IACd,IAAIG,EAAM11B,KAAK80B,OAAO7xB,IAAS,GAC3B7C,EAAM8N,KAAKC,UAAUonB,GACrBrwB,EAAQwwB,EAAIC,WAAWC,GAChB1nB,KAAKC,UAAUynB,IAAMx1B,IAEhC,GAAI8E,GAAS,EAAG,CACZwwB,EAAIG,OAAO3wB,EAAO,GAClB,IAAIiwB,EAAMn1B,KAAK+F,IAAI9C,GACnB,OAAOjD,KAAKo1B,WAAWnyB,GAAQkyB,EAEnC,OAAO,EAEXv1B,WAAWqD,GACP,IAAI6yB,EAAiB,GACrB91B,KAAK80B,OAAO7xB,GAAM0B,SAASoxB,GAAQ/1B,KAAKg2B,iBAAiBF,EAAgBC,KACzE/1B,KAAK+0B,SAAS9xB,GAAQ6yB,EAAeG,UAAW,EAChD,IAAI9vB,EAAQnG,KAAK60B,MAAM5xB,IAAS,EAahC,YAZ6B8D,IAAzB+uB,EAAeI,MACf/vB,EAAQ2vB,EAAeI,OAGvB/vB,GAAS2vB,EAAeP,OAAS,OACNxuB,IAAvB+uB,EAAexvB,MACfH,EAAQf,KAAKS,IAAIiwB,EAAexvB,IAAKH,SAEdY,IAAvB+uB,EAAejwB,MACfM,EAAQf,KAAKkB,IAAIwvB,EAAejwB,IAAKM,KAGrCnG,KAAK4F,OAAO3C,GAAQkD,EAEhCvG,OAAOqD,EAAM8yB,GACT,IAAI9tB,EAiBJ,MAhBmB,iBAAR8tB,IACPA,EAAM,CAAER,MAAOQ,IAEfA,EAAIvlB,KACJvI,EAAQjI,KAAKwG,KAAKvD,EAAM8yB,EAAIvlB,MAEvBulB,EAAII,SACTluB,EAAQjI,KAAKm2B,QAAQlzB,GACR,GAATgF,IACAA,OAAQlB,IAGZkB,EAAQjI,KAAKw1B,UAAUvyB,EAAM8yB,GAE7B/1B,KAAKyH,cAAqBV,IAAVkB,GAChBjI,KAAKyH,QAAQzH,KAAMiD,GAChBgF,EAEXrI,gBAAgBqD,EAAM8yB,GAClB,IAAI9tB,EAeJ,MAdmB,iBAAR8tB,IACPA,EAAM,CAAER,MAAOQ,IAEfA,EAAIvlB,KACJvI,EAAQjI,KAAK0G,MAAMzD,EAAM8yB,EAAIvlB,MAAM,GAE9BulB,EAAII,UAITluB,EAAQjI,KAAKy1B,YAAYxyB,EAAM8yB,IAE/B/1B,KAAKyH,cAAqBV,IAAVkB,GAChBjI,KAAKyH,QAAQzH,KAAMiD,GAChBgF,EAEXrI,iBAAiBme,EAAO1b,GAChBA,EAAKkzB,QACLxX,EAAMwX,OAASxX,EAAMwX,OAAS,GAAKlzB,EAAKkzB,YAEzBxuB,IAAf1E,EAAK6zB,QACLnY,EAAMmY,MAAQ9wB,KAAKS,IAAIkY,EAAMmY,OAAS,EAAG7zB,EAAK6zB,aAEjCnvB,IAAb1E,EAAKiE,MACLyX,EAAMzX,IAAMlB,KAAKS,IAAIkY,EAAMzX,KAAO,EAAGjE,EAAKiE,WAE7BS,IAAb1E,EAAKwD,MACLkY,EAAMlY,IAAMT,KAAKS,IAAIkY,EAAMlY,KAAO,EAAGxD,EAAKwD,WAEzBkB,IAAjB1E,EAAK4zB,UACLlY,EAAMkY,QAAU5zB,EAAK4zB,UAI1B,MAAMjB,GAAa,GCvM1B,MAAMoB,GACFx2B,YAAYqD,GACRjD,KAAKiD,KAAOA,EAEhBozB,UACI,OAAOr2B,KAAKs2B,MAAM,QAEtBC,YACI,OAAOv2B,KAAKw2B,KAAK,UAErBC,mBACI,OAAOz2B,KAAKs2B,MAAM,iBAEtBI,gBACI,OAAO12B,KAAKs2B,MAAM,cAEtBJ,YACI,OAAOl2B,KAAKw2B,KAAK,UAErBjB,YACI,MAAMoB,EAAI32B,KAAKw2B,KAAK,WAAa,EACjC,OAAKx2B,KAAK42B,QAEHD,EAAI32B,KAAK42B,QAAQrB,MADboB,EAGfE,cACI,OAAO72B,KAAKs2B,MAAM,YAEtBQ,WACI,OAAO92B,KAAKs2B,MAAM,SAEtB12B,IAAIuG,IACc,IAAVA,GACAnG,KAAK+2B,MAAO,EACZ/2B,KAAKg3B,OAAS,IAGdh3B,KAAK+2B,MAAO,EACZ/2B,KAAKg3B,QAAmB,IAAV7wB,EAAiB,EAAIA,GAG3CvG,OAAOqD,GACH,YAAmB8D,IAAf/G,KAAKiD,GAEEjD,KAAKiD,GAEZjD,KAAK42B,QAEE52B,KAAK42B,QAAQhxB,OAAO3C,QAF/B,EAMJrD,MAAMqD,GACF,QAASjD,KAAK4F,OAAO3C,GAEzBrD,KAAKqD,GACD,OAAOjD,KAAK4F,OAAO3C,GAEvBrD,OAAOm2B,GACHp0B,OAAOsM,QAAQ8nB,GAAKpxB,SAAQ,EAAEvE,EAAK+F,MAE/B,GADA/F,EAAM,IAAMA,OACE2G,IAAVZ,EAAJ,CAEA,GAAY,WAAR/F,EAAkB,CAClB,GAAqB,iBAAV+F,EACP,MAAM,IAAIgB,MAAM,4CAEpBhB,EAAQf,KAAKS,IAAIM,EAAOnG,KAAKi3B,QAAU,QAEtC,GAAY,WAAR72B,EAAkB,CACvB,GAAqB,iBAAV+F,EACP,MAAM,IAAIgB,MAAM,4CAEpBhB,GAAiBnG,KAAK80B,QAAU,EAGpC90B,KAAKI,GAAO+F,MAGpBvG,MAAMm2B,GACFp0B,OAAOszB,KAAKc,GAAKpxB,SAASvE,SAGJ2G,IAAd/G,KAFJI,EAAM,IAAMA,KAIRJ,KAAKI,QAAO2G,OAKrB,MAAMmwB,GACTt3B,YAAYssB,EAAO,IACflsB,KAAKm3B,QAAU,GACfx1B,OAAOsM,QAAQie,GAAMvnB,SAAQ,EAAEvE,EAAK+F,MAChCnG,KAAKgG,IAAI5F,EAAK+F,MAGtBvG,IAAIqD,EAAMkD,GACN,MAAMixB,EAAIp3B,KAAK+F,IAAI9C,GAEnB,OADAm0B,EAAEpxB,IAAIG,GACCixB,EAEXx3B,IAAIqD,GACA,IAAIm0B,EAAIp3B,KAAKm3B,QAAQl0B,GACrB,GAAIm0B,EACA,OAAOA,EACXA,EAAIp3B,KAAKm3B,QAAQl0B,GAAQ,IAAImzB,GAAMnzB,GACnC,MAAMiC,EAAQjC,EAAKo0B,YAAY,KAO/B,OANInyB,EAAQ,EACRkyB,EAAER,QAAU52B,KAAK+F,IAAI9C,EAAK2K,UAAU,EAAG1I,IAGvCkyB,EAAEpxB,KAAI,GAEHoxB,EAEXx3B,OAAOqD,EAAM8yB,GACU,iBAARA,IACPA,EAAM,CAAER,MAAOQ,IAEnB,IAAIqB,EAAIp3B,KAAK+F,IAAI9C,GAEjB,OADAm0B,EAAEze,OAAOod,GACFqB,GCjJR,MAAME,WAAev6B,EACxB6C,YAAYM,GACR6I,MAAM7I,GAEVN,YACII,KAAKgoB,YAETpoB,SAASiB,EAAKhB,EAAGC,GACb,QAAKiJ,MAAM9H,SAASJ,EAAKhB,EAAGC,KAE5BE,KAAKoJ,OAAS,IAAIic,GAAOxkB,GACzBb,KAAKmJ,IAAM,IAAInN,EAAImN,IAAIqgB,UAAU3oB,EAAK,CAAE6oB,SAAU1pB,KAAKoJ,SACvDpJ,KAAKmJ,IAAIouB,UAAUv3B,OACZ,GAEXJ,gBAEII,KAAKmJ,IAAM,KACXnJ,KAAKoJ,OAAS,KACdL,MAAM5H,gBAEVvB,QAAQoF,EAAM,KAKV,OAJIhF,KAAKmJ,KACLnJ,KAAKmJ,IAAIouB,UAAUv3B,MACvBA,KAAKM,SAAS,GAAKN,KAAKH,EACxBG,KAAKM,SAAS,GAAKN,KAAKF,EACjBiJ,MAAM8C,QAAQ7G,IAG7BsyB,GAAOze,QAAU,CACb3H,GAAI,IACJf,GAAI,QACJlN,KAAM,OC/BH,MAAMu0B,WAAmBC,GAC5B73B,YAAYyC,EAAO,IACf0G,OACS1G,EAAKjB,SACNiB,EAAK6O,GAAK7O,EAAK6O,IAAMomB,GAAOze,QAAQ3H,GACpC7O,EAAK8N,GAAK9N,EAAK8N,IAAMmnB,GAAOze,QAAQ1I,IAEnC9N,EAAKY,OACNZ,EAAKY,KAAOq0B,GAAOze,QAAQ5V,MAExBZ,IAEXrC,KAAKS,MAAMiJ,OAASO,EAAYC,UAChClK,KAAKg1B,WAAa,IAAI0C,GAAsBr1B,EAAK2yB,YAAc,IAC/Dh1B,KAAK23B,OAAS,IAAIC,GAAcv1B,EAAKs1B,QAAU,IAEnD/3B,KAAKyQ,GACD,MAAM3G,EAAQ,IAAI4tB,GAAOt3B,MAEzB,OADAA,KAAK4D,KAAK8F,EAAO2G,GACV3G,GCeR,SAASqgB,GAAShT,GACrB,MAAM5T,EAASxB,OAAOC,OAAO,GAAImV,GACjC,OAAO,IAAIygB,GAAWr0B,qFJ0LnB,SAA0B00B,GACT,iBAATA,GAKXl2B,OAAOszB,KAAKD,IAAYrwB,SAASylB,WACtB4K,GAAW5K,MAEtBzoB,OAAOC,OAAOozB,GAAY6C,IAPtB7C,GAAW6C,GAAQ,kBASpB,SAAwBC,GAC3B,OAAO,IAAInD,GAAWmD,2CI7OnB,SAAcl3B,EAAIkpB,GACrB,IAAI5pB,EACJ,GAAkB,iBAAPU,EAAiB,CAGxB,GADAV,EAAOmzB,GAAUzyB,IACZV,EACD,MAAM,IAAIiH,MAAM,8BAAgCvG,GACpD,KAAMV,aAAgBs3B,IAClB,MAAM,IAAIrwB,MAAM,2BAGpBjH,EADKU,aAAc42B,GACZ52B,EAGAmpB,GAASnpB,GAEpB,OAAOV,EAAKqD,KAAKumB,YAEd,SAAiBlpB,EAAIV,GACxB,GAAIA,aAAgBs3B,GAEhB,OADAO,GAAYn3B,GAAMV,EACXA,EAEX,MAAM8uB,EAAOjF,GAAS7pB,GAGtB,OAFA8uB,EAAKpuB,GAAKA,EACVm3B,GAAYn3B,GAAMouB,EACXA,OAEJ,SAAapuB,GAChB,GAAIA,aAAc42B,GACd,OAAO52B,EACX,MAAMwpB,EAAI2N,GAAYn3B,GACtB,GAAIwpB,KAAOA,aAAaoN,IACpB,MAAM,IAAIrwB,MAAM,qBAEpB,OAAOijB,2DClCJ,MACHxqB,YAAYyC,GACRrC,KAAKkQ,YAASnJ,EACd/G,KAAKg4B,OAAQ,EACbh4B,KAAKmJ,KAAM,EACXnJ,KAAKi4B,SAAU,EACfj4B,KAAKk4B,OAAS,GACdl4B,KAAKm4B,GAAK91B,EAAK81B,IAAM,IAAIn8B,EAAIm8B,GAAGC,GAAG/1B,GACnCrC,KAAKq4B,SAAWh2B,EAAKi2B,QACrBt4B,KAAKu4B,YAAcl2B,EAAKm2B,WACxBx4B,KAAKy4B,UAAYp2B,EAAKq2B,SAClBr2B,EAAK61B,QACLv2B,OAAOC,OAAO5B,KAAKk4B,OAAQ71B,EAAK61B,QAEhC71B,EAAK21B,QACLh4B,KAAKg4B,OAAQ,GAEb31B,EAAK8G,MACLnJ,KAAKmJ,KAAM,GAGnBvJ,cAaI,IAZAI,KAAKqiB,MAAQ,IAAIrmB,EAAIm8B,GAAGQ,MAAM34B,KAAKm4B,IACnCn4B,KAAK2C,OAAS3C,KAAKqiB,MAAM1f,OACzB3C,KAAKsrB,GAAKtrB,KAAKqiB,MAAMiJ,GACrBtrB,KAAKi4B,SAAU,EACfj4B,KAAK44B,UAAY,IAAI58B,EAAI48B,UAAUC,UACnC74B,KAAKsL,OAAStL,KAAKu4B,cACnBv4B,KAAKa,IAAMb,KAAKq4B,SAAS,GACzBr4B,KAAKy4B,UAAUz4B,KAAKa,IAAKb,KAAKsL,QAC9BtL,KAAKa,IAAIgc,OAAOlY,SAASuR,IACrBlW,KAAK44B,UAAU7zB,KAAKmR,EAAGA,EAAEpK,gBAE7B9L,KAAK84B,OACE94B,KAAKi4B,eACFj4B,KAAK+4B,gBACL/4B,KAAKg5B,UAEf,OAAOh5B,KAAKkQ,OAEhBtQ,OACI,MAAMwJ,EAASpJ,KAAKsL,OAAOlC,OAC3B,GAAIpJ,KAAKmJ,KAAOC,EAGZ,OAFAA,EAAOwX,SAAS5gB,KAAK2C,OAAQ,CAAEwG,IAAKnJ,KAAKsL,OAAOnC,WAChDnJ,KAAK2C,OAAOs2B,SAGZj5B,KAAKa,KAAOb,KAAKa,IAAI2Z,cACrBxa,KAAKa,IAAI+f,SAAS5gB,KAAK2C,QACvB3C,KAAK2C,OAAOs2B,UAGpBr5B,OAAOsQ,GACHlQ,KAAKi4B,SAAU,EACfj4B,KAAKqiB,MAAM6W,SACXl5B,KAAKkQ,OAASA,EAElBtQ,gBACI,MAAM8J,EAAQ1J,KAAK44B,UAAUvI,MAC7B,IAAK3mB,EAED,YADA1J,KAAKk5B,SAGT,IAAIC,EAAW,EACf,KAAoB,IAAbA,GACCzvB,IAAU1J,KAAKsL,OACf6tB,QAAiBn5B,KAAKo5B,WAAW1vB,GAE5B,QAASA,EACdyvB,QAAiBzvB,EAAM2vB,IAAIr5B,MAEtB,SAAU0J,IACfyvB,QAAiBzvB,EAAM6a,QAE3BvkB,KAAK84B,OAELK,GAAY,GACZn5B,KAAK44B,UAAU7zB,KAAK2E,EAAOyvB,GAGnCv5B,gBACI,IAAKI,KAAKqiB,MAAMiJ,GAAGgO,QAAQx1B,OACvB,OACJ,MAAMy1B,EAAQC,aAAY,KACtB,MAAMjV,EAAOvoB,EAAIsvB,GAAGmO,cAAc,IAClCz5B,KAAKqiB,MAAMiJ,GAAGoO,QAAQnV,KACvB,IACH,KAAOvkB,KAAKqiB,MAAMiJ,GAAGgO,QAAQx1B,QAAQ,CACjC,MAAMuY,QAAWrc,KAAKqiB,MAAMiJ,GAAGqO,WAC3Btd,GAAMA,EAAGiI,KACTtkB,KAAKqiB,MAAMiJ,GAAGgO,QAAQ30B,SAASuR,GAAMA,GAAKA,EAAEqO,KAAKlI,EAAGiI,MACpDtkB,KAAKqiB,MAAMiJ,GAAGgO,QAAUt5B,KAAKqiB,MAAMiJ,GAAGgO,QAAQ9U,QAAQtO,GAAMA,GAAKA,EAAEuO,eAEvEzkB,KAAK84B,OAETc,cAAcL,GAElB35B,iBAAiB0L,GACb,IAAIxD,EAAO,EACX,MAAMyxB,EAAQC,aAAY,KACtB,MAAMjV,EAAOvoB,EAAIsvB,GAAGmO,cAAc,IAElCz5B,KAAKqiB,MAAMiJ,GAAGoO,QAAQnV,KACvB,IACH,IAAIzd,EAAU,EACd,MAAQgB,GAAQ9H,KAAKi4B,SAAS,CAC1B,MAAM5b,QAAWrc,KAAKqiB,MAAMiJ,GAAGuO,WAAW,GAC1C,GAAIxd,EACA,GAAIA,EAAGrV,OAAShL,EAAIsvB,GAAGwO,SAEnB,GADA95B,KAAKa,IAAImjB,YACLhkB,KAAKsL,OAAOyuB,UACZ/5B,KAAKsL,OAAO0c,gBAEX,CACD,MAAM3a,EAAUrR,EAAIsvB,GAAG0O,WAAW3d,EAAIrc,KAAKk4B,QAC3C,GAAI7qB,EACA,GAAuB,iBAAZA,EAAsB,CAC7B,MAAMlD,EAAS8vB,GAAmB5sB,GAC9BlD,IACArC,QAAaqC,EAAO+vB,KAAKl6B,KAAMsL,EAAQ+Q,QAGnB,mBAAZhP,IACZvF,QAAauF,EAAQ6sB,KAAKl6B,KAAMsL,EAAQ+Q,SAKnD,GAAIA,EAAGrV,OAAShL,EAAIsvB,GAAG6O,KACxBn6B,KAAKqiB,MAAMkC,KAAKlI,GAChBvV,GAAWuV,EAAGiI,IAAM,QAGnB,GAAItkB,KAAKg4B,OAAS3b,EAAGrV,OAAShL,EAAIsvB,GAAG8O,WACtC,IAAKp6B,KAAKsL,OAAOyuB,UAAW,CAExB,MAAMM,EAAcr6B,KAAKsL,OAAOgvB,UAC1B3tB,EAAO3Q,EAAI2Q,KAAKgmB,QAAQ0H,EAAahe,EAAGxc,EAAGwc,EAAGvc,EAAG9D,EAAIu+B,OACvD5tB,EACA3M,KAAKa,IAAI25B,cAAc7tB,GAAM,GAG7B3M,KAAKa,IAAImjB,YAEbhkB,KAAK84B,aAGJ94B,KAAKg4B,OAAS3b,EAAGrV,OAAShL,EAAIsvB,GAAGmP,QACtCjvB,QAAQC,IAAI,QAAS4Q,EAAGxc,EAAGwc,EAAGvc,GAC1BE,KAAKsL,OAAOyuB,UACZ/5B,KAAKsL,OAAO0c,YAGZhoB,KAAKsL,OAAOsc,QAAQvL,EAAGxc,EAAGwc,EAAGvc,IAIzC,KAAIgH,EAAU,MAGdA,GAAW,GACP9G,KAAKsL,OAAOyuB,WAAW,CACvB,MAAM/sB,EAAUhN,KAAKsL,OAAO0B,QACtB6a,EAAO7rB,EAAI2Q,KAAKmb,SAAS9a,EAAShN,KAAKsL,OAAOzL,EAAGG,KAAKsL,OAAOxL,GAAG,CAACD,EAAGC,IAAME,KAAKa,IAAImZ,SAASna,EAAGC,IACjGE,KAAKa,IAAI6X,QAAQ7Y,EAAGC,KAAOE,KAAKsL,SACpC,GAAKuc,EAGA,CACD,MAAM1d,EAASuwB,EAAgB,WAC/B,IAAKvwB,EACD,MAAM,IAAIhD,MAAM,kCAEpB,GADAW,QAAaqC,EAAOnK,KAAMA,KAAKsL,OAAQ,CAAE2J,IAAK4S,IAC1C/f,EAAM,CACN,MAAMuyB,EAAcr6B,KAAKsL,OAAOgvB,UAC1B3tB,EAAO3Q,EAAI2Q,KAAKgmB,QAAQ0H,EAAartB,EAAQnN,EAAGmN,EAAQlN,EAAG9D,EAAIu+B,OACjE5tB,GAAQA,EAAK7I,OAEb9D,KAAKa,IAAI25B,cAAc7tB,GAAM,GAG7B3M,KAAKa,IAAImjB,kBAfjBhkB,KAAKsL,OAAO0c,aAsBxB,OADA4R,cAAcL,GACPzxB,QC1LF,OAAQ,CACjBoJ,GAAI,IACJf,GAAI,QACJgB,GAAI,QACJ1Q,MAAO,gBACPwC,KAAM,oBACNqM,QAAS,KACTF,SAAU,MAED,QAAS,CAClB8B,GAAI,IACJf,GAAInU,EAAIiU,MAAMhJ,KAAK,CAAC,GAAI,GAAI,KAAK0zB,KAAK,GAAI,EAAG,EAAG,GAChDxpB,GAAInV,EAAIiU,MAAMhJ,KAAK,CAAC,EAAG,EAAG,KAAK0zB,KAAK,EAAG,EAAG,EAAG,GAC7CvrB,SAAU,GACVE,QAAS,MACTjM,OAAQ,sBAEC,OAAQ,CACjB6N,GAAI,IACJf,GAAI,CAAC,IAAK,GAAI,IACdgB,GAAI,CAAC,GAAI,GAAI,IACb/B,SAAU,GACV3O,MAAO,oFACP6O,QAAS,IACTzB,QAAS,CACL+sB,MAAO,iBACPC,KAAM,yBAEVx3B,OAAQ,oBAEC,YAAa,OAAQ,CAC9B6N,GAAI,IACJf,GAAI,CAAC,IAAK,GAAI,IACdgB,GAAI,CAAC,GAAI,GAAI,IACb/B,SAAU,GACV3O,MAAO,oCACPwC,KAAM,YACNqM,QAAS,KACTzB,QAAS,CACL0W,KAAM,CACF/S,OAAQ,IACR3D,QAAS,eAEb+sB,MAAO,KACPC,KAAM,KACNC,MAAO,eAEXz3B,OAAQ,mBAEC,mBAAoB,YAAa,CAC1CwK,QAAS,CACL0W,KAAM,KACNuW,MAAO,eAEXz3B,OAAQ,mBAEC,YAAa,CACtB6N,GAAI,IACJf,GAAI,CAAC,IAAK,GAAI,IACdgB,GAAI,CAAC,GAAI,GAAI,IACb/B,SAAU,IACV3O,MAAO,2EACPwC,KAAM,mBACNqM,QAAS,KACTzB,QAAS,CACLvC,OAAQ,kBAEZjI,OAAQ,6BAEC,cAAe,CACxB6N,GAAI,IACJf,GAAI,CAAC,IAAK,GAAI,IACdgB,GAAI,CAAC,GAAI,GAAI,IACb/B,SAAU,IACV3O,MAAO,6EACPwC,KAAM,qBACNqM,QAAS,IACTzB,QAAS,CACLvC,OAAQ,oBAEZjI,OAAQ,8BAEC,OAAQ,CACjB6N,GAAI,IACJf,GAAInU,EAAIiU,MAAMhJ,KAAK,CAAC,EAAG,EAAG,IAAI0zB,KAAK,EAAG,EAAG,EAAG,GAC5CxpB,GAAInV,EAAIiU,MAAMhJ,KAAK,CAAC,GAAI,GAAI,KAAK0zB,KAAK,GAAI,GAAI,EAAG,GACjDvrB,SAAU,IACV3O,MAAO,eACP6O,QAAS,IACTrM,KAAM,aACNK,YAAa,oCACbD,OAAQ,yBAEC,cAAe,CACxB6N,GAAI,IACJf,GAAInU,EAAIiU,MAAMhJ,KAAK,CAAC,EAAG,EAAG,IAAI0zB,KAAK,EAAG,EAAG,EAAG,GAC5CxpB,GAAInV,EAAIiU,MAAMhJ,KAAK,CAAC,GAAI,GAAI,KAAK0zB,KAAK,GAAI,GAAI,EAAG,GACjDvrB,SAAU,IACV3O,MAAO,4BACP6O,QAAS,IACTrM,KAAM,mBACNK,YAAa,oCACbD,OAAQ,uBAEC,OAAQ,CACjB6N,GAAI,IACJf,GAAInU,EAAIiU,MAAMhJ,KAAK,CAAC,EAAG,EAAG,KAAK8zB,MAAM,GAAI,EAAG,EAAG,IAC/C5pB,GAAInV,EAAIiU,MAAMhJ,KAAK,CAAC,GAAI,GAAI,KAAK8zB,MAAM,EAAG,EAAG,EAAG,GAChD3rB,SAAU,GACV3O,MAAO,eACPwC,KAAM,aACNqM,QAAS,MACTjM,OAAQ,sBAEC,UAAW,CACpB6N,GAAI,IACJf,GAAInU,EAAIiU,MAAMhJ,KAAK,CAAC,EAAG,EAAG,KAAK8zB,MAAM,GAAI,EAAG,EAAG,IAC/C5pB,GAAInV,EAAIiU,MAAMhJ,KAAK,CAAC,GAAI,GAAI,KAAK8zB,MAAM,EAAG,EAAG,GAAI,IACjD3rB,SAAU,GACVnM,KAAM,gBACNqM,QAAS,MACT7O,MAAO,kBAEP4C,OAAQ,yBAEC,SAAU,CACnB6N,GAAI,IACJf,GAAI,CAAC,IAAK,GAAI,IACdf,SAAU,GACV7O,MAAO,UACPE,MAAO,gCACP6O,QAAS,IACTD,WAAY,OACZhM,OAAQ"}