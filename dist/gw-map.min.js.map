{"version":3,"file":"gw-map.min.js","sources":["../js/flags.js","../js/tileEvent.js","../js/light.js","../js/tile.js","../js/cell.js","../js/map.js","../js/tiles.js"],"sourcesContent":["import { flag as Flag } from \"gw-utils\";\nexport var Layer;\n(function (Layer) {\n    Layer[Layer[\"GROUND\"] = 0] = \"GROUND\";\n    Layer[Layer[\"LIQUID\"] = 1] = \"LIQUID\";\n    Layer[Layer[\"SURFACE\"] = 2] = \"SURFACE\";\n    Layer[Layer[\"GAS\"] = 3] = \"GAS\";\n    Layer[Layer[\"ITEM\"] = 4] = \"ITEM\";\n    Layer[Layer[\"ACTOR\"] = 5] = \"ACTOR\";\n    Layer[Layer[\"PLAYER\"] = 6] = \"PLAYER\";\n    Layer[Layer[\"FX\"] = 7] = \"FX\";\n    Layer[Layer[\"UI\"] = 8] = \"UI\";\n})(Layer || (Layer = {}));\nconst Fl = Flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Activation;\n(function (Activation) {\n    Activation[Activation[\"DFF_SUBSEQ_ALWAYS\"] = Fl(0)] = \"DFF_SUBSEQ_ALWAYS\";\n    Activation[Activation[\"DFF_SUBSEQ_EVERYWHERE\"] = Fl(1)] = \"DFF_SUBSEQ_EVERYWHERE\";\n    Activation[Activation[\"DFF_TREAT_AS_BLOCKING\"] = Fl(2)] = \"DFF_TREAT_AS_BLOCKING\";\n    Activation[Activation[\"DFF_PERMIT_BLOCKING\"] = Fl(3)] = \"DFF_PERMIT_BLOCKING\";\n    Activation[Activation[\"DFF_ACTIVATE_DORMANT_MONSTER\"] = Fl(4)] = \"DFF_ACTIVATE_DORMANT_MONSTER\";\n    Activation[Activation[\"DFF_BLOCKED_BY_OTHER_LAYERS\"] = Fl(6)] = \"DFF_BLOCKED_BY_OTHER_LAYERS\";\n    Activation[Activation[\"DFF_SUPERPRIORITY\"] = Fl(7)] = \"DFF_SUPERPRIORITY\";\n    Activation[Activation[\"DFF_AGGRAVATES_MONSTERS\"] = Fl(8)] = \"DFF_AGGRAVATES_MONSTERS\";\n    Activation[Activation[\"DFF_RESURRECT_ALLY\"] = Fl(9)] = \"DFF_RESURRECT_ALLY\";\n    Activation[Activation[\"DFF_EMIT_EVENT\"] = Fl(10)] = \"DFF_EMIT_EVENT\";\n    Activation[Activation[\"DFF_NO_REDRAW_CELL\"] = Fl(11)] = \"DFF_NO_REDRAW_CELL\";\n    Activation[Activation[\"DFF_ABORT_IF_BLOCKS_MAP\"] = Fl(12)] = \"DFF_ABORT_IF_BLOCKS_MAP\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ITEMS\"] = Fl(13)] = \"DFF_BLOCKED_BY_ITEMS\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ACTORS\"] = Fl(14)] = \"DFF_BLOCKED_BY_ACTORS\";\n    Activation[Activation[\"DFF_ALWAYS_FIRE\"] = Fl(15)] = \"DFF_ALWAYS_FIRE\";\n    Activation[Activation[\"DFF_NO_MARK_FIRED\"] = Fl(16)] = \"DFF_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Activation[Activation[\"DFF_PROTECTED\"] = Fl(19)] = \"DFF_PROTECTED\";\n    Activation[Activation[\"DFF_SPREAD_CIRCLE\"] = Fl(20)] = \"DFF_SPREAD_CIRCLE\";\n    Activation[Activation[\"DFF_SPREAD_LINE\"] = Fl(21)] = \"DFF_SPREAD_LINE\";\n    Activation[Activation[\"DFF_NULL_SURFACE\"] = Fl(22)] = \"DFF_NULL_SURFACE\";\n    Activation[Activation[\"DFF_NULL_LIQUID\"] = Fl(23)] = \"DFF_NULL_LIQUID\";\n    Activation[Activation[\"DFF_NULL_GAS\"] = Fl(24)] = \"DFF_NULL_GAS\";\n    Activation[Activation[\"DFF_EVACUATE_CREATURES\"] = Fl(25)] = \"DFF_EVACUATE_CREATURES\";\n    Activation[Activation[\"DFF_EVACUATE_ITEMS\"] = Fl(26)] = \"DFF_EVACUATE_ITEMS\";\n    Activation[Activation[\"DFF_BUILD_IN_WALLS\"] = Fl(27)] = \"DFF_BUILD_IN_WALLS\";\n    Activation[Activation[\"DFF_MUST_TOUCH_WALLS\"] = Fl(28)] = \"DFF_MUST_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_NO_TOUCH_WALLS\"] = Fl(29)] = \"DFF_NO_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_ONLY_IF_EMPTY\"] = Activation.DFF_BLOCKED_BY_ITEMS | Activation.DFF_BLOCKED_BY_ACTORS] = \"DFF_ONLY_IF_EMPTY\";\n    Activation[Activation[\"DFF_NULLIFY_CELL\"] = Activation.DFF_NULL_SURFACE | Activation.DFF_NULL_LIQUID | Activation.DFF_NULL_GAS] = \"DFF_NULLIFY_CELL\";\n})(Activation || (Activation = {}));\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_OBSTRUCTS_PASSABILITY\"] = Fl(0)] = \"T_OBSTRUCTS_PASSABILITY\";\n    Tile[Tile[\"T_OBSTRUCTS_VISION\"] = Fl(1)] = \"T_OBSTRUCTS_VISION\";\n    Tile[Tile[\"T_OBSTRUCTS_ITEMS\"] = Fl(2)] = \"T_OBSTRUCTS_ITEMS\";\n    Tile[Tile[\"T_OBSTRUCTS_SURFACE\"] = Fl(3)] = \"T_OBSTRUCTS_SURFACE\";\n    Tile[Tile[\"T_OBSTRUCTS_GAS\"] = Fl(4)] = \"T_OBSTRUCTS_GAS\";\n    Tile[Tile[\"T_OBSTRUCTS_LIQUID\"] = Fl(5)] = \"T_OBSTRUCTS_LIQUID\";\n    Tile[Tile[\"T_OBSTRUCTS_TILE_EFFECTS\"] = Fl(6)] = \"T_OBSTRUCTS_TILE_EFFECTS\";\n    Tile[Tile[\"T_OBSTRUCTS_DIAGONAL_MOVEMENT\"] = Fl(7)] = \"T_OBSTRUCTS_DIAGONAL_MOVEMENT\";\n    Tile[Tile[\"T_GAS\"] = Fl(9)] = \"T_GAS\";\n    Tile[Tile[\"T_BRIDGE\"] = Fl(10)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(11)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(12)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(13)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(14)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(15)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(16)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_CAUSES_POISON\"] = Fl(18)] = \"T_CAUSES_POISON\";\n    Tile[Tile[\"T_CAUSES_DAMAGE\"] = Fl(19)] = \"T_CAUSES_DAMAGE\";\n    Tile[Tile[\"T_CAUSES_NAUSEA\"] = Fl(20)] = \"T_CAUSES_NAUSEA\";\n    Tile[Tile[\"T_CAUSES_PARALYSIS\"] = Fl(21)] = \"T_CAUSES_PARALYSIS\";\n    Tile[Tile[\"T_CAUSES_CONFUSION\"] = Fl(22)] = \"T_CAUSES_CONFUSION\";\n    Tile[Tile[\"T_CAUSES_HEALING\"] = Fl(23)] = \"T_CAUSES_HEALING\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(24)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_CAUSES_EXPLOSIVE_DAMAGE\"] = Fl(25)] = \"T_CAUSES_EXPLOSIVE_DAMAGE\";\n    Tile[Tile[\"T_SACRED\"] = Fl(26)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(27)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(28)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(29)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(30)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_OBSTRUCTS_VISION |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    Tile[Tile[\"T_OBSTRUCTS_EVERYTHING\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_OBSTRUCTS_VISION |\n        Tile.T_OBSTRUCTS_ITEMS |\n        Tile.T_OBSTRUCTS_GAS |\n        Tile.T_OBSTRUCTS_SURFACE |\n        Tile.T_OBSTRUCTS_LIQUID |\n        Tile.T_OBSTRUCTS_DIAGONAL_MOVEMENT] = \"T_OBSTRUCTS_EVERYTHING\";\n    Tile[Tile[\"T_HARMFUL_TERRAIN\"] = Tile.T_CAUSES_POISON |\n        Tile.T_IS_FIRE |\n        Tile.T_CAUSES_DAMAGE |\n        Tile.T_CAUSES_PARALYSIS |\n        Tile.T_CAUSES_CONFUSION |\n        Tile.T_CAUSES_EXPLOSIVE_DAMAGE] = \"T_HARMFUL_TERRAIN\";\n    Tile[Tile[\"T_RESPIRATION_IMMUNITIES\"] = Tile.T_CAUSES_DAMAGE |\n        Tile.T_CAUSES_CONFUSION |\n        Tile.T_CAUSES_PARALYSIS |\n        Tile.T_CAUSES_NAUSEA] = \"T_RESPIRATION_IMMUNITIES\";\n    Tile[Tile[\"T_IS_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_LIQUID\";\n    Tile[Tile[\"T_STAIR_BLOCKERS\"] = Tile.T_OBSTRUCTS_ITEMS |\n        Tile.T_OBSTRUCTS_SURFACE |\n        Tile.T_OBSTRUCTS_GAS |\n        Tile.T_OBSTRUCTS_LIQUID |\n        Tile.T_OBSTRUCTS_TILE_EFFECTS] = \"T_STAIR_BLOCKERS\";\n})(Tile || (Tile = {}));\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    TileMech[TileMech[\"TM_IS_SECRET\"] = Fl(0)] = \"TM_IS_SECRET\";\n    TileMech[TileMech[\"TM_PROMOTES_WITH_KEY\"] = Fl(1)] = \"TM_PROMOTES_WITH_KEY\";\n    TileMech[TileMech[\"TM_PROMOTES_WITHOUT_KEY\"] = Fl(2)] = \"TM_PROMOTES_WITHOUT_KEY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_STEP\"] = Fl(3)] = \"TM_PROMOTES_ON_STEP\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_ITEM_REMOVE\"] = Fl(4)] = \"TM_PROMOTES_ON_ITEM_REMOVE\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_PLAYER_ENTRY\"] = Fl(5)] = \"TM_PROMOTES_ON_PLAYER_ENTRY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_SACRIFICE_ENTRY\"] = Fl(6)] = \"TM_PROMOTES_ON_SACRIFICE_ENTRY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_ELECTRICITY\"] = Fl(7)] = \"TM_PROMOTES_ON_ELECTRICITY\";\n    TileMech[TileMech[\"TM_ALLOWS_SUBMERGING\"] = Fl(8)] = \"TM_ALLOWS_SUBMERGING\";\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_EXTINGUISHES_FIRE\"] = Fl(14)] = \"TM_EXTINGUISHES_FIRE\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_REFLECTS_BOLTS\"] = Fl(16)] = \"TM_REFLECTS_BOLTS\";\n    TileMech[TileMech[\"TM_STAND_IN_TILE\"] = Fl(17)] = \"TM_STAND_IN_TILE\";\n    TileMech[TileMech[\"TM_LIST_IN_SIDEBAR\"] = Fl(18)] = \"TM_LIST_IN_SIDEBAR\";\n    TileMech[TileMech[\"TM_VISUALLY_DISTINCT\"] = Fl(19)] = \"TM_VISUALLY_DISTINCT\";\n    TileMech[TileMech[\"TM_BRIGHT_MEMORY\"] = Fl(20)] = \"TM_BRIGHT_MEMORY\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_CONNECTS_LEVEL\"] = Fl(22)] = \"TM_CONNECTS_LEVEL\";\n    TileMech[TileMech[\"TM_INTERRUPT_EXPLORATION_WHEN_SEEN\"] = Fl(23)] = \"TM_INTERRUPT_EXPLORATION_WHEN_SEEN\";\n    TileMech[TileMech[\"TM_INVERT_WHEN_HIGHLIGHTED\"] = Fl(24)] = \"TM_INVERT_WHEN_HIGHLIGHTED\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    TileMech[TileMech[\"TM_PROMOTES\"] = TileMech.TM_PROMOTES_WITH_KEY |\n        TileMech.TM_PROMOTES_WITHOUT_KEY |\n        TileMech.TM_PROMOTES_ON_STEP |\n        TileMech.TM_PROMOTES_ON_ITEM_REMOVE |\n        TileMech.TM_PROMOTES_ON_SACRIFICE_ENTRY |\n        TileMech.TM_PROMOTES_ON_ELECTRICITY |\n        TileMech.TM_PROMOTES_ON_PLAYER_ENTRY] = \"TM_PROMOTES\";\n})(TileMech || (TileMech = {}));\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"REVEALED\"] = Fl(0)] = \"REVEALED\";\n    Cell[Cell[\"VISIBLE\"] = Fl(1)] = \"VISIBLE\";\n    Cell[Cell[\"WAS_VISIBLE\"] = Fl(2)] = \"WAS_VISIBLE\";\n    Cell[Cell[\"IN_FOV\"] = Fl(3)] = \"IN_FOV\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(4)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_MONSTER\"] = Fl(5)] = \"HAS_MONSTER\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(6)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(7)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_STAIRS\"] = Fl(8)] = \"HAS_STAIRS\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(9)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"CELL_CHANGED\"] = Fl(10)] = \"CELL_CHANGED\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(12)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(13)] = \"IS_CURSOR\";\n    Cell[Cell[\"MAGIC_MAPPED\"] = Fl(14)] = \"MAGIC_MAPPED\";\n    Cell[Cell[\"ITEM_DETECTED\"] = Fl(15)] = \"ITEM_DETECTED\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(16)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"CLAIRVOYANT_VISIBLE\"] = Fl(17)] = \"CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"WAS_CLAIRVOYANT_VISIBLE\"] = Fl(18)] = \"WAS_CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"CLAIRVOYANT_DARKENED\"] = Fl(19)] = \"CLAIRVOYANT_DARKENED\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(20)] = \"IMPREGNABLE\";\n    Cell[Cell[\"TELEPATHIC_VISIBLE\"] = Fl(22)] = \"TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"WAS_TELEPATHIC_VISIBLE\"] = Fl(23)] = \"WAS_TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"MONSTER_DETECTED\"] = Fl(24)] = \"MONSTER_DETECTED\";\n    Cell[Cell[\"WAS_MONSTER_DETECTED\"] = Fl(25)] = \"WAS_MONSTER_DETECTED\";\n    Cell[Cell[\"LIGHT_CHANGED\"] = Fl(27)] = \"LIGHT_CHANGED\";\n    Cell[Cell[\"CELL_LIT\"] = Fl(28)] = \"CELL_LIT\";\n    Cell[Cell[\"IS_IN_SHADOW\"] = Fl(29)] = \"IS_IN_SHADOW\";\n    Cell[Cell[\"CELL_DARK\"] = Fl(30)] = \"CELL_DARK\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.REVEALED |\n        Cell.MAGIC_MAPPED |\n        Cell.ITEM_DETECTED |\n        Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.HAS_STAIRS |\n        Cell.STABLE_MEMORY |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE | Cell.CLAIRVOYANT_VISIBLE | Cell.TELEPATHIC_VISIBLE] = \"ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"HAS_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_MONSTER] = \"HAS_ACTOR\";\n    Cell[Cell[\"IS_WAS_ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE |\n        Cell.WAS_VISIBLE |\n        Cell.CLAIRVOYANT_VISIBLE |\n        Cell.WAS_CLAIRVOYANT_VISIBLE |\n        Cell.TELEPATHIC_VISIBLE |\n        Cell.WAS_TELEPATHIC_VISIBLE] = \"IS_WAS_ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.VISIBLE | Cell.IN_FOV | Cell.NEEDS_REDRAW | Cell.CELL_CHANGED] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n///////////////////////////////////////////////////////\n// CELL MECH\nexport var CellMech;\n(function (CellMech) {\n    CellMech[CellMech[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    CellMech[CellMech[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    CellMech[CellMech[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    CellMech[CellMech[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(4)] = \"CAUGHT_FIRE_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_FIRED_THIS_TURN\"] = Fl(5)] = \"EVENT_FIRED_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_PROTECTED\"] = Fl(6)] = \"EVENT_PROTECTED\";\n    CellMech[CellMech[\"IS_IN_LOOP\"] = Fl(10)] = \"IS_IN_LOOP\";\n    CellMech[CellMech[\"IS_CHOKEPOINT\"] = Fl(11)] = \"IS_CHOKEPOINT\";\n    CellMech[CellMech[\"IS_GATE_SITE\"] = Fl(12)] = \"IS_GATE_SITE\";\n    CellMech[CellMech[\"IS_IN_ROOM_MACHINE\"] = Fl(13)] = \"IS_IN_ROOM_MACHINE\";\n    CellMech[CellMech[\"IS_IN_AREA_MACHINE\"] = Fl(14)] = \"IS_IN_AREA_MACHINE\";\n    CellMech[CellMech[\"IS_POWERED\"] = Fl(15)] = \"IS_POWERED\";\n    CellMech[CellMech[\"IS_IN_MACHINE\"] = CellMech.IS_IN_ROOM_MACHINE | CellMech.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    CellMech[CellMech[\"PERMANENT_MECH_FLAGS\"] = CellMech.SEARCHED_FROM_HERE |\n        CellMech.PRESSURE_PLATE_DEPRESSED |\n        CellMech.KNOWN_TO_BE_TRAP_FREE |\n        CellMech.IS_IN_LOOP |\n        CellMech.IS_CHOKEPOINT |\n        CellMech.IS_GATE_SITE |\n        CellMech.IS_IN_MACHINE] = \"PERMANENT_MECH_FLAGS\";\n})(CellMech || (CellMech = {}));\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_STABLE_GLOW_LIGHTS\"] = Fl(1)] = \"MAP_STABLE_GLOW_LIGHTS\";\n    Map[Map[\"MAP_STABLE_LIGHTS\"] = Fl(2)] = \"MAP_STABLE_LIGHTS\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(7)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = Map.MAP_STABLE_LIGHTS | Map.MAP_STABLE_GLOW_LIGHTS | Map.MAP_FOV_CHANGED] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import { utils as Utils, random, grid as Grid, events as Events, color as Color, flag as Flag, data as Data, message as Msg, make as Make, } from \"gw-utils\";\nimport { Layer, Activation as Flags, Tile as TileFlags, CellMech as CellMechFlags, } from \"./flags\";\nimport * as Tile from \"./tile\";\nexport { Flags };\nexport class TileEvent {\n    constructor(opts = {}) {\n        if (typeof opts === \"function\") {\n            opts = {\n                fn: opts,\n            };\n        }\n        this.tile = opts.tile || null;\n        this.fn = opts.fn || null;\n        this.item = opts.item || null;\n        this.chance = opts.chance || 0;\n        this.volume = opts.volume || 0;\n        // spawning pattern:\n        this.spread = opts.spread || 0;\n        this.radius = opts.radius || 0;\n        this.decrement = opts.decrement || 0;\n        this.flags = Flag.from(Flags, opts.flags);\n        this.matchTile = opts.matchTile || opts.needs || 0; /* ENUM tileType */\n        this.next = opts.next || null; /* ENUM makeEventTypes */\n        this.message = opts.message || null;\n        this.lightFlare = opts.flare || null;\n        this.flashColor = opts.flash ? Color.from(opts.flash) : null;\n        // this.effectRadius = radius || 0;\n        this.messageDisplayed = false;\n        this.emit = opts.emit || null; // name of the event to emit when activated\n        this.id = opts.id || null;\n    }\n}\nexport function make(opts) {\n    if (!opts)\n        return null;\n    if (typeof opts === \"string\") {\n        opts = { tile: opts };\n    }\n    const te = new TileEvent(opts);\n    return te;\n}\nMake.tileEvent = make;\nexport const activations = {\n    DF_NONE: null,\n};\nexport function install(id, event) {\n    if (!(event instanceof TileEvent)) {\n        event = make(event);\n    }\n    activations[id] = event;\n    if (event)\n        event.id = id;\n    return event;\n}\nexport function resetAllMessages() {\n    Object.values(activations).forEach((f) => {\n        if (f instanceof TileEvent) {\n            f.messageDisplayed = false;\n        }\n    });\n}\n// returns whether the feature was successfully generated (false if we aborted because of blocking)\nexport async function spawn(activation, ctx = {}) {\n    let i, j;\n    if (!activation)\n        return false;\n    if (!ctx)\n        return false;\n    let feat;\n    if (typeof activation === \"string\") {\n        // @ts-ignore\n        feat = activations[activation];\n        if (!feat)\n            Utils.ERROR(\"Unknown tile Event: \" + activation);\n    }\n    else if (typeof activation === \"function\") {\n        return activation(ctx);\n    }\n    else {\n        feat = activation;\n    }\n    const map = ctx.map;\n    const x = ctx.x;\n    const y = ctx.y;\n    if (!map || x === undefined || y === undefined) {\n        Utils.ERROR(\"MAP, x, y are required in context.\");\n    }\n    if (ctx.safe &&\n        map.hasCellMechFlag(x, y, CellMechFlags.EVENT_FIRED_THIS_TURN)) {\n        if (!(feat.flags & Flags.DFF_ALWAYS_FIRE)) {\n            // Activation.debug('spawn - already fired.');\n            return false;\n        }\n    }\n    // Activation.debug('spawn', x, y, 'id=', feat.id, 'tile=', feat.tile, 'item=', feat.item);\n    ctx.refreshCell = ctx.refreshCell || !(feat.flags & Flags.DFF_NO_REDRAW_CELL);\n    const abortIfBlocking = (ctx.abortIfBlocking =\n        ctx.abortIfBlocking || feat.flags & Flags.DFF_ABORT_IF_BLOCKS_MAP);\n    // if ((feat.flags & DFF_RESURRECT_ALLY) && !resurrectAlly(x, y))\n    // {\n    //     return false;\n    // }\n    if (feat.message &&\n        feat.message.length &&\n        !feat.messageDisplayed &&\n        map.isVisible(x, y)) {\n        feat.messageDisplayed = true;\n        Msg.add(feat.message);\n    }\n    let tile = null;\n    if (feat.tile) {\n        tile = Tile.tiles[feat.tile] || null;\n        if (!tile) {\n            Utils.ERROR(\"Unknown tile: \" + feat.tile);\n        }\n    }\n    let item = null;\n    if (feat.item && \"item\" in Make) {\n        item = Make.item(feat.item);\n        if (!item) {\n            Utils.ERROR(\"Unknown item: \" + feat.item);\n        }\n    }\n    // Blocking keeps track of whether to abort if it turns out that the DF would obstruct the level.\n    const blocking = (ctx.blocking =\n        abortIfBlocking &&\n            !(feat.flags & Flags.DFF_PERMIT_BLOCKING) &&\n            ((tile && tile.flags & TileFlags.T_PATHING_BLOCKER) ||\n                (item && item.blocksMove()) ||\n                feat.flags & Flags.DFF_TREAT_AS_BLOCKING)\n            ? true\n            : false);\n    // Activation.debug('- blocking', blocking);\n    const spawnMap = Grid.alloc(map.width, map.height);\n    let didSomething = false;\n    computeSpawnMap(feat, spawnMap, ctx);\n    if (!blocking ||\n        !map.gridDisruptsPassability(spawnMap, { bounds: ctx.bounds })) {\n        if (feat.flags & Flags.DFF_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (feat.flags & Flags.DFF_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (feat.flags & Flags.DFF_NULLIFY_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (nullifyCells(map, spawnMap, feat.flags)) {\n                didSomething = true;\n            }\n        }\n        if (tile || item || feat.fn) {\n            if (await spawnTiles(feat, spawnMap, ctx, tile, item)) {\n                didSomething = true;\n            }\n        }\n    }\n    if (item) {\n        item.delete();\n    }\n    if (didSomething && feat.flags & Flags.DFF_PROTECTED) {\n        spawnMap.forEach((v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            cell.mechFlags |= CellMechFlags.EVENT_PROTECTED;\n        });\n    }\n    if (didSomething) {\n        // if ((feat.flags & Flags.DFF_AGGRAVATES_MONSTERS) && feat.effectRadius) {\n        //     await aggravateMonsters(feat.effectRadius, x, y, /* Color. */gray);\n        // }\n        // if (refreshCell && feat.flashColor && feat.effectRadius) {\n        //     await colorFlash(feat.flashColor, 0, (IN_FOV | CLAIRVOYANT_VISIBLE), 4, feat.effectRadius, x, y);\n        // }\n        // if (refreshCell && feat.lightFlare) {\n        //     createFlare(x, y, feat.lightFlare);\n        // }\n    }\n    // if (refreshCell && feat.tile\n    // \t&& (tile.flags & (TileFlags.T_IS_FIRE | TileFlags.T_AUTO_DESCENT))\n    // \t&& map.hasTileFlag(PLAYER.xLoc, PLAYER.yLoc, (TileFlags.T_IS_FIRE | TileFlags.T_AUTO_DESCENT)))\n    // {\n    // \tawait applyInstantTileEffectsToCreature(PLAYER);\n    // }\n    // apply tile effects\n    if (didSomething) {\n        for (let i = 0; i < spawnMap.width; ++i) {\n            for (let j = 0; j < spawnMap.height; ++j) {\n                const v = spawnMap[i][j];\n                if (!v || Data.gameHasEnded)\n                    continue;\n                const cell = map.cell(i, j);\n                if (cell.actor || cell.item) {\n                    for (let t of cell.tiles()) {\n                        await t.applyInstantEffects(map, i, j, cell);\n                        if (Data.gameHasEnded) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (feat.emit) {\n        await Events.emit(feat.emit, ctx);\n        didSomething = true;\n    }\n    if (Data.gameHasEnded) {\n        Grid.free(spawnMap);\n        return didSomething;\n    }\n    //\tif (succeeded && feat.message[0] && !feat.messageDisplayed && isVisible(x, y)) {\n    //\t\tfeat.messageDisplayed = true;\n    //\t\tmessage(feat.message, false);\n    //\t}\n    if (feat.next && (didSomething || feat.flags & Flags.DFF_SUBSEQ_ALWAYS)) {\n        // Activation.debug('- subsequent: %s, everywhere=%s', feat.next, feat.flags & Flags.DFF_SUBSEQ_EVERYWHERE);\n        if (feat.flags & Flags.DFF_SUBSEQ_EVERYWHERE) {\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j]) {\n                        ctx.x = i;\n                        ctx.y = j;\n                        await spawn(feat.next, ctx);\n                    }\n                }\n            }\n            ctx.x = x;\n            ctx.y = y;\n        }\n        else {\n            await spawn(feat.next, ctx);\n        }\n    }\n    if (didSomething) {\n        if (tile &&\n            tile.flags &\n                (TileFlags.T_DEEP_WATER | TileFlags.T_LAVA | TileFlags.T_AUTO_DESCENT)) {\n            Data.updateMapToShoreThisTurn = false;\n        }\n        // awaken dormant creatures?\n        // if (feat.flags & Flags.DFF_ACTIVATE_DORMANT_MONSTER) {\n        //     for (monst of map.dormant) {\n        //         if (monst.x == x && monst.y == y || spawnMap[monst.x][monst.y]) {\n        //             // found it!\n        //             toggleMonsterDormancy(monst);\n        //         }\n        //     }\n        // }\n    }\n    if (didSomething) {\n        spawnMap.forEach((v, i, j) => {\n            if (v)\n                map.redrawXY(i, j);\n        });\n        map.changed(true);\n        if (!(feat.flags & Flags.DFF_NO_MARK_FIRED)) {\n            spawnMap.forEach((v, i, j) => {\n                if (v) {\n                    map.setCellFlags(i, j, 0, CellMechFlags.EVENT_FIRED_THIS_TURN);\n                }\n            });\n        }\n    }\n    // Activation.debug('- spawn complete : @%d,%d, ok=%s, feat=%s', ctx.x, ctx.y, didSomething, feat.id);\n    Grid.free(spawnMap);\n    return didSomething;\n}\nfunction cellIsOk(feat, x, y, ctx = {}) {\n    const map = ctx.map;\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (feat.flags & Flags.DFF_BUILD_IN_WALLS) {\n        if (!cell.isWall())\n            return false;\n    }\n    else if (feat.flags & Flags.DFF_MUST_TOUCH_WALLS) {\n        let ok = false;\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = true;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    else if (feat.flags & Flags.DFF_NO_TOUCH_WALLS) {\n        let ok = true;\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = false;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    if (ctx.bounds && !ctx.bounds.containsXY(x, y))\n        return false;\n    if (feat.matchTile && !cell.hasTile(feat.matchTile))\n        return false;\n    if (cell.hasTileFlag(TileFlags.T_OBSTRUCTS_TILE_EFFECTS) &&\n        !feat.matchTile &&\n        (ctx.x != x || ctx.y != y))\n        return false;\n    return true;\n}\nexport function computeSpawnMap(feat, spawnMap, ctx = {}) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    const map = ctx.map;\n    const x = ctx.x;\n    const y = ctx.y;\n    const bounds = ctx.bounds || null;\n    if (bounds) {\n        // Activation.debug('- bounds', bounds);\n    }\n    let startProb = feat.spread || 0;\n    let probDec = feat.decrement || 0;\n    if (feat.matchTile && typeof feat.matchTile === \"string\") {\n        const name = feat.matchTile;\n        const tile = Tile.tiles[name];\n        if (!tile) {\n            Utils.ERROR(\"Failed to find match tile with name:\" + name);\n        }\n        feat.matchTile = tile.id;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let radius = feat.radius || 0;\n    if (feat.flags & Flags.DFF_SPREAD_CIRCLE) {\n        radius = 0;\n        startProb = startProb || 100;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        while (random.chance(startProb)) {\n            startProb -= probDec;\n            ++radius;\n        }\n        startProb = 100;\n        probDec = 0;\n    }\n    if (radius) {\n        startProb = startProb || 100;\n        spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n            if (!cellIsOk(feat, i, j, ctx))\n                return 0;\n            const dist = Math.floor(Utils.distanceBetween(x, y, i, j));\n            const prob = startProb - dist * probDec;\n            if (!random.chance(prob))\n                return 0;\n            return 1;\n        });\n        spawnMap[x][y] = 1;\n    }\n    else if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (feat.flags & Flags.DFF_SPREAD_LINE) {\n            x2 = x;\n            y2 = y;\n            const dir = Utils.DIRS[random.number(4)];\n            while (madeChange) {\n                madeChange = false;\n                x2 = x2 + dir[0];\n                y2 = y2 + dir[1];\n                if (spawnMap.hasXY(x2, y2) &&\n                    !spawnMap[x2][y2] &&\n                    cellIsOk(feat, x2, y2, ctx) &&\n                    random.chance(startProb)) {\n                    spawnMap[x2][y2] = 1;\n                    madeChange = true;\n                    startProb -= probDec;\n                }\n            }\n        }\n        else {\n            if (probDec <= 0)\n                probDec = startProb;\n            while (madeChange && startProb > 0) {\n                madeChange = false;\n                t++;\n                for (i = 0; i < map.width; i++) {\n                    for (j = 0; j < map.height; j++) {\n                        if (spawnMap[i][j] == t - 1) {\n                            for (dir = 0; dir < 4; dir++) {\n                                x2 = i + Utils.DIRS[dir][0];\n                                y2 = j + Utils.DIRS[dir][1];\n                                if (spawnMap.hasXY(x2, y2) &&\n                                    !spawnMap[x2][y2] &&\n                                    cellIsOk(feat, x2, y2, ctx) &&\n                                    random.chance(startProb)) {\n                                    spawnMap[x2][y2] = t;\n                                    madeChange = true;\n                                }\n                            }\n                        }\n                    }\n                }\n                startProb -= probDec;\n            }\n        }\n    }\n    if (!cellIsOk(feat, x, y, ctx)) {\n        spawnMap[x][y] = 0;\n    }\n}\nexport async function spawnTiles(feat, spawnMap, ctx, tile, item) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = feat.flags & Flags.DFF_BLOCKED_BY_OTHER_LAYERS;\n    const superpriority = feat.flags & Flags.DFF_SUPERPRIORITY;\n    const applyEffects = ctx.refreshCell;\n    const map = ctx.map;\n    const volume = ctx.volume || feat.volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.mechFlags & CellMechFlags.EVENT_PROTECTED)\n                continue;\n            if (tile) {\n                if (cell.layers[tile.layer] === tile.id) {\n                    // If the new cell does not already contains the fill terrain,\n                    if (tile.layer == Layer.GAS) {\n                        spawnMap[i][j] = 1;\n                        cell.gasVolume += volume;\n                    }\n                    else if (tile.layer == Layer.LIQUID) {\n                        spawnMap[i][j] = 1;\n                        cell.liquidVolume += volume;\n                    }\n                }\n                else if ((superpriority || cell.tile(tile.layer).priority < tile.priority) && // If the terrain in the layer to be overwritten has a higher priority number (unless superpriority),\n                    !cell.obstructsLayer(tile.layer) && // If we will be painting into the surface layer when that cell forbids it,\n                    (!cell.item || !(feat.flags & Flags.DFF_BLOCKED_BY_ITEMS)) &&\n                    (!cell.actor || !(feat.flags & Flags.DFF_BLOCKED_BY_ACTORS)) &&\n                    (!blockedByOtherLayers ||\n                        cell.highestPriorityTile().priority < tile.priority)) {\n                    // if the fill won't violate the priority of the most important terrain in this cell:\n                    spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                    map.setTile(i, j, tile, volume);\n                    // map.redrawCell(cell);\n                    // if (volume && cell.gas) {\n                    //     cell.volume += (feat.volume || 0);\n                    // }\n                    // debug('- tile', i, j, 'tile=', tile.id);\n                    // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                    accomplishedSomething = true;\n                }\n            }\n            if (item) {\n                if (superpriority || !cell.item) {\n                    if (!cell.hasTileFlag(TileFlags.T_OBSTRUCTS_ITEMS)) {\n                        spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                        if (cell.item) {\n                            map.removeItem(cell.item);\n                        }\n                        const clone = item.clone();\n                        map.addItem(i, j, clone);\n                        // map.redrawCell(cell);\n                        // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                        accomplishedSomething = true;\n                        // Activation.debug('- item', i, j, 'item=', itemKind.id);\n                    }\n                }\n            }\n            if (feat.fn) {\n                ctx.spawnMap = spawnMap;\n                if (await feat.fn(i, j, ctx)) {\n                    spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                    // map.redrawCell(cell);\n                    // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                    accomplishedSomething = true;\n                }\n            }\n            if (applyEffects) {\n                // if (PLAYER.xLoc == i && PLAYER.yLoc == j && !PLAYER.status.levitating && refresh) {\n                // \tflavorMessage(tileFlavor(PLAYER.xLoc, PLAYER.yLoc));\n                // }\n                // if (cell.actor || cell.item) {\n                // \tfor(let t of cell.tiles()) {\n                // \t\tawait t.applyInstantEffects(map, i, j, cell);\n                // \t\tif (Data.gameHasEnded) {\n                // \t\t\treturn true;\n                // \t\t}\n                // \t}\n                // }\n                // if (tile.flags & TileFlags.T_IS_FIRE) {\n                // \tif (cell.flags & CellFlags.HAS_ITEM) {\n                // \t\ttheItem = map.itemAt(i, j);\n                // \t\tif (theItem.flags & Flags.Item.ITEM_FLAMMABLE) {\n                // \t\t\tawait burnItem(theItem);\n                // \t\t}\n                // \t}\n                // }\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.changed(true);\n    }\n    return accomplishedSomething;\n}\nexport function nullifyCells(map, spawnMap, flags) {\n    let didSomething = false;\n    const nullSurface = flags & Flags.DFF_NULL_SURFACE;\n    const nullLiquid = flags & Flags.DFF_NULL_LIQUID;\n    const nullGas = flags & Flags.DFF_NULL_GAS;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        map.nullifyCellLayers(i, j, !!nullLiquid, !!nullSurface, !!nullGas);\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let i, j;\n    let didSomething = false;\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            if (!blockingMap[i][j])\n                continue;\n            const cell = map.cell(i, j);\n            if (!cell.actor)\n                continue;\n            const monst = cell.actor;\n            const loc = map.matchingLocNear(i, j, (cell) => {\n                return !monst.forbidsCell(cell);\n            }, { hallways: true, blockingMap });\n            if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                map.moveActor(loc[0], loc[1], monst);\n                // map.redrawXY(loc[0], loc[1]);\n                didSomething = true;\n            }\n        }\n    }\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    blockingMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (!cell.item)\n            return;\n        const item = cell.item;\n        const loc = map.matchingLocNear(i, j, (dest) => {\n            return !item.forbidsCell(dest);\n        }, { hallways: true, blockingMap });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(item);\n            map.addItem(loc[0], loc[1], item);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import { utils as Utils, range as Range, grid as Grid, color as Color, data as DATA, config as CONFIG, make as Make, } from \"gw-utils\";\nimport * as Flags from \"./flags\";\n// const LIGHT_SMOOTHING_THRESHOLD = 150;       // light components higher than this magnitude will be toned down a little\nexport const config = (CONFIG.light = { INTENSITY_DARK: 20 }); // less than 20% for highest color in rgb\nconst LIGHT_COMPONENTS = Color.make();\nexport class Light {\n    constructor(color, range, fadeTo, pass = false) {\n        this.fadeTo = 0;\n        this.passThroughActors = false;\n        this.id = null;\n        this.color = Color.from(color) || null; /* color */\n        this.radius = Range.make(range || 1);\n        this.fadeTo = fadeTo || 0;\n        this.passThroughActors = pass; // generally no, but miner light does (TODO - string parameter?  'false' or 'true')\n    }\n    copy(other) {\n        this.color = other.color;\n        this.radius.copy(other.radius);\n        this.fadeTo = other.fadeTo;\n        this.passThroughActors = other.passThroughActors;\n    }\n    get intensity() {\n        return intensity(this.color);\n    }\n    // Returns true if any part of the light hit cells that are in the player's field of view.\n    paint(map, x, y, maintainShadows = false, isMinersLight = false) {\n        if (!map)\n            return;\n        let k;\n        // let colorComponents = [0,0,0];\n        let lightMultiplier;\n        let radius = this.radius.value();\n        let outerRadius = Math.ceil(radius);\n        // calcLightComponents(colorComponents, this);\n        LIGHT_COMPONENTS.copy(this.color).bake();\n        // console.log('paint', LIGHT_COMPONENTS.toString(true), x, y, outerRadius);\n        // the miner's light does not dispel IS_IN_SHADOW,\n        // so the player can be in shadow despite casting his own light.\n        const dispelShadows = !isMinersLight &&\n            !maintainShadows &&\n            intensity(LIGHT_COMPONENTS) > config.INTENSITY_DARK;\n        const fadeToPercent = this.fadeTo;\n        const grid = Grid.alloc(map.width, map.height, 0);\n        map.calcFov(grid, x, y, outerRadius, this.passThroughActors ? 0 : Flags.Cell.HAS_ACTOR, Flags.Tile.T_OBSTRUCTS_VISION);\n        let overlappedFieldOfView = false;\n        grid.forCircle(x, y, outerRadius, (v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            lightMultiplier = Math.floor(100 -\n                (100 - fadeToPercent) * (Utils.distanceBetween(x, y, i, j) / radius));\n            for (k = 0; k < 3; k++) {\n                cell.light[k] += Math.floor((LIGHT_COMPONENTS[k] * lightMultiplier) / 100);\n            }\n            if (dispelShadows) {\n                cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n            }\n            if (cell.flags & (Flags.Cell.IN_FOV | Flags.Cell.ANY_KIND_OF_VISIBLE)) {\n                overlappedFieldOfView = true;\n            }\n            // console.log(i, j, lightMultiplier, cell.light);\n        });\n        if (dispelShadows) {\n            const cell = map.cell(x, y);\n            cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n        }\n        Grid.free(grid);\n        return overlappedFieldOfView;\n    }\n}\nexport function intensity(color) {\n    return Math.max(color[0], color[1], color[2]);\n}\nexport function make(...args) {\n    if (args.length == 1) {\n        const config = args[0];\n        if (typeof config === \"string\") {\n            const cached = lights[config];\n            if (cached)\n                return cached;\n            const [color, radius, fadeTo, pass] = config\n                .split(/[,|]/)\n                .map((t) => t.trim());\n            return new Light(Color.from(color), Range.from(radius || 1), Number.parseInt(fadeTo || \"0\"), !!pass && pass !== \"false\");\n        }\n        else if (Array.isArray(config)) {\n            const [color, radius, fadeTo, pass] = config;\n            return new Light(color, radius, fadeTo, pass);\n        }\n        else if (config && config.color) {\n            return new Light(Color.from(config.color), Range.from(config.radius), Number.parseInt(config.fadeTo || \"0\"), config.pass);\n        }\n        else {\n            throw new Error(\"Unknown Light config - \" + config);\n        }\n    }\n    else {\n        const [color, radius, fadeTo, pass] = args;\n        return new Light(color, radius, fadeTo, pass);\n    }\n}\nMake.light = make;\nexport const lights = {};\nexport function from(...args) {\n    if (args.length != 1)\n        Utils.ERROR(\"Unknown Light config: \" + JSON.stringify(args));\n    const arg = args[0];\n    if (typeof arg === \"string\") {\n        const cached = lights[arg];\n        if (cached)\n            return cached;\n    }\n    return make(arg);\n}\nexport function install(id, ...args) {\n    let source;\n    if (args.length == 1) {\n        source = make(args[0]);\n    }\n    else {\n        source = make(args[0], args[1], args[2], args[3]);\n    }\n    lights[id] = source;\n    if (source)\n        source.id = id;\n    return source;\n}\nexport function installAll(config = {}) {\n    const entries = Object.entries(config);\n    entries.forEach(([name, info]) => {\n        install(name, info);\n    });\n}\n// export function calcLightComponents(colorComponents, theLight) {\n// \tconst randComponent = cosmetic.range(0, theLight.color.rand);\n// \tcolorComponents[0] = randComponent + theLight.color.red + cosmetic.range(0, theLight.color.redRand);\n// \tcolorComponents[1] = randComponent + theLight.color.green + cosmetic.range(0, theLight.color.greenRand);\n// \tcolorComponents[2] = randComponent + theLight.color.blue + cosmetic.range(0, theLight.color.blueRand);\n// }\nfunction updateDisplayDetail(map) {\n    map.eachCell((cell, _i, _j) => {\n        // clear light flags\n        cell.flags &= ~(Flags.Cell.CELL_LIT | Flags.Cell.CELL_DARK);\n        if (cell.light.some((v, i) => v !== cell.oldLight[i])) {\n            cell.flags |= Flags.Cell.LIGHT_CHANGED;\n        }\n        if (cell.isDark()) {\n            cell.flags |= Flags.Cell.CELL_DARK;\n        }\n        else if (!(cell.flags & Flags.Cell.IS_IN_SHADOW)) {\n            cell.flags |= Flags.Cell.CELL_LIT;\n        }\n    });\n}\nexport function backUpLighting(map, lights) {\n    let k;\n    map.eachCell((cell, i, j) => {\n        for (k = 0; k < 3; k++) {\n            lights[i][j][k] = cell.light[k];\n        }\n    });\n}\nexport function restoreLighting(map, lights) {\n    let k;\n    map.eachCell((cell, i, j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = lights[i][j][k];\n        }\n    });\n}\nexport function recordOldLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.oldLight[k] = cell.light[k];\n            cell.flags &= ~Flags.Cell.LIGHT_CHANGED;\n        }\n    });\n}\nexport function zeroOutLights(map) {\n    let k;\n    const light = map.ambientLight ? map.ambientLight : [0, 0, 0];\n    map.eachCell((cell, _i, _j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = light[k];\n        }\n        cell.flags |= Flags.Cell.IS_IN_SHADOW;\n    });\n}\nexport function recordGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.glowLight[k] = cell.light[k];\n        }\n    });\n}\nexport function restoreGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = cell.glowLight[k];\n        }\n    });\n}\nexport function updateLighting(map) {\n    // Copy Light over oldLight\n    recordOldLights(map);\n    if (map.flags & Flags.Map.MAP_STABLE_LIGHTS)\n        return false;\n    // and then zero out Light.\n    zeroOutLights(map);\n    if (map.flags & Flags.Map.MAP_STABLE_GLOW_LIGHTS) {\n        restoreGlowLights(map);\n    }\n    else {\n        // GW.debug.log('painting glow lights.');\n        // Paint all glowing tiles.\n        map.eachGlowLight((light, x, y) => {\n            //   const light = lights[id];\n            if (light) {\n                light.paint(map, x, y);\n            }\n        });\n        recordGlowLights(map);\n        map.setFlag(Flags.Map.MAP_STABLE_GLOW_LIGHTS);\n    }\n    // Cycle through monsters and paint their lights:\n    map.eachDynamicLight((light, x, y) => {\n        light.paint(map, x, y);\n        // if (monst.mutationIndex >= 0 && mutationCatalog[monst.mutationIndex].light != lights['NO_LIGHT']) {\n        //     paint(map, mutationCatalog[monst.mutationIndex].light, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isBurning()) { // monst.status.burning && !(actor.kind.flags & Flags.Actor.AF_FIERY)) {\n        // \tpaint(map, lights.BURNING_CREATURE, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isTelepathicallyRevealed()) {\n        // \tpaint(map, lights['TELEPATHY_LIGHT'], actor.x, actor.y, false, true);\n        // }\n    });\n    // Also paint telepathy lights for dormant monsters.\n    // for (monst of map.dormantMonsters) {\n    //     if (monsterTelepathicallyRevealed(monst)) {\n    //         paint(map, lights['TELEPATHY_LIGHT'], monst.xLoc, monst.yLoc, false, true);\n    //     }\n    // }\n    updateDisplayDetail(map);\n    // Miner's light:\n    const PLAYER = DATA.player;\n    if (PLAYER) {\n        const MINERS_LIGHT = lights.MINERS_LIGHT;\n        if (MINERS_LIGHT && MINERS_LIGHT.radius) {\n            MINERS_LIGHT.paint(map, PLAYER.x, PLAYER.y, true, true);\n        }\n    }\n    map.setFlag(Flags.Map.MAP_STABLE_LIGHTS);\n    // if (PLAYER.status.invisible) {\n    //     PLAYER.info.foreColor = playerInvisibleColor;\n    // } else if (playerInDarkness()) {\n    // \tPLAYER.info.foreColor = playerInDarknessColor;\n    // } else if (pmap[PLAYER.xLoc][PLAYER.yLoc].flags & IS_IN_SHADOW) {\n    // \tPLAYER.info.foreColor = playerInShadowColor;\n    // } else {\n    // \tPLAYER.info.foreColor = playerInLightColor;\n    // }\n    return true;\n}\n// TODO - Move and make more generic\nexport function playerInDarkness(map, PLAYER, darkColor) {\n    const cell = map.cell(PLAYER.x, PLAYER.y);\n    return (cell.light[0] + 10 < darkColor.r &&\n        cell.light[1] + 10 < darkColor.g &&\n        cell.light[2] + 10 < darkColor.b);\n}\n","import { flag as Flag, utils as Utils, color as Color, canvas as Canvas, } from \"gw-utils\";\nimport { Tile as Flags, TileMech as MechFlags, Layer } from \"./flags\";\nimport * as TileEvent from \"./tileEvent\";\nimport * as Light from \"./light\";\nexport { Flags, MechFlags, Layer };\n/** Tile Class */\nexport class Tile {\n    /**\n     * Creates a new Tile object.\n     * @param {Object} [config={}] - The configuration of the Tile\n     * @param {String|Number|String[]} [config.flags=0] - Flags and MechFlags for the tile\n     * @param {String} [config.layer=GROUND] - Name of the layer for this tile\n     * @param {String} [config.ch] - The sprite character\n     * @param {String} [config.fg] - The sprite foreground color\n     * @param {String} [config.bg] - The sprite background color\n     */\n    constructor(config, base) {\n        this.flags = 0;\n        this.mechFlags = 0;\n        this.layer = Layer.GROUND;\n        this.priority = -1;\n        this.sprite = {};\n        this.activates = {};\n        this.light = null; // TODO - Light\n        this.flavor = null;\n        this.desc = null;\n        this.article = null;\n        this.dissipate = 2000; // 20 * 100 = 20%\n        if (base !== undefined) {\n            Utils.assignOmitting([\"activates\"], this, base);\n        }\n        Utils.assignOmitting([\n            \"Extends\",\n            \"extends\",\n            \"flags\",\n            \"mechFlags\",\n            \"sprite\",\n            \"activates\",\n            \"ch\",\n            \"fg\",\n            \"bg\",\n            \"light\",\n        ], this, config);\n        this.name = config.name || (base ? base.name : config.id);\n        this.id = config.id;\n        this.layer = this.layer || Layer.GROUND;\n        if (typeof this.layer === \"string\") {\n            this.layer = Layer[this.layer];\n        }\n        if (this.priority < 0) {\n            this.priority = 50;\n        }\n        this.flags = Flag.from(Flags, this.flags, config.flags);\n        this.mechFlags = Flag.from(MechFlags, this.mechFlags, config.mechFlags || config.flags);\n        if (config.light) {\n            // Light.from will throw an Error on invalid config\n            this.light = Light.from(config.light);\n        }\n        if (config.sprite) {\n            this.sprite = Canvas.makeSprite(config.sprite);\n        }\n        else if (config.ch || config.fg || config.bg) {\n            this.sprite = Canvas.makeSprite(config.ch || null, config.fg || null, config.bg || null, config.opacity);\n        }\n        if (base && base.activates) {\n            Object.assign(this.activates, base.activates);\n        }\n        if (config.activates) {\n            Object.entries(config.activates).forEach(([key, info]) => {\n                if (info) {\n                    const activation = TileEvent.make(info);\n                    this.activates[key] = activation;\n                }\n                else {\n                    delete this.activates[key];\n                }\n            });\n        }\n    }\n    /**\n     * Returns the flags for the tile after the given event is fired.\n     * @param {string} id - Name of the event to fire.\n     * @returns {number} The flags from the Tile after the event.\n     */\n    successorFlags(id) {\n        const e = this.activates[id];\n        if (!e)\n            return 0;\n        const tileId = e.tile;\n        if (!tileId)\n            return 0;\n        const tile = tiles[tileId];\n        if (!tile)\n            return 0;\n        return tile.flags;\n    }\n    /**\n     * Returns whether or not this tile as the given flag.\n     * Will return true if any bit in the flag is true, so testing with\n     * multiple flags will return true if any of them is set.\n     * @param {number} flag - The flag to check\n     * @returns {boolean} Whether or not the flag is set\n     */\n    hasFlag(flag) {\n        return (this.flags & flag) > 0;\n    }\n    hasMechFlag(flag) {\n        return (this.mechFlags & flag) > 0;\n    }\n    hasFlags(flags, mechFlags) {\n        return ((!flags || this.flags & flags) &&\n            (!mechFlags || this.mechFlags & mechFlags));\n    }\n    activatesOn(name) {\n        return !!this.activates[name];\n    }\n    getName(arg) {\n        let opts = {};\n        if (arg === true || arg === false) {\n            opts.article = arg;\n        }\n        else if (typeof arg === \"string\") {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg;\n            }\n            if (typeof color !== \"string\") {\n                color = Color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === \"string\" ? opts.article : this.article || \"a\";\n            result = article + \" \" + result;\n        }\n        return result;\n    }\n    getDescription(opts = {}) {\n        return this.getName(opts);\n    }\n}\n// Types.Tile = Tile;\nexport const tiles = {};\nexport function install(...args) {\n    let id = args[0];\n    let base = args[1];\n    let config = args[2];\n    if (arguments.length == 1) {\n        config = args[0];\n        base = config.Extends || {};\n        id = config.id;\n    }\n    else if (arguments.length == 2) {\n        config = base;\n        base = config.Extends || config.extends || {};\n    }\n    if (typeof base === \"string\") {\n        base = tiles[base] || Utils.ERROR(\"Unknown base tile: \" + base);\n    }\n    // config.name = config.name || base.name || id.toLowerCase();\n    config.id = id;\n    const tile = new Tile(config, base);\n    tiles[id] = tile;\n    return tile;\n}\n/**\n * Adds multiple tiles to the GW.tiles collection.\n * It extracts all the id:opts pairs from the config object and uses\n * them to call addTileKind.\n * @param {Object} config - The tiles to add in [id, config] pairs\n * @returns {void} Nothing\n * @see addTileKind\n */\nexport function installAll(config) {\n    Object.entries(config).forEach(([id, opts]) => {\n        opts.id = id;\n        install(id, opts);\n    });\n}\n","import { color as Color, canvas as Canvas, utils as Utils, config as CONFIG, data as DATA, random, make as Make, } from \"gw-utils\";\nimport { Tile, tiles as TILES, Layer } from \"./tile\";\nimport * as Activation from \"./tileEvent\";\nimport * as Light from \"./light\";\nimport { Cell as Flags, CellMech as MechFlags, TileMech as TileMechFlags, Tile as TileFlags, Map as MapFlags, } from \"./flags\";\nexport { Flags, MechFlags };\n// TODO - Move to gw-ui\nColor.install(\"cursorColor\", 25, 100, 150);\nCONFIG.cursorPathIntensity = 50;\nexport class CellMemory {\n    constructor() {\n        this.mixer = new Canvas.Mixer();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    nullify() {\n        this.mixer.nullify();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    copy(other) {\n        const mixer = this.mixer;\n        Object.assign(this, other);\n        this.mixer = mixer;\n        this.mixer.copy(other.mixer);\n    }\n}\nexport class Cell {\n    constructor() {\n        this.layers = [null, null, null, null];\n        this.sprites = null;\n        this._actor = null;\n        this._item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory = new CellMemory();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n    }\n    copy(other) {\n        Utils.copyObject(this, other);\n    }\n    nullify() {\n        for (let i = 0; i < this.layers.length; ++i) {\n            this.layers[i] = null;\n        }\n        this.sprites = null;\n        this._actor = null;\n        this._item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory.nullify();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n    }\n    nullifyLayers(nullLiquid = false, nullSurface = false, nullGas = false) {\n        if (nullLiquid) {\n            this.layers[1] = null;\n            this.liquidVolume = 0;\n        }\n        if (nullSurface) {\n            this.layers[2] = null;\n        }\n        if (nullGas) {\n            this.layers[3] = null;\n            this.gasVolume = 0;\n        }\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    get ground() {\n        return this.layers[Layer.GROUND];\n    }\n    get liquid() {\n        return this.layers[Layer.LIQUID];\n    }\n    get surface() {\n        return this.layers[Layer.SURFACE];\n    }\n    get gas() {\n        return this.layers[Layer.GAS];\n    }\n    get groundTile() {\n        return TILES[this.layers[Layer.GROUND] || \"0\"];\n    }\n    get liquidTile() {\n        return TILES[this.layers[Layer.LIQUID] || \"0\"];\n    }\n    get surfaceTile() {\n        return TILES[this.layers[Layer.SURFACE] || \"0\"];\n    }\n    get gasTile() {\n        return TILES[this.layers[Layer.GAS] || \"0\"];\n    }\n    dump() {\n        if (this.actor)\n            return this.actor.sprite.ch;\n        if (this.item)\n            return this.item.sprite.ch;\n        for (let i = this.layers.length - 1; i >= 0; --i) {\n            if (!this.layers[i])\n                continue;\n            const tile = TILES[this.layers[i] || \"0\"];\n            if (tile.sprite.ch)\n                return tile.sprite.ch;\n        }\n        return TILES[0].sprite.ch;\n    }\n    changed() {\n        return this.flags & Flags.CELL_CHANGED;\n    }\n    isVisible() {\n        return this.flags & Flags.VISIBLE;\n    }\n    isAnyKindOfVisible() {\n        return (this.flags & Flags.ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isOrWasAnyKindOfVisible() {\n        return (this.flags &\n            Flags.IS_WAS_ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isRevealed(orMapped = false) {\n        const flag = Flags.REVEALED | (orMapped ? Flags.MAGIC_MAPPED : 0);\n        return this.flags & flag;\n    }\n    listInSidebar() {\n        return this.hasTileMechFlag(TileMechFlags.TM_LIST_IN_SIDEBAR, true);\n    }\n    _needsRedraw() {\n        this.flags |= Flags.NEEDS_REDRAW;\n    }\n    // TODO - Use functions in LIGHT to check these on cell.light directly???\n    hasVisibleLight() {\n        return Light.intensity(this.light) > CONFIG.light.INTENSITY_DARK;\n    } // TODO\n    isDark() {\n        return Light.intensity(this.light) <= CONFIG.light.INTENSITY_DARK;\n    } // TODO\n    lightChanged() {\n        return this.flags & Flags.LIGHT_CHANGED;\n    } // TODO\n    tile(layer = 0) {\n        const id = this.layers[layer] || 0;\n        return TILES[id];\n    }\n    *tiles() {\n        for (let id of this.layers) {\n            if (id) {\n                yield TILES[id];\n            }\n        }\n    }\n    tileFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags;\n        }\n        return flags;\n    }\n    tileMechFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileMechFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.mechFlags;\n        }\n        return flags;\n    }\n    hasTileFlag(flagMask = 0, limitToPlayerKnowledge = false) {\n        const tileFlags = this.tileFlags(limitToPlayerKnowledge);\n        return !!(flagMask & tileFlags);\n    }\n    hasAllTileFlags(flags = 0) {\n        return (flags & this.tileFlags()) === flags;\n    }\n    hasTileMechFlag(flagMask = 0, limitToPlayerKnowledge = false) {\n        const mechFlags = this.tileMechFlags(limitToPlayerKnowledge);\n        return !!(flagMask & mechFlags);\n    }\n    hasAllTileMechFlags(flags = 0) {\n        return (flags & this.tileMechFlags()) === flags;\n    }\n    setFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags |= cellFlag;\n        this.mechFlags |= cellMechFlag;\n        // this.flags |= Flags.NEEDS_REDRAW;\n    }\n    clearFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags &= ~cellFlag;\n        this.mechFlags &= ~cellMechFlag;\n        // if ((~cellFlag) & Flags.NEEDS_REDRAW) {\n        //   this.flags |= Flags.NEEDS_REDRAW;\n        // }\n    }\n    hasFlag(flag = 0, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellFlags\n            : this.flags;\n        return !!(flag & flags);\n    }\n    hasMechFlag(flag = 0, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellMechFlags\n            : this.mechFlags;\n        return !!(flag & flags);\n    }\n    hasTile(tile) {\n        let id;\n        if (tile instanceof Tile) {\n            id = tile.id;\n        }\n        else {\n            id = tile;\n        }\n        return this.layers.includes(id);\n    }\n    // hasTileInGroup(...groups) {\n    //   if (groups.length == 1 && Array.isArray(groups[0])) {\n    //     groups = groups[0];\n    //   }\n    //   return this.layers.some( (tileId) => {\n    //     const tile = TILES[tileId] || TILES.NOTHING;\n    //     return Utils.intersect(groups, tile.groups);\n    //   });\n    // }\n    successorTileFlags(id) {\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.successorFlags(id);\n        }\n        return flags;\n    }\n    promotedTileFlags() {\n        return this.successorTileFlags(\"promote\");\n    }\n    discoveredTileFlags() {\n        return this.successorTileFlags(\"discover\");\n    }\n    hasDiscoveredTileFlag(flag) {\n        // if (!this.hasTileMechFlag(TM_IS_SECRET)) return false;\n        return this.discoveredTileFlags() & flag;\n    }\n    highestPriorityTile(skipGas = false) {\n        let best = TILES[0];\n        let bestPriority = -10000;\n        for (let layer = Layer.GROUND; layer <= (skipGas ? Layer.LIQUID : Layer.GAS); ++layer) {\n            // @ts-ignore\n            const id = this.layers[layer];\n            if (!id)\n                continue;\n            const tile = TILES[id];\n            if (tile.priority > bestPriority) {\n                best = tile;\n                bestPriority = tile.priority;\n            }\n        }\n        return best;\n    }\n    tileWithFlag(tileFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags & tileFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileWithMechFlag(mechFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.mechFlags & mechFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileDesc() {\n        return this.highestPriorityTile().desc;\n    }\n    tileFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    isNull() {\n        return this.ground == null;\n    }\n    isEmpty() {\n        return !(this._actor || this._item);\n    }\n    isPassableNow(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        if (!(tileFlags & TileFlags.T_PATHING_BLOCKER))\n            return true;\n        if (tileFlags & TileFlags.T_BRIDGE)\n            return true;\n        return limitToPlayerKnowledge\n            ? false\n            : this.isSecretDoor(limitToPlayerKnowledge);\n    }\n    canBePassed(limitToPlayerKnowledge = false) {\n        if (this.isPassableNow(limitToPlayerKnowledge))\n            return true;\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileMechFlags = useMemory\n            ? this.memory.tileMechFlags\n            : this.tileMechFlags();\n        if (tileMechFlags & TileMechFlags.TM_CONNECTS_LEVEL)\n            return true;\n        return !!(tileMechFlags & TileMechFlags.TM_PROMOTES &&\n            !(this.promotedTileFlags() & TileFlags.T_PATHING_BLOCKER));\n    }\n    isWall(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_OBSTRUCTS_EVERYTHING);\n    }\n    isObstruction(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_OBSTRUCTS_DIAGONAL_MOVEMENT);\n    }\n    isDoor(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_IS_DOOR);\n    }\n    isSecretDoor(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge)\n            return false;\n        const tileMechFlags = this.tileMechFlags();\n        return !!(tileMechFlags & TileMechFlags.TM_IS_SECRET &&\n            !(this.discoveredTileFlags() & TileFlags.T_PATHING_BLOCKER));\n    }\n    blocksPathing(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_PATHING_BLOCKER);\n    }\n    blocksVision() {\n        let tileFlags = this.tileFlags();\n        return !!(tileFlags & TileFlags.T_OBSTRUCTS_VISION);\n    }\n    isLiquid(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_IS_LIQUID);\n    }\n    hasGas(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_GAS);\n    }\n    markRevealed() {\n        this.flags &= ~Flags.STABLE_MEMORY;\n        if (this.flags & Flags.REVEALED)\n            return false;\n        this.flags |= Flags.REVEALED;\n        if (!this.hasTileFlag(TileFlags.T_PATHING_BLOCKER)) {\n            DATA.xpxpThisTurn++;\n        }\n        return true;\n    }\n    obstructsLayer(layer) {\n        return (layer == Layer.SURFACE && this.hasTileFlag(TileFlags.T_OBSTRUCTS_SURFACE));\n    }\n    _setTile(tileId = null, volume = 0, map) {\n        map = map || DATA.map;\n        let tile;\n        if (tileId === null) {\n            tile = TILES[\"0\"];\n        }\n        else if (typeof tileId === \"string\") {\n            tile = TILES[tileId];\n        }\n        else if (tileId instanceof Tile) {\n            tile = tileId;\n            tileId = tile.id;\n        }\n        else if (!!tileId) {\n            Utils.ERROR(\"Unknown tile: \" + tileId);\n        }\n        if (!tile) {\n            Utils.WARN(\"Unknown tile - \" + tileId);\n            tile = TILES[\"0\"];\n            tileId = null;\n        }\n        // @ts-ignore\n        const oldTileId = this.layers[tile.layer] || null;\n        // @ts-ignore\n        const oldTile = TILES[oldTileId] || TILES[\"0\"];\n        if ((oldTile.flags & TileFlags.T_PATHING_BLOCKER) !=\n            (tile.flags & TileFlags.T_PATHING_BLOCKER)) {\n            DATA.staleLoopMap = true;\n        }\n        if (tile.flags & TileFlags.T_IS_FIRE &&\n            !(oldTile.flags & TileFlags.T_IS_FIRE)) {\n            this.setFlags(0, MechFlags.CAUGHT_FIRE_THIS_TURN);\n        }\n        const blocksVision = tile.flags & TileFlags.T_OBSTRUCTS_VISION;\n        const oldBlocksVision = oldTile.flags & TileFlags.T_OBSTRUCTS_VISION;\n        if (map && this.isAnyKindOfVisible() && blocksVision != oldBlocksVision) {\n            map.setFlag(MapFlags.MAP_FOV_CHANGED);\n        }\n        // @ts-ignore\n        this.layers[tile.layer] = tileId;\n        if (tile.layer == Layer.LIQUID) {\n            this.liquidVolume =\n                volume + (tileId == oldTileId ? this.liquidVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_LIQUID);\n        }\n        else if (tile.layer == Layer.GAS) {\n            this.gasVolume = volume + (tileId == oldTileId ? this.gasVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_GAS);\n        }\n        if (tile.layer > 0 && this.layers[0] === null) {\n            this.layers[0] = \"FLOOR\"; // TODO - Not good\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n        if (map && oldTile.light !== tile.light) {\n            map.clearFlag(MapFlags.MAP_STABLE_GLOW_LIGHTS | MapFlags.MAP_STABLE_LIGHTS);\n        }\n        return true;\n    }\n    clearLayer(layer) {\n        // @ts-ignore\n        if (typeof layer === \"string\")\n            layer = Layer[layer];\n        // @ts-ignore\n        if (this.layers[layer]) {\n            // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n            this.flags |= Flags.CELL_CHANGED;\n        }\n        // @ts-ignore\n        this.layers[layer] = null;\n        if (layer == Layer.LIQUID) {\n            this.liquidVolume = 0;\n        }\n        else if (layer == Layer.GAS) {\n            this.gasVolume = 0;\n        }\n    }\n    clearLayers(except, floorTile) {\n        floorTile = floorTile ? floorTile : this.layers[0];\n        for (let layer = 0; layer < this.layers.length; layer++) {\n            if (layer != except && layer != Layer.GAS) {\n                this.layers[layer] = layer ? null : floorTile;\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    nullifyTileWithFlags(tileFlags, tileMechFlags = 0) {\n        for (let i = 0; i < this.layers.length; ++i) {\n            const id = this.layers[i];\n            if (!id)\n                continue;\n            const tile = TILES[id];\n            if (tileFlags && tileMechFlags) {\n                if (tile.flags & tileFlags && tile.mechFlags & tileMechFlags) {\n                    this.layers[i] = null;\n                }\n            }\n            else if (tileFlags) {\n                if (tile.flags & tileFlags) {\n                    this.layers[i] = null;\n                }\n            }\n            else if (tileMechFlags) {\n                if (tile.flags & tileMechFlags) {\n                    this.layers[i] = null;\n                }\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    // EVENTS\n    async activate(name, ctx = {}) {\n        ctx.cell = this;\n        let fired = false;\n        // cell.debug(\"fire event - %s\", name);\n        for (let tile of this.tiles()) {\n            if (!tile.activates)\n                continue;\n            const ev = tile.activates[name];\n            if (ev) {\n                // cell.debug(\" - has event\");\n                if (ev.chance && !random.chance(ev.chance, 10000)) {\n                    continue;\n                }\n                ctx.tile = tile;\n                // cell.debug(\" - spawn event @%d,%d - %s\", ctx.x, ctx.y, name);\n                fired = (await Activation.spawn(ev, ctx)) || fired;\n                // cell.debug(\" - spawned\");\n                if (fired) {\n                    break;\n                }\n            }\n        }\n        if (fired) {\n            // this.mechFlags |= MechFlags.EVENT_FIRED_THIS_TURN;\n        }\n        return fired;\n    }\n    activatesOn(name) {\n        for (let tile of this.tiles()) {\n            if (tile.activatesOn(name))\n                return true;\n        }\n        return false;\n    }\n    // ITEM\n    get item() {\n        return this._item;\n    }\n    set item(item) {\n        if (this.item) {\n            this.removeSprite(this.item.sprite);\n        }\n        this._item = item;\n        if (item) {\n            this.flags |= Flags.HAS_ITEM;\n            this.addSprite(Layer.ITEM, item.sprite);\n        }\n        else {\n            this.flags &= ~Flags.HAS_ITEM;\n        }\n    }\n    // ACTOR\n    get actor() {\n        return this._actor;\n    }\n    set actor(actor) {\n        if (this.actor) {\n            this.removeSprite(this.actor.sprite);\n        }\n        this._actor = actor;\n        if (actor) {\n            this.flags |= Flags.HAS_ACTOR;\n            this.addSprite(Layer.ACTOR, actor.sprite);\n        }\n        else {\n            this.flags &= ~Flags.HAS_ACTOR;\n        }\n    }\n    // SPRITES\n    addSprite(layer, sprite, priority = 50) {\n        if (!sprite)\n            return;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        if (!this.sprites ||\n            this.sprites.layer > layer ||\n            (this.sprites.layer == layer && this.sprites.priority > priority)) {\n            this.sprites = { layer, priority, sprite, next: this.sprites };\n            return;\n        }\n        let current = this.sprites;\n        while (current.next &&\n            (current.layer < layer ||\n                (current.layer == layer && current.priority <= priority))) {\n            current = current.next;\n        }\n        const item = { layer, priority, sprite, next: current.next };\n        current.next = item;\n    }\n    removeSprite(sprite) {\n        if (!sprite)\n            return false;\n        if (!this.sprites)\n            return false;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        if (this.sprites && this.sprites.sprite === sprite) {\n            this.sprites = this.sprites.next;\n            return true;\n        }\n        let prev = this.sprites;\n        let current = this.sprites.next;\n        while (current) {\n            if (current.sprite === sprite) {\n                prev.next = current.next;\n                return true;\n            }\n            prev = current;\n            current = current.next;\n        }\n        return false;\n    }\n    // MEMORY\n    storeMemory() {\n        const memory = this.memory;\n        memory.tileFlags = this.tileFlags();\n        memory.tileMechFlags = this.tileMechFlags();\n        memory.cellFlags = this.flags;\n        memory.cellMechFlags = this.mechFlags;\n        memory.tile = this.highestPriorityTile();\n        if (this.item) {\n            memory.item = this.item;\n            memory.itemQuantity = this.item.quantity;\n        }\n        else {\n            memory.item = null;\n            memory.itemQuantity = 0;\n        }\n        memory.actor = this.actor;\n        getAppearance(this, memory.mixer);\n        if (this.actor && this.isOrWasAnyKindOfVisible()) {\n            if (this.actor.rememberedInCell && this.actor.rememberedInCell !== this) {\n                // console.log(\"remembered in cell change\");\n                this.actor.rememberedInCell.storeMemory();\n                this.actor.rememberedInCell.flags |= Flags.NEEDS_REDRAW;\n            }\n            this.actor.rememberedInCell = this;\n        }\n    }\n}\nexport function make(tile) {\n    const cell = new Cell();\n    if (tile) {\n        cell._setTile(tile);\n    }\n    return cell;\n}\nMake.cell = make;\nexport function getAppearance(cell, dest) {\n    const memory = cell.memory.mixer;\n    memory.blackOut();\n    let needDistinctness = false;\n    for (let tile of cell.tiles()) {\n        let alpha = 100;\n        if (tile.layer == Layer.LIQUID) {\n            alpha = Utils.clamp(cell.liquidVolume || 0, 20, 100);\n        }\n        else if (tile.layer == Layer.GAS) {\n            alpha = Utils.clamp(cell.gasVolume || 0, 20, 100);\n        }\n        memory.drawSprite(tile.sprite, alpha);\n        if (tile.mechFlags & TileMechFlags.TM_VISUALLY_DISTINCT) {\n            needDistinctness = true;\n        }\n    }\n    let current = cell.sprites;\n    while (current) {\n        memory.drawSprite(current.sprite);\n        current = current.next;\n    }\n    memory.fg.multiply(cell.light);\n    memory.bg.multiply(cell.light);\n    memory.bake(!cell.isAnyKindOfVisible()); // turns off dancing if not visible\n    if (needDistinctness) {\n        Color.separate(memory.fg, memory.bg);\n    }\n    dest.drawSprite(memory);\n    return true;\n}\n","import { utils as Utils, random, grid as Grid, fov as Fov, flag as Flag, path as Path, color as Color, colors as COLORS, canvas as Canvas, config as CONFIG, data as DATA, make as Make, } from \"gw-utils\";\nimport * as Cell from \"./cell\";\nimport { Map as Flags, Cell as CellFlags, Tile as TileFlags, CellMech as CellMechFlags, TileMech as TileMechFlags, Layer as TileLayer, } from \"./flags\";\nexport { Flags };\nUtils.setDefaults(CONFIG, {\n    \"map.deepestLevel\": 99,\n});\nexport class Map {\n    constructor(w, h, opts = {}) {\n        this.locations = {};\n        this.config = {};\n        this._actors = null;\n        this._items = null;\n        this.flags = 0;\n        this.ambientLight = null;\n        this.lights = null;\n        this.events = {};\n        this._width = w;\n        this._height = h;\n        this.cells = Grid.make(w, h, () => new Cell.Cell());\n        this.locations = opts.locations || {};\n        this.config = Object.assign({}, opts);\n        this.config.tick = this.config.tick || 100;\n        this._actors = null;\n        this._items = null;\n        this.flags = Flag.from(Flags, Flags.MAP_DEFAULT, opts.flags);\n        this.ambientLight = null;\n        const ambient = opts.ambient || opts.ambientLight || opts.light;\n        if (ambient) {\n            this.ambientLight = Color.make(ambient);\n        }\n        this.lights = null;\n        this.id = opts.id;\n        this.events = opts.events || {};\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    async start() { }\n    nullify() {\n        this.cells.forEach((c) => c.nullify());\n    }\n    dump(fmt) {\n        this.cells.dump(fmt || ((c) => c.dump()));\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    eachCell(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    forEach(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    forRect(x, y, w, h, fn) {\n        this.cells.forRect(x, y, w, h, (c, i, j) => fn(c, i, j, this));\n    }\n    eachNeighbor(x, y, fn, only4dirs = false) {\n        this.cells.eachNeighbor(x, y, (c, i, j) => fn(c, i, j, this), only4dirs);\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.cells.isBoundaryXY(x, y);\n    }\n    changed(v) {\n        if (v === true) {\n            this.flags |= Flags.MAP_CHANGED;\n        }\n        else if (v === false) {\n            this.flags &= ~Flags.MAP_CHANGED;\n        }\n        return this.flags & Flags.MAP_CHANGED;\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).flags & flag;\n    }\n    hasCellMechFlag(x, y, flag) {\n        return this.cell(x, y).mechFlags & flag;\n    }\n    hasTileFlag(x, y, flag) {\n        return this.cell(x, y).hasTileFlag(flag);\n    }\n    hasTileMechFlag(x, y, flag) {\n        return this.cell(x, y).hasTileMechFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).flags |= flag;\n    }\n    redrawCell(cell) {\n        // if (cell.isAnyKindOfVisible()) {\n        cell._needsRedraw();\n        this.flags |= Flags.MAP_CHANGED;\n        // }\n    }\n    redrawXY(x, y) {\n        const cell = this.cell(x, y);\n        this.redrawCell(cell);\n    }\n    redrawAll() {\n        this.forEach((c) => {\n            // if (c.isAnyKindOfVisible()) {\n            c.flags |= CellFlags.NEEDS_REDRAW;\n            // }\n        });\n        this.flags |= Flags.MAP_CHANGED;\n    }\n    revealAll() {\n        this.forEach((c) => {\n            c.markRevealed();\n            c.storeMemory();\n        });\n    }\n    markRevealed(x, y) {\n        if (!this.cell(x, y).markRevealed())\n            return;\n        if (DATA.player) {\n            DATA.player.invalidateCostMap();\n        }\n    }\n    isVisible(x, y) {\n        return this.cell(x, y).isVisible();\n    }\n    isAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isAnyKindOfVisible();\n    }\n    isOrWasAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isOrWasAnyKindOfVisible();\n    }\n    hasVisibleLight(x, y) {\n        return this.cell(x, y).hasVisibleLight();\n    }\n    setFlag(flag) {\n        this.flags |= flag;\n        this.changed(true);\n    }\n    setFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags |= mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((c) => c.setFlags(cellFlag, cellMechFlag));\n        }\n        this.changed(true);\n    }\n    clearFlag(flag) {\n        this.flags &= ~flag;\n        this.changed(true);\n    }\n    clearFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags &= ~mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((cell) => cell.clearFlags(cellFlag, cellMechFlag));\n        }\n        this.changed(true);\n    }\n    setCellFlags(x, y, cellFlag = 0, cellMechFlag = 0) {\n        this.cell(x, y).setFlags(cellFlag, cellMechFlag);\n        this.flags |= Flags.MAP_CHANGED;\n    }\n    clearCellFlags(x, y, cellFlags = 0, cellMechFlags = 0) {\n        this.cell(x, y).clearFlags(cellFlags, cellMechFlags);\n        this.changed(true);\n    }\n    hasTile(x, y, tile) {\n        return this.cells[x][y].hasTile(tile);\n    }\n    tileFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileFlags(limitToPlayerKnowledge);\n    }\n    tileMechFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileMechFlags(limitToPlayerKnowledge);\n    }\n    tileWithFlag(x, y, flag = 0) {\n        return this.cells[x][y].tileWithFlag(flag);\n    }\n    tileWithMechFlag(x, y, mechFlag = 0) {\n        return this.cells[x][y].tileWithMechFlag(mechFlag);\n    }\n    hasKnownTileFlag(x, y, flagMask = 0) {\n        return this.cells[x][y].memory.tileFlags & flagMask;\n    }\n    // hasTileInGroup(x, y, ...groups) { return this.cells[x][y].hasTileInGroup(...groups); }\n    discoveredTileFlags(x, y) {\n        return this.cells[x][y].discoveredTileFlags();\n    }\n    hasDiscoveredTileFlag(x, y, flag = 0) {\n        return this.cells[x][y].hasDiscoveredTileFlag(flag);\n    }\n    canBePassed(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].canBePassed(limitToPlayerKnowledge);\n    }\n    isPassableNow(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isPassableNow(limitToPlayerKnowledge);\n    }\n    isNull(x, y) {\n        return this.cells[x][y].isNull();\n    }\n    isEmpty(x, y) {\n        return this.cells[x][y].isEmpty();\n    }\n    isObstruction(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isObstruction(limitToPlayerKnowledge);\n    }\n    isDoor(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isDoor(limitToPlayerKnowledge);\n    }\n    isLiquid(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isLiquid(limitToPlayerKnowledge);\n    }\n    hasGas(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].hasGas(limitToPlayerKnowledge);\n    }\n    blocksPathing(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].blocksPathing(limitToPlayerKnowledge);\n    }\n    blocksVision(x, y) {\n        return this.cells[x][y].blocksVision();\n    }\n    highestPriorityTile(x, y, skipGas = false) {\n        return this.cells[x][y].highestPriorityTile(skipGas);\n    }\n    tileFlavor(x, y) {\n        return this.cells[x][y].tileFlavor();\n    }\n    setTile(x, y, tileId, volume = 0) {\n        return this.cell(x, y)._setTile(tileId, volume, this);\n    }\n    nullifyTileWithFlags(x, y, tileFlags, tileMechFlags = 0) {\n        const cell = this.cell(x, y);\n        cell.nullifyTileWithFlags(tileFlags, tileMechFlags);\n    }\n    nullifyCellLayers(x, y, nullLiquid = true, nullSurface = true, nullGas = true) {\n        this.changed(true);\n        return this.cell(x, y).nullifyLayers(nullLiquid, nullSurface, nullGas);\n    }\n    fill(tileId, boundaryTile) {\n        let i, j;\n        if (boundaryTile === undefined) {\n            boundaryTile = tileId;\n        }\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                if (this.isBoundaryXY(i, j)) {\n                    this.setTile(i, j, boundaryTile);\n                }\n                else {\n                    this.setTile(i, j, tileId);\n                }\n            }\n        }\n    }\n    neighborCount(x, y, matchFn, only4dirs = false) {\n        let count = 0;\n        this.eachNeighbor(x, y, (...args) => {\n            if (matchFn(...args))\n                ++count;\n        }, only4dirs);\n        return count;\n    }\n    passableArcCount(x, y) {\n        if (!this.hasXY(x, y))\n            return -1;\n        return this.cells.arcCount(x, y, (c) => c.isPassableNow());\n    }\n    diagonalBlocked(x1, y1, x2, y2, limitToPlayerKnowledge = false) {\n        if (x1 == x2 || y1 == y2) {\n            return false; // If it's not a diagonal, it's not diagonally blocked.\n        }\n        const locFlags1 = this.tileFlags(x1, y2, limitToPlayerKnowledge);\n        if (locFlags1 & TileFlags.T_OBSTRUCTS_DIAGONAL_MOVEMENT) {\n            return true;\n        }\n        const locFlags2 = this.tileFlags(x2, y1, limitToPlayerKnowledge);\n        if (locFlags2 & TileFlags.T_OBSTRUCTS_DIAGONAL_MOVEMENT) {\n            return true;\n        }\n        return false;\n    }\n    fillCostGrid(costGrid, costFn) {\n        costFn = costFn || Utils.ONE;\n        this.cells.forEach((cell, i, j) => {\n            if (cell.isNull()) {\n                costGrid[i][j] = Path.OBSTRUCTION;\n            }\n            else {\n                costGrid[i][j] = cell.canBePassed()\n                    ? costFn(cell, i, j, this)\n                    : Path.OBSTRUCTION;\n            }\n        });\n    }\n    matchingNeighbor(x, y, matcher, only4dirs = false) {\n        const maxIndex = only4dirs ? 4 : 8;\n        for (let d = 0; d < maxIndex; ++d) {\n            const dir = Utils.DIRS[d];\n            const i = x + dir[0];\n            const j = y + dir[1];\n            if (this.hasXY(i, j)) {\n                if (matcher(this.cells[i][j], i, j, this))\n                    return [i, j];\n            }\n        }\n        return null;\n    }\n    matchingLocNear(x, y, ...args) {\n        let i, j, k;\n        let matcher = args[0];\n        let opts = args[1] || {};\n        const arg = args[0];\n        if (typeof arg !== \"function\") {\n            opts = arg || args[1];\n            matcher = opts.match || Utils.TRUE;\n        }\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const deterministic = opts.deterministic || false;\n        const candidateLocs = [];\n        // count up the number of candidate locations\n        for (k = 0; k < Math.max(this.width, this.height) && !candidateLocs.length; k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (!this.hasXY(i, j))\n                        continue;\n                    const cell = this.cell(i, j);\n                    // if ((i == x-k || i == x+k || j == y-k || j == y+k)\n                    if (Math.ceil(Utils.distanceBetween(x, y, i, j)) == k &&\n                        (!blockingMap || !blockingMap[i][j]) &&\n                        matcher(cell, i, j, this) &&\n                        (!forbidLiquid || !cell.liquid) &&\n                        (hallwaysAllowed || this.passableArcCount(i, j) < 2)) {\n                        candidateLocs.push([i, j]);\n                    }\n                }\n            }\n        }\n        if (candidateLocs.length == 0) {\n            return [-1, -1];\n        }\n        // and pick one\n        let randIndex = 0;\n        if (deterministic) {\n            randIndex = Math.floor(candidateLocs.length / 2);\n        }\n        else {\n            randIndex = random.number(candidateLocs.length);\n        }\n        return candidateLocs[randIndex];\n    }\n    // fills (*x, *y) with the coordinates of a random cell with\n    // no creatures, items or stairs and with either a matching liquid and dungeon type\n    // or at least one layer of type terrainType.\n    // A dungeon, liquid type of -1 will match anything.\n    randomMatchingLoc(opts = {}) {\n        let x;\n        let y;\n        let cell;\n        if (typeof opts === \"function\") {\n            opts = { match: opts };\n        }\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const matcher = opts.match || Utils.TRUE;\n        const forbidCellFlags = opts.forbidCellFlags || 0;\n        const forbidTileFlags = opts.forbidTileFlags || 0;\n        const forbidTileMechFlags = opts.forbidTileMechFlags || 0;\n        const tile = opts.tile || null;\n        let tries = opts.tries || 500;\n        let retry = true;\n        while (retry) {\n            tries--;\n            if (!tries)\n                break;\n            x = random.range(0, this.width - 1);\n            y = random.range(0, this.height - 1);\n            cell = this.cell(x, y);\n            if ((!blockingMap || !blockingMap[x][y]) &&\n                (!tile || cell.hasTile(tile)) &&\n                (!forbidLiquid || !cell.liquid) &&\n                (!forbidCellFlags || !(cell.flags & forbidCellFlags)) &&\n                (!forbidTileFlags || !cell.hasTileFlag(forbidTileFlags)) &&\n                (!forbidTileMechFlags || !cell.hasTileMechFlag(forbidTileMechFlags)) &&\n                (hallwaysAllowed || this.passableArcCount(x, y) < 2) &&\n                matcher(cell, x, y, this)) {\n                retry = false;\n            }\n        }\n        if (!tries) {\n            // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => FAIL');\n            return false;\n        }\n        // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => ', x, y);\n        return [x, y];\n    }\n    // LIGHT\n    addLight(x, y, light) {\n        const info = { x, y, light, next: this.lights };\n        this.lights = info;\n        this.flags &= ~(Flags.MAP_STABLE_LIGHTS | Flags.MAP_STABLE_GLOW_LIGHTS);\n        return info;\n    }\n    removeLight(info) {\n        Utils.removeFromChain(this, \"lights\", info);\n        this.flags &= ~(Flags.MAP_STABLE_LIGHTS | Flags.MAP_STABLE_GLOW_LIGHTS);\n    }\n    eachGlowLight(fn) {\n        Utils.eachChain(this.lights, (info) => fn(info.light, info.x, info.y));\n        this.eachCell((cell, x, y) => {\n            for (let tile of cell.tiles()) {\n                if (tile.light) {\n                    fn(tile.light, x, y);\n                }\n            }\n        });\n    }\n    eachDynamicLight(fn) {\n        Utils.eachChain(this._actors, (actor) => {\n            if (actor.light)\n                fn(actor.light, actor.x, actor.y);\n        });\n    }\n    // FX\n    addFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addSprite(TileLayer.FX, anim.sprite);\n        anim.x = x;\n        anim.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    moveFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeSprite(anim.sprite);\n        this.redrawCell(oldCell);\n        cell.addSprite(TileLayer.FX, anim.sprite);\n        this.redrawCell(cell);\n        anim.x = x;\n        anim.y = y;\n        return true;\n    }\n    removeFx(anim) {\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeSprite(anim.sprite);\n        this.redrawCell(oldCell);\n        this.flags |= Flags.MAP_CHANGED;\n        return true;\n    }\n    // ACTORS\n    // will return the PLAYER if the PLAYER is at (x, y).\n    actorAt(x, y) {\n        // creature *\n        if (!this.hasXY(x, y))\n            return null;\n        const cell = this.cell(x, y);\n        return cell.actor;\n    }\n    addActor(x, y, theActor) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.actor) {\n            return false;\n        }\n        cell.actor = theActor;\n        theActor.next = this._actors;\n        this._actors = theActor;\n        const layer = theActor === DATA.player ? TileLayer.PLAYER : TileLayer.ACTOR;\n        cell.addSprite(layer, theActor.sprite);\n        const flag = theActor === DATA.player ? CellFlags.HAS_PLAYER : CellFlags.HAS_MONSTER;\n        cell.flags |= flag;\n        // if (theActor.flags & Flags.Actor.MK_DETECTED)\n        // {\n        // \tcell.flags |= CellFlags.MONSTER_DETECTED;\n        // }\n        if (theActor.light) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        // If the player moves or an actor that blocks vision and the cell is visible...\n        // -- we need to update the FOV\n        if (theActor.isPlayer() ||\n            (cell.isAnyKindOfVisible() && theActor.blocksVision())) {\n            this.flags |= Flags.MAP_FOV_CHANGED;\n        }\n        theActor.x = x;\n        theActor.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    addActorNear(x, y, theActor) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return theActor.avoidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the actor.');\n            return false;\n        }\n        return this.addActor(loc[0], loc[1], theActor);\n    }\n    moveActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        this.removeActor(actor);\n        if (!this.addActor(x, y, actor)) {\n            this.addActor(actor.x, actor.y, actor);\n            return false;\n        }\n        if (actor.light) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        return true;\n    }\n    removeActor(actor) {\n        if (!this.hasXY(actor.x, actor.y))\n            return false;\n        const cell = this.cell(actor.x, actor.y);\n        if (cell.actor === actor) {\n            cell.actor = null;\n            Utils.removeFromChain(this, \"actors\", actor);\n            cell.flags &= ~CellFlags.HAS_ACTOR;\n            cell.removeSprite(actor.sprite);\n            if (actor.light) {\n                this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n            }\n            // If the player moves or an actor that blocks vision and the cell is visible...\n            // -- we need to update the FOV\n            if (actor.isPlayer() ||\n                (cell.isAnyKindOfVisible() && actor.blocksVision())) {\n                this.flags |= Flags.MAP_FOV_CHANGED;\n            }\n            this.redrawCell(cell);\n            return true;\n        }\n        return false;\n    }\n    deleteActorAt(x, y) {\n        const actor = this.actorAt(x, y);\n        if (!actor)\n            return false;\n        this.removeActor(actor);\n        actor.delete();\n        return true;\n    }\n    // dormantAt(x: number, y: number) {  // creature *\n    // \tif (!(this.cell(x, y).flags & CellFlags.HAS_DORMANT_MONSTER)) {\n    // \t\treturn null;\n    // \t}\n    // \treturn this.dormantActors.find( (m) => m.x == x && m.y == y );\n    // }\n    //\n    // addDormant(x, y, actor) {\n    // \ttheActor.x = x;\n    // \ttheActor.y = y;\n    // \tthis.dormant.add(theActor);\n    // \tcell.flags |= (CellFlags.HAS_DORMANT_MONSTER);\n    // \tthis.flags |= Flags.MAP_CHANGED;\n    // \treturn true;\n    // }\n    //\n    // removeDormant(actor) {\n    // \tconst cell = this.cell(actor.x, actor.y);\n    // \tcell.flags &= ~(CellFlags.HAS_DORMANT_MONSTER);\n    // \tcell.flags |= CellFlags.NEEDS_REDRAW;\n    // \tthis.flags |= Flags.MAP_CHANGED;\n    // \tthis.dormant.remove(actor);\n    // }\n    // ITEMS\n    itemAt(x, y) {\n        const cell = this.cell(x, y);\n        return cell.item;\n    }\n    addItem(x, y, theItem) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.flags & CellFlags.HAS_ITEM) {\n            // GW.ui.message(colors.badMessageColor, 'There is already an item there.');\n            return false;\n        }\n        theItem.x = x;\n        theItem.y = y;\n        cell.item = theItem;\n        theItem.next = this._items;\n        this._items = theItem;\n        cell.addSprite(TileLayer.ITEM, theItem.sprite);\n        cell.flags |= CellFlags.HAS_ITEM;\n        if (theItem.light) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        this.redrawCell(cell);\n        if (theItem.isDetected() || CONFIG.D_ITEM_OMNISCIENCE) {\n            cell.flags |= CellFlags.ITEM_DETECTED;\n        }\n        return true;\n    }\n    addItemNear(x, y, theItem) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return theItem.forbidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the item.');\n            return false;\n        }\n        return this.addItem(loc[0], loc[1], theItem);\n    }\n    removeItem(theItem) {\n        const x = theItem.x;\n        const y = theItem.y;\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.item !== theItem)\n            return false;\n        cell.removeSprite(theItem.sprite);\n        cell.item = null;\n        Utils.removeFromChain(this, \"items\", theItem);\n        if (theItem.light) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        cell.flags &= ~(CellFlags.HAS_ITEM | CellFlags.ITEM_DETECTED);\n        this.redrawCell(cell);\n        return true;\n    }\n    // // PROMOTE\n    //\n    // async promote(x, y, mechFlag) {\n    // \tif (this.hasTileMechFlag(x, y, mechFlag)) {\n    // \t\tconst cell = this.cell(x, y);\n    // \t\tfor (let tile of cell.tiles()) {\n    // \t\t\tif (tile.mechFlags & mechFlag) {\n    // \t\t\t\tawait tile.promote(this, x, y, false);\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // }\n    gridDisruptsPassability(blockingGrid, opts = {}) {\n        const walkableGrid = Grid.alloc(this.width, this.height);\n        let disrupts = false;\n        const gridOffsetX = opts.gridOffsetX || 0;\n        const gridOffsetY = opts.gridOffsetY || 0;\n        const bounds = opts.bounds || null;\n        // Get all walkable locations after lake added\n        this.cells.forEach((cell, i, j) => {\n            if (bounds && !bounds.contains(i, j))\n                return; // outside bounds\n            const blockingX = i + gridOffsetX;\n            const blockingY = j + gridOffsetY;\n            if (cell.isNull()) {\n                return; // do nothing\n            }\n            else if (cell.canBePassed()) {\n                if (blockingGrid.hasXY(blockingX, blockingY) &&\n                    blockingGrid[blockingX][blockingY])\n                    return;\n                walkableGrid[i][j] = 1;\n            }\n            else if (cell.hasTileFlag(TileFlags.T_HAS_STAIRS)) {\n                if (blockingGrid.hasXY(blockingX, blockingY) &&\n                    blockingGrid[blockingX][blockingY]) {\n                    disrupts = true;\n                }\n                else {\n                    walkableGrid[i][j] = 1;\n                }\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        Grid.free(walkableGrid);\n        return disrupts;\n    }\n    // FOV\n    // Returns a boolean grid indicating whether each square is in the field of view of (xLoc, yLoc).\n    // forbiddenTileFlags is the set of terrain flags that will block vision (but the blocking cell itself is\n    // illuminated); forbiddenCellFlags is the set of map flags that will block vision.\n    // If cautiousOnWalls is set, we will not illuminate blocking tiles unless the tile one space closer to the origin\n    // is visible to the player; this is to prevent lights from illuminating a wall when the player is on the other\n    // side of the wall.\n    calcFov(grid, x, y, maxRadius, forbiddenCellFlags = 0, forbiddenTileFlags = TileFlags.T_OBSTRUCTS_VISION) {\n        maxRadius = maxRadius || this.width + this.height;\n        grid.fill(0);\n        const map = this;\n        const FOV = new Fov.FOV({\n            isBlocked(i, j) {\n                return !!(!grid.hasXY(i, j) ||\n                    map.hasCellFlag(i, j, forbiddenCellFlags) ||\n                    map.hasTileFlag(i, j, forbiddenTileFlags));\n            },\n            calcRadius(x, y) {\n                return Math.sqrt(x ** 2 + y ** 2);\n            },\n            setVisible(x, y) {\n                grid[x][y] = 1;\n            },\n            hasXY(x, y) {\n                return grid.hasXY(x, y);\n            },\n        });\n        return FOV.calculate(x, y, maxRadius);\n    }\n    losFromTo(a, b) {\n        const line = Utils.getLine(a.x, a.y, b.x, b.y);\n        if (!line || !line.length)\n            return false;\n        return !line.some((loc) => {\n            return this.blocksVision(loc[0], loc[1]);\n        });\n    }\n    // MEMORIES\n    storeMemory(x, y) {\n        const cell = this.cell(x, y);\n        cell.storeMemory();\n    }\n    storeMemories() {\n        let x, y;\n        for (x = 0; x < this.width; ++x) {\n            for (y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.flags & CellFlags.ANY_KIND_OF_VISIBLE) {\n                    this.storeMemory(x, y);\n                }\n                cell.flags &= CellFlags.PERMANENT_CELL_FLAGS;\n                cell.mechFlags &= CellMechFlags.PERMANENT_MECH_FLAGS;\n            }\n        }\n    }\n    // TICK\n    async tick() {\n        // map.debug(\"tick\");\n        this.forEach((c) => (c.mechFlags &= ~(CellMechFlags.EVENT_FIRED_THIS_TURN | CellMechFlags.EVENT_PROTECTED)));\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cells[x][y];\n                await cell.activate(\"tick\", { map: this, x, y, cell, safe: true });\n            }\n        }\n        updateLiquid(this);\n    }\n    resetEvents() {\n        this.forEach((c) => (c.mechFlags &= ~(CellMechFlags.EVENT_FIRED_THIS_TURN | CellMechFlags.EVENT_PROTECTED)));\n    }\n}\nexport function make(w, h, opts = {}, wall) {\n    if (typeof opts === \"string\") {\n        opts = { tile: opts };\n        if (wall) {\n            opts.wall = wall;\n        }\n    }\n    const map = new Map(w, h, opts);\n    const floor = opts.tile || opts.floor || opts.floorTile;\n    const boundary = opts.boundary || opts.wall || opts.wallTile;\n    if (floor) {\n        map.fill(floor, boundary);\n    }\n    if (!DATA.map) {\n        DATA.map = map;\n    }\n    return map;\n}\nMake.map = make;\nexport function getCellAppearance(map, x, y, dest) {\n    dest.blackOut();\n    if (!map.hasXY(x, y))\n        return;\n    const cell = map.cell(x, y);\n    if (cell.isAnyKindOfVisible() &&\n        cell.flags & (CellFlags.CELL_CHANGED | CellFlags.NEEDS_REDRAW)) {\n        Cell.getAppearance(cell, dest);\n    }\n    else if (cell.isRevealed()) {\n        dest.drawSprite(cell.memory.mixer);\n    }\n    if (cell.isVisible()) {\n        // keep here to allow for games that do not use fov to work\n    }\n    else if (!cell.isRevealed()) {\n        dest.blackOut();\n    }\n    else if (!cell.isAnyKindOfVisible()) {\n        dest.bg.mix(COLORS.black, 30);\n        dest.fg.mix(COLORS.black, 30);\n    }\n    let needDistinctness = false;\n    if (cell.flags & (CellFlags.IS_CURSOR | CellFlags.IS_IN_PATH)) {\n        const highlight = cell.flags & CellFlags.IS_CURSOR ? COLORS.cursorColor : COLORS.yellow;\n        if (cell.hasTileMechFlag(TileMechFlags.TM_INVERT_WHEN_HIGHLIGHTED)) {\n            Color.swap(dest.fg, dest.bg);\n        }\n        else {\n            // if (!GAME.trueColorMode || !dest.needDistinctness) {\n            // dest.fg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n            // }\n            dest.bg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n        }\n        needDistinctness = true;\n    }\n    if (needDistinctness) {\n        Color.separate(dest.fg, dest.bg);\n    }\n    // dest.bake();\n}\nexport function addText(map, x, y, text, fg, bg, layer) {\n    for (let ch of text) {\n        const sprite = Canvas.makeSprite(ch, fg, bg);\n        const cell = map.cell(x++, y);\n        cell.addSprite(layer || TileLayer.GROUND, sprite);\n    }\n}\nexport function updateGas(map) {\n    if (map.flags & Flags.MAP_NO_GAS)\n        return;\n    const newVolume = Grid.alloc(map.width, map.height);\n    map.forEach((c, x, y) => {\n        if (c.hasTileFlag(TileFlags.T_OBSTRUCTS_GAS))\n            return;\n        let gas = c.gas;\n        let highest = c.gasVolume;\n        let sum = c.gasVolume;\n        let count = 1;\n        map.eachNeighbor(x, y, (n) => {\n            if (n.hasTileFlag(TileFlags.T_OBSTRUCTS_GAS))\n                return;\n            ++count;\n            sum += n.gasVolume;\n            if (n.gasVolume > highest) {\n                gas = n.gas;\n                highest = n.gasVolume;\n            }\n        });\n        if (!sum)\n            return;\n        const newVol = Math.floor(sum / count);\n        if (c.gas != gas) {\n            c._setTile(gas, newVol, map); // volume = 1 to start, will change later\n        }\n        newVolume[x][y] += newVol;\n        const rem = sum - count * Math.floor(sum / count);\n        if (rem && random.number(count) < rem) {\n            newVolume[x][y] += 1;\n        }\n        // disperses\n        // if (newVolume[x][y] && random.chance(20)) {\n        // \tnewVolume[x][y] -= 1;\n        // }\n    });\n    let hasGas = false;\n    newVolume.forEach((v, i, j) => {\n        const cell = map.cell(i, j);\n        if (v) {\n            hasGas = true;\n            if (cell.gas && cell.gasVolume !== v) {\n                cell.gasVolume = v;\n                map.redrawCell(cell);\n            }\n        }\n        else if (cell.gas) {\n            cell.clearLayer(TileLayer.GAS);\n            map.redrawCell(cell);\n        }\n    });\n    if (hasGas) {\n        map.flags &= ~Flags.MAP_NO_GAS;\n    }\n    else {\n        map.flags |= Flags.MAP_NO_GAS;\n    }\n    map.changed(true);\n    Grid.free(newVolume);\n}\nexport function updateLiquid(map) {\n    if (map.flags & Flags.MAP_NO_LIQUID)\n        return;\n    const newVolume = Grid.alloc(map.width, map.height);\n    map.forEach((c, x, y) => {\n        if (c.hasTileFlag(TileFlags.T_OBSTRUCTS_LIQUID))\n            return;\n        let liquid = c.liquid;\n        let highest = c.liquidVolume;\n        let count = 1;\n        map.eachNeighbor(x, y, (n) => {\n            if (n.hasTileFlag(TileFlags.T_OBSTRUCTS_LIQUID))\n                return;\n            ++count;\n            if (n.liquidVolume > highest) {\n                liquid = n.liquid;\n                highest = n.liquidVolume;\n            }\n        });\n        let newVol = c.liquidVolume;\n        if (newVol > 10 && count > 1) {\n            let spread = Math.round(0.2 * c.liquidVolume);\n            if (spread > 5) {\n                newVol -= spread;\n                if (c.liquid != liquid) {\n                    c._setTile(liquid, newVol, map); // volume = 1 to start, will change later\n                }\n                // spread = Math.floor(spread / count);\n                if (spread) {\n                    newVolume.eachNeighbor(x, y, (v, i, j) => {\n                        newVolume[i][j] = v + spread;\n                    });\n                }\n            }\n        }\n        newVolume[x][y] += newVol;\n        // disperses\n        const tile = c.liquidTile;\n        if (newVolume[x][y] > 0 && random.chance(tile.dissipate, 10000)) {\n            newVolume[x][y] -= 1;\n        }\n    });\n    let hasLiquid = false;\n    newVolume.forEach((v, i, j) => {\n        const cell = map.cell(i, j);\n        if (v) {\n            hasLiquid = true;\n            if (cell.liquid && cell.liquidVolume !== v) {\n                cell.liquidVolume = v;\n                map.redrawCell(cell);\n            }\n        }\n        else if (cell.liquid) {\n            cell.clearLayer(TileLayer.LIQUID);\n            map.redrawCell(cell);\n        }\n    });\n    if (hasLiquid) {\n        map.flags &= ~Flags.MAP_NO_LIQUID;\n    }\n    else {\n        map.flags |= Flags.MAP_NO_LIQUID;\n    }\n    map.changed(true);\n    Grid.free(newVolume);\n}\n","import * as Tile from \"./tile\";\n// These are the minimal set of tiles to make the diggers work\nconst NOTHING = \"0\";\nTile.install(NOTHING, {\n    sprite: { ch: \"\\u2205\", fg: \"white\", bg: \"black\" },\n    flags: \"T_OBSTRUCTS_PASSABILITY\",\n    name: \"eerie nothingness\",\n    article: \"an\",\n    priority: 0,\n});\nTile.install(\"FLOOR\", {\n    sprite: {\n        ch: \"\\u00b7\",\n        fg: [30, 30, 30, 20, 0, 0, 0],\n        bg: [2, 2, 10, 0, 2, 2, 0],\n    },\n    priority: 10,\n    article: \"the\",\n});\nTile.install(\"DOOR\", {\n    sprite: { ch: \"+\", fg: [100, 40, 40], bg: [30, 60, 60] },\n    priority: 30,\n    flags: \"T_IS_DOOR, T_OBSTRUCTS_TILE_EFFECTS, T_OBSTRUCTS_ITEMS, T_OBSTRUCTS_VISION, TM_VISUALLY_DISTINCT\",\n    article: \"a\",\n    activates: {\n        enter: { tile: \"DOOR_OPEN\" },\n        open: { tile: \"DOOR_OPEN_ALWAYS\" },\n    },\n});\nTile.install(\"DOOR_OPEN\", \"DOOR\", {\n    sprite: { ch: \"'\", fg: [100, 40, 40], bg: [30, 60, 60] },\n    priority: 40,\n    flags: \"!T_OBSTRUCTS_ITEMS, !T_OBSTRUCTS_VISION\",\n    name: \"open door\",\n    article: \"an\",\n    activates: {\n        tick: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n        enter: null,\n        open: null,\n        close: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n    },\n});\nTile.install(\"DOOR_OPEN_ALWAYS\", \"DOOR_OPEN\", {\n    activates: {\n        tick: null,\n        close: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n    },\n});\nTile.install(\"BRIDGE\", {\n    sprite: { ch: \"=\", fg: [100, 40, 40] },\n    priority: 40,\n    layer: \"SURFACE\",\n    flags: \"T_BRIDGE, TM_VISUALLY_DISTINCT\",\n    article: \"a\",\n});\nTile.install(\"UP_STAIRS\", {\n    sprite: { ch: \"<\", fg: [100, 40, 40], bg: [100, 60, 20] },\n    priority: 200,\n    flags: \"T_UP_STAIRS, T_STAIR_BLOCKERS, TM_VISUALLY_DISTINCT, TM_LIST_IN_SIDEBAR\",\n    name: \"upward staircase\",\n    article: \"an\",\n});\nTile.install(\"DOWN_STAIRS\", {\n    sprite: { ch: \">\", fg: [100, 40, 40], bg: [100, 60, 20] },\n    priority: 200,\n    flags: \"T_DOWN_STAIRS, T_STAIR_BLOCKERS, TM_VISUALLY_DISTINCT, TM_LIST_IN_SIDEBAR\",\n    name: \"downward staircase\",\n    article: \"a\",\n});\nTile.install(\"WALL\", {\n    sprite: {\n        ch: \"#\",\n        fg: [7, 7, 7, 0, 3, 3, 3],\n        bg: [40, 40, 40, 10, 10, 0, 5],\n    },\n    priority: 100,\n    flags: \"T_OBSTRUCTS_EVERYTHING\",\n    article: \"a\",\n});\nTile.install(\"LAKE\", {\n    sprite: {\n        ch: \"~\",\n        fg: [5, 8, 20, 10, 0, 4, 15, true],\n        bg: [10, 15, 41, 6, 5, 5, 5, true],\n    },\n    priority: 50,\n    flags: \"T_DEEP_WATER\",\n    name: \"deep water\",\n    article: \"the\",\n});\n"],"names":["Layer","Fl","Flag","fl","Activation","Tile","TileMech","Cell","CellMech","Map","DFF_BLOCKED_BY_ITEMS","DFF_BLOCKED_BY_ACTORS","DFF_NULL_SURFACE","DFF_NULL_LIQUID","DFF_NULL_GAS","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_OBSTRUCTS_PASSABILITY","T_OBSTRUCTS_VISION","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","T_OBSTRUCTS_ITEMS","T_OBSTRUCTS_GAS","T_OBSTRUCTS_SURFACE","T_OBSTRUCTS_LIQUID","T_OBSTRUCTS_DIAGONAL_MOVEMENT","T_CAUSES_POISON","T_CAUSES_DAMAGE","T_CAUSES_PARALYSIS","T_CAUSES_CONFUSION","T_CAUSES_EXPLOSIVE_DAMAGE","T_CAUSES_NAUSEA","T_OBSTRUCTS_TILE_EFFECTS","TM_PROMOTES_WITH_KEY","TM_PROMOTES_WITHOUT_KEY","TM_PROMOTES_ON_STEP","TM_PROMOTES_ON_ITEM_REMOVE","TM_PROMOTES_ON_SACRIFICE_ENTRY","TM_PROMOTES_ON_ELECTRICITY","TM_PROMOTES_ON_PLAYER_ENTRY","REVEALED","MAGIC_MAPPED","ITEM_DETECTED","HAS_ITEM","HAS_DORMANT_MONSTER","HAS_STAIRS","STABLE_MEMORY","IMPREGNABLE","VISIBLE","CLAIRVOYANT_VISIBLE","TELEPATHIC_VISIBLE","HAS_PLAYER","HAS_MONSTER","WAS_VISIBLE","WAS_CLAIRVOYANT_VISIBLE","WAS_TELEPATHIC_VISIBLE","IN_FOV","NEEDS_REDRAW","CELL_CHANGED","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_TRAP_FREE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","MAP_STABLE_LIGHTS","MAP_STABLE_GLOW_LIGHTS","MAP_FOV_CHANGED","TileEvent","[object Object]","opts","fn","this","tile","item","chance","volume","spread","radius","decrement","flags","from","Flags","matchTile","needs","next","message","lightFlare","flare","flashColor","flash","Color","messageDisplayed","emit","id","make","tileEvent","activations","DF_NONE","async","spawn","activation","ctx","i","j","feat","Utils","ERROR","map","x","y","undefined","safe","hasCellMechFlag","CellMechFlags","EVENT_FIRED_THIS_TURN","DFF_ALWAYS_FIRE","refreshCell","DFF_NO_REDRAW_CELL","abortIfBlocking","DFF_ABORT_IF_BLOCKS_MAP","length","isVisible","Msg","add","Tile.tiles","Make","blocking","DFF_PERMIT_BLOCKING","TileFlags","T_PATHING_BLOCKER","blocksMove","DFF_TREAT_AS_BLOCKING","spawnMap","Grid","alloc","width","height","didSomething","computeSpawnMap","gridDisruptsPassability","bounds","DFF_EVACUATE_CREATURES","evacuateCreatures","DFF_EVACUATE_ITEMS","evacuateItems","DFF_NULLIFY_CELL","nullifyCells","spawnTiles","delete","DFF_PROTECTED","forEach","v","cell","mechFlags","EVENT_PROTECTED","Data","gameHasEnded","actor","t","tiles","applyInstantEffects","Events","free","DFF_SUBSEQ_ALWAYS","DFF_SUBSEQ_EVERYWHERE","updateMapToShoreThisTurn","redrawXY","changed","DFF_NO_MARK_FIRED","setCellFlags","cellIsOk","hasXY","DFF_BUILD_IN_WALLS","isWall","DFF_MUST_TOUCH_WALLS","ok","eachNeighbor","c","DFF_NO_TOUCH_WALLS","containsXY","hasTile","hasTileFlag","dir","x2","y2","madeChange","startProb","probDec","name","DFF_SPREAD_CIRCLE","random","updateCircle","_v","dist","Math","floor","distanceBetween","prob","DFF_SPREAD_LINE","DIRS","number","accomplishedSomething","blockedByOtherLayers","DFF_BLOCKED_BY_OTHER_LAYERS","superpriority","DFF_SUPERPRIORITY","layers","layer","GAS","gasVolume","LIQUID","liquidVolume","priority","obstructsLayer","highestPriorityTile","setTile","removeItem","clone","addItem","nullSurface","nullLiquid","nullGas","nullifyCellLayers","blockingMap","monst","loc","matchingLocNear","forbidsCell","hallways","moveActor","dest","event","Object","values","f","config","CONFIG","light","INTENSITY_DARK","LIGHT_COMPONENTS","Light","color","range","fadeTo","pass","passThroughActors","Range","other","copy","intensity","maintainShadows","isMinersLight","k","lightMultiplier","value","outerRadius","ceil","bake","dispelShadows","fadeToPercent","grid","calcFov","Flags.Cell","HAS_ACTOR","Flags.Tile","overlappedFieldOfView","forCircle","IS_IN_SHADOW","ANY_KIND_OF_VISIBLE","max","args","cached","lights","split","trim","Number","parseInt","Array","isArray","Error","JSON","stringify","arg","install","source","recordOldLights","eachCell","oldLight","LIGHT_CHANGED","zeroOutLights","ambientLight","_i","_j","recordGlowLights","glowLight","restoreGlowLights","entries","info","Flags.Map","eachGlowLight","paint","setFlag","eachDynamicLight","CELL_LIT","CELL_DARK","some","isDark","updateDisplayDetail","PLAYER","DATA","player","MINERS_LIGHT","darkColor","r","g","b","base","GROUND","sprite","activates","flavor","desc","article","dissipate","assignOmitting","MechFlags","Light.from","Canvas","makeSprite","ch","fg","bg","opacity","assign","key","TileEvent.make","e","tileId","flag","result","toString","getName","arguments","Extends","extends","cursorPathIntensity","CellMemory","mixer","Mixer","itemQuantity","cellFlags","cellMechFlags","tileFlags","tileMechFlags","nullify","sprites","_actor","_item","data","CELL_DEFAULT","machineNumber","memory","copyObject","ground","liquid","surface","SURFACE","gas","groundTile","TILES","liquidTile","surfaceTile","gasTile","IS_WAS_ANY_KIND_OF_VISIBLE","orMapped","hasTileMechFlag","TileMechFlags","TM_LIST_IN_SIDEBAR","Light.intensity","limitToPlayerKnowledge","flagMask","cellFlag","cellMechFlag","isAnyKindOfVisible","includes","successorFlags","successorTileFlags","discoveredTileFlags","skipGas","best","bestPriority","tileFlag","mechFlag","T_BRIDGE","isSecretDoor","isPassableNow","TM_CONNECTS_LEVEL","TM_PROMOTES","promotedTileFlags","T_OBSTRUCTS_EVERYTHING","T_IS_DOOR","TM_IS_SECRET","T_IS_LIQUID","T_GAS","xpxpThisTurn","WARN","oldTileId","oldTile","staleLoopMap","setFlags","CAUGHT_FIRE_THIS_TURN","blocksVision","oldBlocksVision","MapFlags","clearFlag","MAP_NO_LIQUID","MAP_NO_GAS","except","floorTile","fired","ev","Activation.spawn","activatesOn","removeSprite","addSprite","ITEM","ACTOR","current","prev","quantity","getAppearance","isOrWasAnyKindOfVisible","rememberedInCell","storeMemory","_setTile","blackOut","needDistinctness","alpha","clamp","drawSprite","TM_VISUALLY_DISTINCT","multiply","separate","setDefaults","map.deepestLevel","w","h","locations","_actors","_items","events","_width","_height","cells","Cell.Cell","tick","MAP_DEFAULT","ambient","fmt","dump","forRect","only4dirs","isBoundaryXY","MAP_CHANGED","_needsRedraw","redrawCell","CellFlags","markRevealed","invalidateCostMap","hasVisibleLight","mapFlag","clearFlags","tileWithFlag","tileWithMechFlag","hasDiscoveredTileFlag","canBePassed","isNull","isEmpty","isObstruction","isDoor","isLiquid","hasGas","blocksPathing","tileFlavor","nullifyTileWithFlags","nullifyLayers","boundaryTile","matchFn","count","arcCount","x1","y1","costGrid","costFn","ONE","Path","OBSTRUCTION","matcher","maxIndex","d","match","TRUE","hallwaysAllowed","forbidLiquid","liquids","deterministic","candidateLocs","passableArcCount","push","randIndex","forbidCellFlags","forbidTileFlags","forbidTileMechFlags","tries","retry","removeFromChain","eachChain","anim","TileLayer","FX","oldCell","theActor","isPlayer","avoidsCell","addActor","removeActor","actorAt","theItem","isDetected","D_ITEM_OMNISCIENCE","blockingGrid","walkableGrid","disrupts","gridOffsetX","gridOffsetY","contains","blockingX","blockingY","first","floodFill","maxRadius","forbiddenCellFlags","forbiddenTileFlags","fill","Fov","FOV","isBlocked","hasCellFlag","calcRadius","sqrt","calculate","a","line","getLine","PERMANENT_CELL_FLAGS","PERMANENT_MECH_FLAGS","activate","updateLiquid","wall","boundary","wallTile","newVolume","highest","n","newVol","round","hasLiquid","clearLayer","Cell.getAppearance","isRevealed","mix","COLORS","black","IS_CURSOR","IS_IN_PATH","highlight","cursorColor","yellow","TM_INVERT_WHEN_HIGHLIGHTED","swap","text","sum","rem","enter","open","close"],"mappings":"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"}