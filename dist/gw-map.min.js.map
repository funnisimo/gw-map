{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/entity/key.js","../js/entity/kind.js","../js/entity/entity.js","../js/actor/actor.js","../js/actor/kind.js","../js/item/kind.js","../js/item/item.js","../js/effect/flags.js","../js/effect/make.js","../js/effect/effect.js","../js/effect/fire.js","../js/effect/message.js","../js/effect/emit.js","../js/effect/fn.js","../js/effect/activateMachine.js","../js/tile/tile.js","../js/tile/tiles.js","../js/tile/index.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/actorLayer.js","../js/layer/itemLayer.js","../js/layer/gasLayer.js","../js/layer/fireLayer.js","../js/map/cell.js","../js/map/cellMemory.js","../js/map/map.js","../js/map/analyze.js","../js/map/effect.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(12)] = \"IMPREGNABLE\";\n    // DARKENED = Fl(13), // magical blindness?\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(14)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"CELL_CHANGED\"] = Fl(15)] = \"CELL_CHANGED\";\n    // These are to help memory\n    Cell[Cell[\"HAS_SURFACE\"] = Fl(16)] = \"HAS_SURFACE\";\n    Cell[Cell[\"HAS_LIQUID\"] = Fl(17)] = \"HAS_LIQUID\";\n    Cell[Cell[\"HAS_GAS\"] = Fl(18)] = \"HAS_GAS\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(19)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(20)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(21)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(22)] = \"HAS_ITEM\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(23)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(24)] = \"IS_CURSOR\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(25)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_TRAP_FREE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW | Cell.CELL_CHANGED] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as GWU from 'gw-utils';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n    }\n    forbidsCell(_item, _cell) {\n        return false;\n    }\n    getName(_item) {\n        return this.name;\n    }\n    getDescription(_item) {\n        return this.description;\n    }\n    getFlavor(_item) {\n        return this.flavor;\n    }\n    getVerb(_item, verb) {\n        return verb;\n    }\n}\n","import * as Flags from '../flags/entity';\nexport class Entity {\n    constructor(kind) {\n        this.key = null;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(this, cell);\n    }\n    getName() {\n        return this.kind.getName(this);\n    }\n    getDescription() {\n        return this.kind.getDescription(this);\n    }\n    getFlavor() {\n        return this.kind.getFlavor(this);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n}\n","import * as Entity from '../entity';\nimport * as Flags from '../flags';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.next = null;\n        // @ts-ignore\n        this.flags = this.flags || {};\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    isVisible() {\n        return true;\n    }\n}\n","import * as Entity from '../entity';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n    }\n    forbidsCell(_item, _cell) {\n        return false;\n    }\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1));\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.utils.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags &&\n            GWU.utils.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    return GWU.random.item(matches) || null;\n}\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nimport * as Kind from './kind';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore\n        this.flags = this.flags || {};\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n}\nexport function make(id) {\n    const kind = Kind.get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return new Item(kind);\n}\nexport function makeRandom(opts) {\n    const kind = Kind.randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return new Item(kind);\n}\nexport function from(info) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = Kind.get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof Kind.ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = Kind.makeKind(info);\n    }\n    return new Item(kind);\n}\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_SPREAD_CIRCLE\"] = Fl(13)] = \"E_SPREAD_CIRCLE\";\n    Effect[Effect[\"E_SPREAD_LINE\"] = Fl(14)] = \"E_SPREAD_LINE\";\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nimport { Effect as Flags } from './flags';\nimport { handlers, effects } from './effect';\nexport function make(opts) {\n    var _a;\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    if (typeof opts === 'string') {\n        throw new Error('Cannot make effect from string: ' + opts);\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    // now make base effect stuff\n    const info = {\n        flags: GWU.flag.from(Flags, opts.flags),\n        chance: (_a = opts.chance) !== null && _a !== void 0 ? _a : 0,\n        next: null,\n        id: opts.id || 'n/a',\n    };\n    if (opts.next) {\n        if (typeof opts.next === 'string') {\n            info.next = opts.next;\n        }\n        else {\n            info.next = make(opts.next);\n        }\n    }\n    // and all the handlers\n    Object.values(handlers).forEach((v) => v.make(opts, info));\n    return info;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'string') {\n        const effect = effects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\n","import { Effect as Flags } from './flags';\nimport { make } from './make';\n// resetMessageDisplayed\nexport function reset(effect) {\n    effect.flags &= ~Flags.E_FIRED;\n}\nexport function resetAll() {\n    Object.values(effects).forEach((e) => reset(e));\n}\nexport const effects = {};\nexport function install(id, config) {\n    const effect = make(config);\n    effects[id] = effect;\n    effect.id = id;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id] = handler;\n}\n","import * as GWU from 'gw-utils';\nimport { Effect as Flags } from './flags';\nimport { handlers } from './effect';\nimport { from } from './make';\nexport async function fire(effect, map, x, y, ctx_ = {}) {\n    if (!effect)\n        return false;\n    if (typeof effect === 'string') {\n        const name = effect;\n        effect = from(name);\n        if (!effect)\n            throw new Error('Failed to find effect: ' + name);\n    }\n    const ctx = ctx_;\n    if (!ctx.force && effect.chance && !GWU.random.chance(effect.chance, 10000))\n        return false;\n    const grid = (ctx.grid = GWU.grid.alloc(map.width, map.height));\n    let didSomething = true;\n    const allHandlers = Object.values(handlers);\n    for (let h of allHandlers) {\n        if (await h.fire(effect, map, x, y, ctx)) {\n            didSomething = true;\n        }\n    }\n    // bookkeeping\n    if (didSomething &&\n        map.isVisible(x, y) &&\n        !(effect.flags & Flags.E_NO_MARK_FIRED)) {\n        effect.flags |= Flags.E_FIRED;\n    }\n    // do the next effect - if applicable\n    if (effect.next &&\n        (didSomething || effect.flags & Flags.E_NEXT_ALWAYS) &&\n        !GWU.data.gameHasEnded) {\n        const nextInfo = typeof effect.next === 'string' ? from(effect.next) : effect.next;\n        if (effect.flags & Flags.E_NEXT_EVERYWHERE) {\n            await grid.forEachAsync(async (v, i, j) => {\n                if (!v)\n                    return;\n                // @ts-ignore\n                await fire(nextInfo, map, i, j, ctx);\n            });\n        }\n        else {\n            await fire(nextInfo, map, x, y, ctx);\n        }\n    }\n    GWU.grid.free(grid);\n    return didSomething;\n}\nexport function fireSync(effect, map, x, y, ctx_ = {}) {\n    if (!effect)\n        return false;\n    if (typeof effect === 'string') {\n        const name = effect;\n        effect = from(name);\n        if (!effect)\n            throw new Error('Failed to find effect: ' + name);\n    }\n    const ctx = ctx_;\n    if (!ctx.force && effect.chance && !GWU.random.chance(effect.chance, 10000))\n        return false;\n    const grid = (ctx.grid = GWU.grid.alloc(map.width, map.height));\n    let didSomething = true;\n    const allHandlers = Object.values(handlers);\n    for (let h of allHandlers) {\n        if (h.fireSync(effect, map, x, y, ctx)) {\n            didSomething = true;\n        }\n    }\n    // bookkeeping\n    if (didSomething &&\n        map.isVisible(x, y) &&\n        !(effect.flags & Flags.E_NO_MARK_FIRED)) {\n        effect.flags |= Flags.E_FIRED;\n    }\n    // do the next effect - if applicable\n    if (effect.next &&\n        (didSomething || effect.flags & Flags.E_NEXT_ALWAYS) &&\n        !GWU.data.gameHasEnded) {\n        const nextInfo = typeof effect.next === 'string' ? from(effect.next) : effect.next;\n        if (effect.flags & Flags.E_NEXT_EVERYWHERE) {\n            grid.forEach(async (v, i, j) => {\n                if (!v)\n                    return;\n                fireSync(nextInfo, map, i, j, ctx);\n            });\n        }\n        else {\n            fireSync(nextInfo, map, x, y, ctx);\n        }\n    }\n    GWU.grid.free(grid);\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport * as EFFECT from './effect';\nimport { Effect as Flags } from './flags';\n//////////////////////////////////////////////\n// MESSAGE\nexport class MessageEffect {\n    make(src, dest) {\n        if (!src.message)\n            return true;\n        if (typeof src.message !== 'string') {\n            throw new Error('Emit must be configured with name of event to emit');\n        }\n        dest.message = src.message;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (!config.message)\n            return false;\n        const fired = !!(config.flags & Flags.E_FIRED);\n        if (config.message &&\n            config.message.length &&\n            !fired &&\n            map.isVisible(x, y)) {\n            GWU.message.addAt(x, y, config.message, ctx);\n            return true;\n        }\n        return false;\n    }\n    fireSync(config, _map, _x, _y, _ctx) {\n        if (!config.message)\n            return false;\n        throw new Error('Cannot use \"message\" effects in build steps.');\n    }\n}\nEFFECT.installHandler('message', new MessageEffect());\n","import * as GWU from 'gw-utils';\nimport * as EFFECT from './effect';\n//////////////////////////////////////////////\n// EMIT\nexport class EmitEffect {\n    make(src, dest) {\n        if (!src.emit)\n            return true;\n        if (typeof src.emit !== 'string') {\n            throw new Error('emit effects must be string name to emit: { emit: \"EVENT\" }');\n        }\n        dest.emit = src.emit;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (config.emit) {\n            return await GWU.events.emit(config.emit, x, y, ctx);\n        }\n        return false;\n    }\n    fireSync(config, _map, _x, _y, _ctx) {\n        if (!config.emit)\n            return false;\n        throw new Error('Cannot use \"emit\" effects in build steps.');\n    }\n}\nEFFECT.installHandler('emit', new EmitEffect());\n","import * as EFFECT from './effect';\n//////////////////////////////////////////////\n// FN\nexport class FnEffect {\n    make(src, dest) {\n        if (!src.fn)\n            return true;\n        if (typeof src.fn !== 'function') {\n            throw new Error('fn effects must be functions.');\n        }\n        dest.fn = src.fn;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.fn) {\n            return await config.fn(config, map, x, y, ctx);\n        }\n        return false;\n    }\n    fireSync(config, map, x, y, ctx) {\n        if (config.fn) {\n            const result = config.fn(config, map, x, y, ctx);\n            if (result === true || result === false) {\n                return result;\n            }\n            throw new Error('Cannot use async function effects in build steps.');\n        }\n        return false;\n    }\n}\nEFFECT.installHandler('fn', new FnEffect());\n","import * as EFFECT from './effect';\n//////////////////////////////////////////////\n// ActivateMachine\nexport class ActivateMachineEffect {\n    make(src, dest) {\n        if (!src.activateMachine)\n            return true;\n        dest.activateMachine = true;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.activateMachine) {\n            const cell = map.cell(x, y);\n            const machine = cell.machineId;\n            if (!machine)\n                return false;\n            return await map.activateMachine(machine, x, y, ctx);\n        }\n        return false;\n    }\n    fireSync(config, map, x, y, ctx) {\n        if (config.activateMachine) {\n            const cell = map.cell(x, y);\n            const machine = cell.machineId;\n            if (!machine)\n                return false;\n            return map.activateMachineSync(machine, x, y, ctx);\n        }\n        return false;\n    }\n}\nEFFECT.installHandler('activateMachine', new ActivateMachineEffect());\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (arg === true || arg === false) {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription() {\n        return this.description || this.getName();\n    }\n    getFlavor() {\n        return this.flavor || this.getName();\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string') {\n                effects[key] = value;\n                return;\n            }\n            effects[key] = Effect.make(value);\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as Tile from './tile';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: [30, 30, 30, 20, 0, 0, 0],\n    bg: [2, 2, 10, 0, 2, 2, 0],\n    priority: 10,\n    article: 'the',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: { tile: 'DOOR_OPEN' },\n        open: { tile: 'DOOR_OPEN_ALWAYS' },\n    },\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            tile: 'DOOR',\n            flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY',\n        },\n        enter: null,\n        open: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: { emit: 'UP_STAIRS' },\n    },\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: { emit: 'DOWN_STAIRS' },\n    },\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'an impregnable wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: [5, 8, 20, 10, 0, 4, 15, true],\n    bg: [10, 15, 41, 6, 5, 5, 5, true],\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: [5, 8, 10, 10, 0, 4, 15, true],\n    bg: [10, 30, 30, 6, 0, 10, 10, true],\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    depth: 'SURFACE', // 'LIQUID'?\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n});\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\nimport './tiles';\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    setTile(_x, _y, _tile) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import * as Tile from '../tile';\nimport * as Flags from '../flags';\nimport { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts = {}) {\n        const cell = this.map.cell(x, y);\n        const current = cell.depthTile(tile.depth) || Tile.tiles.NULL;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (cell.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && cell.hasItem())\n            return false;\n        if (opts.blockedByActors && cell.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && cell.highestPriority() > tile.priority)\n            return false;\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = cell.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === Tile.tiles.NULL) {\n                this.setTile(x, y, Tile.get(tile.groundTile));\n            }\n        }\n        if (!cell.setTile(tile))\n            return false;\n        if (opts.machine) {\n            cell.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            cell.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire, pressure plates and key-activated tiles.\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (!cell.hasCellFlag(Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM) &&\n                    cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)) {\n                    cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n                }\n                if (cell.hasEffect('noKey') && !this.map.hasKey(x, y)) {\n                    await cell.activate('noKey', this.map, x, y);\n                }\n            }\n        }\n        return true;\n    }\n    putAppearance(dest, x, y) {\n        const cell = this.map.cell(x, y);\n        const tile = cell.depthTile(this.depth);\n        if (tile && tile !== Tile.tiles.NULL) {\n            dest.drawSprite(tile.sprite);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { MapLayer } from './mapLayer';\nexport class ActorLayer extends MapLayer {\n    constructor(map, name = 'actor') {\n        super(map, name);\n    }\n    async addActor(x, y, obj, _opts) {\n        const actor = obj;\n        if (actor.isDestroyed)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (actor.forbidsCell(cell))\n            return false;\n        if (!GWU.utils.addToChain(cell, 'actor', obj))\n            return false;\n        if (obj.isPlayer()) {\n            cell.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        obj.x = x;\n        obj.y = y;\n        if (obj.key && obj.key.matches(x, y) && cell.hasEffect('key')) {\n            await cell.activate('key', this.map, x, y);\n        }\n        return true;\n    }\n    forceActor(x, y, actor, _opts) {\n        if (actor.isDestroyed)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (!GWU.utils.addToChain(cell, 'actor', actor))\n            return false;\n        if (actor.isPlayer()) {\n            cell.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        actor.x = x;\n        actor.y = y;\n        return true;\n    }\n    async removeActor(obj) {\n        const x = obj.x;\n        const y = obj.y;\n        const cell = this.map.cell(x, y);\n        if (!GWU.utils.removeFromChain(cell, 'actor', obj))\n            return false;\n        if (obj.isPlayer()) {\n            cell.clearCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        if (obj.key && obj.key.matches(x, y) && cell.hasEffect('nokey')) {\n            await cell.activate('key', this.map, x, y);\n        }\n        return true;\n    }\n    putAppearance(dest, x, y) {\n        const cell = this.map.cell(x, y);\n        if (!cell.actor)\n            return;\n        dest.drawSprite(cell.actor.sprite);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { MapLayer } from './mapLayer';\nexport class ItemLayer extends MapLayer {\n    constructor(map, name = 'item') {\n        super(map, name);\n    }\n    async addItem(x, y, obj, _opts) {\n        const item = obj;\n        if (item.isDestroyed)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (item.forbidsCell(cell))\n            return false;\n        if (obj.key && obj.key.matches(x, y) && cell.hasEffect('key')) {\n            await cell.activate('key', this.map, x, y);\n            if (obj.key.disposable) {\n                obj.destroy();\n                return true; // ??? didSomething?\n            }\n        }\n        if (!GWU.utils.addToChain(cell, 'item', obj))\n            return false;\n        obj.x = x;\n        obj.y = y;\n        obj.depth = this.depth;\n        return true;\n    }\n    forceItem(x, y, obj, _opts) {\n        const cell = this.map.cell(x, y);\n        if (!GWU.utils.addToChain(cell, 'item', obj))\n            return false;\n        obj.x = x;\n        obj.y = y;\n        obj.depth = this.depth;\n        return true;\n    }\n    async removeItem(obj) {\n        const x = obj.x;\n        const y = obj.y;\n        const cell = this.map.cell(x, y);\n        if (!GWU.utils.removeFromChain(cell, 'item', obj))\n            return false;\n        if (obj.key && obj.key.matches(x, y) && cell.hasEffect('nokey')) {\n            await cell.activate('key', this.map, x, y);\n        }\n        return true;\n    }\n    putAppearance(dest, x, y) {\n        const cell = this.map.cell(x, y);\n        if (!cell.item)\n            return;\n        dest.drawSprite(cell.item.sprite);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.needsUpdate = false;\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.needsUpdate = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n    }\n    async tick(_dt) {\n        if (!this.needsUpdate)\n            return false;\n        this.needsUpdate = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.needsUpdate = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n    putAppearance(dest, x, y) {\n        const volume = this.volume[x][y];\n        if (!volume)\n            return;\n        const cell = this.map.cell(x, y);\n        const tile = cell.depthTile(this.depth);\n        if (tile) {\n            const opacity = this.calcOpacity(volume);\n            dest.drawSprite(tile.sprite, opacity);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    await this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.utils.DIRS[d];\n                        await this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    async exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && GWU.random.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.utils.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            await cell.activate(event, this.map, x, y, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nclass CellObjects {\n    constructor(cell) {\n        this.cell = cell;\n    }\n    eachItem(cb) {\n        let object = this.cell._item;\n        while (object) {\n            cb(object);\n            object = object.next;\n        }\n    }\n    eachActor(cb) {\n        let object = this.cell._actor;\n        while (object) {\n            cb(object);\n            object = object.next;\n        }\n    }\n    forEach(cb) {\n        this.eachItem(cb);\n        this.eachActor(cb);\n    }\n    some(cb) {\n        let object = this.cell._item;\n        while (object) {\n            if (cb(object))\n                return true;\n            object = object.next;\n        }\n        object = this.cell._actor;\n        while (object) {\n            if (cb(object))\n                return true;\n            object = object.next;\n        }\n        return false;\n    }\n    reduce(cb, start) {\n        let object = this.cell._item;\n        while (object) {\n            if (start === undefined) {\n                start = object;\n            }\n            else {\n                start = cb(start, object);\n            }\n            object = object.next;\n        }\n        object = this.cell._actor;\n        while (object) {\n            if (start === undefined) {\n                start = object;\n            }\n            else {\n                start = cb(start, object);\n            }\n            object = object.next;\n        }\n        return start;\n    }\n}\nexport class Cell {\n    constructor(groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.keyId = 0;\n        // gasVolume: number = 0;\n        // liquidVolume: number = 0;\n        this._actor = null;\n        this._item = null;\n        this._objects = new CellObjects(this);\n        this.flags = { cell: 0 };\n        this.tiles = [TILE.tiles.NULL];\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles = other.tiles.slice();\n        this._actor = other._actor;\n        this._item = other._item;\n        this.keyId = other.keyId;\n        this.machineId = other.machineId;\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag) {\n        return (this.tiles.some((t) => t && t.flags.entity & flag) ||\n            this._objects.some((o) => !!(o.flags.entity & flag)));\n    }\n    hasAllEntityFlags(flags) {\n        return (this.entityFlags() & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags() {\n        return (this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0) |\n            this._objects.reduce((out, o) => out | o.flags.entity, 0));\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    itemFlags() {\n        let flags = 0;\n        this._objects.eachItem((i) => {\n            flags |= i.flags.item;\n        });\n        return flags;\n    }\n    actorFlags() {\n        let flags = 0;\n        this._objects.eachActor((a) => {\n            flags |= a.flags.actor;\n        });\n        return flags;\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return (this.tiles.some((t) => t && t.blocksVision()) ||\n            this._objects.some((o) => o.blocksVision()));\n    }\n    blocksPathing() {\n        return (this.tiles.some((t) => t && t.blocksPathing()) ||\n            this._objects.some((o) => o.blocksPathing()));\n    }\n    blocksMove() {\n        return (this.tiles.some((t) => t && t.blocksMove()) ||\n            this._objects.some((o) => o.blocksMove()));\n    }\n    blocksEffects() {\n        return (this.tiles.some((t) => t && t.blocksEffects()) ||\n            this._objects.some((o) => o.blocksEffects()));\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isEmpty() {\n        return (this.tiles.every((t) => !t || t === TILE.tiles.NULL) &&\n            this._actor == null &&\n            this._item == null);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    // @returns - whether or not the change results in a change to the cell lighting.\n    setTile(tile) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        // const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        // if (current !== tile) {\n        //     this.gasVolume = 0;\n        //     this.liquidVolume = 0;\n        // }\n        // Check priority, etc...\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clear() {\n        this.tiles = [TILE.tiles.NULL];\n        this.needsRedraw = true;\n        this.flags.cell = 0;\n        this.chokeCount = 0;\n        this._actor = null;\n        this._item = null;\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    async activate(event, map, x, y, ctx = {}) {\n        ctx.cell = this;\n        let didSomething = false;\n        if (ctx.depth !== undefined) {\n            const tile = (ctx.tile = this.depthTile(ctx.depth));\n            if (tile && tile.effects) {\n                const ev = tile.effects[event];\n                didSomething = await this._fire(ev, map, x, y, ctx);\n            }\n        }\n        else {\n            // console.log('fire event - %s', event);\n            for (ctx.tile of this.tiles) {\n                if (!ctx.tile || !ctx.tile.effects)\n                    continue;\n                const ev = ctx.tile.effects[event];\n                // console.log(' - ', ev);\n                if (await this._fire(ev, map, x, y, ctx)) {\n                    didSomething = true;\n                    break;\n                }\n                // }\n            }\n        }\n        return didSomething;\n    }\n    activateSync(event, map, x, y, ctx = {}) {\n        ctx.cell = this;\n        let didSomething = false;\n        if (ctx.depth !== undefined) {\n            const tile = (ctx.tile = this.depthTile(ctx.depth));\n            if (tile && tile.effects) {\n                const ev = tile.effects[event];\n                didSomething = this._fireSync(ev, map, x, y, ctx);\n            }\n        }\n        else {\n            // console.log('fire event - %s', event);\n            for (ctx.tile of this.tiles) {\n                if (!ctx.tile || !ctx.tile.effects)\n                    continue;\n                const ev = ctx.tile.effects[event];\n                // console.log(' - ', ev);\n                if (this._fireSync(ev, map, x, y, ctx)) {\n                    didSomething = true;\n                    break;\n                }\n                // }\n            }\n        }\n        return didSomething;\n    }\n    async _fire(effect, map, x, y, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.effects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = await Effect.fire(effect, map, x, y, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    _fireSync(effect, map, x, y, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.effects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = Effect.fireSync(effect, map, x, y, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this._item;\n    }\n    set item(val) {\n        this._item = val;\n        if (val) {\n            this.setCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        else {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        this.needsRedraw = true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this._actor;\n    }\n    set actor(val) {\n        this._actor = val;\n        if (val) {\n            this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        }\n        else {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR);\n        }\n        this.needsRedraw = true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        var _a, _b, _c, _d;\n        if ((_b = (_a = this._actor) === null || _a === void 0 ? void 0 : _a.sprite) === null || _b === void 0 ? void 0 : _b.ch)\n            return this._actor.sprite.ch;\n        if ((_d = (_c = this._item) === null || _c === void 0 ? void 0 : _c.sprite) === null || _d === void 0 ? void 0 : _d.ch)\n            return this._item.sprite.ch;\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nexport class CellMemory {\n    constructor() {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.keyId = 0;\n        this.flags = {\n            cell: 0,\n            item: 0,\n            actor: 0,\n            tile: 0,\n            tileMech: 0,\n            object: 0,\n        };\n        this.blocks = {\n            vision: false,\n            effects: false,\n            move: false,\n            pathing: false,\n        };\n        this._tile = TILE.tiles.NULL;\n        this._item = null;\n        this._actor = null;\n        this._hasKey = false;\n        this.snapshot = new GWU.sprite.Mixer();\n    }\n    clear() {\n        this.snapshot.blackOut();\n        this._item = null;\n        this._actor = null;\n        this._tile = TILE.tiles.NULL;\n        this.flags.cell = 0;\n        this.flags.object = 0;\n        this.flags.tile = 0;\n        this.flags.tileMech = 0;\n        this.blocks.effects = false;\n        this.blocks.move = false;\n        this.blocks.pathing = false;\n        this.blocks.vision = false;\n        this.machineId = 0;\n        this.chokeCount = 0;\n    }\n    store(cell) {\n        this._item = null;\n        if (cell.hasItem()) {\n            this._item = cell.item;\n        }\n        this._actor = null;\n        if (cell.hasActor()) {\n            this._actor = cell.actor;\n        }\n        this._tile = cell.tile;\n        this.flags.cell = cell.cellFlags();\n        this.flags.tile = cell.tileFlags();\n        this.flags.tileMech = cell.tileMechFlags();\n        this.flags.object = cell.entityFlags();\n        this.flags.item = cell.itemFlags();\n        this.flags.actor = cell.actorFlags();\n        this.blocks.effects = cell.blocksEffects();\n        this.blocks.move = cell.blocksMove();\n        this.blocks.pathing = cell.blocksPathing();\n        this.blocks.vision = cell.blocksVision();\n        this.chokeCount = cell.chokeCount;\n        this.machineId = cell.machineId;\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.flags.tile & flags) == flags;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.object & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.object & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags() {\n        return this.flags.object;\n    }\n    tileFlags() {\n        return this.flags.tile;\n    }\n    tileMechFlags() {\n        return this.flags.tileMech;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    blocksVision() {\n        return this.blocks.vision;\n    }\n    blocksPathing() {\n        return this.blocks.pathing;\n    }\n    blocksMove() {\n        return this.blocks.move;\n    }\n    blocksEffects() {\n        return this.blocks.effects;\n    }\n    isWall() {\n        return this.blocksVision() && this.blocksMove();\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    get tile() {\n        return this._tile;\n    }\n    hasTile(tile) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this._tile === tile;\n    }\n    hasItem() {\n        return !!this._item;\n    }\n    get item() {\n        return this._item;\n    }\n    hasActor() {\n        return !!this._actor;\n    }\n    hasPlayer() {\n        return !!(this.flags.cell & Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this._actor;\n    }\n    getDescription() {\n        throw new Error('Method not implemented.');\n    }\n    getFlavor() {\n        throw new Error('Method not implemented.');\n    }\n    getName(_opts) {\n        throw new Error('Method not implemented.');\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\nimport { CellMemory } from './cellMemory';\nimport * as Effect from '../effect';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        this.width = width;\n        this.height = height;\n        this.flags = { map: 0 };\n        this.layers = [];\n        this.cells = GWU.grid.make(width, height, () => new Cell());\n        this.memory = GWU.grid.make(width, height, () => new CellMemory());\n        this.light = new GWU.light.LightSystem(this, opts);\n        this.fov = new GWU.fov.FovSystem(this, opts);\n        this.properties = {};\n        this.initLayers();\n    }\n    cellInfo(x, y, useMemory = false) {\n        if (useMemory)\n            return this.memory[x][y];\n        return this.cell(x, y);\n    }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n        this.addLayer(Flags.Depth.ITEM, new Layer.ItemLayer(this, 'item'));\n        this.addLayer(Flags.Depth.ACTOR, new Layer.ActorLayer(this, 'actor'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // DRAW\n    drawInto(dest, opts = {}) {\n        const buffer = dest instanceof GWU.canvas.Canvas ? dest.buffer : dest;\n        if (typeof opts === 'boolean')\n            opts = { force: opts };\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                this.getAppearanceAt(x, y, mixer);\n                buffer.drawSprite(x, y, mixer);\n            }\n        }\n    }\n    // items\n    itemAt(x, y) {\n        return this.cell(x, y).item;\n    }\n    eachItem(cb) {\n        this.cells.forEach((cell) => {\n            GWU.utils.eachChain(cell.item, cb);\n        });\n    }\n    async addItem(x, y, item) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && (await layer.addItem(x, y, item))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    forceItem(x, y, item) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && layer.forceItem(x, y, item)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async removeItem(item) {\n        const layer = this.layers[item.depth];\n        return layer.removeItem(item);\n    }\n    async moveItem(x, y, item) {\n        if (!this.hasXY(x, y))\n            return false;\n        const layer = this.layers[item.depth];\n        if (!(await layer.removeItem(item)))\n            return false;\n        return this.addItem(x, y, item);\n    }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.cell(x, y).actor;\n    }\n    eachActor(cb) {\n        this.cells.forEach((cell) => {\n            GWU.utils.eachChain(cell.actor, cb);\n        });\n    }\n    async addActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && (await layer.addActor(x, y, actor))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    forceActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && layer.forceActor(x, y, actor)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async removeActor(actor) {\n        const layer = this.layers[actor.depth];\n        return layer.removeActor(actor);\n    }\n    async moveActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        const layer = this.layers[actor.depth];\n        if (!(await layer.removeActor(actor)))\n            return false;\n        return this.addActor(x, y, actor);\n    }\n    // Information\n    isVisible(x, y) {\n        return this.fov.isAnyKindOfVisible(x, y);\n    }\n    hasKey(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cells[x][y];\n        return cell._objects.some((e) => !!e.key && e.key.matches(x, y));\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        this.cells.dump(fmt || ((c) => c.dump()), log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cell(i, j);\n                cell.clear();\n                cell.setTile(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile, useMemory = false) {\n        return this.cellInfo(x, y, useMemory).hasTile(tile);\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    async tick(dt) {\n        let didSomething = await this.fireAll('tick');\n        for (let layer of this.layers) {\n            if (layer && (await layer.tick(dt))) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cells[x][y]);\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.flags.map = src.flags.map;\n        this.light.setAmbient(src.light.getAmbient());\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    async fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.activate(event, this, x, y, ctx);\n    }\n    fireSync(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.activateSync(event, this, x, y, ctx);\n    }\n    async fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.utils.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    GWU.random.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        await willFire.forEachAsync(async (w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    await cell.activate(event, this, x, y, {\n                        force: true,\n                        depth,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    fireAllSync(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.utils.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    GWU.random.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        willFire.forEach((w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    cell.activate(event, this, x, y, {\n                        force: true,\n                        depth,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    async activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cells[x][y];\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        (await cell.activate('machine', this, x, y, ctx)) ||\n                            didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    activateMachineSync(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cells[x][y];\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        cell.activateSync('machine', this, x, y, ctx) ||\n                            didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    getAppearanceAt(x, y, dest) {\n        dest.blackOut();\n        const cell = this.cell(x, y);\n        const isVisible = this.fov.isAnyKindOfVisible(x, y);\n        if (cell.needsRedraw && isVisible) {\n            this.layers.forEach((layer) => layer.putAppearance(dest, x, y));\n            if (dest.dances) {\n                cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n            }\n            else {\n                cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n            }\n            dest.bake();\n            this.memory[x][y].putSnapshot(dest);\n            cell.needsRedraw = false;\n        }\n        else {\n            this.memory[x][y].getSnapshot(dest);\n        }\n        if (isVisible) {\n            const light = this.light.getLight(x, y);\n            dest.multiply(light);\n        }\n        else if (this.fov.isRevealed(x, y)) {\n            dest.scale(50);\n        }\n        else {\n            dest.blackOut();\n        }\n        if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n            GWU.color.separate(dest.fg, dest.bg);\n        }\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n    onCellRevealed(_x, _y) {\n        // if (DATA.automationActive) {\n        // if (cell.item) {\n        //     const theItem: GW.types.ItemType = cell.item;\n        //     if (\n        //         theItem.hasObjectFlag(ObjectFlags.L_INTERRUPT_WHEN_SEEN)\n        //     ) {\n        //         GW.message.add(\n        //             '§you§ §see§ ΩitemMessageColorΩ§item§∆.',\n        //             {\n        //                 item: theItem,\n        //                 actor: DATA.player,\n        //             }\n        //         );\n        //     }\n        // }\n        // if (\n        //     !(this.fov.isMagicMapped(x, y)) &&\n        //     this.site.hasObjectFlag(\n        //         x,\n        //         y,\n        //         ObjectFlags.L_INTERRUPT_WHEN_SEEN\n        //     )\n        // ) {\n        //     const tile = cell.tileWithLayerFlag(\n        //         ObjectFlags.L_INTERRUPT_WHEN_SEEN\n        //     );\n        //     if (tile) {\n        //         GW.message.add(\n        //             '§you§ §see§ ΩbackgroundMessageColorΩ§item§∆.',\n        //             {\n        //                 actor: DATA.player,\n        //                 item: tile.name,\n        //             }\n        //         );\n        //     }\n        // }\n    }\n    redrawCell(x, y, clearMemory) {\n        if (clearMemory) {\n            this.clearMemory(x, y);\n        }\n        this.cells[x][y].needsRedraw = true;\n    }\n    clearMemory(x, y) {\n        this.memory[x][y].clear();\n    }\n    storeMemory(x, y) {\n        const cell = this.cell(x, y);\n        this.memory[x][y].store(cell);\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n    }\n    map.light.update();\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.utils.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.utils.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.utils.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.utils.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.utils.DIRS[dir][0];\n                        const newY = j + GWU.utils.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    let count = passMap[startX][startY] == 2 ? 5000 : 1;\n    if (map.cell(startX, startY).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n        count = 10000;\n    }\n    results[startX][startY] = 1;\n    for (let dir = 0; dir < 4; dir++) {\n        const newX = startX + GWU.utils.DIRS[dir][0];\n        const newY = startY + GWU.utils.DIRS[dir][1];\n        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n            passMap[newX][newY] &&\n            !results[newX][newY]) {\n            count += floodFillCount(map, results, passMap, newX, newY);\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    map.eachCell(checkLoopiness);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(cell, x, y, map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    if (!cell || !(cell.flags.cell & Flags.Cell.IS_IN_LOOP)) {\n        return false;\n    }\n    // find an unloopy neighbor to start on\n    for (sdir = 0; sdir < 8; sdir++) {\n        newX = x + GWU.utils.CLOCK_DIRS[sdir][0];\n        newY = y + GWU.utils.CLOCK_DIRS[sdir][1];\n        if (!map.hasXY(newX, newY))\n            continue;\n        const cell = map.get(newX, newY);\n        if (!cell || !(cell.flags.cell & Flags.Cell.IS_IN_LOOP)) {\n            break;\n        }\n    }\n    if (sdir == 8) {\n        // no unloopy neighbors\n        return false; // leave cell loopy\n    }\n    // starting on this unloopy neighbor,\n    // work clockwise and count up:\n    // (a) the number of strings of loopy neighbors, and\n    // (b) the length of the longest such string.\n    numStrings = maxStringLength = currentStringLength = 0;\n    inString = false;\n    for (dir = sdir; dir < sdir + 8; dir++) {\n        newX = x + GWU.utils.CLOCK_DIRS[dir % 8][0];\n        newY = y + GWU.utils.CLOCK_DIRS[dir % 8][1];\n        if (!map.hasXY(newX, newY))\n            continue;\n        const newCell = map.get(newX, newY);\n        if (newCell && newCell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n            currentStringLength++;\n            if (!inString) {\n                if (numStrings > 0) {\n                    return false; // more than one string here; leave loopy\n                }\n                numStrings++;\n                inString = true;\n            }\n        }\n        else if (inString) {\n            if (currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            currentStringLength = 0;\n            inString = false;\n        }\n    }\n    if (inString && currentStringLength > maxStringLength) {\n        maxStringLength = currentStringLength;\n    }\n    if (numStrings == 1 && maxStringLength <= 4) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        for (dir = 0; dir < 8; dir++) {\n            const newX = x + GWU.utils.CLOCK_DIRS[dir][0];\n            const newY = y + GWU.utils.CLOCK_DIRS[dir][1];\n            if (map.hasXY(newX, newY)) {\n                const newCell = map.cell(newX, newY);\n                checkLoopiness(newCell, newX, newY, map);\n            }\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.utils.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.utils.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as Tile from '../tile';\nimport * as Effect from '../effect';\nimport { Actor } from '../actor';\nimport { Item } from '../item';\nexport class SpawnEffect {\n    make(src, dest) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!src.tile)\n            return true; // no error\n        let config = src.tile;\n        if (typeof config === 'string') {\n            const parts = config.split(/[,|]/).map((p) => p.trim());\n            config = {\n                tile: parts[0],\n                grow: Number.parseInt(parts[1] || '0'),\n                decrement: Number.parseInt(parts[2] || '0'),\n            };\n        }\n        const info = {\n            grow: (_b = (_a = config.grow) !== null && _a !== void 0 ? _a : config.spread) !== null && _b !== void 0 ? _b : 0,\n            decrement: (_c = config.decrement) !== null && _c !== void 0 ? _c : 0,\n            flags: GWU.flag.from(Effect.Flags, config.flags),\n            volume: (_d = config.volume) !== null && _d !== void 0 ? _d : 0,\n            next: (_e = config.next) !== null && _e !== void 0 ? _e : null,\n        };\n        const id = (_f = config.tile) !== null && _f !== void 0 ? _f : config.id;\n        if (typeof id === 'string') {\n            info.tile = id;\n        }\n        else {\n            throw new Error('Invalid tile spawn config: ' + id);\n        }\n        if (!info.tile) {\n            throw new Error('Must have tile.');\n        }\n        const match = (_g = config.matchTile) !== null && _g !== void 0 ? _g : config.match;\n        if (typeof match === 'string') {\n            info.matchTile = match;\n        }\n        else if (match) {\n            throw new Error('Invalid tile spawn match tile: ' + config.matchTile);\n        }\n        dest.tile = info;\n        return true;\n    }\n    async fire(effect, map, x, y, ctx) {\n        let didSomething = false;\n        const spawned = this.fireSync(effect, map, x, y, ctx);\n        if (spawned) {\n            didSomething = true;\n            // await spawnMap.forEachAsync( (v, x, y) => {\n            //     if (!v) return;\n            //     await map.applyInstantEffects(x, y);\n            // });\n            // if (applyEffects) {\n            // if (PLAYER.xLoc == i && PLAYER.yLoc == j && !PLAYER.status.levitating && refresh) {\n            // \tflavorMessage(tileFlavor(PLAYER.xLoc, PLAYER.yLoc));\n            // }\n            // if (cell.actor || cell.item) {\n            // \tfor(let t of cell.tiles()) {\n            // \t\tawait t.applyInstantEffects(map, i, j, cell);\n            // \t\tif (Data.gameHasEnded) {\n            // \t\t\treturn true;\n            // \t\t}\n            // \t}\n            // }\n            // if (tile.flags & TileFlags.T_IS_FIRE) {\n            // \tif (cell.flags & CellFlags.HAS_ITEM) {\n            // \t\ttheItem = map.itemAt(i, j);\n            // \t\tif (theItem.flags & Flags.Item.ITEM_FLAMMABLE) {\n            // \t\t\tawait burnItem(theItem);\n            // \t\t}\n            // \t}\n            // }\n            // }\n        }\n        // GWU.grid.free(spawnMap);\n        return didSomething;\n    }\n    fireSync(effect, map, x, y, ctx) {\n        if (!effect.tile)\n            return false; // did nothing\n        const id = effect.tile.tile;\n        const tile = Tile.tiles[id] || null;\n        if (!tile) {\n            throw new Error('Failed to find tile for effect: ' + id);\n        }\n        const abortIfBlocking = !!(effect.flags & Effect.Flags.E_ABORT_IF_BLOCKS_MAP);\n        const isBlocking = !!(abortIfBlocking &&\n            !(effect.flags & Effect.Flags.E_PERMIT_BLOCKING) &&\n            (tile.blocksPathing() ||\n                effect.flags & Effect.Flags.E_TREAT_AS_BLOCKING));\n        let didSomething = false;\n        didSomething = computeSpawnMap(effect, map, x, y, ctx);\n        if (!didSomething) {\n            return false;\n        }\n        if (abortIfBlocking &&\n            isBlocking &&\n            this.mapDisruptedBy(map, effect.grid)) {\n            // GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (effect.flags & Effect.Flags.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Effect.Flags.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Effect.Flags.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, ctx.grid, effect.flags)) {\n                didSomething = true;\n            }\n        }\n        const spawned = spawnTiles(effect.flags, ctx.grid, map, tile, effect.tile.volume, ctx.machine);\n        return spawned;\n    }\n    mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(map.width, map.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.utils.forRect(map.width, map.height, (i, j) => {\n            const lakeX = i + blockingToMapX;\n            const lakeY = j + blockingToMapY;\n            if (blockingGrid.get(lakeX, lakeY)) {\n                if (map.cellInfo(i, j).isStairs()) {\n                    disrupts = true;\n                }\n            }\n            else if (!map.cellInfo(i, j).blocksMove()) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGWU.grid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\nEffect.installHandler('tile', new SpawnEffect());\n// tick\n// Spawn\nexport function spawnTiles(flags, spawnMap, map, tile, volume = 0, machine) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = !!(flags & Effect.Flags.E_BLOCKED_BY_OTHER_LAYERS);\n    const superpriority = !!(flags & Effect.Flags.E_SUPERPRIORITY);\n    const blockedByActors = !!(flags & Effect.Flags.E_BLOCKED_BY_ACTORS);\n    const blockedByItems = !!(flags & Effect.Flags.E_BLOCKED_BY_ITEMS);\n    // const applyEffects = ctx.refreshCell;\n    volume = volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            // const isRoot = spawnMap[i][j] === 1;\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.hasTile(tile)) {\n                // If the new cell already contains the fill terrain,\n                // if (tile.depth == Flags.Depth.GAS) {\n                //     spawnMap[i][j] = 1;\n                //     cell.gasVolume += volume;\n                // } else if (tile.depth == Flags.Depth.LIQUID) {\n                //     spawnMap[i][j] = 1;\n                //     cell.liquidVolume += volume;\n                // }\n            }\n            else if (map.setTile(i, j, tile, {\n                volume,\n                superpriority,\n                blockedByOtherLayers,\n                blockedByActors,\n                blockedByItems,\n                machine,\n            })) {\n                // if the fill won't violate the priority of the most important terrain in this cell:\n                spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                // map.redrawCell(cell);\n                // if (volume && cell.gas) {\n                //     cell.volume += (feat.volume || 0);\n                // }\n                cell.flags.cell |= Flags.Cell.EVENT_FIRED_THIS_TURN;\n                if (flags & Effect.Flags.E_PROTECTED) {\n                    cell.flags.cell |= Flags.Cell.EVENT_PROTECTED;\n                }\n                accomplishedSomething = true;\n                // debug('- tile', i, j, 'tile=', tile.id);\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.setMapFlag(Flags.Map.MAP_CHANGED);\n    }\n    return accomplishedSomething;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.tile.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Effect.Flags.E_BUILD_IN_WALLS) {\n        if (!map.cellInfo(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Effect.Flags.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.utils.eachNeighbor(x, y, (i, j) => {\n            if (map.cellInfo(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Effect.Flags.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cellInfo(x, y).isWall())\n            return false; // or on wall\n        GWU.utils.eachNeighbor(x, y, (i, j) => {\n            if (map.cellInfo(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.tile.matchTile &&\n        !isStart &&\n        !cell.hasTile(effect.tile.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, map, x, y, ctx) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const config = effect.tile;\n    let startProb = config.grow || 0;\n    let probDec = config.decrement || 0;\n    const spawnMap = ctx.grid;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.utils.DIRS[dir][0];\n                            y2 = j + GWU.utils.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                GWU.random.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\n// export function spreadCircle(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     let radius = 0;\n//     startProb = startProb || 100;\n//     if (startProb >= 100) {\n//         probDec = probDec || 100;\n//     }\n//     while (GW.random.chance(startProb)) {\n//         startProb -= probDec;\n//         ++radius;\n//     }\n//     // startProb = 100;\n//     // probDec = 0;\n//     spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n//         if (!cellIsOk(this, i, j, ctx)) return 0;\n//         // const dist = Math.floor(GWU.utils.distanceBetween(x, y, i, j));\n//         // const prob = startProb - dist * probDec;\n//         // if (!random.chance(prob)) return 0;\n//         return 1;\n//     });\n//     // spawnMap[x][y] = 1;\n//     // if (!isOk(flags, x, y, ctx)) {\n//     //     spawnMap[x][y] = 0;\n//     // }\n//     return true;\n// }\n// export function spreadLine(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     let x2, y2;\n//     let madeChange;\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     if (startProb) {\n//         madeChange = true;\n//         if (startProb >= 100) {\n//             probDec = probDec || 100;\n//         }\n//         x2 = x;\n//         y2 = y;\n//         const dir = GWU.utils.DIRS[GW.random.number(4)];\n//         while (madeChange) {\n//             madeChange = false;\n//             x2 = x2 + dir[0];\n//             y2 = y2 + dir[1];\n//             if (\n//                 spawnMap.hasXY(x2, y2) &&\n//                 !spawnMap[x2][y2] &&\n//                 cellIsOk(this, x2, y2, ctx) &&\n//                 GW.random.chance(startProb)\n//             ) {\n//                 spawnMap[x2][y2] = 1;\n//                 madeChange = true;\n//                 startProb -= probDec;\n//             }\n//         }\n//     }\n//     if (!cellIsOk(this, x, y, ctx)) {\n//         spawnMap[x][y] = 0;\n//     }\n//     return true;\n// }\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Effect.Flags.E_CLEAR_CELL) === Effect.Flags.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Effect.Flags.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Effect.Flags.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Effect.Flags.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Effect.Flags.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let i = 0, j = 0;\n    let didSomething = false;\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            if (!blockingMap[i][j])\n                continue;\n            const cell = map.cell(i, j);\n            if (!cell.hasActor())\n                continue;\n            GWU.utils.eachChain(cell.actor, (obj) => {\n                if (!(obj instanceof Actor))\n                    return;\n                const monst = obj;\n                const loc = GWU.random.matchingLocNear(i, j, (x, y) => {\n                    if (!map.hasXY(x, y))\n                        return false;\n                    if (blockingMap[x][y])\n                        return false;\n                    const c = map.cell(x, y);\n                    return !monst.forbidsCell(c);\n                });\n                if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                    map.moveActor(loc[0], loc[1], monst);\n                    // map.redrawXY(loc[0], loc[1]);\n                    didSomething = true;\n                }\n            });\n        }\n    }\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    blockingMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (!cell.hasItem())\n            return;\n        GWU.utils.eachChain(cell.item, (obj) => {\n            if (!(obj instanceof Item))\n                return;\n            const item = obj;\n            const loc = GWU.random.matchingLocNear(i, j, (x, y) => {\n                if (!map.hasXY(x, y))\n                    return false;\n                if (blockingMap[x][y])\n                    return false;\n                const dest = map.cell(x, y);\n                return !item.forbidsCell(dest);\n            });\n            if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                map.moveItem(loc[0], loc[1], item);\n                // map.redrawXY(loc[0], loc[1]);\n                didSomething = true;\n            }\n        });\n    });\n    return didSomething;\n}\nclass ClearTileEffect {\n    make(src, dest) {\n        if (!src.clear)\n            return true;\n        let config = src.clear;\n        let layers = 0;\n        if (typeof config === 'string') {\n            config = config.split(/[,|]/).map((t) => t.trim());\n        }\n        if (config === true) {\n            layers = Flags.Depth.ALL_LAYERS;\n        }\n        else if (typeof config === 'number') {\n            layers = config;\n        }\n        else if (Array.isArray(config)) {\n            layers = config.reduce((out, v) => {\n                if (typeof v === 'number')\n                    return out | v;\n                const depth = Flags.Depth[v] || 0;\n                return out | depth;\n            }, 0);\n        }\n        else {\n            throw new Error('clear effect must have number or string config.');\n        }\n        dest.clear = layers;\n        return layers > 0;\n    }\n    fire(config, map, x, y, ctx) {\n        return this.fireSync(config, map, x, y, ctx);\n    }\n    fireSync(config, map, x, y, _ctx) {\n        if (!config.clear)\n            return false;\n        if (!map)\n            return false;\n        const cell = map.cell(x, y);\n        return cell.clearDepth(config.clear);\n    }\n}\nEffect.installHandler('clear', new ClearTileEffect());\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","TileMech","Cell","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_TRAP_FREE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","NEEDS_REDRAW","CELL_CHANGED","Map","KeyInfo","[object Object]","x","y","disposable","this","EntityKind","config","tags","name","flavor","description","sprite","make","split","map","t","trim","slice","_item","_cell","verb","kind","key","depth","light","flags","entity","next","isDestroyed","hasEntityFlag","Flags.Entity","L_DESTROYED","tag","includes","cell","forbidsCell","getName","getDescription","getFlavor","getVerb","Entity.Entity","super","actor","Flags.Depth","ACTOR","hasActorFlag","Flags.Actor","IS_PLAYER","Entity.EntityKind","opts","ItemKind","kinds","get","id","makeKind","info","Object","assign","randomKind","match","forbidTags","forEach","startsWith","push","substring","Array","isArray","matches","values","filter","k","length","utils","arraysIntersect","random","item","quantity","ITEM","made","Kind.get","Error","Kind.randomKind","JSON","stringify","Kind.ItemKind","Kind.makeKind","Effect","_a","fn","from","Flags","chance","handlers","v","effect","effects","reset","E_FIRED","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","install","installHandler","handler","async","fire","ctx_","ctx","force","grid","alloc","width","height","didSomething","allHandlers","h","isVisible","E_NO_MARK_FIRED","E_NEXT_ALWAYS","data","gameHasEnded","nextInfo","E_NEXT_EVERYWHERE","forEachAsync","i","j","free","fireSync","MessageEffect","src","dest","message","fired","addAt","_map","_x","_y","_ctx","EmitEffect","emit","events","FnEffect","result","ActivateMachineEffect","activateMachine","machine","machineId","activateMachineSync","e","entries","_b","_c","_d","index","dissipate","priority","groundTile","article","tile","tileMech","hasEffect","Flags.Tile","T_IS_FLAMMABLE","blocksMove","hasTileFlag","T_PATHING_BLOCKER","arg","color","fg","toString","options","_e","_f","base","extends","tiles","text","replace","search","Number","parseInt","delta","undefined","value","Effect.make","Flags.TileMech","ch","bg","opacity","all","args","enter","open","tick","close","player","MapLayer","properties","_other","_tile","_actor","_dt","TileLayer","current","depthTile","Tile.tiles","NULL","superpriority","blocksLayer","blockedByItems","hasItem","blockedByActors","hasActor","blockedByOtherLayers","highestPriority","GROUND","ground","setTile","Tile.get","glowLightChanged","setCellFlag","Flags.Cell","CAUGHT_FIRE_THIS_TURN","clearDepth","hasCellFlag","clearCellFlag","hasKey","activate","drawSprite","ActorLayer","obj","_opts","addToChain","isPlayer","removeFromChain","ItemLayer","destroy","GasLayer","needsUpdate","volume","other","copy","startingVolume","spread","update","d","Math","max","clearTile","floor","min","total","count","highestVolume","startingTile","highestTile","needsRedraw","updateCellVolume","calcOpacity","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","dir","DIRS","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","GAS","Effect.from","hasTileMechFlag","TM_EXPLOSIVE_PROMOTE","eachNeighbor","x0","y0","n","event","CellObjects","cb","object","eachItem","eachActor","start","chokeCount","keyId","_objects","TILE.tiles","TILE.get","some","o","entityFlags","tileFlags","tileMechFlags","reduce","out","a","TILE.Tile","highestPriorityTile","find","blocksVision","blocksPathing","blocksEffects","TILE.flags","T_BLOCKS_OTHER_LAYERS","every","hasAllEntityFlags","tileFlag","tileMechFlag","ev","_fire","_fireSync","Effect.effects","Effect.fire","Effect.fireSync","val","CellMemory","blocks","vision","move","pathing","_hasKey","snapshot","Mixer","blackOut","cellFlags","itemFlags","actorFlags","layers","cells","memory","LightSystem","fov","FovSystem","initLayers","useMemory","addLayer","Layer.TileLayer","SURFACE","Layer.FireLayer","Layer.GasLayer","Layer.ItemLayer","Layer.ActorLayer","layer","hasXY","buffer","canvas","Canvas","mixer","getAppearanceAt","eachChain","addItem","forceItem","removeItem","hasPlayer","addActor","forceActor","removeActor","isAnyKindOfVisible","fmt","log","console","dump","c","boundary","clear","isBoundaryXY","cellInfo","hasTile","dt","fireAll","constructor","l","setAmbient","getAmbient","activateSync","willFire","EVENT_FIRED_THIS_TURN","EVENT_PROTECTED","promoteChance","w","originX","originY","putAppearance","dances","COLORS_DANCE","bake","putSnapshot","getSnapshot","getLight","multiply","isRevealed","scale","L_VISUALLY_DISTINCT","separate","eachGlowLight","_cb","changed","isDark","clearMemory","store","fill","updateChokepoints","updateCounts","passMap","L_SECRETLY_PASSABLE","passableArcCount","oldX","CLOCK_DIRS","oldY","newX","newY","cellCount","floodFillCount","i2","j2","results","startX","startY","updateLoopiness","eachCell","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","newCell","fillInnerLoopGrid","up","left","designationSurvives","SpawnEffect","_g","parts","p","grow","decrement","Effect.Flags","matchTile","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","isBlocking","E_PERMIT_BLOCKING","E_TREAT_AS_BLOCKING","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","spawnTiles","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","spawnMap","accomplishedSomething","E_BLOCKED_BY_OTHER_LAYERS","E_SUPERPRIORITY","E_PROTECTED","setMapFlag","Flags.Map","MAP_CHANGED","cellIsOk","isStart","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","E_NO_TOUCH_WALLS","x2","y2","madeChange","startProb","probDec","clearAll","LIQUID","blockingMap","monst","loc","matchingLocNear","moveActor","moveItem","ALL_LAYERS","prefab","charToTile","isStringArray","len","line","updateChokeCounts"],"mappings":"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"}