{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/actor/action.js","../js/actor/status.js","../js/actor/stat.js","../js/actor/actor.js","../js/effect/effect.js","../js/tile/tile.js","../js/tile/index.js","../js/effect/types/basic.js","../js/effect/types/spread.js","../js/effect/handlers/emit.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/tile.js","../js/effect/handlers/clear.js","../js/effect/handlers/feature.js","../js/effect/handlers/nourish.js","../js/effect/handlers/stat.js","../js/map/cell.js","../js/item/item.js","../js/entity/message.js","../js/actor/pain.js","../js/ai/ai.js","../js/ai/typical.js","../js/ai/wander.js","../js/ai/utils.js","../js/actor/kind.js","../js/actor/make.js","../js/actor/actions/bump.js","../js/actor/actions/standStill.js","../js/fx/fx.js","../js/actor/actions/moveDir.js","../js/actor/actions/idle.js","../js/actor/actions/pickup.js","../js/item/kind.js","../js/item/make.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/gasLayer.js","../js/layer/fireLayer.js","../js/draw/basic.js","../js/map/map.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/map/make.js","../js/horde/horde.js","../js/horde/make.js","../js/command/command.js","../js/command/moveDir.js","../js/command/pickup.js","../js/memory/index.js","../js/player/attribute.js","../js/player/skill.js","../js/player/scent.js","../js/player/player.js","../js/player/kind.js","../js/player/make.js","../js/game/viewport.js","../js/game/message.js","../js/game/flavor.js","../js/game/game.js","../js/tile/tiles.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_ON_MAP\"] = Fl(17)] = \"L_ON_MAP\";\n    Entity[Entity[\"DEFAULT_ACTOR\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ACTOR\";\n    Entity[Entity[\"DEFAULT_ITEM\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ITEM\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n    Actor[Actor[\"HAS_MEMORY\"] = Fl(1)] = \"HAS_MEMORY\";\n    Actor[Actor[\"USES_FOV\"] = Fl(2)] = \"USES_FOV\";\n    Actor[Actor[\"STABLE_COST_MAP\"] = Fl(3)] = \"STABLE_COST_MAP\";\n    Actor[Actor[\"IS_VISIBLE\"] = Fl(4)] = \"IS_VISIBLE\";\n    Actor[Actor[\"WAS_VISIBLE\"] = Fl(5)] = \"WAS_VISIBLE\";\n    Actor[Actor[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n    Item[Item[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_SHALLOW_WATER\"] = Fl(4)] = \"T_SHALLOW_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n    Tile[Tile[\"T_ANY_LIQUID\"] = Tile.T_IS_DEEP_LIQUID | Tile.T_SHALLOW_WATER] = \"T_ANY_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(0)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(1)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"KNOWN_TO_BE_SAFE\"] = Fl(2)] = \"KNOWN_TO_BE_SAFE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to speed checks\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(16)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(17)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(18)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(19)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_FX\"] = Fl(20)] = \"HAS_FX\";\n    Cell[Cell[\"HAS_TICK_EFFECT\"] = Fl(22)] = \"HAS_TICK_EFFECT\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(23)] = \"IS_CURSOR\";\n    Cell[Cell[\"IS_HIGHLIGHTED\"] = Fl(24)] = \"IS_HIGHLIGHTED\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_SAFE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_NEEDS_REDRAW\"] = Fl(1)] = \"MAP_NEEDS_REDRAW\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_IGNORE_FOV\"] = Fl(12)] = \"E_IGNORE_FOV\";\n    // E_SPREAD_CIRCLE = Fl(13), // Spread in a circle around the spot (using FOV), radius calculated using spread+decrement\n    // E_SPREAD_LINE = Fl(14), // Spread in a line in one random direction\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nlet lastId = 0;\nexport class Entity {\n    // lastSeen: GWU.xy.Loc = [-1, -1];\n    constructor(kind) {\n        this._map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n        this.id = '' + ++lastId;\n    }\n    get map() {\n        return this._map;\n    }\n    addToMap(map, x, y) {\n        this.x = x;\n        this.y = y;\n        this.setEntityFlag(Flags.Entity.L_ON_MAP);\n        if (this._map === map) {\n            return false;\n        }\n        this._map = map;\n        this.kind.addToMap(this, map);\n        return true;\n    }\n    removeFromMap() {\n        this.clearEntityFlag(Flags.Entity.L_ON_MAP);\n        this.kind.removeFromMap(this);\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    isAt(x, y) {\n        return this.x === x && this.y === y;\n    }\n    clone() {\n        const other = new this.constructor(this.kind);\n        other.copy(this);\n        return other;\n    }\n    copy(other) {\n        this.depth = other.depth;\n        this.light = other.light;\n        Object.assign(this.flags, other.flags);\n        this.next = other.next;\n        this.x = other.x;\n        this.y = other.y;\n        this.kind = other.kind;\n        this.id = other.id;\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    setEntityFlag(flag) {\n        this.flags.entity |= flag;\n    }\n    clearEntityFlag(flag) {\n        this.flags.entity &= ~flag;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isKey(x, y) {\n        return this.key && this.key.matches(x, y);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n    drawStatus(buffer, bounds) {\n        return this.kind.drawStatus(this, buffer, bounds);\n    }\n    drawInto(dest, _observer) {\n        dest.drawSprite(this.sprite);\n    }\n    toString() {\n        return `${this.constructor.name}-${this.id} @ ${this.x},${this.y}`;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nimport * as Flags from '../flags';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requireTileFlags = 0;\n        this.forbidTileFlags = 0;\n        this.avoidTileFlags = 0;\n        this.requireTileTags = [];\n        this.forbidTileTags = [];\n        this.avoidTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config.sprite ? config.sprite : config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requireTileFlags) {\n            this.requireTileFlags = GWU.flag.from(Flags.Tile, config.requireTileFlags);\n        }\n        if (config.avoidTileFlags) {\n            this.avoidTileFlags = GWU.flag.from(Flags.Tile, config.avoidTileFlags);\n        }\n        if (config.forbidTileFlags) {\n            this.forbidTileFlags = GWU.flag.from(Flags.Tile, config.forbidTileFlags);\n        }\n        if (config.requireTileTags) {\n            if (typeof config.requireTileTags === 'string') {\n                config.requireTileTags = config.requireTileTags.split(/[,|]/g);\n            }\n            this.requireTileTags = config.requireTileTags.map((t) => t.trim());\n        }\n        if (config.avoidTileTags) {\n            if (typeof config.avoidTileTags === 'string') {\n                config.avoidTileTags = config.avoidTileTags.split(/[,|]/g);\n            }\n            this.avoidTileTags = config.avoidTileTags.map((t) => t.trim());\n        }\n        if (config.forbidTileTags) {\n            if (typeof config.forbidTileTags === 'string') {\n                config.forbidTileTags = config.forbidTileTags.split(/[,|]/g);\n            }\n            this.forbidTileTags = config.forbidTileTags.map((t) => t.trim());\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    addToMap(_entity, _map) { }\n    removeFromMap(_entity) { }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requireTileFlags &&\n            !cell.hasAllTileFlags(this.requireTileFlags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        if (this.forbidTileFlags &&\n            cell.hasTileFlag(this.forbidTileFlags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        if (this.requireTileTags.length &&\n            !cell.hasAllTileTags(this.requireTileTags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        if (this.forbidTileTags.length &&\n            cell.hasAnyTileTag(this.forbidTileTags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        return false;\n    }\n    avoidsCell(cell, entity) {\n        if (this.forbidsCell(cell, entity))\n            return true;\n        if (this.avoidTileFlags &&\n            cell.hasTileFlag(this.avoidTileFlags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        if (this.avoidTileTags.length &&\n            cell.hasAnyTileTag(this.avoidTileTags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n    drawStatus(entity, buffer, bounds) {\n        if (!entity.map)\n            return 0;\n        if (entity.isDestroyed)\n            return 0;\n        const mixer = new GWU.sprite.Mixer();\n        entity.map.getAppearanceAt(entity.x, entity.y, mixer);\n        buffer.drawSprite(bounds.x + 1, bounds.y, mixer);\n        buffer.wrapText(bounds.x + 3, bounds.y, bounds.width - 3, entity.getName(), 'purple');\n        return 1;\n    }\n}\nexport function make(opts, makeOpts = {}) {\n    const kind = new EntityKind(opts);\n    return kind.make(makeOpts);\n}\n","export const installedActions = {};\nexport function installAction(name, fn) {\n    installedActions[name.toLowerCase()] = fn;\n}\nexport function getAction(name) {\n    return installedActions[name.toLowerCase()] || null;\n}\n","import * as GWU from 'gw-utils';\nexport class Status {\n    constructor() {\n        this._set = {};\n        this._time = {};\n        this._count = {};\n        this._done = {};\n        this._value = {};\n        this.changed = null;\n    }\n    clear(name) {\n        this.clearTime(name);\n        this.clearCount(name);\n        this.setOff(name);\n        return this._update(name);\n    }\n    get(name) {\n        return this._value[name] || false;\n    }\n    has(name) {\n        return this._value[name] || false;\n    }\n    _addDone(name, done) {\n        if (done) {\n            if (!this._done[name]) {\n                this._done[name] = done;\n            }\n        }\n    }\n    /**\n     * Sets the count for a status variable.\n     * If setting the count turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {number} count The count to set.\n     * @param {function} [done] The function to call whenever the count goes to 0.\n     * @returns {boolean} Whether or not setting the count turned the status on.\n     */\n    setCount(name, count, done) {\n        const status = this;\n        status._count[name] = Math.max(count, status._count[name] || 0);\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Increments the count for the status by the given amount (1=default)\n     * If incrementing the count turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {number} [count=1] The count to incrmeent.\n     * @param {function} [done] The function to call whenever the count goes to 0.\n     * @returns {boolean} Whether or not incrementing the count turned the status on.\n     */\n    increment(name, count = 1, done) {\n        if (typeof count == 'function') {\n            done = count;\n            count = 1;\n        }\n        const status = this;\n        status._count[name] = (status._count[name] || 0) + count;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Decrements the count for the status by the given amount (1=default)\n     * If decrementing the count turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * Also, if the status is turned off, and a done function was set, then it\n     * is called.\n     * @param {string} name The name of the status to adjust.\n     * @param {number} [count=1] The count to decrement.\n     * @returns {boolean} Whether or not decrementing the count turned the status off.\n     */\n    decrement(name, count = 1) {\n        const status = this;\n        status._count[name] = Math.max(0, (status._count[name] || 0) - count);\n        return this._update(name);\n    }\n    /**\n     * Clears all counts from the given status.\n     * If clearing the count turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * Also, if the status is turned off, and a done function was set, then it\n     * is called.\n     * @param {string} name The name of the status to adjust.\n     * @returns {boolean} Whether or not decrementing the count turned the status off.\n     */\n    clearCount(name) {\n        const status = this;\n        status._count[name] = 0;\n        return this._update(name);\n    }\n    /**\n     * Turns on the given status.\n     * @param {string} name The status to adjust.\n     * @param {function} [done] The function to call when the status is turned off.\n     * @returns {boolean} True if this turns on the status. (It could be on because of a time or count).\n     */\n    setOn(name, done) {\n        const status = this;\n        status._set[name] = true;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Turns off the given status.\n     *\n     * @param {string} name The status to adjust.\n     * @returns {boolean} True if this turns off the status. (It could be on because of a time or count).\n     */\n    setOff(name) {\n        const status = this;\n        status._set[name] = false;\n        return this._update(name);\n    }\n    /**\n     * Sets the time for a status variable.\n     * If setting the time turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to set.\n     * @param {function} [done] The function to call whenever the status goes false.\n     * @returns {boolean} Whether or not setting the time turned the status on.\n     */\n    setTime(name, value, done) {\n        const status = this;\n        // if (value === true) {\n        //   return RUT.Status.setOn(source, name, done);\n        // }\n        value = GWU.range.make(value).value();\n        const current = status._time[name] || 0;\n        status._time[name] = Math.max(value, current);\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Adds to the time for a status variable.\n     * If adding to the time turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to add.\n     * @param {function} [done] The function to call whenever the status goes false.\n     * @returns {boolean} Whether or not adding the time turned the status on.\n     */\n    addTime(name, value = 1, done) {\n        if (typeof value == 'function') {\n            done = value;\n            value = 1;\n        }\n        const status = this;\n        // if (value === true) {\n        //   return RUT.Status.setOn(source, name, done);\n        // }\n        value = GWU.range.make(value).value();\n        status._time[name] = (status._time[name] || 0) + value;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Removes time for a status variable.\n     * If removing to the time turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to remove.\n     * @returns {boolean} Whether or not removing the time turned the status off.\n     */\n    removeTime(name, value = 1) {\n        const status = this;\n        value = GWU.range.make(value).value();\n        status._time[name] = Math.max(0, (status._time[name] || 0) - value);\n        return this._update(name);\n    }\n    /**\n     * Removes all time for a status variable.\n     * If removing to the time turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * @param {string} name The name of the status to set.\n     * @returns {boolean} Whether or not removing the time turned the status off.\n     */\n    clearTime(name) {\n        const status = this;\n        status._time[name] = 0;\n        return this._update(name);\n    }\n    /**\n     * Removes time for all status variables that have time.\n     * If removing the time turns off any status (it was on),\n     * then this function returns an object with all of those statuses as keys and false as the values.  Otherwise, false.\n     * @param {Status|object} source The object to set the status on.  If object.status is set then that is where the values are updated.\n     * @param {string} name The name of the status to set.\n     * @returns {boolean|object} false or an object with the names of the statuses that were cleared as keys and false as the values.\n     */\n    decayAllTimes(delta = 1) {\n        const status = this;\n        const cleared = {};\n        let noticed = false;\n        for (let name in status._time) {\n            if (this.removeTime(name, delta)) {\n                noticed = true;\n                cleared[name] = false;\n            }\n        }\n        return noticed ? cleared : false;\n    }\n    /**\n     * Updates the value of the status and returns whether or not this change\n     * turned the status on or off (true = change, false = no change)\n     * @param {string} name The name of the status to update\n     * @returns {boolean} True if the value was turned on or off, False otherwise.\n     */\n    _update(name) {\n        const status = this;\n        const rec = this._value;\n        let was = rec[name];\n        let value = (rec[name] =\n            status._set[name] ||\n                status._time[name] > 0 ||\n                status._count[name] > 0 ||\n                false);\n        const doneFn = this._done[name];\n        if (!value && doneFn) {\n            doneFn(this, name);\n            status._done[name] = null;\n        }\n        if (was && !value) {\n            if (this.changed)\n                this.changed(this, name);\n            // console.log('called changed: false');\n            return true;\n        }\n        else if (!was && value) {\n            if (this.changed)\n                this.changed(this, name);\n            // console.log('called changed: true');\n            return true;\n        }\n        return false;\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Stats {\n    constructor(opts = {}) {\n        this._max = {};\n        this._rate = {};\n        this._value = {};\n        this.init(opts);\n    }\n    get(name) {\n        return this._value[name] || 0;\n    }\n    getPct(name) {\n        const max = this.max(name);\n        return max ? Math.round((100 * this.get(name)) / max) : 0;\n    }\n    max(name) {\n        return this._max[name] || 0;\n    }\n    regen(name) {\n        return this._rate[name] || null;\n    }\n    init(opts) {\n        for (let name in opts) {\n            this.set(name, opts[name]);\n        }\n    }\n    set(name, v, max) {\n        if (typeof v !== 'number') {\n            const r = GWU.range.make(v);\n            v = r.value();\n        }\n        this._value[name] = v;\n        this._max[name] = max || v;\n    }\n    gain(name, amount, allowOver = false) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        let v = this._value[name] + amount;\n        if (!allowOver) {\n            v = Math.min(v, this._max[name]);\n        }\n        this._value[name] = v;\n    }\n    drain(name, amount) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._value[name] = Math.max(0, this._value[name] - amount);\n    }\n    raiseMax(name, amount, raiseValue = true) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._max[name] += amount;\n        if (raiseValue) {\n            this.gain(name, amount);\n        }\n    }\n    reduceMax(name, amount, lowerValue = false) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._max[name] = Math.max(0, this._max[name] - amount);\n        if (lowerValue) {\n            this.drain(name, amount);\n        }\n    }\n    setRegen(name, turns, count = 1) {\n        const r = (this._rate[name] = this._rate[name] || { elapsed: 0 });\n        r.turns = turns;\n        r.count = count;\n    }\n    regenAll() {\n        for (let name in this._max) {\n            const r = this._rate[name];\n            r.elapsed += 1;\n            if (r.elapsed >= r.turns) {\n                this.gain(name, r.count);\n                r.elapsed -= r.turns;\n            }\n        }\n    }\n    restore(name, value) {\n        if (value === undefined)\n            value = this._max[name];\n        this._value[name] = value;\n    }\n    adjust(name, type, amount) {\n        amount = GWU.range.from(amount);\n        const v = amount.value();\n        const c = this.get(name);\n        if (type === 'inc') {\n            this.gain(name, amount);\n        }\n        else if (type === 'dec') {\n            this.drain(name, amount);\n        }\n        else if (type === 'set') {\n            this.set(name, amount);\n        }\n        else if (type === 'min') {\n            const v = amount.value();\n            if (this.get(name) < v) {\n                this.set(name, v);\n            }\n        }\n        else if (type === 'max') {\n            if (this.get(name) > v) {\n                this.set(name, v);\n            }\n        }\n        else {\n            throw new Error('Invalid stat adjust type: ' + type);\n        }\n        return c !== this.get(name);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { getAction } from './action';\nimport { Status } from './status';\nimport { Stats } from './stat';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.ai = {};\n        this.leader = null;\n        this.items = null; // inventory\n        this.visionDistance = 99;\n        this.data = {};\n        this._costMap = null;\n        this._goalMap = null;\n        this._mapToMe = null;\n        this.next = null; // TODO - can we get rid of this?\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n        this.stats = new Stats();\n        this.status = new Status();\n    }\n    copy(other) {\n        super.copy(other);\n        this.leader = other.leader;\n        this.items = other.items;\n        this.visionDistance = other.visionDistance;\n    }\n    destroy() {\n        this.setEntityFlag(Flags.Entity.L_DESTROYED);\n        if (this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n        if (this._mapToMe) {\n            GWU.grid.free(this._mapToMe);\n            this._mapToMe = null;\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    setActorFlag(flag) {\n        this.flags.actor |= flag;\n    }\n    clearActorFlag(flag) {\n        this.flags.actor &= ~flag;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    isDead() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    getAction(name) {\n        const action = this.kind.actions[name];\n        if (action === undefined || action === true) {\n            const main = getAction(name); // default is to do any action\n            return main || false;\n        }\n        else if (action === false) {\n            return false;\n        }\n        return action;\n    }\n    getBumpActions() {\n        return this.kind.bump;\n    }\n    /////////////// VISIBILITY\n    becameVisible() {\n        return (this.hasActorFlag(Flags.Actor.IS_VISIBLE) &&\n            !this.hasActorFlag(Flags.Actor.WAS_VISIBLE));\n    }\n    canSee(x, y) {\n        if (x instanceof Entity.Entity) {\n            return this.canSee(x.x, x.y) && this.kind.isAbleToSee(this, x);\n        }\n        else if (this.map) {\n            if (this.isPlayer()) {\n                return this.map.fov.isDirectlyVisible(x, y);\n            }\n            if (GWU.xy.distanceBetween(this.x, this.y, x, y) >\n                this.visionDistance) {\n                return false;\n            }\n            return GWU.xy.forLineBetween(this.x, this.y, x, y, (i, j) => {\n                if (this.map.cell(i, j).blocksVision())\n                    return false;\n            });\n        }\n        else {\n            return false; // need a map or an fov\n        }\n    }\n    canSeeOrSense(x, y) {\n        if (x instanceof Entity.Entity) {\n            return (this.canSeeOrSense(x.x, x.y) &&\n                (this.kind.isAbleToSee(this, x) ||\n                    this.kind.isAbleToSense(this, x)));\n        }\n        if (this.map && this.isPlayer()) {\n            return this.map.fov.isAnyKindOfVisible(x, y);\n        }\n        return this.canSee(x, y);\n    }\n    isAbleToSee(entity) {\n        return this.kind.isAbleToSee(this, entity);\n    }\n    isAbleToSense(entity) {\n        return this.kind.isAbleToSense(this, entity);\n    }\n    ////////////////// ACTOR\n    async act(game) {\n        let startedVisible = false;\n        if (game.player.canSee(this)) {\n            this.setActorFlag(Flags.Actor.IS_VISIBLE);\n            startedVisible = true;\n        }\n        else {\n            if (this.hasActorFlag(Flags.Actor.IS_VISIBLE)) {\n                console.log('not visible');\n            }\n            this.clearActorFlag(Flags.Actor.IS_VISIBLE);\n        }\n        if (this.becameVisible()) {\n            console.log('became visible');\n            game.player.interrupt();\n        }\n        let r = 0;\n        if (this.ai && this.ai.fn) {\n            r = await this.ai.fn(game, this);\n        }\n        if (r == 0 && this.kind.ai.fn) {\n            r = await this.kind.ai.fn(game, this);\n        }\n        if (r) {\n            // did something\n            if (startedVisible || game.player.canSee(this)) {\n            }\n            return r;\n        }\n        // idle - always\n        return this.endTurn();\n    }\n    moveSpeed() {\n        return this.kind.moveSpeed;\n    }\n    startTurn() { }\n    endTurn(pct = 100) {\n        if (this.hasActorFlag(Flags.Actor.IS_VISIBLE)) {\n            this.setActorFlag(Flags.Actor.WAS_VISIBLE);\n        }\n        else {\n            this.clearActorFlag(Flags.Actor.WAS_VISIBLE);\n        }\n        return Math.floor((pct * this.moveSpeed()) / 100);\n    }\n    ///////\n    willAttack(_other) {\n        return true;\n    }\n    canPass(_other) {\n        return false;\n    }\n    ////////////////// INVENTORY\n    avoidsItem(_item) {\n        return false;\n    }\n    canAddItem(_item) {\n        return false;\n    }\n    addItem(_item) { }\n    pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n    // PATHFINDING\n    addToMap(map, x, y) {\n        const mapChanged = super.addToMap(map, x, y);\n        if (mapChanged) {\n            this.clearActorFlag(Flags.Actor.STABLE_COST_MAP);\n        }\n        return mapChanged;\n    }\n    removeFromMap() {\n        super.removeFromMap();\n        if (this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n        if (this._mapToMe) {\n            GWU.grid.free(this._mapToMe);\n            this._mapToMe = null;\n        }\n    }\n    /*\n    Calculates and returns the actor's move cost map.\n    Used in pathfinding.\n    */\n    costMap() {\n        if (!this.map) {\n            throw new Error('Actor must have map to calculate costMap.');\n        }\n        const staleMap = !this.hasActorFlag(Flags.Actor.STABLE_COST_MAP);\n        if (staleMap && this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (!this._costMap) {\n            this._costMap = GWU.grid.alloc(this.map.width, this.map.height);\n        }\n        else if (!staleMap) {\n            return this._costMap;\n        }\n        const kind = this.kind;\n        const map = this.map;\n        this._costMap.update((_v, x, y) => {\n            const cell = map.cell(x, y);\n            return kind.cellCost(cell, this);\n        });\n        this.setActorFlag(Flags.Actor.STABLE_COST_MAP);\n        /*\n\n            if (cellHasTerrainFlag(i, j, T_OBSTRUCTS_PASSABILITY)\n            && (!cellHasTMFlag(i, j, TM_IS_SECRET) || (discoveredTerrainFlagsAtLoc(i, j) & T_OBSTRUCTS_PASSABILITY)))\n            {\n                playerCostMap[i][j] = monsterCostMap[i][j] = cellHasTerrainFlag(i, j, T_OBSTRUCTS_DIAGONAL_MOVEMENT) ? PDS_OBSTRUCTION : PDS_FORBIDDEN;\n            } else if (cellHasTerrainFlag(i, j, T_SACRED)) {\n                    playerCostMap[i][j] = 1;\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n            } else if (cellHasTerrainFlag(i, j, T_LAVA_INSTA_DEATH)) {\n        monsterCostMap[i][j] = PDS_FORBIDDEN;\n        if (player.status[STATUS_LEVITATING] || !player.status[STATUS_IMMUNE_TO_FIRE]) {\n            playerCostMap[i][j] = 1;\n        } else {\n            playerCostMap[i][j] = PDS_FORBIDDEN;\n        }\n            } else {\n                if (pmap[i][j].flags & HAS_MONSTER) {\n                    monst = monsterAtLoc(i, j);\n                    if ((monst.creatureState == MONSTER_SLEEPING\n                         || monst.turnsSpentStationary > 2\n             || (monst.info.flags & MONST_GETS_TURN_ON_ACTIVATION)\n                         || monst.creatureState == MONSTER_ALLY)\n                        && monst.creatureState != MONSTER_FLEEING)\n                    {\n                        playerCostMap[i][j] = 1;\n                        monsterCostMap[i][j] = PDS_FORBIDDEN;\n                        continue;\n                    }\n                }\n\n                if (cellHasTerrainFlag(i, j, (T_AUTO_DESCENT | T_IS_DF_TRAP))) {\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n          if (player.status[STATUS_LEVITATING]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = PDS_FORBIDDEN;\n          }\n                } else if (cellHasTerrainFlag(i, j, T_IS_FIRE)) {\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n          if (player.status[STATUS_IMMUNE_TO_FIRE]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = PDS_FORBIDDEN;\n          }\n                } else if (cellHasTerrainFlag(i, j, (T_IS_DEEP_WATER | T_SPONTANEOUSLY_IGNITES))) {\n          if (player.status[STATUS_LEVITATING]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = 5;\n          }\n                    monsterCostMap[i][j] = 5;\n        } else if (cellHasTerrainFlag(i, j, T_OBSTRUCTS_PASSABILITY)\n                   && cellHasTMFlag(i, j, TM_IS_SECRET) && !(discoveredTerrainFlagsAtLoc(i, j) & T_OBSTRUCTS_PASSABILITY)\n                   && !(pmap[i][j].flags & IN_FIELD_OF_VIEW))\n             {\n            // Secret door that the player can't currently see\n            playerCostMap[i][j] = 100;\n            monsterCostMap[i][j] = 1;\n                } else {\n                    playerCostMap[i][j] = monsterCostMap[i][j] = 1;\n                }\n            }\n        }\n    }\n        */\n        return this._costMap;\n    }\n    get goalMap() {\n        return this._goalMap;\n    }\n    hasGoal() {\n        return !!this._goalMap;\n    }\n    setGoal(x, y) {\n        const map = this._map;\n        if (!map)\n            throw new Error('No map to set goal with!');\n        if (!this._goalMap) {\n            this._goalMap = GWU.grid.alloc(map.width, map.height);\n        }\n        const goalMap = this._goalMap;\n        GWU.path.calculateDistances(goalMap, x, y, this.costMap());\n        return this._goalMap;\n    }\n    clearGoal() {\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n    }\n    mapToMe() {\n        if (!this.map)\n            throw new Error('No map!');\n        if (!this._mapToMe) {\n            this._mapToMe = GWU.grid.alloc(this.map.width, this.map.height);\n        }\n        if (this._mapToMe.x !== this.x || this._mapToMe.y !== this.y) {\n            GWU.path.calculateDistances(this._mapToMe, this.x, this.y, this.costMap());\n        }\n        return this._mapToMe;\n    }\n}\n","export const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id.toLowerCase()] = handler;\n}\nexport const effectTypes = {};\nexport function installType(id, type) {\n    effectTypes[id] = type;\n}\n// export class Effect {\n//     id = '';\n//     chance = 100 * 100; // 100%\n//     type: string; // self | bolt | beam | ball | burst | adjacent | spread\n//     aim: string; // actor | item | cell\n//     bolt: string | GWU.sprite.SpriteData | null = null;\n//     beam = false;\n//     range = 0;\n//     ball: string | GWU.sprite.SpriteData | null = null;\n//     radius = 0;\n//     center = false;\n//     effects: EffectFn[];\n//     good = false;\n//     seen = false;\n//     next: Effect | null = null;\n//     constructor(config: EffectConfig) {\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         this.aim = config.aim || 'actor';\n//         if (typeof config.chance === 'string') {\n//             // '20%' becomes 2000\n//             config.chance = Math.floor(Number.parseFloat(config.chance) * 100);\n//         }\n//         this.chance = config.chance || 100 * 100;\n//         const type = config.type || 'basic';\n//         const parts = type.split(':');\n//         if (type.startsWith('bolt') || type.startsWith('beam')) {\n//             // bolt:range:sprite\n//             this.type = parts[0];\n//             this.range = parts[1] ? Number.parseInt(parts[1]) : 99;\n//             this.bolt = parts[1] || 'missile';\n//             this.beam = type.startsWith('beam');\n//         } else if (\n//             type.startsWith('ball') ||\n//             type.startsWith('burst') ||\n//             type.startsWith('aura')\n//         ) {\n//             this.type = parts[0];\n//             this.radius = parts[1] ? Number.parseInt(parts[1]) : 2;\n//             this.range = parts[2] ? Number.parseInt(parts[2]) : 99;\n//             this.ball = parts[3] || 'explosion';\n//             this.center = !type.startsWith('aura');\n//         } else {\n//             this.type = 'basic';\n//         }\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         if (Array.isArray(config.effects)) {\n//             this.effects = config.effects.map((e) => {\n//                 if (typeof e === 'function') return e;\n//                 return effectFnFromString(e);\n//             });\n//         } else {\n//             this.effects = [];\n//             Object.entries(config.effects).forEach(([key, value]) => {\n//                 const handler = handlers[key.toLowerCase()];\n//                 if (handler) {\n//                     this.effects.push(handler(value));\n//                 } else if (typeof value === 'function') {\n//                     this.effects.push(value);\n//                 } else {\n//                     throw new Error('Unknown effect: ' + key);\n//                 }\n//             });\n//         }\n//         if (this.effects.length === 0) throw new Error('No effects!');\n//     }\n//     clone(): this {\n//         const other = new (this.constructor as new (\n//             config: EffectConfig\n//         ) => this)(this as EffectConfig);\n//         return other;\n//     }\n//     fire(map: Map.MapType, x: number, y: number, ctx: EffectCtx = {}): boolean {\n//         let didSomething = false;\n//         ctx.good = this.good;\n//         ctx.seen = this.seen;\n//         if (!this.chance || map.rng.chance(this.chance, 10000)) {\n//             // fire\n//             for (let effect of this.effects) {\n//                 if (GWU.data.gameHasEnded) break;\n//                 if (effect(map, x, y, ctx)) {\n//                     didSomething = true;\n//                 } else {\n//                     break;\n//                 }\n//             }\n//         }\n//         if (ctx.aware && didSomething) {\n//             this.seen = true;\n//         }\n//         this.good = ctx.good;\n//         return didSomething;\n//     }\n//     reset() {\n//         this.seen = false;\n//     }\n// }\n// export function effectFnFromString(e: string): EffectFn {\n//     const parts = e.split(':');\n//     if (parts.length === 0) throw new Error('Invalid effect string.');\n//     // @ts-ignore\n//     const name = parts.shift().toLowerCase();\n//     const handler = handlers[name] || null;\n//     if (!handler) {\n//         throw new Error('Failed to find effect handler: ' + name);\n//     }\n//     return handler(parts);\n// }\nexport function make(opts) {\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    let config = {};\n    if (typeof opts === 'string') {\n        // Special case\n        if (opts.toLowerCase().startsWith('spread:')) {\n            const endPos = opts.indexOf(':', 8);\n            const tile = opts.substring(8, endPos);\n            config = {\n                type: 'spread:' + opts.substring(endPos),\n                effects: ['tile:' + tile],\n            };\n        }\n        else {\n            config = { type: 'basic', effects: [opts] };\n        }\n    }\n    else if (typeof opts === 'function') {\n        config = { type: 'basic', effects: [opts] };\n    }\n    else if (Array.isArray(opts)) {\n        config = { type: 'basic', effects: opts };\n    }\n    else {\n        // @ts-ignore\n        if (opts.effect) {\n            // @ts-ignore\n            opts.effects = [opts.effect];\n            delete opts.effect;\n        }\n        // object only\n        if (opts.effects) {\n            Object.assign(config, opts);\n            if (typeof config.effects === 'string') {\n                config.effects = [opts.effects];\n            }\n            else if (typeof config.effects === 'function') {\n                config.effects = [opts.effects];\n            }\n        }\n        else {\n            config.effects = {};\n            Object.entries(opts).forEach(([key, value]) => {\n                const handler = handlers[key.toLowerCase()];\n                if (handler !== undefined) {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else if (typeof value === 'function') {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else {\n                    // @ts-ignore\n                    config[key] = value;\n                }\n            });\n        }\n    }\n    config.type = config.type || 'basic';\n    if (typeof config.type !== 'string')\n        throw new Error('Invalid effect type: ' + JSON.stringify(config.type));\n    const typeParts = config.type.split(':').map((t) => t.trim());\n    const typeName = typeParts.shift();\n    const makeFn = effectTypes[typeName.toLowerCase()];\n    if (!makeFn)\n        throw new Error('Invalid effect type: ' + typeName);\n    const effect = makeFn(config);\n    if (Array.isArray(config.effects)) {\n        config.effects.forEach((e) => {\n            if (typeof e === 'function') {\n                effect.effects.push(e);\n            }\n            else {\n                const parts = e.split(':').map((t) => t.trim());\n                if (parts.length === 1) {\n                    const effect = installedEffects[parts[0]];\n                    if (!effect)\n                        throw new Error('Failed to find effect with id: ' + parts[0]);\n                    effect.effects.push(effect.trigger.bind(effect));\n                }\n                else {\n                    const handler = handlers[parts[0].toLowerCase()];\n                    if (!handler)\n                        throw new Error('Unknown effect: ' + parts[0]);\n                    parts.shift();\n                    effect.effects.push(handler(parts));\n                }\n            }\n        });\n    }\n    else {\n        Object.entries(config.effects).forEach(([key, value]) => {\n            const handler = handlers[key.toLowerCase()];\n            if (!handler)\n                throw new Error('Failed to find handler type: ' + key);\n            effect.effects.push(handler(value));\n        });\n    }\n    if (config.next) {\n        effect.next = make(config.next);\n    }\n    return effect;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'object' && 'trigger' in opts) {\n        return opts;\n    }\n    if (typeof opts === 'string') {\n        const effect = installedEffects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\nfunction isEffect(obj) {\n    return typeof obj === 'object' && 'trigger' in obj;\n}\n//////////////////////////////\n// INSTALL\nexport const installedEffects = {};\nexport function install(id, config) {\n    const effect = isEffect(config) ? config.clone() : make(config);\n    installedEffects[id] = effect;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function resetAll() {\n    Object.values(installedEffects).forEach((e) => (e.seen = false));\n}\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/effect';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string' && !value.includes(':')) {\n                effects[key] = value;\n                return;\n            }\n            try {\n                effects[key] = makeEffect(value);\n            }\n            catch (e) {\n                throw new Error(`Failed to add effect to tile => ${key} : ${JSON.stringify(value)} : ` + e.message);\n            }\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n// These are the minimal set of tiles to make the diggers work\nexport const NULL = install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\n// import './tiles';\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nimport * as Flags from '../../flags';\nexport class BasicEffect {\n    constructor(config) {\n        this.effects = [];\n        this.chance = 100 * 100; // 100%\n        this.seen = false;\n        this.flags = 0;\n        this.next = null;\n        if (typeof config === 'object' && !Array.isArray(config)) {\n            this.flags = GWU.flag.from(Flags.Effect, config.flags);\n            if (typeof config.chance === 'string' &&\n                config.chance.endsWith('%')) {\n                this.chance = Number.parseFloat(config.chance) * 100;\n            }\n            else {\n                this.chance = Number.parseInt(config.chance || '10000');\n            }\n        }\n    }\n    clone() {\n        const other = new this.constructor();\n        other.effects = this.effects.slice();\n        other.chance = this.chance;\n        other.seen = false;\n        other.flags = this.flags;\n        other.next = this.next;\n        return other;\n    }\n    trigger(loc, ctx = {}) {\n        if (!ctx.force && this.chance) {\n            const rng = ctx.rng || loc.map.rng || GWU.random;\n            if (!rng.chance(this.chance, 10000))\n                return false;\n        }\n        let didSomething = false;\n        for (let eff of this.effects) {\n            if (eff(loc, ctx)) {\n                didSomething = true;\n            }\n        }\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                return this.next.trigger(loc, ctx);\n            }\n        }\n        return didSomething;\n    }\n}\nexport function makeBasicEffect(config) {\n    if (typeof config !== 'object') {\n        return new BasicEffect();\n    }\n    return new BasicEffect(config);\n}\nEffect.installType('basic', makeBasicEffect);\n","import * as GWU from 'gw-utils';\nimport { BasicEffect } from './basic';\nimport { installType } from '../effect';\nimport * as Flags from '../../flags';\nexport function makeSpreadEffect(config) {\n    return new SpreadEffect(config);\n}\ninstallType('spread', makeSpreadEffect);\nexport class SpreadEffect extends BasicEffect {\n    constructor(config) {\n        super(config);\n        this.grow = 0;\n        this.decrement = 0;\n        this.matchTile = '';\n        if (!config) {\n            config = { grow: 0, decrement: 0, flags: 0 };\n        }\n        if (typeof config === 'string') {\n            config = config.split(':').map((t) => t.trim());\n        }\n        if (Array.isArray(config)) {\n            if (config[0].toLowerCase() === 'spread') {\n                config.shift();\n            }\n            config = {\n                grow: config[0] || '0',\n                decrement: config[1] || '100',\n                flags: config[2] || '0',\n            };\n        }\n        else if (typeof config.type === 'string' &&\n            config.type.includes(':')) {\n            const parts = config.type.split(':').map((t) => t.trim());\n            if (parts[0].toLowerCase() === 'spread') {\n                parts.shift();\n            }\n            config.grow = parts[0] || '0';\n            config.decrement = parts[1] || '100';\n            config.flags = config.flags + '|' + parts[2];\n        }\n        this.grow = Number.parseInt(config.grow || 0);\n        this.decrement = Number.parseInt(config.decrement || 100);\n        this.flags = GWU.flag.from(Flags.Effect, config.flags || 0);\n        this.matchTile = config.matchTile || '';\n    }\n    clone() {\n        const other = super.clone();\n        other.grow = this.grow;\n        other.decrement = this.decrement;\n        other.matchTile = this.matchTile;\n        return other;\n    }\n    trigger(xy, ctx = {}) {\n        const abortIfBlocking = !!(this.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        let didSomething = false;\n        const map = xy.map;\n        const spawnMap = GWU.grid.alloc(map.width, map.height);\n        didSomething = computeSpawnMap(this, xy, spawnMap);\n        if (!didSomething) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (abortIfBlocking && mapDisruptedBy(map, spawnMap)) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, spawnMap, this.flags)) {\n                didSomething = true;\n            }\n        }\n        spawnMap.forEach((v, x, y) => {\n            if (!v)\n                return;\n            spawnMap[x][y] = 1; // convert from generations to off/on/success\n            for (let eff of this.effects) {\n                if (eff({ map, x, y }, ctx)) {\n                    didSomething = true;\n                    spawnMap[x][y] = 2;\n                }\n            }\n        });\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                if (this.flags & Flags.Effect.E_NEXT_EVERYWHERE) {\n                    spawnMap.forEach((v, x, y) => {\n                        if (!v)\n                            return;\n                        if (v == 2 || nextAlways) {\n                            this.next.trigger({ map, x, y }, ctx);\n                        }\n                    });\n                }\n                else {\n                    this.next.trigger({ map, x: xy.x, y: xy.y }, ctx);\n                }\n            }\n        }\n        GWU.grid.free(spawnMap);\n        return didSomething;\n    }\n}\nexport function mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(map.width, map.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(map.width, map.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (map.cell(i, j).isStairs()) {\n                disrupts = true;\n            }\n        }\n        else if (!map.cell(i, j).blocksMove()) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGWU.grid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.matchTile && !isStart && !cell.hasTile(effect.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, loc, spawnMap) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const map = loc.map;\n    let startProb = effect.grow || 0;\n    let probDec = effect.decrement || 0;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, loc.x, loc.y, true)) {\n        return false;\n    }\n    spawnMap[loc.x][loc.y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y])\n            return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const c = map.cell(x, y);\n            return !a.forbidsCell(c);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeActor(a);\n            map.addActor(loc[0], loc[1], a);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y])\n            return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const dest = map.cell(x, y);\n            return !i.forbidsCell(dest);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(i);\n            map.addItem(loc[0], loc[1], i);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import { installHandler } from '../effect';\n//////////////////////////////////////////////\n// EMIT\nexport function makeEmitHandler(config) {\n    if (Array.isArray(config))\n        config = config[0];\n    if (typeof config !== 'string')\n        throw new Error('Invalid EMIT handler config - ' + config);\n    return emitEffect.bind(undefined, config);\n}\nexport function emitEffect(id, loc, ctx) {\n    return loc.map.events.emit(id, loc, ctx);\n}\ninstallHandler('emit', makeEmitHandler);\n","import * as GWU from 'gw-utils';\nimport { installHandler } from '../effect';\n//////////////////////////////////////////////\n// MESSAGE\nexport function makeMessageHandler(src) {\n    if (Array.isArray(src))\n        src = src[0];\n    if (typeof src !== 'string') {\n        throw new Error('Need message for message effect.');\n    }\n    const info = {\n        msg: src,\n    };\n    return messageEffect.bind(undefined, info);\n}\nexport function messageEffect(info, loc, ctx) {\n    const seen = ctx.seen;\n    const msg = info.msg;\n    if (msg &&\n        msg.length &&\n        ctx.aware &&\n        !seen\n    // && map.isVisible(x, y)\n    ) {\n        GWU.message.addAt(loc.x, loc.y, msg, ctx);\n        return true;\n    }\n    return false;\n}\ninstallHandler('msg', makeMessageHandler);\n","import { installHandler } from '../effect';\n//////////////////////////////////////////////\n// ActivateMachine\nexport function makeActivateMachine() {\n    return activateMachine.bind(undefined);\n}\nexport function activateMachine(loc, ctx) {\n    const cell = loc.map.cell(loc.x, loc.y);\n    const machine = cell.machineId;\n    if (!machine)\n        return false;\n    return loc.map.activateMachine(machine, loc.x, loc.y, ctx);\n}\ninstallHandler('activateMachine', makeActivateMachine);\n","import { installHandler } from '../effect';\nexport function makeTileHandler(src) {\n    if (!src)\n        throw new Error('Tile effect needs configuration.');\n    if (typeof src === 'string') {\n        src = { id: src };\n    }\n    else if (Array.isArray(src)) {\n        src = { id: src[0] };\n    }\n    else if (!src.id) {\n        throw new Error('Tile effect needs configuration with id.');\n    }\n    const opts = src;\n    if (opts.id.includes('!')) {\n        opts.superpriority = true;\n    }\n    if (opts.id.includes('~')) {\n        opts.blockedByActors = true;\n        opts.blockedByItems = true;\n    }\n    opts.id = opts.id.replace(/[!~]*/g, '');\n    return tileEffect.bind(opts);\n}\nexport function tileEffect(loc, ctx) {\n    this.machine = ctx.machine || 0;\n    const didSomething = loc.map.setTile(loc.x, loc.y, this.id, this);\n    return didSomething;\n}\ninstallHandler('tile', makeTileHandler);\n","import * as Flags from '../../flags';\nimport { installHandler } from '../effect';\nexport function makeClearHandler(config) {\n    let layers = 0;\n    if (!config) {\n        layers = Flags.Depth.ALL_LAYERS;\n    }\n    else if (typeof config === 'number') {\n        layers = config;\n    }\n    else if (typeof config === 'string') {\n        const parts = config.split(/[,|]/g);\n        layers = parts.reduce((out, v) => {\n            if (typeof v === 'number')\n                return out | v;\n            const depth = Flags.Depth[v] || 0;\n            return out | depth;\n        }, 0);\n    }\n    else {\n        throw new Error('Invalid config for clear effect: ' + JSON.stringify(config));\n    }\n    return clearEffect.bind(undefined, layers);\n}\nexport function clearEffect(layers, loc, _ctx) {\n    if (!layers)\n        return false;\n    const cell = loc.map.cell(loc.x, loc.y);\n    return cell.clearDepth(layers);\n}\ninstallHandler('clear', makeClearHandler);\n","import * as Effect from '../effect';\nexport function makeFeatureHandler(id) {\n    if (Array.isArray(id))\n        id = id[0];\n    if (id && typeof id !== 'string') {\n        id = id.id;\n    }\n    if (!id || !id.length)\n        throw new Error('Feature effect needs ID');\n    return featureEffect.bind(undefined, id);\n}\nexport function featureEffect(id, loc, ctx) {\n    const feat = Effect.installedEffects[id];\n    if (!feat) {\n        throw new Error('Failed to find feature: ' + id);\n    }\n    return feat.trigger(loc, ctx);\n}\nEffect.installHandler('feature', makeFeatureHandler);\nEffect.installHandler('effect', makeFeatureHandler);\nEffect.installHandler('id', makeFeatureHandler);\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nexport function makeNourishEffect(opts) {\n    if (!opts)\n        throw new Error('Invalid Nourish config.');\n    let info = {};\n    if (typeof opts === 'string') {\n        opts = opts.split(':').map((t) => t.trim());\n    }\n    if (Array.isArray(opts)) {\n        info.type = opts[0] || 'inc';\n        info.amount = GWU.range.make(opts[1] || 1);\n    }\n    else if (opts.type || opts.amount) {\n        info.type = opts.type || 'inc';\n        info.amount = GWU.range.make(opts.amount || 1);\n    }\n    else {\n        throw new Error('Invalid Nourish config: ' + JSON.stringify(opts));\n    }\n    return nourishEffect.bind(undefined, info);\n}\nexport function nourishEffect(config, loc, _ctx) {\n    if (!config.amount)\n        return false;\n    // who am I nourishing?\n    const actor = loc.map.actorAt(loc.x, loc.y);\n    if (!actor) {\n        return false;\n    }\n    const stats = actor.stats;\n    const c = stats.get('food');\n    if (!stats.adjust('food', config.type, config.amount))\n        return false;\n    const n = stats.get('food');\n    if (n < c && n / stats.max('food') < 0.1) {\n        GWU.message.addAt(actor.x, actor.y, nourishEffect.default.pukeMsg, {\n            actor,\n        });\n    }\n    return true;\n}\nnourishEffect.default = {\n    pukeMsg: '%you vomit.',\n};\nEffect.installHandler('nourish', makeNourishEffect);\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nexport function makeStatEffect(opts) {\n    if (!opts)\n        throw new Error('Invalid Stat config.');\n    const info = {};\n    if (typeof opts === 'string') {\n        opts = opts.split(':').map((t) => t.trim());\n    }\n    if (Array.isArray(opts)) {\n        info.stat = opts[0];\n        info.type = opts[1] || 'inc';\n        info.amount = GWU.range.make(opts[2] || 1);\n    }\n    else if (opts.type || opts.amount) {\n        info.stat = opts.stat;\n        info.type = opts.type || 'inc';\n        info.amount = GWU.range.make(info.amount || 1);\n    }\n    else {\n        throw new Error('Invalid stat effect configuration: ' + JSON.stringify(opts));\n    }\n    return statEffect.bind(undefined, info);\n}\nexport function statEffect(config, loc, _ctx) {\n    if (!config.amount)\n        return false;\n    // who am I nourishing?\n    const actor = loc.map.actorAt(loc.x, loc.y);\n    if (!actor) {\n        return false;\n    }\n    // sustain?\n    const stats = actor.stats;\n    if (!stats.adjust('food', config.type, config.amount))\n        return false;\n    return true;\n}\nEffect.installHandler('stat', makeStatEffect);\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nGWU.color.install('cellStatusName', 'light_blue');\nexport const NEVER_SEEN = {\n    tiles: [TILE.NULL],\n    item: null,\n    actor: null,\n    flags: {\n        cell: 0,\n        entity: TILE.NULL.flags.entity,\n        tile: TILE.NULL.flags.tile,\n        tileMech: TILE.NULL.flags.tileMech,\n    },\n};\nexport class Cell {\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.x = -1;\n        this.y = -1;\n        // toFire: Partial<Effect.EffectCtx>[] = [];\n        this.memory = null;\n        // this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.snapshot = GWU.sprite.makeMixer();\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n        this.memory = NEVER_SEEN;\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    get hasStableSnapshot() {\n        return this.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    }\n    get hasStableMemory() {\n        return this.hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    storeMemory() {\n        var _a;\n        this.setCellFlag(Flags.Cell.STABLE_MEMORY);\n        // store memory\n        this.memory = {\n            flags: {\n                cell: this.flags.cell,\n                entity: this.tiles.reduce((out, tile) => out | ((tile === null || tile === void 0 ? void 0 : tile.flags.entity) || 0), 0),\n                tile: this.tiles.reduce((out, tile) => out | ((tile === null || tile === void 0 ? void 0 : tile.flags.tile) || 0), 0),\n                tileMech: this.tiles.reduce((out, tile) => out | ((tile === null || tile === void 0 ? void 0 : tile.flags.tileMech) || 0), 0),\n            },\n            tiles: this.tiles.slice(),\n            item: ((_a = this.item) === null || _a === void 0 ? void 0 : _a.clone()) || null,\n            actor: null,\n        };\n        if (this.hasItem()) {\n            const item = this.item;\n            if (item) {\n                this.memory.flags.entity |= item.flags.entity;\n            }\n        }\n        if (this.hasActor()) {\n            const actor = this.actor;\n            if (actor) {\n                this.memory.flags.entity |= actor.flags.entity;\n            }\n            this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n    }\n    clearMemory() {\n        this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT | Flags.Cell.STABLE_MEMORY);\n        this.memory = null;\n        this.needsRedraw = true;\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        // this._actor = other.actor;\n        // this._item = other.item;\n        this.memory = other.memory;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n        other.getSnapshot(this.snapshot);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, checkEntities = false) {\n        var _a, _b;\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        if (!checkEntities)\n            return false;\n        if (this.hasItem()) {\n            if ((_a = this.item) === null || _a === void 0 ? void 0 : _a.hasEntityFlag(flag))\n                return true;\n        }\n        if (this.hasActor()) {\n            if ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.hasEntityFlag(flag))\n                return true;\n        }\n        return false;\n    }\n    hasAllEntityFlags(flags, checkEntities = false) {\n        return (this.entityFlags(checkEntities) & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        var _a, _b;\n        let flag = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            if (this.hasItem()) {\n                flag |= ((_a = this.item) === null || _a === void 0 ? void 0 : _a.flags.entity) || 0;\n            }\n            if (this.hasActor()) {\n                flag |= ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.flags.entity) || 0;\n            }\n        }\n        return flag;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            if (!this.memory) {\n                this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n                this.flags.cell &= ~Flags.Cell.STABLE_SNAPSHOT;\n                this.map.needsRedraw = true;\n            }\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return this.tiles.some((t) => t && t.blocksVision());\n    }\n    blocksPathing() {\n        return (this.tiles.some((t) => t && t.blocksPathing()) &&\n            !this.tiles.some((t) => t && t.hasTileFlag(Flags.Tile.T_BRIDGE)));\n    }\n    blocksMove() {\n        return this.tiles.some((t) => t && t.blocksMove());\n    }\n    blocksEffects() {\n        return this.tiles.some((t) => t && t.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isNull() {\n        return this.tiles.every((t) => !t || t === TILE.tiles.NULL);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isDoor() {\n        return this.hasTileFlag(Flags.Tile.T_IS_DOOR);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    // hasKey(): boolean {\n    //     return this._entities.some(\n    //         (e) => !!e.key && e.key.matches(this.x, this.y)\n    //     );\n    // }\n    hasLiquid() {\n        return this.hasTileFlag(Flags.Tile.T_ANY_LIQUID);\n    }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile, opts = {}) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (this.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && this.hasItem())\n            return false;\n        if (opts.blockedByActors && this.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && this.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const currentGround = this.depthTile(Flags.Depth.GROUND);\n            const wantGround = TILE.get(tile.groundTile);\n            if (currentGround !== wantGround) {\n                if (!this.setTile(wantGround, opts)) {\n                    return false;\n                }\n            }\n        }\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            this.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            this.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            this.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.needsRedraw = true;\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.snapshot.blackOut();\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    tileWithEffect(name) {\n        return this.tiles.find((t) => t === null || t === void 0 ? void 0 : t.hasEffect(name)) || null;\n    }\n    fireEvent(event, ctx = {}) {\n        // ctx.cell = this;\n        let didSomething = false;\n        // console.log('fire event - %s', event);\n        for (const tile of this.tiles) {\n            if (!tile || !tile.effects)\n                continue;\n            const ev = tile.effects[event];\n            if (ev) {\n                const r = this._activate(ev, ctx);\n                if (r) {\n                    didSomething = true;\n                }\n            }\n        }\n        return didSomething;\n    }\n    _activate(effect, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.installedEffects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = effect.trigger(this, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this.map.itemAt(this.x, this.y);\n    }\n    canAddItem(_item) {\n        return true;\n    }\n    canRemoveItem(_item) {\n        return true;\n    }\n    _addItem(_item) {\n        this.setCellFlag(Flags.Cell.HAS_ITEM);\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    _removeItem(item) {\n        let hasItems = false;\n        let foundIndex = -1;\n        this.map.items.forEach((obj, index) => {\n            if (obj === item) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasItems = true;\n            }\n        });\n        if (!hasItems) {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this.map.actorAt(this.x, this.y);\n    }\n    canAddActor(_actor) {\n        return true;\n    }\n    canRemoveActor(_actor) {\n        return true;\n    }\n    _addActor(actor) {\n        this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        if (actor.isPlayer()) {\n            this.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    _removeActor(actor) {\n        let hasActor = false;\n        let foundIndex = -1;\n        this.map.actors.forEach((obj, index) => {\n            if (obj === actor) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasActor = true;\n            }\n        });\n        if (!hasActor) {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    hasFx() {\n        return !!(this.flags.cell & Flags.Cell.HAS_FX);\n    }\n    get fx() {\n        return this.map.fxAt(this.x, this.y);\n    }\n    _addFx(_fx) {\n        this.setCellFlag(Flags.Cell.HAS_FX);\n        this.needsRedraw = true;\n    }\n    _removeFx(_fx) {\n        if (!this.fx) {\n            this.clearCellFlag(Flags.Cell.HAS_FX);\n        }\n        this.needsRedraw = true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        if (this.hasActor()) {\n            const actor = this.map.actorAt(this.x, this.y);\n            if (actor && actor.sprite.ch)\n                return actor.sprite.ch;\n        }\n        if (this.hasItem()) {\n            const item = this.map.itemAt(this.x, this.y);\n            if (item && item.sprite.ch)\n                return item.sprite.ch;\n        }\n        if (this.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return '=';\n        }\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n    drawStatus(buffer, bounds) {\n        const lines = buffer.wrapText(bounds.x + 1, bounds.y, bounds.width - 1, this.getName(), 'cellStatusName');\n        return lines;\n    }\n    toString() {\n        return `Cell @ ${this.x},${this.y}`;\n    }\n}\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.quantity = other.quantity;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n    getAction(name) {\n        const action = this.kind.actions[name];\n        return action;\n    }\n    getBumpActions() {\n        return this.kind.bump;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Actor } from '../actor/actor';\nimport { Cell } from '../map/cell';\nimport { Item } from '../item/item';\nexport function messageYou(name, args) {\n    const actor = args.actor;\n    if (actor) {\n        if (actor.isPlayer()) {\n            return 'you';\n        }\n        else {\n            return 'the ' + actor.getName();\n        }\n    }\n    return name;\n}\nGWU.text.addHelper('you', messageYou);\nexport function messageThe(name, args, value) {\n    value = value || args.item || args.cell || args.actor;\n    if (value) {\n        if (value instanceof Cell) {\n            return value.getFlavor();\n        }\n        else if (value instanceof Actor) {\n            if (value.isPlayer()) {\n                return 'you';\n            }\n            else {\n                return 'the ' + value.getName();\n            }\n        }\n        else if (value instanceof Item) {\n            return 'the ' + value.getName();\n        }\n    }\n    return name;\n}\nGWU.text.addHelper('the', messageThe);\nexport function messageA(name, args, value) {\n    value = value || args.item || args.cell || args.actor;\n    if (value) {\n        if (value instanceof Cell) {\n            return value.getFlavor();\n        }\n        else if (value instanceof Actor) {\n            if (value.isPlayer()) {\n                return 'you';\n            }\n            else {\n                return 'a ' + value.getName();\n            }\n        }\n        else if (value instanceof Item) {\n            return 'a ' + value.getName();\n        }\n    }\n    return name;\n}\nGWU.text.addHelper('a', messageA);\nGWU.text.addHelper('an', messageA);\n","import * as GWU from 'gw-utils';\nexport class PainMessages {\n    constructor(msgs = []) {\n        this._msgs = [];\n        msgs.forEach((m) => this.add(m));\n    }\n    add(msg) {\n        this._msgs.push(msg);\n        return this;\n    }\n    get(pct, singular = true) {\n        const index = GWU.clamp(Math.floor(pct * this._msgs.length), 0, this._msgs.length - 1);\n        const msg = this._msgs[index];\n        return this._format(msg, singular);\n    }\n    _format(msg, singular = true) {\n        return msg.replace(/\\[(\\w+)\\|?(\\w*)\\]/g, singular ? '$1' : '$2');\n    }\n}\nexport const painMessages = {};\nexport function installPain(id, pain) {\n    if (Array.isArray(pain)) {\n        pain = new PainMessages(pain);\n    }\n    painMessages[id] = pain;\n}\nexport function getPain(id) {\n    const m = painMessages[id];\n    if (!m)\n        throw new Error('No such pain message index: ' + id);\n    return m;\n}\n","export const ais = {};\nexport function install(name, fn) {\n    ais[name] = fn;\n}\nexport function make(opts) {\n    if (typeof opts === 'string') {\n        opts = { fn: opts };\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    if (typeof opts.fn === 'string') {\n        opts.fn = ais[opts.fn];\n    }\n    if (!opts.fn) {\n        opts.fn = ais.default;\n    }\n    return opts;\n}\n","import * as GWU from 'gw-utils';\nimport { getAction } from '../actor/action';\nimport * as AI from './ai';\nimport { wander } from './wander';\nexport class AICtx {\n    constructor(game, actor, target) {\n        this.item = null;\n        this.count = 0;\n        this.game = game;\n        this.actor = actor;\n        this.target = target || null;\n        this.distanceMap = GWU.grid.alloc(game.map.width, game.map.height);\n        if (target) {\n            const costMap = actor.costMap();\n            GWU.path.calculateDistances(this.distanceMap, target.x, target.y, costMap);\n        }\n    }\n    start() {\n        ++this.count;\n        return this;\n    }\n    done(result) {\n        --this.count;\n        if (this.count == 0) {\n            GWU.grid.free(this.distanceMap);\n        }\n        return result;\n    }\n}\n/*\nhttp://roguebasin.com/index.php/Roguelike_Intelligence_-_Stateless_AIs\n-- Typical AI\n*/\nexport async function typical(game, actor) {\n    if (actor.isDead())\n        return -1;\n    const map = actor.map;\n    if (!map)\n        return -1; // actor not on map ?!?!\n    const target = game.player;\n    const tryAttack = actor.canSee(target) && actor.willAttack(target);\n    if (tryAttack) {\n        const damagePct = 100 - actor.stats.getPct('health');\n        const morale = actor.stats.get('morale');\n        const chargeChance = 100;\n        const retreatChance = 0;\n        actor.ai.lastSawPlayer = [target.x, target.y];\n        actor.clearGoal();\n        console.log('SAW YOU!', actor.id, target.x, target.y);\n        const ctx = new AICtx(game, actor, target).start();\n        let result = 0;\n        if (damagePct > morale) {\n            if (canRunAwayFrom(game, actor, target, ctx)) {\n                result = await runAwayFrom(game, actor, target, ctx);\n            }\n            else if (canAttack(game, actor, target, ctx)) {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (tooFarFrom(game, actor, target, ctx) &&\n            canAttack(game, actor, target, ctx) &&\n            canMoveToward(game, actor, target, ctx)) {\n            if (GWU.random.chance(chargeChance)) {\n                result = await moveToward(game, actor, target, ctx);\n            }\n            else {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (tooCloseTo(game, actor, target, ctx) &&\n            canAttack(game, actor, target, ctx) &&\n            canMoveAwayFrom(game, actor, target, ctx)) {\n            if (GWU.random.chance(retreatChance)) {\n                result = await moveAwayFrom(game, actor, target, ctx);\n            }\n            else {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (canAttack(game, actor, target, ctx)) {\n            result = await attack(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n        if (tooFarFrom(game, actor, target, ctx) &&\n            canMoveToward(game, actor, target, ctx)) {\n            result = await moveToward(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n        if (tooCloseTo(game, actor, target, ctx) &&\n            canMoveAwayFrom(game, actor, target, ctx)) {\n            result = await moveAwayFrom(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n    }\n    // TODO - Use scent, menory, other teammates info, ...\n    else if (actor.ai.lastSawPlayer) {\n        if (!actor.hasGoal()) {\n            const loc = actor.ai.lastSawPlayer;\n            actor.setGoal(loc[0], loc[1]);\n        }\n        console.log('CHASING YOU!', actor.id, actor.goalMap.x, actor.goalMap.y);\n        const result = await moveTowardGoal(game, actor);\n        if (result) {\n            return result;\n        }\n        actor.ai.lastSawPlayer = null; // no longer\n        actor.clearGoal();\n    }\n    // check if they noticed the player scent\n    if (target.scent) {\n        const dir = target.scent.nextDir(actor.x, actor.y);\n        if (dir) {\n            console.log('tracking scent', actor.id, dir);\n            const moveDir = getAction('moveDir');\n            if (!moveDir)\n                throw new Error('No moveDir action found for Actors!');\n            const result = await moveDir(game, actor, { dir });\n            if (result)\n                return result;\n        }\n    }\n    const wanderOpt = GWU.object.firstOpt('wander', actor.ai, actor.kind.ai, false);\n    if (wanderOpt) {\n        if (actor.goalMap || // we have a current goal\n            typeof wanderOpt !== 'number' || // wander: true\n            GWU.random.chance(wanderOpt) // chance\n        ) {\n            const result = wander(game, actor);\n            if (result)\n                return result;\n        }\n        else {\n            const idle = getAction('idle');\n            if (idle) {\n                return idle(game, actor);\n            }\n        }\n    }\n    const standStill = getAction('standStill');\n    if (!standStill)\n        throw new Error('No standStill action found for actors!');\n    return standStill(game, actor);\n}\nAI.install('typical', typical);\nAI.install('default', typical);\nexport function canMoveToward(game, actor, target, ctx) {\n    // can move?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    const distanceMap = ctx.distanceMap;\n    const canMoveDiagonal = false;\n    // look for distance > current around me\n    let center = distanceMap[actor.x][actor.y];\n    let count = 0;\n    GWU.xy.eachNeighbor(actor.x, actor.y, (x, y) => {\n        if (distanceMap[x][y] < center) {\n            ++count;\n        }\n    }, canMoveDiagonal);\n    return ctx.done(count > 0);\n}\nexport async function moveToward(game, actor, target, ctx) {\n    // pathfinding?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    // distanceMap.dump();\n    const map = game.map;\n    const step = GWU.path.nextStep(ctx.distanceMap, actor.x, actor.y, (x, y) => {\n        const cell = map.cell(x, y);\n        if (!cell)\n            return true;\n        if (cell.hasActor() && cell.actor !== target)\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    });\n    let result = 0;\n    if (!step || (step[0] == 0 && step[1] == 0)) {\n        const standStill = getAction('standStill');\n        if (!standStill)\n            throw new Error('No standStill action found for actors!');\n        result = await standStill(game, actor);\n        return ctx.done(result);\n    }\n    const moveDir = getAction('moveDir');\n    if (!moveDir)\n        throw new Error('No moveDir action found for Actors!');\n    result = await moveDir(game, actor, { dir: step });\n    return ctx.done(result);\n}\nexport function canMoveAwayFrom(game, actor, target, ctx) {\n    // can move?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    const distanceMap = ctx.distanceMap;\n    const canMoveDiagonal = false;\n    // look for distance > current around me\n    let center = distanceMap[actor.x][actor.y];\n    let count = 0;\n    GWU.xy.eachNeighbor(actor.x, actor.y, (x, y) => {\n        const d = distanceMap[x][y];\n        if (d >= GWU.path.NO_PATH)\n            return;\n        if (distanceMap[x][y] > center) {\n            ++count;\n        }\n    }, canMoveDiagonal);\n    return ctx.done(count > 0);\n}\nexport async function moveAwayFrom(_game, actor, _target, _ctx) {\n    // safety/strategy?\n    // always move using safety map?\n    return actor.endTurn();\n}\nexport function canRunAwayFrom(_game, _actor, _target, _ctx) {\n    // can move?\n    return false;\n}\nexport async function runAwayFrom(_game, actor, _target, _ctx) {\n    // move toward loop if away from player\n    return actor.endTurn();\n}\nexport function canAttack(_game, actor, target, _ctx) {\n    // has attack?\n    // attack affects player?\n    // cooldown?\n    return GWU.xy.distanceFromTo(actor, target) <= 1;\n}\nexport async function attack(game, actor, target, _ctx) {\n    console.log('attack!', actor.id, target.id);\n    let attack = actor.getAction('attack');\n    if (!attack)\n        return 0;\n    return attack(game, actor, { actor: target });\n}\nexport function tooFarFrom(_game, actor, target, _ctx) {\n    // diagonal?\n    return GWU.xy.distanceFromTo(actor, target) > 1;\n}\nexport function tooCloseTo(_game, actor, target, _ctx) {\n    return GWU.xy.distanceFromTo(actor, target) < 1;\n}\n// TODO - make an action\nexport async function moveTowardGoal(game, actor) {\n    if (!actor.hasGoal())\n        return 0;\n    const nextStep = GWU.path.nextStep(actor.goalMap, actor.x, actor.y, (x, y) => {\n        return actor.map.hasActor(x, y);\n    });\n    if (!nextStep) {\n        actor.clearGoal();\n        return 0;\n    }\n    const moveDir = actor.getAction('moveDir');\n    if (!moveDir)\n        throw new Error('No moveDir action for actor!');\n    return await moveDir(game, actor, { dir: nextStep });\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { getAction } from '../actor/action';\nexport async function wander(game, actor) {\n    // Do we have a wander target?\n    let goalMap = actor.goalMap;\n    if (!goalMap) {\n        //      pick new wander target\n        const costMap = actor.costMap();\n        const loc = GWU.random.matchingLoc(costMap.width, costMap.height, (x, y) => {\n            return costMap[x][y] > 0 && costMap[x][y] !== GWU.path.NO_PATH;\n        });\n        if (!loc || loc[0] < 0 || loc[1] < 0) {\n            console.log('No wander location found!');\n            return 0;\n        }\n        //      build distance map to target\n        goalMap = actor.setGoal(loc[0], loc[1]);\n    }\n    // take the next step to the target\n    const step = GWU.path.nextStep(goalMap, actor.x, actor.y, (x, y) => {\n        if (!game.map.hasActor(x, y))\n            return false;\n        const other = game.map.actorAt(x, y);\n        if (!other) {\n            console.log(`Cell @ ${x},${y} has actor flag, but no actor.`);\n            game.map.cell(x, y).clearCellFlag(Flags.Cell.HAS_ACTOR);\n            return false;\n        }\n        return !actor.canPass(other);\n    });\n    if (!step) {\n        actor.clearGoal();\n        return 0;\n    }\n    let result = 0;\n    if (!step || (step[0] == 0 && step[1] == 0)) {\n        return 0; // did nothing\n    }\n    const moveDir = getAction('moveDir');\n    if (!moveDir)\n        throw new Error('No moveDir action found for Actors!');\n    result = await moveDir(game, actor, { dir: step });\n    return result;\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nexport function fillSafetyMap(safetyMap, actor, target) {\n    const costGrid = GWU.grid.alloc(actor.costMap());\n    GWU.path.calculateDistances(safetyMap, target.x, target.y, costGrid, true);\n    safetyMap.update((v) => v * -1); // Can set factor to be < -1 e.g. -1.2\n    actor.map.actors.forEach((a) => {\n        if (a.willAttack(actor)) {\n            costGrid[a.x][a.y] = GWU.path.FORBIDDEN; // This is why we allocate a copy\n        }\n    });\n    actor.map.eachCell((c, x, y) => {\n        if (c.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n            safetyMap[x][y] -= GWU.path.AVOIDED; // loop cells are extra good\n        }\n    });\n    GWU.path.rescan(safetyMap, costGrid, true);\n    safetyMap.update((v) => (v <= -30000 ? 30000 : v));\n    GWU.grid.free(costGrid);\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Actor } from './actor';\nimport * as AI from '../ai';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n        this.flags = {\n            actor: Flags.Actor.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.vision = {};\n        this.actions = {};\n        this.bump = ['attack'];\n        this.moveSpeed = 100;\n        if (opts.flags) {\n            this.flags.actor = GWU.flag.from(Flags.Actor, this.flags.actor, opts.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, opts.flags);\n        }\n        if (opts.vision) {\n            this.vision.normal = opts.vision;\n        }\n        this.stats = Object.assign({ health: 1, morale: 100 }, opts.stats);\n        if (opts.actions) {\n            Object.assign(this.actions, opts.actions);\n        }\n        if (opts.moveSpeed) {\n            this.moveSpeed = opts.moveSpeed;\n        }\n        this.ai = AI.make(opts.ai || 'default');\n        if (opts.bump) {\n            if (typeof opts.bump === 'string') {\n                opts.bump = opts.bump.split(/[|,]/g).map((t) => t.trim());\n            }\n            if (typeof opts.bump === 'function') {\n                opts.bump = [opts.bump];\n            }\n            if (Array.isArray(opts.bump)) {\n                this.bump = opts.bump.slice();\n            }\n        }\n        if (opts.waterOnly) {\n            this.forbidTileFlags =\n                this.forbidTileFlags & ~Flags.Tile.T_IS_DEEP_LIQUID;\n            this.avoidTileFlags =\n                this.avoidTileFlags & ~Flags.Tile.T_IS_DEEP_LIQUID;\n            this.requireTileFlags |= Flags.Tile.T_IS_DEEP_LIQUID;\n        }\n        else if (opts.lavaOnly) {\n            this.forbidTileFlags = this.forbidTileFlags & ~Flags.Tile.T_LAVA;\n            this.avoidTileFlags = this.avoidTileFlags & ~Flags.Tile.T_LAVA;\n            this.requireTileFlags |= Flags.Tile.T_LAVA;\n        }\n        else {\n            if (opts.swim) {\n                this.avoidTileFlags |= Flags.Tile.T_IS_DEEP_LIQUID;\n            }\n            else {\n                this.forbidTileFlags |= Flags.Tile.T_IS_DEEP_LIQUID;\n            }\n            if (opts.fly) {\n                this.forbidTileFlags =\n                    this.forbidTileFlags & ~Flags.Tile.T_LAVA;\n                this.avoidTileFlags = this.avoidTileFlags & ~Flags.Tile.T_LAVA;\n                this.requireTileFlags =\n                    this.requireTileFlags & ~Flags.Tile.T_LAVA;\n                this.forbidTileFlags =\n                    this.forbidTileFlags & ~Flags.Tile.T_IS_DEEP_LIQUID;\n                this.avoidTileFlags =\n                    this.avoidTileFlags & ~Flags.Tile.T_IS_DEEP_LIQUID;\n                this.requireTileFlags =\n                    this.requireTileFlags & ~Flags.Tile.T_IS_DEEP_LIQUID;\n            }\n        }\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n        Object.assign(actor.flags, this.flags);\n        // if (options.fov) {\n        //     actor.fov = options.fov;\n        // }\n        // if (options.memory) {\n        //     actor.memory = options.memory;\n        // }\n        if (this.vision.normal) {\n            actor.visionDistance = this.vision.normal;\n        }\n        actor.stats.init(this.stats);\n    }\n    addToMap(actor, map) {\n        super.addToMap(actor, map);\n        // if (this.hasActorFlag(Flags.Actor.HAS_MEMORY)) {\n        //     actor.memory = Memory.get(actor, map);\n        // }\n        // if (this.hasActorFlag(Flags.Actor.USES_FOV)) {\n        //     actor.fov = new GWU.fov.FovSystem(map);\n        //     actor.fov.follow = actor;\n        //     if (actor.memory) {\n        //         actor.fov.callback = actor.memory;\n        //     }\n        // }\n    }\n    removeFromMap(actor) {\n        super.removeFromMap(actor);\n        // if (actor._map && actor.memory) {\n        //     Memory.store(actor, actor._map, actor.memory);\n        // }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    canSeeEntity(_actor, _entity) {\n        return true;\n    }\n    isAbleToSee(_actor, _entity) {\n        return true;\n    }\n    isAbleToSense(_actor, _entity) {\n        return true;\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor)) {\n            return true;\n        }\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n    cellCost(cell, actor) {\n        if (this.forbidsCell(cell, actor)) {\n            return cell.hasEntityFlag(Flags.Entity.L_BLOCKS_DIAGONAL)\n                ? GWU.path.OBSTRUCTION\n                : GWU.path.FORBIDDEN;\n        }\n        else if (this.avoidsCell(cell, actor)) {\n            return GWU.path.AVOIDED;\n        }\n        return GWU.path.OK;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { installAction } from '../action';\n// BUMP\n//\n// prefixes:\n// @ = only for player\n// + = only for ally\n// - = only for opposed\n// = = only for same kind\n// $ = use my action (if used with one of the above, this comes last)\n//\nexport async function bump(game, actor, ctx = {}) {\n    const other = ctx.actor;\n    if (other) {\n        const bumpActions = other.getBumpActions();\n        for (let action of bumpActions) {\n            if (typeof action === 'string') {\n                if (action.startsWith('$')) {\n                    const selfName = action.substring(1);\n                    let selfAction = other.getAction(selfName);\n                    if (selfAction === false) {\n                        throw new Error('Cannot have bump action for self action that actor cannot do: ' +\n                            action);\n                    }\n                    const ctx2 = Object.assign({}, ctx, { actor });\n                    const result = await selfAction(game, other, ctx2);\n                    if (result)\n                        return result;\n                }\n                else {\n                    const config = actor.getAction(action);\n                    if (config === false) {\n                        throw new Error('Cannot configure actor with bump action they cannot do: ' +\n                            action);\n                    }\n                    else {\n                        action = config;\n                    }\n                    const result = await action(game, actor, ctx);\n                    if (result)\n                        return result;\n                }\n            }\n            else {\n                const result = await action(game, actor, ctx);\n                if (result)\n                    return result;\n            }\n        }\n    }\n    const item = ctx.item;\n    if (item) {\n        // TODO - Item Actions\n    }\n    return 0;\n}\ninstallAction('bump', bump);\n","import { installAction } from '../action';\nexport async function standStill(_game, actor, _ctx) {\n    return actor.endTurn();\n}\ninstallAction('standStill', standStill);\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\n// export class SpriteFX extends FX {\n//     sprite: GWU.sprite.SpriteConfig;\n//     stepCount: number;\n//     x: number;\n//     y: number;\n//     constructor(\n//         map: Map,\n//         sprite: string | GWU.sprite.SpriteConfig,\n//         x: number,\n//         y: number,\n//         opts: SpriteFxOptions = {}\n//     ) {\n//         const count = opts.blink || 1;\n//         const duration = opts.duration || 1000;\n//         opts.speed = opts.speed || duration / (2 * count - 1);\n//         super(map, opts);\n//         if (typeof sprite === 'string') {\n//             const name = sprite;\n//             sprite = GWU.sprite.sprites[sprite];\n//             if (!sprite) throw new Error('Cannot find sprite! ' + name);\n//         }\n//         this.sprite = sprite;\n//         this.x = x || 0;\n//         this.y = y || 0;\n//         this.stepCount = 2 * count - 1;\n//     }\n//     start() {\n//         this.map.addFx(this.x, this.y, this.sprite);\n//         return super.start();\n//     }\n//     step() {\n//         --this.stepCount;\n//         if (this.stepCount <= 0) return this.stop();\n//         if (this.stepCount % 2 == 0) {\n//             this.map.removeFx(this);\n//         } else {\n//             this.map.addFx(this.x, this.y, this);\n//         }\n//     }\n//     stop(result?: any) {\n//         this.map.removeFx(this);\n//         return super.stop(result);\n//     }\n//     moveDir(dx: number, dy: number) {\n//         return this.moveTo(this.x + dx, this.y + dy);\n//     }\n//     moveTo(x: number, y: number) {\n//         this.map.moveFx(x, y, this);\n//         return true;\n//     }\n// }\nexport async function flashSprite(map, x, y, sprite, duration = 100, count = 1, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ visible: true })\n        .to({ visible: false })\n        .repeat(count)\n        .repeatDelay(duration)\n        .duration(duration)\n        .onUpdate((obj) => {\n        if (obj.visible) {\n            map.addFx(x, y, entity);\n        }\n        else {\n            map.removeFx(entity);\n        }\n    });\n    // realTime\n    animator = animator || GWU.io.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nGWU.sprite.install('bump', 'white', 50);\nexport async function hit(map, target, sprite, duration, animator) {\n    sprite = sprite || 'hit';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('hit', 'red', 50);\nexport async function miss(map, target, sprite, duration, animator) {\n    sprite = sprite || 'miss';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('miss', 'green', 50);\nexport async function fadeInOut(map, x, y, sprite, duration = 100, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite).clone();\n    }\n    else {\n        sprite = GWU.sprite.make(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ opacity: 0 })\n        .to({ opacity: 100 })\n        .repeat(2)\n        .yoyo(true)\n        .duration(Math.floor(duration / 2))\n        .onUpdate((obj) => {\n        entity.sprite.opacity = obj.opacity;\n        map.cell(x, y).needsRedraw = true; // we changed the sprite so redraw\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n    });\n    // realTime\n    animator = animator || GWU.io.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport async function moveSprite(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    const from = { x: GWU.xy.x(source), y: GWU.xy.y(source) };\n    map.addFx(from.x, from.y, entity);\n    let duration = opts.duration ||\n        Math.ceil(16 * (GWU.xy.maxAxisFromTo(source, target) / (opts.speed || 8)));\n    if (GWU.xy.isLoc(target)) {\n        target = { x: target[0], y: target[1] };\n    }\n    const tween = GWU.tween\n        .make(from)\n        .to(target)\n        .duration(duration)\n        .onUpdate((vals) => {\n        // tweens dont update every step, so...\n        // draw line from current pos to vals pos\n        // check each step for blocking...\n        // end at either vals or last blocking spot\n        const dest = { x: entity.x, y: entity.y };\n        const ok = GWU.xy.forLineBetween(dest.x, dest.y, vals.x, vals.y, (x, y) => {\n            if (opts.stepFn) {\n                if (opts.stepFn(x, y)) {\n                    if (!opts.stopBeforeWalls) {\n                        dest.x = x;\n                        dest.y = y;\n                    }\n                    return false;\n                }\n            }\n            else if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (!opts.stopBeforeWalls) {\n                    dest.x = x;\n                    dest.y = y;\n                }\n                return false;\n            }\n            dest.x = x;\n            dest.y = y;\n        });\n        map.moveFx(entity, dest.x, dest.y);\n        if (!ok) {\n            tween.stop();\n        }\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n        return entity;\n    });\n    const animator = opts.animator || map;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport function bolt(map, source, target, sprite, opts = {}) {\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport async function projectile(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    if (sprite.ch && sprite.ch.length == 4) {\n        const dir = GWU.xy.dirFromTo(source, target);\n        let index = 0;\n        if (dir[0] && dir[1]) {\n            index = 2;\n            if (dir[0] != dir[1]) {\n                // remember up is -y\n                index = 3;\n            }\n        }\n        else if (dir[0]) {\n            index = 1;\n        }\n        const ch = sprite.ch[index];\n        sprite = GWU.sprite.make(ch, sprite.fg, sprite.bg);\n    }\n    else if (sprite.ch && sprite.ch.length !== 1) {\n        throw new Error('projectile requires 4 chars - vert,horiz,diag-left,diag-right (e.g: \"|-\\\\/\")');\n    }\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport function beam(map, from, to, sprite, opts = {}) {\n    opts.fade = opts.fade || 100;\n    if (opts.stopAtWalls === undefined)\n        opts.stopAtWalls = true;\n    const line = [];\n    GWU.xy.forLineFromTo(from, to, (x, y) => {\n        if (!map.hasXY(x, y))\n            return false;\n        if (opts.stepFn && opts.stepFn(x, y))\n            return false;\n        if (opts.stopAtWalls || opts.stopBeforeWalls) {\n            if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (opts.stopBeforeWalls)\n                    return false;\n                line.push([x, y]);\n                return false;\n            }\n        }\n        line.push([x, y]);\n        return true;\n    });\n    const duration = opts.duration || Math.ceil(16 * (line.length / (opts.speed || 8)));\n    const animator = opts.animator || map;\n    const promises = [];\n    let lastIndex = -1;\n    const tween = GWU.tween\n        .make({ index: 0 })\n        .to({ index: line.length - 1 })\n        .duration(duration)\n        .onUpdate((vals) => {\n        while (lastIndex < vals.index) {\n            ++lastIndex;\n            const loc = line[lastIndex] || [-1, -1];\n            promises.push(fadeInOut(map, loc[0], loc[1], sprite, opts.fade, animator));\n        }\n    })\n        .onFinish(async () => {\n        await Promise.all(promises);\n        const loc = line[line.length - 1];\n        return { x: loc[0], y: loc[1] };\n    });\n    animator.addAnimation(tween);\n    return tween.start();\n}\nfunction isInShape(shape, cx, cy, allowCenter, x, y) {\n    const sx = Math.abs(x - cx);\n    const sy = Math.abs(y - cy);\n    if (sx == 0 && sy == 0 && !allowCenter)\n        return false;\n    switch (shape) {\n        case '+':\n            return sx == 0 || sy == 0;\n        case 'x':\n        case 'X':\n            return sx == sy;\n        case '*':\n            return sx == 0 || sy == 0 || sx == sy;\n        default:\n            return true;\n    }\n}\nfunction checkExplosionOpts(opts) {\n    opts.speed = opts.speed || 2;\n    opts.fade = opts.fade || 100;\n    opts.shape = opts.shape || 'o';\n    if (opts.center === undefined) {\n        opts.center = true;\n    }\n}\nexport function explosion(map, x, y, radius, sprite, opts = {}) {\n    checkExplosionOpts(opts);\n    opts.animator = opts.animator || map;\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const grid = GWU.grid.alloc(map.width, map.height);\n    const fov = new GWU.fov.FOV({\n        isBlocked(x, y) {\n            return map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE);\n        },\n        hasXY(x, y) {\n            return map.hasXY(x, y);\n        },\n    });\n    fov.calculate(x, y, radius, (x1, y1) => {\n        grid[x1][y1] = 1;\n    });\n    const duration = opts.duration || 32 * (radius / opts.speed);\n    const promises = [];\n    const tween = GWU.tween\n        .make({ r: 0 })\n        .to({ r: radius })\n        .duration(duration)\n        .onUpdate((vals) => {\n        const minX = Math.max(0, x - vals.r);\n        const minY = Math.max(0, y - vals.r);\n        const maxX = Math.min(map.width - 1, x + vals.r);\n        const maxY = Math.min(map.height - 1, y + vals.r);\n        for (let x1 = minX; x1 <= maxX; ++x1) {\n            for (let y1 = minY; y1 <= maxY; ++y1) {\n                if (grid[x1][y1] &&\n                    GWU.xy.distanceBetween(x, y, x1, y1) <= vals.r) {\n                    grid[x1][y1] = 0;\n                    if (isInShape(opts.shape, x, y, opts.center, x1, y1)) {\n                        promises.push(fadeInOut(map, x1, y1, sprite, opts.fade, opts.animator));\n                    }\n                }\n            }\n        }\n    })\n        .onFinish(async (_obj, success) => {\n        GWU.grid.free(grid);\n        await Promise.all(promises);\n        return success;\n    });\n    opts.animator.addAnimation(tween);\n    return tween.start();\n}\n/*\nexport function explosionFor(\n    map: Map,\n    grid: GWU.grid.NumGrid,\n    x: number,\n    y: number,\n    radius: number,\n    sprite: string | GWU.sprite.SpriteConfig,\n    opts: ExplosionOptions = {}\n) {\n    checkExplosionOpts(opts);\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    const animation = new ExplosionFX(\n        map,\n        grid,\n        x,\n        y,\n        radius,\n        sprite,\n        opts.speed,\n        opts.fade,\n        opts.shape,\n        opts.center,\n        opts.stepFn\n    );\n    return opts.playFn!(animation);\n}\n*/\n","import * as GWU from 'gw-utils';\nimport { installAction } from '../action';\nimport { bump } from './bump';\nimport { standStill } from './standStill';\nimport * as FX from '../../fx';\nimport * as Flags from '../../flags';\nexport async function moveDir(game, actor, ctx = {}) {\n    //\n    const step = ctx.dir;\n    if (!step)\n        throw new Error('moveDir called with no direction!');\n    const newX = actor.x + step[0];\n    const newY = actor.y + step[1];\n    const map = game.map;\n    const currentCell = map.cell(actor.x, actor.y);\n    const newCell = map.cell(newX, newY);\n    let result = 0;\n    if (actor.forbidsCell(newCell)) {\n        if (ctx.try)\n            return 0;\n        FX.hit(map, newCell, 'hit', 100);\n        GWU.message.addAt(newCell.x, newCell.y, '{{you}} {{verb}} into {{a cell}}.', { actor, cell: newCell, verb: 'bump' });\n        actor.clearGoal();\n        return actor.endTurn();\n    }\n    if (newCell.blocksMove()) {\n        if (ctx.try)\n            return 0;\n        FX.hit(map, newCell, 'hit', 100);\n        actor.clearGoal();\n        return actor.endTurn();\n    }\n    // can we leave?\n    if (!currentCell.canRemoveActor(actor)) {\n        if (ctx.try)\n            return 0;\n        // canActorLeave must add appropriate message\n        return actor.endTurn();\n    }\n    // is there an actor there?\n    if (newCell.hasActor() || newCell.hasItem()) {\n        if (ctx.try)\n            return 0;\n        const ctx2 = { actor: newCell.actor, item: newCell.item };\n        result = await bump(game, actor, ctx2);\n        if (result)\n            return result;\n    }\n    // can we enter?\n    if (!newCell.canAddActor(actor)) {\n        if (ctx.try)\n            return 0;\n        return actor.endTurn();\n    }\n    if (!map.moveActor(actor, newX, newY)) {\n        result = await standStill(game, actor, ctx);\n        return result;\n    }\n    let rate = 100;\n    if (newCell.hasTileFlag(Flags.Tile.T_DEEP_WATER)) {\n        rate = 150;\n    }\n    result = actor.endTurn(rate);\n    return result;\n}\ninstallAction('moveDir', moveDir);\n","import * as GWU from 'gw-utils';\nimport { installAction } from '../action';\nimport { moveDir } from './moveDir';\nexport async function idle(game, actor, _ctx) {\n    if (GWU.random.chance(50)) {\n        // do nothing\n        return actor.endTurn();\n    }\n    // try to step in a random direction\n    const dirIndex = GWU.random.number(4);\n    const dir = GWU.xy.DIRS[dirIndex];\n    const result = await moveDir(game, actor, { dir, try: true });\n    if (result)\n        return result;\n    // stand still\n    return actor.endTurn();\n}\ninstallAction('idle', idle);\n","import * as GWU from 'gw-utils';\nimport { installAction } from '../action';\nexport async function pickup(game, actor, ctx = {}) {\n    const map = actor.map;\n    if (!map)\n        throw new Error('Actor not on map!');\n    const item = actor.map.itemAt(actor.x, actor.y);\n    if (!item) {\n        if (!ctx.quiet) {\n            GWU.message.addAt(actor.x, actor.y, 'Nothing to pickup.');\n        }\n        return 0;\n    }\n    if (actor.avoidsItem(item))\n        return 0;\n    const itemAction = item.getAction('pickup');\n    if (itemAction === false) {\n        if (!ctx.quiet) {\n            GWU.message.addAt(actor.x, actor.y, 'You cannot pickup %{the.item}.', {\n                item,\n            });\n        }\n        return 0;\n    }\n    else if (typeof itemAction === 'function') {\n        // You have to do everything\n        const result = await itemAction(game, actor, item);\n        if (result)\n            return result; // handled\n    }\n    // logs error messages\n    if (!actor.canAddItem(item)) {\n        return 0;\n    }\n    if (!actor.map.removeItem(item)) {\n        return 0;\n    }\n    actor.addItem(item);\n    if (!ctx.quiet) {\n        GWU.message.addAt(actor.x, actor.y, 'You pickup %{the:item}.', {\n            item,\n        });\n    }\n    return actor.endTurn();\n}\ninstallAction('pickup', pickup);\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n        this.flags = {\n            item: Flags.Item.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.actions = {};\n        this.bump = [];\n        if (config.flags) {\n            this.flags.item = GWU.flag.from(Flags.Item, this.flags.item, config.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, config.flags);\n        }\n        if (config.actions) {\n            Object.entries(config.actions).forEach(([key, value]) => {\n                this.actions[key] = value;\n            });\n        }\n        if (config.bump) {\n            if (typeof config.bump === 'string' ||\n                typeof config.bump === 'function') {\n                config.bump = [config.bump];\n            }\n            if (Array.isArray(config.bump)) {\n                this.bump = config.bump.slice();\n            }\n        }\n        this.avoidTileFlags |= Flags.Tile.T_DEEP_WATER;\n        this.forbidTileFlags |= Flags.Tile.T_LAVA | Flags.Tile.T_AUTO_DESCENT;\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n        Object.assign(item.flags, this.flags);\n        item.quantity = options.quantity || 1;\n    }\n    avoidsCell(cell, item) {\n        if (cell.isDoor())\n            return true;\n        return super.avoidsCell(cell, item);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile, _opts) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts) {\n        const cell = this.map.cell(x, y);\n        return cell.setTile(tile, opts);\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // // Bookkeeping for fire, pressure plates and key-activated tiles.\n        // for (let x = 0; x < this.map.width; ++x) {\n        //     for (let y = 0; y < this.map.height; ++y) {\n        //         const cell = this.map.cell(x, y);\n        //         if (\n        //             !cell.hasCellFlag(\n        //                 Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM\n        //             ) &&\n        //             cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)\n        //         ) {\n        //             cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n        //         }\n        //     }\n        // }\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            cell.fireEvent(event, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nconst highlightColor = GWU.color.install('highlight', [100, 100, 0]);\nexport class BasicDrawer {\n    constructor() {\n        this.scent = false;\n    }\n    drawInto(dest, map, opts = {}) {\n        const buffer = dest instanceof GWU.buffer.Buffer ? dest : dest.buffer;\n        const offsetX = opts.offsetX || 0;\n        const offsetY = opts.offsetY || 0;\n        map.clearMapFlag(Flags.Map.MAP_DANCES);\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                if (map.hasXY(x + offsetX, y + offsetY)) {\n                    const cell = map.cell(x + offsetX, y + offsetY);\n                    this.drawCell(mixer, map, cell, map.fov);\n                    buffer.drawSprite(x, y, mixer);\n                }\n            }\n        }\n    }\n    drawCell(dest, map, cell, fov) {\n        dest.blackOut();\n        // const isVisible = fov ? fov.isAnyKindOfVisible(cell.x, cell.y) : true;\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (cell.needsRedraw || needSnapshot) {\n            this.getAppearance(dest, map, cell);\n            cell.putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            cell.getSnapshot(dest);\n            if (cell.hasCellFlag(Flags.Cell.COLORS_DANCE)) {\n                map.setMapFlag(Flags.Map.MAP_DANCES);\n            }\n        }\n        this.applyLight(dest, cell, fov);\n        let separate = false;\n        if (cell.memory) {\n            separate = !!(cell.memory.flags.entity &\n                (Flags.Entity.L_VISUALLY_DISTINCT |\n                    Flags.Entity.L_LIST_IN_SIDEBAR));\n        }\n        else {\n            separate = cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT |\n                Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        }\n        if (cell.hasCellFlag(Flags.Cell.IS_CURSOR)) {\n            dest.invert();\n            dest.mix(highlightColor, 0, 25);\n            separate = true;\n        }\n        else if (cell.hasCellFlag(Flags.Cell.IS_HIGHLIGHTED)) {\n            dest.invert();\n            separate = true;\n        }\n        if (this.scent && map.player) {\n            const s = GWU.clamp(map.player.scent.get(cell.x, cell.y) * 5, 0, 50);\n            if (s) {\n                const c = GWU.color.colors.red;\n                dest.mix(c, 0, s);\n            }\n        }\n        if (separate) {\n            [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n        }\n        return true;\n    }\n    // getCellAppearance(cell: CellType, dest: GWU.sprite.Mixer) {\n    //     dest.blackOut();\n    //     const isVisible = true; // this.fov.isAnyKindOfVisible(x, y);\n    //     const isRevealed = true; // this.fov.isRevealed(x, y);\n    //     const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     if (needSnapshot || (cell.needsRedraw && isVisible)) {\n    //         this.layers.forEach((layer) => layer.putAppearance(dest, cell));\n    //         if (dest.dances) {\n    //             cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n    //         } else {\n    //             cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n    //         }\n    //         dest.bake();\n    //         cell.putSnapshot(dest);\n    //         cell.needsRedraw = false;\n    //         cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     } else {\n    //         cell.getSnapshot(dest);\n    //     }\n    //     if (isVisible) {\n    //         const light = this.light.getLight(cell.x, cell.y);\n    //         dest.multiply(light);\n    //     } else if (isRevealed) {\n    //         dest.scale(50);\n    //     } else {\n    //         dest.blackOut();\n    //     }\n    //     if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n    //         [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n    //     }\n    // }\n    getAppearance(dest, map, cell) {\n        let tiles = cell.tiles;\n        let actor = null;\n        let item = null;\n        if (cell.memory) {\n            tiles = cell.memory.tiles;\n            item = cell.memory.item;\n        }\n        else {\n            actor = cell.hasActor() ? cell.actor : null;\n            item = cell.hasItem() ? cell.item : null;\n        }\n        const ground = tiles[Flags.Depth.GROUND];\n        const surface = tiles[Flags.Depth.SURFACE];\n        const liquid = tiles[Flags.Depth.LIQUID];\n        const gas = tiles[Flags.Depth.GAS]; // How to get volume!?!?!?!\n        dest.drawSprite(ground.sprite);\n        if (surface) {\n            dest.drawSprite(surface.sprite);\n        }\n        if (liquid) {\n            dest.drawSprite(liquid.sprite);\n        }\n        if (item) {\n            item.drawInto(dest);\n        }\n        if (actor) {\n            actor.drawInto(dest);\n        }\n        if (gas) {\n            const opacity = GWU.rng.cosmetic.number(50) + 25;\n            dest.drawSprite(gas.sprite, opacity);\n        }\n        if (cell.hasFx()) {\n            const fx = map.fxAt(cell.x, cell.y);\n            if (fx)\n                dest.drawSprite(fx.sprite);\n        }\n        if (dest.dances) {\n            cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n            map.setMapFlag(Flags.Map.MAP_DANCES);\n        }\n        else {\n            cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        dest.bake(true); // apply dancing\n    }\n    applyLight(dest, cell, fov) {\n        const isVisible = !fov || fov.isAnyKindOfVisible(cell.x, cell.y);\n        const isRevealed = !fov || fov.isRevealed(cell.x, cell.y);\n        const light = cell.map.light.getLight(cell.x, cell.y);\n        dest.multiply(light);\n        // TODO - is Clairy\n        // TODO - is Telepathy\n        if (fov && fov.isCursor(cell.x, cell.y)) {\n            dest.invert();\n        }\n        else if (!isVisible) {\n            if (isRevealed) {\n                dest.scale(70);\n            }\n            else {\n                dest.blackOut();\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\nimport * as Effect from '../effect';\nimport { BasicDrawer } from '../draw/basic';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        // _memory: GWU.grid.Grid<CellMemory>;\n        // machineCount = 0;\n        // _seed = 0;\n        this.rng = GWU.rng.random;\n        // id = 'MAP';\n        this.actors = [];\n        this.items = [];\n        this.fx = [];\n        this.player = null;\n        this._animations = [];\n        this.events = new GWU.events.EventEmitter();\n        this.flags = { map: 0 };\n        this.layers = [];\n        this.properties = { seed: 0, machineCount: 0 };\n        if (opts.id) {\n            this.properties.id = opts.id;\n        }\n        this.drawer = opts.drawer || new BasicDrawer();\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        // this._memory = GWU.grid.make(\n        //     width,\n        //     height,\n        //     (x, y) => new CellMemory(this, x, y)\n        // );\n        if (opts.seed) {\n            this.properties.seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        if (opts.fov === undefined) {\n            opts.alwaysVisible = true;\n        }\n        else if (opts.fov === false) {\n            opts.visible = true;\n        }\n        opts.callback = this.onFovChange.bind(this);\n        this.fov = new GWU.fov.FovSystem(this, opts);\n        this.initLayers();\n        if (opts.player) {\n            this.setPlayer(opts.player);\n        }\n    }\n    get seed() {\n        return this.properties.seed;\n    }\n    set seed(v) {\n        this.properties.seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    get width() {\n        return this.cells.width;\n    }\n    get height() {\n        return this.cells.height;\n    }\n    // memory(x: number, y: number): CellMemory {\n    //     return this._memory[x][y];\n    // }\n    // knowledge(x: number, y: number): CellInfoType {\n    //     if (this.fov.isAnyKindOfVisible(x, y)) return this.cell(x,y);\n    //     return this._memory[x][y];\n    // }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // items\n    hasItem(x, y) {\n        return this.cell(x, y).hasItem();\n    }\n    itemAt(x, y) {\n        return this.items.find((i) => i.isAt(x, y)) || null;\n    }\n    eachItem(cb) {\n        this.items.forEach(cb);\n    }\n    addItem(x, y, item, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        // if (!cell.canAddItem(item)) return false;\n        if (cell._addItem(item)) {\n            const index = this.items.indexOf(item);\n            if (index < 0) {\n                this.items.push(item);\n            }\n            item.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireAddItemEffects(item, cell);\n            }\n            if (index < 0) {\n                this.events.emit('item', this, item, true);\n            }\n            return true;\n        }\n        return false;\n    }\n    _fireAddItemEffects(item, cell) {\n        if (item.key &&\n            item.key.matches(cell.x, cell.y) &&\n            cell.hasEffect('key')) {\n            cell.fireEvent('key', {\n                key: item,\n                item,\n            });\n        }\n        else if (cell.hasEffect('add_item')) {\n            cell.fireEvent('add_item', {\n                key: item,\n                item,\n            });\n        }\n    }\n    addItemNear(x, y, item, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this.cell(i, j);\n            if (cell.hasItem())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (item.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        return this.addItem(loc[0], loc[1], item, fireEffects);\n    }\n    removeItem(item, fireEffects = false) {\n        const cell = this.cell(item.x, item.y);\n        // if (!cell.canRemoveItem(item)) return false;\n        if (cell._removeItem(item)) {\n            if (fireEffects) {\n                this._fireRemoveItemEffects(item, cell);\n            }\n            GWU.arrayDelete(this.items, item);\n            item.removeFromMap();\n            this.events.emit('item', this, item, false);\n            return true;\n        }\n        return false;\n    }\n    _fireRemoveItemEffects(item, cell) {\n        if (item.isKey(cell.x, cell.y) && cell.hasEffect('no_key')) {\n            cell.fireEvent('no_key', {\n                key: item,\n                item,\n            });\n        }\n        else if (cell.hasEffect('remove_item')) {\n            cell.fireEvent('remove_item', {\n                key: item,\n                item,\n            });\n        }\n    }\n    moveItem(item, x, y, fireEffects = false) {\n        if (item.map !== this)\n            throw new Error('Actor not on this map!');\n        const currentCell = this.cell(item.x, item.y);\n        const newCell = this.cell(x, y);\n        // if (!currentCell.canRemoveItem(item)) return false;\n        // if (!newCell.canAddItem(item)) return false;\n        currentCell._removeItem(item);\n        if (newCell._addItem(item)) {\n            if (fireEffects) {\n                this._fireRemoveItemEffects(item, currentCell);\n                this._fireAddItemEffects(item, newCell);\n            }\n            item.addToMap(this, x, y);\n        }\n        return true;\n    }\n    //  moveItem(item: Item, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = item.x;\n    //     const oldY = item.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[item.depth] as Layer.ItemLayer;\n    //     if (!( layer.removeItem(item))) return false;\n    //     if (!( this.addItem(x, y, item))) {\n    //         layer.forceItem(item.x, item.y, item);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (item.lastSeen) {\n    //     //         this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n    //     //         this.clearCellFlag(\n    //     //             item.lastSeen.x,\n    //     //             item.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         item.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.item = item;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     item.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    setPlayer(player) {\n        this.player = player;\n    }\n    actorAt(x, y) {\n        return this.actors.find((a) => a.isAt(x, y)) || null;\n    }\n    eachActor(cb) {\n        this.actors.forEach(cb);\n    }\n    addActor(x, y, actor, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (!cell.canAddActor(actor))\n            return false;\n        if (cell._addActor(actor)) {\n            const index = this.actors.indexOf(actor);\n            if (index < 0) {\n                this.actors.push(actor);\n            }\n            actor.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireAddActorEffects(actor, cell);\n            }\n            if (index < 0) {\n                this.events.emit('actor', this, actor, true);\n            }\n            return true;\n        }\n        return false;\n    }\n    _fireAddActorEffects(actor, cell) {\n        if (actor.isKey(cell.x, cell.y) && cell.hasEffect('key')) {\n            cell.fireEvent('key', {\n                key: actor,\n                actor,\n            });\n        }\n        else if (actor.isPlayer() && cell.hasEffect('add_player')) {\n            cell.fireEvent('add_player', {\n                player: actor,\n                actor,\n            });\n        }\n        else if (cell.hasEffect('add_actor')) {\n            cell.fireEvent('add_actor', {\n                actor,\n            });\n        }\n    }\n    addActorNear(x, y, actor, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this.cell(i, j);\n            if (cell.hasActor())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        return this.addActor(loc[0], loc[1], actor, fireEffects);\n    }\n    removeActor(actor, fireEffects = false) {\n        const cell = this.cell(actor.x, actor.y);\n        if (!cell.canRemoveActor(actor))\n            return false;\n        if (cell._removeActor(actor)) {\n            if (fireEffects) {\n                this._fireRemoveActorEffects(actor, cell);\n            }\n            actor.removeFromMap();\n            GWU.arrayDelete(this.actors, actor);\n            this.events.emit('actor', this, actor, false);\n            return true;\n        }\n        return false;\n    }\n    _fireRemoveActorEffects(actor, cell) {\n        if (actor.isKey(actor.x, actor.y) && cell.hasEffect('no_key')) {\n            cell.fireEvent('no_key', {\n                key: actor,\n                actor,\n            });\n        }\n        else if (actor.isPlayer() && cell.hasEffect('remove_player')) {\n            cell.fireEvent('remove_player', {\n                actor,\n                player: actor,\n            });\n        }\n        else if (cell.hasEffect('remove_actor')) {\n            cell.fireEvent('remove_actor', {\n                actor,\n            });\n        }\n    }\n    moveActor(actor, x, y, fireEffects = false) {\n        if (actor.map !== this)\n            throw new Error('Actor not on this map!');\n        const currentCell = this.cell(actor.x, actor.y);\n        const newCell = this.cell(x, y);\n        // if (!currentCell.canRemoveActor(actor)) return false;\n        // if (!newCell.canAddActor(actor)) return false;\n        currentCell._removeActor(actor);\n        if (newCell._addActor(actor)) {\n            actor.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireRemoveActorEffects(actor, currentCell);\n                this._fireAddActorEffects(actor, newCell);\n            }\n        }\n        return true;\n    }\n    //  moveActor(actor: Actor, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = actor.x;\n    //     const oldY = actor.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[actor.depth] as Layer.ActorLayer;\n    //     if (!( layer.removeActor(actor))) return false;\n    //     if (!( layer.addActor(x, y, actor))) {\n    //         layer.forceActor(actor.x, actor.y, actor);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (actor.lastSeen) {\n    //     //         this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(\n    //     //             actor\n    //     //         );\n    //     //         this.clearCellFlag(\n    //     //             actor.lastSeen.x,\n    //     //             actor.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         actor.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.actor = actor;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     actor.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    fxAt(x, y) {\n        return this.fx.find((i) => i.isAt(x, y)) || null;\n    }\n    eachFx(cb) {\n        this.fx.forEach(cb);\n    }\n    addFx(x, y, fx) {\n        const cell = this.get(x, y);\n        if (!cell)\n            return false;\n        fx.x = x;\n        fx.y = y;\n        cell._addFx(fx);\n        this.fx.push(fx);\n        this.events.emit('fx', this, fx, true);\n        return true;\n    }\n    moveFx(fx, x, y) {\n        const current = this.get(fx.x, fx.y);\n        const updated = this.get(x, y);\n        if (!updated)\n            return false;\n        current._removeFx(fx);\n        fx.x = x;\n        fx.y = y;\n        updated._addFx(fx);\n        return true;\n    }\n    removeFx(fx) {\n        const cell = this.get(fx.x, fx.y);\n        GWU.arrayDelete(this.fx, fx);\n        if (cell) {\n            cell._removeFx(fx);\n        }\n        this.events.emit('fx', this, fx, false);\n        return true;\n    }\n    // Information\n    // isVisible(x: number, y: number): boolean {\n    //     return this.fov.isAnyKindOfVisible(x, y);\n    // }\n    hasKey(x, y) {\n        const actor = this.actorAt(x, y);\n        if (actor && actor.isKey(x, y))\n            return true;\n        const item = this.itemAt(x, y);\n        if (item && item.isKey(x, y))\n            return true;\n        return false;\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const getCh = (cell) => {\n            return cell.dump();\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    get needsRedraw() {\n        return this.hasMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v)\n            this.setMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n        else\n            this.clearMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    hasEntityFlag(x, y, flag) {\n        return this.cell(x, y).hasEntityFlag(flag);\n    }\n    hasTileFlag(x, y, flag) {\n        return this.cell(x, y).hasTileFlag(flag);\n    }\n    highlightPath(path, markCursor = true) {\n        this.clearPath();\n        path.forEach((loc) => {\n            this.setCellFlag(loc[0], loc[1], Flags.Cell.IS_HIGHLIGHTED);\n        });\n        if (markCursor && path[0]) {\n            const loc = path[0];\n            this.setCellFlag(loc[0], loc[1], Flags.Cell.IS_CURSOR);\n        }\n        this.needsRedraw = true;\n    }\n    clearPath() {\n        this.cells.forEach((c) => c.clearCellFlag(Flags.Cell.IS_CURSOR | Flags.Cell.IS_HIGHLIGHTED));\n        this.needsRedraw = true;\n    }\n    showCursor(x, y) {\n        this.clearCursor();\n        this.cell(x, y).setCellFlag(Flags.Cell.IS_CURSOR);\n        this.needsRedraw = true;\n    }\n    clearCursor() {\n        this.cells.forEach((c) => c.clearCellFlag(Flags.Cell.IS_CURSOR));\n        this.needsRedraw = true;\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        // this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile\n    // useMemory = false\n    ) {\n        return this.cell(x, y).hasTile(tile);\n        // if (!useMemory) return this.cell(x, y).hasTile(tile);\n        // return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            const name = tile;\n            tile = TILE.get(name);\n            if (!tile)\n                throw new Error('Failed to find tile: ' + name);\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clearTiles(tile);\n    }\n    tick(dt) {\n        let didSomething = false;\n        this._animations.forEach((a) => {\n            didSomething = a.tick(dt) || didSomething;\n        });\n        this._animations = this._animations.filter((a) => a.isRunning());\n        didSomething = this.fireAll('tick') || didSomething;\n        for (let layer of this.layers) {\n            if (layer && layer.tick(dt)) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cell(x, y));\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.actors = src.actors.slice();\n        this.items = src.items.slice();\n        this.flags.map = src.flags.map;\n        // this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.fireEvent(event, ctx);\n    }\n    fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        willFire.forEach((w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    cell.fireEvent(event, {\n                        force: true,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        cell.fireEvent('machine', ctx) || didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    // DRAW\n    drawInto(dest, opts) {\n        this.drawer.drawInto(dest, this, opts);\n    }\n    getAppearanceAt(x, y, dest) {\n        const cell = this.cell(x, y);\n        return this.drawer.drawCell(dest, this, cell);\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(cb) {\n        // TODO - Clairy, Telepathy, Detect, etc...\n        if (this.player) {\n            cb(this.player.x, this.player.y, this.player.visionDistance, GWU.fov.FovFlags.PLAYER);\n        }\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n    // redrawCell(x: number, y: number): void {\n    //     // if (clearMemory) {\n    //     //     this.clearMemory(x, y);\n    //     // }\n    //     this.cell(x, y).needsRedraw = true;\n    // }\n    storeMemory(x, y) {\n        const cell = this.cell(x, y);\n        cell.storeMemory();\n    }\n    makeVisible(x, y) {\n        const cell = this.cell(x, y);\n        cell.clearMemory();\n    }\n    onFovChange(x, y, isVisible) {\n        if (!isVisible) {\n            this.storeMemory(x, y);\n        }\n        else {\n            this.makeVisible(x, y);\n        }\n    }\n    // Animator\n    addAnimation(a) {\n        this._animations.push(a);\n    }\n    removeAnimation(a) {\n        GWU.arrayDelete(this._animations, a);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount =\n                                                cellCount;\n                                            map.cell(i2, j2).flags.cell &=\n                                                ~Flags.Cell.IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        // fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        // if (this.map.fov.changed) {\n        //     this.fovVersion = this.version;\n        //     this.map.fov.changed = false;\n        // }\n        // if (snap.version !== this.fovVersion) {\n        //     snap.map.fov.copy(this.map.fov);\n        // }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        // if (snap.version < this.fovVersion || this.map.fov.changed) {\n        //     this.map.fov.copy(snap.map.fov);\n        //     this.fovVersion = snap.version;\n        // }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import { Map } from './map';\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile === undefined) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === undefined) {\n        opts.boundary = 'WALL';\n    }\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    spawn(map, x = -1, y = -1, opts = {}) {\n        var _a;\n        opts.canSpawn = opts.canSpawn || GWU.TRUE;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_a = opts.machine) !== null && _a !== void 0 ? _a : 0;\n        const leader = this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addLeader(leader, map, x, y, opts)) {\n            return null;\n        }\n        return leader;\n    }\n    _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        entries.forEach(([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                this._spawnMember(kindId, map, leader, opts);\n            }\n        });\n        return count;\n    }\n    _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1, -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addMember(member, map, x, y, leader, opts)) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canSpawn(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n","export const actions = {};\nexport function installCommand(name, fn) {\n    actions[name] = fn;\n}\nexport function getCommand(name) {\n    return actions[name];\n}\n","import { installCommand } from './command';\nimport * as Actor from '../actor';\n// COMMANDS\n// this === GAME\nexport async function moveDir(actor, e) {\n    const dir = e.dir;\n    if (!actor.map || !dir)\n        return -1;\n    return Actor.actions.moveDir(this, actor, e);\n}\ninstallCommand('moveDir', moveDir);\n","import * as GWU from 'gw-utils';\nimport { installCommand } from './command';\nexport async function pickup(actor, _ev) {\n    if (!actor.map)\n        return -1;\n    const playerAction = actor.getAction('pickup');\n    if (!playerAction) {\n        GWU.message.addAt(actor.x, actor.y, 'You cannot pickup items.');\n        return actor.endTurn();\n    }\n    else {\n        // You have to do everything\n        const result = await playerAction(this, actor);\n        if (result)\n            return result; // handled\n    }\n    // Should never get here, but...\n    const standStill = actor.getAction('standStill');\n    if (!standStill)\n        throw new Error('Actor cannot stand still.');\n    return standStill(this, actor);\n}\ninstallCommand('pickup', pickup);\n","// export * from './memory';\n// export * from './system';\nexport const empty = {};\n","/*\n    Attributes\n    ========================\n\n    To configure attributes, set the defaults:\n\n    Attribute.install(')\n\n    const attr = new Attributes(10);\n\n    attr.set('str', 10);\n    attr.set('dex', 10);\n    ...\n    attr.set('chr', 10);\n\n    // to get the current value\n    attr.get('str');\n\n    // To raise an attribute permanently\n    attr.gain('chr', 1);\n\n    // To raise an attribute temporarily\n    attr.gain('chr', 1, false);\n\n    // To lower an attribute permanently\n    attr.drain('chr', 1, true);\n\n    // to lower an attribute temporarily\n    attr.drain('chr', 1);\n\n    // to restore (remove) all temporary changes\n    attr.restore();\n\n    // to add a temporary change that can be removed by itself\n    attr.addBonus('str', 1);\n\n    // to remove the bonus\n    attr.clearBonus('str', 1);\n\n    // adjustments (bonuses) are also possible via:\n    attr.adjust('str', { bonus: 1 });\n\n    // But adjustments can also set the\n    attr.adjust('str', { fixed: 14 });      // temporarily sets base\n    attr.adjust('str', { base: 21 });       // resets the base\n    attr.adjust('str', { restore: true });  // removes all bonuses/penalties\n    attr.adjust('str', { min: 10 });        // limits value\n    attr.adjust('str', { max: 30 });        // limits value\n    attr.adjust('str', { sustain: true });  // turns off lowering values\n*/\nexport class Attributes {\n    constructor(baseValues) {\n        this._base = {};\n        this._max = {};\n        this._bonus = {};\n        this._sustain = {};\n        this._value = {};\n        this.changed = null;\n        this.init(baseValues);\n    }\n    init(baseValues) {\n        for (let k in attributes) {\n            const v = typeof baseValues === 'number' ? baseValues : attributes[k];\n            this.set(k, v);\n        }\n        if (typeof baseValues !== 'number') {\n            for (let k in baseValues) {\n                this.set(k, baseValues[k]);\n            }\n        }\n    }\n    forEach(fn) {\n        Object.keys(attributes).forEach((k) => fn(this.get(k)));\n    }\n    // modifier(name: string) {\n    //     return Math.floor((this.get(name) - 10) / 2);\n    // }\n    get(name) {\n        return this._value[name] || 0;\n    }\n    set(name, value = 0) {\n        this._value[name] = value;\n        this._base[name] = value;\n        this._max[name] = value;\n        this._bonus[name] = [];\n        return value;\n    }\n    base(name) {\n        return this._base[name] || 0;\n    }\n    max(name) {\n        return this._max[name] || 0;\n    }\n    sustain(name) {\n        return this._sustain[name] || false;\n    }\n    gain(name, delta, raiseMax = true) {\n        if (delta < 0 && this._sustain[name])\n            return 0;\n        this._base[name] += delta;\n        if (raiseMax && this._base[name] > this._max[name]) {\n            this._max[name] = this._base[name];\n        }\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    drain(name, loss, lowerMax = false) {\n        if (loss < 0)\n            loss = -loss;\n        const changed = this.gain(name, -loss, false);\n        if (changed && lowerMax) {\n            this._max[name] = this._base[name];\n        }\n        return changed;\n    }\n    restore(name) {\n        this._base[name] = this._max[name];\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    addBonus(name, bonus) {\n        return this._addBonus(name, { bonus });\n    }\n    _addBonus(name, bonus) {\n        if (typeof bonus === 'number')\n            bonus = { bonus };\n        if (this._value[name] === undefined) {\n            this.set(name, 0);\n        }\n        this._bonus[name].push(bonus);\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    clearBonus(name, bonus) {\n        return this._clearBonus(name, { bonus });\n    }\n    _clearBonus(name, bonus) {\n        if (typeof bonus === 'number')\n            bonus = { bonus };\n        let arr = this._bonus[name] || [];\n        let key = JSON.stringify(bonus);\n        let index = arr.findIndex((o) => {\n            return JSON.stringify(o) == key;\n        });\n        if (index > -1) {\n            arr.splice(index, 1);\n            let old = this.get(name);\n            return this._calcValue(name) - old;\n        }\n        return 0;\n    }\n    _calcValue(name) {\n        let allAdjustments = {};\n        this._bonus[name].forEach((adj) => this._applyAdjustment(allAdjustments, adj));\n        this._sustain[name] = allAdjustments.sustain || false;\n        let value = this._base[name] || 0;\n        if (allAdjustments.fixed !== undefined) {\n            value = allAdjustments.fixed;\n        }\n        else {\n            value += allAdjustments.bonus || 0;\n            if (allAdjustments.min !== undefined) {\n                value = Math.max(allAdjustments.min, value);\n            }\n            if (allAdjustments.max !== undefined) {\n                value = Math.min(allAdjustments.max, value);\n            }\n        }\n        return (this._value[name] = value);\n    }\n    adjust(name, adj) {\n        let delta = undefined;\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        if (adj.base) {\n            delta = this.gain(name, adj.base);\n        }\n        else if (adj.restore) {\n            delta = this.restore(name);\n            if (delta == 0)\n                delta = undefined;\n        }\n        else {\n            delta = this._addBonus(name, adj);\n        }\n        if (this.changed && delta !== undefined)\n            this.changed(this, name);\n        return delta;\n    }\n    clearAdjustment(name, adj) {\n        let delta = undefined;\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        if (adj.base) {\n            delta = this.drain(name, adj.base, true);\n        }\n        else if (adj.restore) {\n            // do nothing...\n        }\n        else {\n            delta = this._clearBonus(name, adj);\n        }\n        if (this.changed && delta !== undefined)\n            this.changed(this, name);\n        return delta;\n    }\n    _applyAdjustment(total, opts) {\n        if (opts.bonus) {\n            total.bonus = (total.bonus || 0) + opts.bonus;\n        }\n        if (opts.fixed !== undefined) {\n            total.fixed = Math.max(total.fixed || 0, opts.fixed);\n        }\n        if (opts.min !== undefined) {\n            total.min = Math.max(total.min || 0, opts.min);\n        }\n        if (opts.max !== undefined) {\n            total.max = Math.max(total.max || 0, opts.max);\n        }\n        if (opts.sustain !== undefined) {\n            total.sustain = opts.sustain;\n        }\n    }\n}\nexport const attributes = {};\nexport function installAttribute(attr) {\n    if (typeof attr === 'string') {\n        attributes[attr] = 0;\n        return;\n    }\n    // clear existing\n    Object.keys(attributes).forEach((k) => {\n        delete attributes[k];\n    });\n    Object.assign(attributes, attr);\n}\nexport function makeAttributes(defaults) {\n    return new Attributes(defaults);\n}\n/*\nfunction adjust(being, ...args) {\n    let adj;\n    if (args.length == 1 && typeof args[0] == 'number') {\n        adj = RUT.Attributes.map((key) => {\n            return { name: key, bonus: args[0] };\n        });\n    } else {\n        adj = normalize_adjustment(args);\n    }\n\n    let results = adj.reduce((out, a) => {\n        let delta = undefined;\n        if (a.base) {\n            delta = being.attributes.addBase(a.name, a.base);\n        } else if (a.restore) {\n            delta = being.attributes.restoreBase(a.name);\n            if (delta == 0) delta = undefined;\n        } else {\n            delta = being.attributes.addBonus(a.name, a);\n        }\n        if (delta !== undefined) {\n            out[a.name] = delta;\n        }\n        return out;\n    }, {});\n    being.changed({ attributes: results });\n\n    return results;\n};\n\n function clearAdjustment(being, ...args) {\n    let adj;\n    if (args.length == 1 && typeof args[0] == 'number') {\n        adj = RUT.Attributes.map((key) => {\n            return { name: key, bonus: args[0] };\n        });\n    } else {\n        adj = normalize_adjustment(args);\n    }\n\n    let results = adj.reduce((out, a) => {\n        let delta = 0;\n        delta += being.attributes.clearBonus(a.name, a);\n\n        out[a.name] = delta;\n        return out;\n    }, {});\n    being.changed({ attributes: results });\n    return results;\n};\n\nRUT.Attribute.rollAttributes = function (opts = {}) {\n    let dice = [];\n    let total = 0;\n\n    if (RUT.Calc.isValue(opts)) opts = { value: opts };\n    Object.defaults(opts, RUT.Config.Attribute.rollAttributes);\n\n    let attributes = RUT.Config.Attributes;\n\n    let min_average = Math.max(opts.min_average - 5, 0);\n    let max_average = Math.min(opts.max_average - 5, RUT.Config.ATTRIBUTE_MAX);\n\n    let min_total = min_average * attributes.length;\n    let max_total = max_average * attributes.length;\n\n    do {\n        total = 0;\n        dice = [];\n        for (let i = 0; i < 18; ++i) {\n            dice.push(RUT.RNG.rollDie(3 + (i % 3)));\n            total += dice[i];\n        }\n    } while (total <= min_total || total > max_total);\n\n    let values = attributes.reduce((out, name, i) => {\n        let index = 3 * i;\n        let value = 5 + dice[index] + dice[index + 1] + dice[index + 2];\n        if (opts.value) {\n            value = RUT.Calc.calc(opts.value);\n        } else if (opts[name]) {\n            value = RUT.Calc.calc(opts[name]);\n        }\n        out[name] = value;\n        return out;\n    }, {});\n    return values;\n};\nRUT.Config.Attribute.rollAttributes = { min_average: 11, max_average: 14 };\n*/\n/*\nexport function normalize_adjustment(args: ) {\n    if (args.length == 3) {\n        let opts = args[2];\n        if (RUT.Calc.isValue(opts)) {\n            opts = { bonus: opts };\n        }\n        let name = `${args[0]}.${args[1]}`;\n        return [Object.assign({ name }, opts)];\n    }\n    if (args.length == 2) {\n        let opts = args[1];\n        if (opts === true || opts === false) {\n            opts = { has: opts };\n        } else if (RUT.Calc.isValue(opts)) {\n            opts = { bonus: opts };\n        }\n        return [Object.assign({ name: args[0] }, opts)];\n    }\n\n    let opts = args[0];\n    if (opts.name) {\n        return [opts];\n    }\n    if (opts.attribute) {\n        opts.name = opts.attribute;\n        return [opts];\n    }\n    if (opts.restore) {\n        if (opts.restore == 'all') {\n            return RUT.Attributes.map((a) => {\n                return { name: a, restore: true };\n            });\n        }\n        return [{ name: opts.restore, restore: true }];\n    }\n    if (opts.skill) {\n        opts.name = opts.skill;\n        return [opts];\n    }\n    if (opts.stat) {\n        opts.name = opts.stat;\n        return [opts];\n    }\n    if (opts.save) {\n        opts.name = opts.save;\n        return [opts];\n    }\n    // if (opts.saves) {\n    //   opts.name = opts.saves;\n    //   return [opts];\n    // }\n    if (opts.ability) {\n        opts.name = opts.ability;\n        return [opts];\n    }\n\n    // now we assume that each key is for a separate skill...\n    return Object.keys(opts).reduce((out, key) => {\n        let opt = opts[key];\n        if (key == 'reset' || key == 'restore') {\n            if (typeof opt == 'string') opt = [opt];\n            opt.forEach((a) => {\n                out.push({ name: a, restore: true });\n            });\n        } else {\n            if (typeof opt == 'number' || Array.isArray(opt)) {\n                opt = { bonus: opt };\n            } else if (opt === true || opt === false) {\n                opt = { has: opt };\n            } else if (opt == 'reset' || opt == 'restore') {\n                opt = { restore: true };\n            } else if (opt == 'sustain') {\n                opt = { sustain: true };\n            }\n            out.push(Object.assign({ name: key }, opt));\n        }\n        return out;\n    }, []);\n}\n*/\n","/*\nSkills\n\nSkills generally fall into 2 categories - binary and progressive.\n\n\n// Create a skills object\nconst skills = new Skills();\n\n// set skills\nskills.set('diving', true); // = { has: true, level: 0 }\nskills.set('diving', 10); // = { has: true, level: 10 }\n\nskills.remove('diving'); // {}\n\n// adjustments\nskills.adjust('diving', { bonus: 1 });\nskills.adjust('diving', { disadvantage: true });\nskills.adjust('diving', { advantage: 3 });\nskills.adjust('diving', { fixed: 10 });\nskills.adjust('diving', { critical: 5 });\n\n\n\n\n\n*/\nclass Skill {\n    constructor(name) {\n        this.name = name;\n    }\n    get has() {\n        return this._bool('_has');\n    }\n    get level() {\n        return this._int('_level');\n    }\n    get disadvantage() {\n        return this._bool('_disadvantage');\n    }\n    get advantage() {\n        return this._bool('_advantage');\n    }\n    get fixed() {\n        return this._int('_fixed');\n    }\n    get bonus() {\n        const b = this._int('_bonus') || 0;\n        if (!this._parent)\n            return b;\n        return b + this._parent.bonus;\n    }\n    get succeed() {\n        return this._bool('_succeed');\n    }\n    get fail() {\n        return this._bool('_fail');\n    }\n    set(value) {\n        if (value === false) {\n            this._has = false;\n            this._level = 0;\n        }\n        else {\n            this._has = true;\n            this._level = value === true ? 0 : value;\n        }\n    }\n    _value(name) {\n        if (this[name] !== undefined) {\n            // @ts-ignore\n            return this[name];\n        }\n        if (this._parent) {\n            // @ts-ignore\n            return this._parent._value(name);\n        }\n        return undefined;\n    }\n    _bool(name) {\n        return !!this._value(name);\n    }\n    _int(name) {\n        return this._value(name);\n    }\n    adjust(adj) {\n        Object.entries(adj).forEach(([key, value]) => {\n            key = '_' + key;\n            if (value === undefined)\n                return;\n            if (key === '_fixed') {\n                if (typeof value !== 'number') {\n                    throw new Error('fixed skill adjustment must be a number.');\n                }\n                value = Math.max(value, this._fixed || 0);\n            }\n            else if (key === '_bonus') {\n                if (typeof value !== 'number') {\n                    throw new Error('fixed skill adjustment must be a number.');\n                }\n                value = value + (this._bonus || 0);\n            }\n            // @ts-ignore\n            this[key] = value;\n        });\n    }\n    clear(adj) {\n        Object.keys(adj).forEach((key) => {\n            key = '_' + key;\n            // @ts-ignore\n            if (this[key] !== undefined) {\n                // @ts-ignore\n                this[key] = undefined;\n            }\n        });\n    }\n}\nexport class Skills {\n    constructor(vals = {}) {\n        this._skills = {};\n        Object.entries(vals).forEach(([key, value]) => {\n            this.set(key, value);\n        });\n    }\n    set(name, value) {\n        const s = this.get(name);\n        s.set(value);\n        return s;\n    }\n    get(name) {\n        let s = this._skills[name];\n        if (s)\n            return s;\n        s = this._skills[name] = new Skill(name);\n        const index = name.lastIndexOf('.');\n        if (index > 0) {\n            s._parent = this.get(name.substring(0, index));\n        }\n        else {\n            s.set(false);\n        }\n        return s;\n    }\n    adjust(name, adj) {\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        let s = this.get(name);\n        s.adjust(adj);\n        return s;\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Scent {\n    constructor(player) {\n        this._player = player;\n    }\n    get(x, y) {\n        if (!this._data)\n            return 0;\n        return this._data[x][y];\n    }\n    clear() {\n        if (!this._player.map)\n            return;\n        if (this._data)\n            GWU.grid.free(this._data);\n        this._data = GWU.grid.alloc(this._player.map.width, this._player.map.height);\n    }\n    update() {\n        if (!this._player.map)\n            return;\n        const scent = this._player.data.scent || 10;\n        this._data[this._player.x][this._player.y] = scent;\n        const updated = GWU.grid.alloc(this._data.width, this._data.height);\n        const map = this._player.map;\n        this._data.forEach((v, x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.blocksMove())\n                return;\n            let highest = v;\n            GWU.xy.eachNeighbor(x, y, (x1, y1) => {\n                if (!this._data.hasXY(x1, y1))\n                    return;\n                const v1 = this._data[x1][y1];\n                if (v1 > highest) {\n                    highest = v1;\n                }\n            }, true);\n            const delta = cell.hasLiquid() ? 3 : 1;\n            updated[x][y] = Math.max(0, highest - delta);\n        });\n        GWU.grid.free(this._data);\n        this._data = updated;\n    }\n    nextDir(x, y) {\n        const v = this._data[x][y] || 0;\n        if (!v)\n            return null;\n        let highest = v;\n        let highestLoc = [];\n        GWU.xy.eachNeighbor(x, y, (x1, y1) => {\n            if (!this._data.hasXY(x1, y1))\n                return;\n            const v1 = this._data[x1][y1];\n            if (v1 == highest) {\n                highestLoc.push([x1, y1]);\n            }\n            else if (v1 > highest) {\n                highestLoc = [[x1, y1]];\n                highest = v1;\n            }\n        }, false);\n        if (!highestLoc.length)\n            return null;\n        const loc = GWU.random.item(highestLoc);\n        loc[0] = loc[0] - x;\n        loc[1] = loc[1] - y;\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Actor } from '../actor';\nimport { Scent } from './scent';\nimport * as Flags from '../flags';\nexport class Player extends Actor {\n    constructor(kind) {\n        super(kind);\n        this.scent = new Scent(this);\n    }\n    interrupt() {\n        this.clearGoal();\n    }\n    endTurn(pct = 100) {\n        if (this.map) {\n            if (this.map.fov.update()) {\n                this.clearActorFlag(Flags.Actor.STABLE_COST_MAP);\n            }\n            this.scent.update();\n        }\n        return super.endTurn(pct);\n    }\n    addToMap(map, x, y) {\n        if (!super.addToMap(map, x, y))\n            return false;\n        this.scent.clear();\n        return true;\n    }\n    setGoal(x, y) {\n        const map = this._map;\n        if (!map)\n            throw new Error('No map to set goal with!');\n        if (!this._goalMap) {\n            this._goalMap = GWU.grid.alloc(map.width, map.height);\n        }\n        const goalMap = this._goalMap;\n        const mapToPlayer = this.mapToMe();\n        if (mapToPlayer[x][y] < 0 ||\n            mapToPlayer[x][y] >= GWU.path.NO_PATH ||\n            !map.fov.isRevealed(x, y)) {\n            let loc = GWU.path.getClosestValidLocation(mapToPlayer, x, y, (x, y) => !map.fov.isRevealed(x, y));\n            loc = loc || [this.x, this.y];\n            x = loc[0];\n            y = loc[1];\n        }\n        GWU.path.calculateDistances(goalMap, x, y, this.costMap());\n        return this._goalMap;\n    }\n    nextGoalStep() {\n        const map = this.map;\n        if (!map)\n            return null;\n        const goalMap = this.goalMap;\n        const step = GWU.path.nextStep(goalMap, this.x, this.y, (x, y) => map.hasActor(x, y) && map.actorAt(x, y) !== this);\n        return step;\n    }\n    pathTo(...args) {\n        let x = args[0];\n        let y = args[1];\n        if (args.length === 1) {\n            x = args[0].x;\n            y = args[0].y;\n        }\n        const map = this.map;\n        if (!map)\n            return null;\n        const mapToPlayer = this.mapToMe();\n        if (mapToPlayer[x][y] < 0 ||\n            mapToPlayer[x][y] >= GWU.path.NO_PATH ||\n            !map.fov.isRevealed(x, y)) {\n            const loc = GWU.path.getClosestValidLocation(mapToPlayer, x, y, (x, y) => !map.fov.isRevealed(x, y));\n            if (!loc)\n                return null;\n            x = loc[0];\n            y = loc[1];\n        }\n        const path = GWU.path.getPath(mapToPlayer, x, y, (x, y) => !map.fov.isRevealed(x, y), true);\n        return path;\n    }\n}\nPlayer.default = {\n    ch: '@',\n    fg: 'white',\n    name: 'You',\n    swim: true,\n};\n","import * as GWU from 'gw-utils';\nimport * as Actor from '../actor';\nimport * as Skills from './skill';\nimport * as Attributes from './attribute';\nimport { Player } from './player';\nimport * as Flags from '../flags';\nexport class PlayerKind extends Actor.ActorKind {\n    constructor(opts = {}) {\n        super((() => {\n            if (!opts.sprite) {\n                opts.ch = opts.ch || Player.default.ch;\n                opts.fg = opts.fg || Player.default.fg;\n            }\n            if (!opts.name) {\n                opts.name = Player.default.name;\n            }\n            if (opts.swim === undefined) {\n                opts.swim = Player.default.swim;\n            }\n            return opts;\n        })());\n        this.flags.actor |= Flags.Actor.IS_PLAYER;\n        this.attributes = new Attributes.Attributes(opts.attributes || {});\n        this.skills = new Skills.Skills(opts.skills || {});\n    }\n    make(options) {\n        const actor = new Player(this);\n        this.init(actor, options);\n        return actor;\n    }\n    cellCost(cell, player) {\n        const map = cell.map;\n        if (!map.fov.isRevealed(cell.x, cell.y))\n            return GWU.path.FORBIDDEN;\n        return super.cellCost(cell, player);\n    }\n}\n","import { PlayerKind } from './kind';\nimport * as Actor from '../actor';\nexport function make(id, makeOptions) {\n    let kind;\n    if (typeof id === 'string') {\n        // @ts-ignore\n        kind = Actor.get(id);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + id);\n        if (!(kind instanceof PlayerKind))\n            throw new Error('Not a player kind.');\n    }\n    else if (id instanceof PlayerKind) {\n        kind = id;\n    }\n    else {\n        kind = makeKind(id);\n    }\n    return kind.make(makeOptions);\n}\nexport function install(id, kind) {\n    if (kind instanceof PlayerKind) {\n        Actor.kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    Actor.kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof PlayerKind)\n        return id;\n    const k = Actor.kinds[id];\n    if (k && !(k instanceof PlayerKind)) {\n        throw new Error('No a player kind.');\n    }\n    return k;\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new PlayerKind(config);\n}\n","import * as GWU from 'gw-utils';\nimport { Player } from '../player/player';\nimport * as Flags from '../flags';\nexport class Viewport {\n    constructor(opts) {\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this._subject = null;\n        this.player = null;\n        this.bounds = new GWU.xy.Bounds(opts.x, opts.y, opts.width, opts.height);\n        this.bg = GWU.color.from(opts.bg || 'black');\n        this.snap = opts.snap || false;\n        this.center = opts.center || false;\n        this.filter = opts.filter || null;\n        this.lockX = opts.lock || opts.lockX || false;\n        this.lockY = opts.lock || opts.lockY || false;\n        this.scent = opts.scent || false;\n    }\n    contains(xy) {\n        return this.bounds.contains(xy);\n    }\n    get subject() {\n        return this._subject;\n    }\n    set subject(subject) {\n        this.center = !!subject;\n        if (subject) {\n            this.offsetX = subject.x - this.halfWidth();\n            this.offsetY = subject.y - this.halfHeight();\n        }\n        this._subject = subject;\n        if (subject && subject instanceof Player) {\n            this.player = subject;\n        }\n        else {\n            this.player = null;\n        }\n    }\n    set lock(v) {\n        this.lockX = v;\n        this.lockY = v;\n    }\n    toMapX(x) {\n        return x + this.offsetX - this.bounds.x;\n    }\n    toMapY(y) {\n        return y + this.offsetY - this.bounds.y;\n    }\n    toInnerX(x) {\n        return x - this.bounds.x;\n    }\n    toInnerY(y) {\n        return y - this.bounds.y;\n    }\n    halfWidth() {\n        return Math.floor(this.bounds.width / 2);\n    }\n    halfHeight() {\n        return Math.floor(this.bounds.height / 2);\n    }\n    centerOn(map, x, y) {\n        this.center = true;\n        this.subject = { x, y, map };\n    }\n    showMap(map, x = 0, y = 0) {\n        this.subject = { x, y, map };\n        this.offsetX = x;\n        this.offsetY = y;\n        this.center = false;\n        this.snap = false;\n    }\n    updateOffset() {\n        if (!this._subject) {\n            this.offsetX = 0;\n            this.offsetY = 0;\n            return;\n        }\n        const subject = this._subject;\n        const map = subject.map;\n        const bounds = map;\n        if (subject && map.hasXY(subject.x, subject.y)) {\n            if (this.snap) {\n                let left = this.offsetX;\n                let right = this.offsetX + this.bounds.width;\n                let top = this.offsetY;\n                let bottom = this.offsetY + this.bounds.height;\n                // auto center if outside the viewport\n                if (subject.x < left || subject.x > right) {\n                    left = this.offsetX = subject.x - this.halfWidth();\n                    right = left + this.bounds.width;\n                }\n                if (subject.y < top || subject.y > bottom) {\n                    top = this.offsetY = subject.y - this.halfHeight();\n                    bottom = top + this.bounds.height;\n                }\n                const edgeX = Math.floor(this.bounds.width / 5);\n                const edgeY = Math.floor(this.bounds.height / 5);\n                const thirdW = Math.floor(this.bounds.width / 3);\n                if (left + edgeX >= subject.x) {\n                    this.offsetX = Math.max(0, subject.x + thirdW - this.bounds.width);\n                }\n                else if (right - edgeX <= subject.x) {\n                    this.offsetX = Math.min(subject.x - thirdW, bounds.width - this.bounds.width);\n                }\n                const thirdH = Math.floor(this.bounds.height / 3);\n                if (top + edgeY >= subject.y) {\n                    this.offsetY = Math.max(0, subject.y + thirdH - this.bounds.height);\n                }\n                else if (bottom - edgeY <= subject.y) {\n                    this.offsetY = Math.min(subject.y - thirdH, bounds.height - this.bounds.height);\n                }\n            }\n            else if (this.center) {\n                this.offsetX = subject.x - this.halfWidth();\n                this.offsetY = subject.y - this.halfHeight();\n            }\n            else {\n                this.offsetX = subject.x;\n                this.offsetY = subject.y;\n            }\n        }\n        if (this.lockX && map) {\n            this.offsetX = GWU.clamp(this.offsetX, 0, map.width - this.bounds.width);\n        }\n        if (this.lockY && map) {\n            this.offsetY = GWU.clamp(this.offsetY, 0, map.height - this.bounds.height);\n        }\n    }\n    draw(buffer) {\n        if (!this._subject)\n            return false;\n        const map = this._subject.map;\n        if (!map || !map.needsRedraw)\n            return false;\n        const fov = map.fov;\n        buffer.blackOutRect(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height, this.bg);\n        if (!this._subject) {\n            return false;\n        }\n        this.updateOffset();\n        const drawer = map.drawer;\n        drawer.scent = this.scent;\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < this.bounds.width; ++x) {\n            for (let y = 0; y < this.bounds.height; ++y) {\n                const mapX = x + this.offsetX;\n                const mapY = y + this.offsetY;\n                if (map.hasXY(mapX, mapY)) {\n                    const cell = map.cell(mapX, mapY);\n                    map.drawer.drawCell(mixer, map, cell, fov);\n                }\n                else {\n                    mixer.draw(' ', this.bg, this.bg); // blackOut\n                }\n                if (this.filter) {\n                    this.filter(mixer, mapX, mapY, map);\n                }\n                buffer.drawSprite(x + this.bounds.x, y + this.bounds.y, mixer);\n            }\n        }\n        // map.clearMapFlag(GWM.flags.Map.MAP_CHANGED);\n        return true;\n    }\n    tick(_dt) {\n        if (!this._subject)\n            return false;\n        const map = this._subject.map;\n        if (!map)\n            return false;\n        if (!map.hasMapFlag(Flags.Map.MAP_DANCES) || !GWU.cosmetic.chance(10)) {\n            return false;\n        }\n        map.eachCell((c) => {\n            if (c.hasCellFlag(Flags.Cell.COLORS_DANCE) &&\n                map.fov.isAnyKindOfVisible(c.x, c.y) &&\n                GWU.cosmetic.chance(2)) {\n                c.needsRedraw = true;\n            }\n        });\n        map.needsRedraw = true;\n        return true;\n    }\n    mousemove(ev) {\n        if (!this.bounds.contains(ev.x, ev.y))\n            return false;\n        if (!this.player)\n            return false;\n        const map = this.player.map;\n        if (!map)\n            return false;\n        return this.showPath(this.toInnerX(ev.x), this.toInnerY(ev.y));\n    }\n    click(ev) {\n        if (!this.bounds.contains(ev.x, ev.y))\n            return false;\n        if (!this.player)\n            return false;\n        if (this.player.hasGoal()) {\n            this.player.clearGoal();\n        }\n        else {\n            this.player.setGoal(this.toInnerX(ev.x), this.toInnerY(ev.y));\n        }\n        return true;\n    }\n    showPath(x, y) {\n        if (!this.player)\n            return false;\n        const map = this.player.map;\n        if (!map)\n            return false;\n        // if (!this.player.hasGoal()) return false;\n        // console.log('mouse', ev.x, ev.y);\n        const path = this.player.pathTo(x, y);\n        if (path) {\n            map.highlightPath(path, true);\n        }\n        else {\n            map.clearPath();\n        }\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Messages {\n    constructor(opts) {\n        this.needsDraw = true;\n        this.bounds = new GWU.xy.Bounds(opts.x, opts.y, opts.width, opts.height);\n        this.bg = GWU.color.from(opts.bg || 'darkest_gray');\n        this.fg = GWU.color.from(opts.fg || 'purple');\n        if (!this.bounds.height)\n            throw new Error('Must provde a height for messages widget.');\n        this.cache = new GWU.message.MessageCache({\n            width: this.bounds.width,\n            length: opts.archive || 40,\n            match: () => {\n                this.needsDraw = true;\n            },\n        });\n    }\n    contains(xy) {\n        return this.bounds.contains(xy);\n    }\n    clear() {\n        this.cache.clear();\n        this.needsDraw = true;\n    }\n    click(e, game) {\n        if (!this.bounds.contains(e))\n            return false;\n        return this.showArchive(game);\n    }\n    confirmAll() {\n        this.cache.confirmAll();\n        this.needsDraw = true;\n    }\n    draw(buffer) {\n        if (!this.needsDraw)\n            return false;\n        this.needsDraw = false;\n        const isOnTop = this.bounds.y < 10;\n        // black out the message area\n        buffer.fillRect(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height, ' ', this.bg, this.bg);\n        this.cache.forEach((line, confirmed, i) => {\n            if (i >= this.bounds.height)\n                return;\n            const localY = isOnTop ? this.bounds.height - i - 1 : i;\n            const y = localY + this.bounds.y;\n            buffer.drawText(this.bounds.x, y, line, this.fg);\n            if (confirmed && this.bg) {\n                buffer.mix(this.bg, 50, this.bounds.x, y, this.bounds.width, 1);\n            }\n        });\n        return true;\n    }\n    showArchive(game) {\n        if (this.cache.length <= this.bounds.height)\n            return false;\n        return showArchive(this, game).then(() => this.confirmAll());\n    }\n}\nexport class MessageArchive extends GWU.widget.Widget {\n    constructor(layer, source) {\n        super(layer, {\n            id: 'ARCHIVE',\n            tag: 'messages',\n            height: source.bounds.height,\n            width: source.bounds.width,\n            bg: source.bg,\n            x: 0,\n            y: 0,\n            tabStop: true,\n            depth: 100, // I'm on top\n        });\n        this.mode = 'forward';\n        this._timeout = null;\n        this.source = source;\n        this.isOnTop = this.source.bounds.y < 10;\n        this.bounds.height = this.isOnTop\n            ? layer.height - source.bounds.y\n            : source.bounds.bottom;\n        this.totalCount = Math.min(source.cache.length, this.isOnTop\n            ? layer.height - this.source.bounds.top\n            : this.source.bounds.bottom);\n        this.shown = source.bounds.height;\n        this._timeout = this.layer.setTimeout(() => this._forward(), 16);\n        // confirm them as they are right now...\n        this.source.cache.confirmAll();\n    }\n    contains() {\n        return true; // Eat all mouse activity\n    }\n    finish() {\n        this.layer.finish();\n    }\n    keypress(e) {\n        return this.click(e);\n    }\n    click(_e) {\n        if (this.mode === 'ack') {\n            this.mode = 'reverse';\n            this.layer.needsDraw = true;\n            if (this._timeout) {\n                this.layer.clearTimeout(this._timeout);\n            }\n            this._timeout = this.layer.setTimeout(() => this._reverse(), 16);\n        }\n        else if (this.mode === 'reverse') {\n            this.finish();\n        }\n        else {\n            this.mode = 'ack';\n            this.shown = this.totalCount;\n            if (this._timeout) {\n                this.layer.clearTimeout(this._timeout);\n                this._timeout = null;\n            }\n            this.layer.needsDraw = true;\n        }\n        return true;\n    }\n    _forward() {\n        // console.log('forward');\n        ++this.shown;\n        this._timeout = null;\n        this.layer.needsDraw = true;\n        if (this.shown < this.totalCount) {\n            this._timeout = this.layer.setTimeout(() => this._forward(), 16);\n        }\n        else {\n            this.mode = 'ack';\n            this.shown = this.totalCount;\n        }\n        return true;\n    }\n    _reverse() {\n        // console.log('reverse');\n        --this.shown;\n        this._timeout = null;\n        if (this.shown <= this.source.bounds.height) {\n            this.finish();\n        }\n        else {\n            this.layer.needsDraw = true;\n            this._timeout = this.layer.setTimeout(() => this._reverse(), 16);\n        }\n        return true;\n    }\n    _draw(buffer) {\n        let fadePercent = 0;\n        // let reverse = this.mode === 'reverse';\n        // Count the number of lines in the archive.\n        // let totalMessageCount = this.totalCount;\n        const isOnTop = this.isOnTop;\n        const dbuf = buffer;\n        const fg = GWU.color.from(this.source.fg);\n        // const dM = reverse ? -1 : 1;\n        // const startM = reverse ? totalMessageCount : this.bounds.height;\n        // const endM = reverse\n        //     ? this.bounds.height + dM + 1\n        //     : totalMessageCount + dM;\n        const startY = isOnTop\n            ? this.shown - 1\n            : this.bounds.bottom - this.shown;\n        const endY = isOnTop ? 0 : this.bounds.bottom - 1;\n        const dy = isOnTop ? -1 : 1;\n        dbuf.fillRect(this.source.bounds.x, Math.min(startY, endY), this.bounds.width, this.shown, ' ', this._used.bg, this._used.bg);\n        this.source.cache.forEach((line, _confirmed, j) => {\n            const y = startY + j * dy;\n            if (isOnTop) {\n                if (y < endY)\n                    return;\n            }\n            else if (y > endY)\n                return;\n            fadePercent = Math.floor((50 * j) / this.shown);\n            const fgColor = fg.mix(this._used.bg, fadePercent);\n            dbuf.drawText(this.source.bounds.x, y, line, fgColor, this._used.bg);\n        });\n        if (this.mode === 'ack') {\n            const y = this.isOnTop ? 0 : dbuf.height - 1;\n            const x = this.source.bounds.x > 8\n                ? this.source.bounds.x - 8 // to left of box\n                : Math.min(this.source.bounds.x + this.bounds.width, // just to right of box\n                dbuf.width - 8 // But definitely on the screen - overwrite some text if necessary\n                );\n            dbuf.wrapText(x, y, 8, '--DONE--', this._used.bg, this._used.fg);\n        }\n        return true;\n    }\n}\nexport async function showArchive(widget, game) {\n    const layer = new GWU.widget.WidgetLayer(game.ui);\n    // @ts-ignore\n    const w = new MessageArchive(layer, widget);\n    await layer.run();\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as Tile from '../tile/tile';\nGWU.color.install('flavorText', 50, 40, 90);\nGWU.color.install('flavorPrompt', 100, 90, 20);\nexport class Flavor {\n    constructor(opts) {\n        this.needsDraw = true;\n        this.text = '';\n        this.fg = GWU.color.from(opts.fg || 'white');\n        this.bg = GWU.color.from(opts.bg || 'black');\n        this.promptFg = GWU.color.from(opts.promptFg || 'gold');\n        this.bounds = new GWU.xy.Bounds(opts.x, opts.y, opts.width, 1);\n        this.overflow = opts.overflow || false;\n        this.isPrompt = false;\n    }\n    showText(text) {\n        this.text = text;\n        this.isPrompt = false;\n        this.needsDraw = true;\n        return this;\n    }\n    clear() {\n        this.text = '';\n        this.isPrompt = false;\n        this.needsDraw = true;\n        return this;\n    }\n    showPrompt(text) {\n        this.text = text;\n        this.isPrompt = true;\n        this.needsDraw = true;\n        return this;\n    }\n    getFlavorText(map, x, y, fov) {\n        const cell = map.cell(x, y); // KNOWLEDGE / MEMORY !!!\n        let buf;\n        // let magicItem;\n        // let standsInTerrain;\n        // let subjectMoving;\n        // let prepositionLocked = false;\n        // let subject;\n        // let verb;\n        // let preposition;\n        let object = '';\n        // let adjective;\n        const isAnyKindOfVisible = fov ? fov.isAnyKindOfVisible(x, y) : true;\n        const isDirectlyVisible = fov ? fov.isDirectlyVisible(x, y) : true;\n        const isRemembered = fov ? fov.isRevealed(x, y) : false;\n        const isMapped = fov ? fov.isMagicMapped(x, y) : false;\n        let intro;\n        if (isDirectlyVisible) {\n            intro = 'You see';\n        }\n        else if (isAnyKindOfVisible) {\n            intro = 'You sense';\n        }\n        else if (isRemembered) {\n            intro = 'You remember';\n        }\n        else if (isMapped) {\n            intro = 'You expect to see';\n        }\n        else {\n            return '';\n        }\n        const actor = cell.hasActor() ? map.actorAt(x, y) : null;\n        // const player = actor?.isPlayer() ? actor : null;\n        const theItem = cell.hasItem() ? map.itemAt(x, y) : null;\n        const standsInTile = cell.hasTileFlag(Flags.Tile.T_STAND_IN_TILE);\n        let needObjectArticle = false;\n        if (actor) {\n            object = actor.getFlavor({\n                color: false,\n                article: true,\n                action: true,\n            });\n            needObjectArticle = true;\n        }\n        else if (theItem) {\n            object = theItem.getFlavor({ color: false, article: true });\n            needObjectArticle = true;\n        }\n        let article = standsInTile ? ' in ' : ' on ';\n        const groundTile = cell.depthTile(Flags.Depth.GROUND) || Tile.NULL;\n        const surfaceTile = cell.depthTile(Flags.Depth.SURFACE);\n        const liquidTile = cell.depthTile(Flags.Depth.LIQUID);\n        // const gasTile = cell.depthTile(Flags.Depth.GAS);\n        let surface = '';\n        if (surfaceTile) {\n            const tile = surfaceTile;\n            if (needObjectArticle) {\n                needObjectArticle = false;\n                object += ' on ';\n            }\n            if (tile.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n                article = ' over ';\n            }\n            surface = surfaceTile.getFlavor() + article;\n        }\n        let liquid = '';\n        if (liquidTile) {\n            liquid = liquidTile.getFlavor() + ' covering ';\n            if (needObjectArticle) {\n                needObjectArticle = false;\n                object += ' in ';\n            }\n        }\n        if (needObjectArticle) {\n            needObjectArticle = false;\n            object += ' on ';\n        }\n        let ground = groundTile.getFlavor({ article: true });\n        buf = GWU.text.apply('{{intro}} {{text}}.', {\n            intro,\n            text: object + surface + liquid + ground,\n        });\n        return buf;\n    }\n    draw(buffer) {\n        if (!this.needsDraw)\n            return false;\n        this.needsDraw = false;\n        buffer.fillRect(this.bounds.x, this.bounds.y, this.bounds.width, 1, ' ', this.bg, this.bg);\n        buffer.drawText(this.bounds.x, this.bounds.y, this.text, this.fg, this.bg, this.bounds.width, 'left');\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Command from '../command';\nimport * as Actor from '../actor';\nimport * as Viewport from './viewport';\nimport * as Message from './message';\nimport * as Flavor from './flavor';\nexport class Game {\n    constructor(opts) {\n        this.result = undefined;\n        this.mouse = false;\n        this.fov = false;\n        this.scent = false;\n        this.running = false;\n        this.keymap = {};\n        this.ui = opts.ui || new GWU.ui.UI(opts);\n        this._makeMap = opts.makeMap;\n        this._makePlayer = opts.makePlayer;\n        this._startMap = opts.startMap;\n        if (opts.keymap) {\n            Object.assign(this.keymap, opts.keymap);\n        }\n        if (opts.mouse) {\n            this.mouse = true;\n        }\n        if (typeof opts.messages === 'number') {\n            opts.messages = { size: opts.messages };\n        }\n        if (opts.flavor === true) {\n            opts.flavor = {};\n        }\n        else if (opts.flavor === false) {\n            delete opts.flavor;\n        }\n        opts.viewport = opts.viewport || {};\n        const _opts = opts;\n        _opts.viewport.x = 0;\n        _opts.viewport.y = 0;\n        _opts.viewport.width = this.ui.width;\n        _opts.viewport.height = this.ui.height;\n        this._initMenu(_opts);\n        this._initSidebar(_opts);\n        if (opts.messages !== undefined)\n            this._initMessages(_opts);\n        if (opts.flavor !== undefined)\n            this._initFlavor(_opts);\n        this._initViewport(_opts);\n    }\n    get width() {\n        return this.viewport.bounds.width;\n    }\n    get height() {\n        return this.viewport.bounds.height;\n    }\n    _initMenu(_opts) { }\n    _initSidebar(_opts) { }\n    _initMessages(opts) {\n        const messOpts = opts.messages || {};\n        messOpts.size = messOpts.size || messOpts.y || 4;\n        if (messOpts.size < 0) {\n            // bottom\n            const viewInit = opts.viewport;\n            messOpts.x = viewInit.x;\n            messOpts.y = this.ui.height + messOpts.size; // length < 0\n            messOpts.width = viewInit.width;\n            messOpts.height = -messOpts.size;\n            opts.viewport.height -= messOpts.height;\n        }\n        else {\n            // top\n            const viewInit = opts.viewport;\n            messOpts.x = viewInit.x;\n            messOpts.y = viewInit.y;\n            messOpts.width = viewInit.width;\n            messOpts.height = messOpts.size;\n            viewInit.y += messOpts.size;\n            viewInit.height -= messOpts.size;\n        }\n        this.messages = new Message.Messages(messOpts);\n    }\n    _initFlavor(opts) {\n        const flavOpts = opts.flavor || {};\n        const viewOpts = opts.viewport;\n        if (viewOpts.y === 0) {\n            // messages must be on bottom (or not there)\n            flavOpts.x = viewOpts.x;\n            flavOpts.y = viewOpts.height - 1;\n            flavOpts.width = viewOpts.width;\n            viewOpts.height -= 1;\n        }\n        else {\n            // messages on top\n            flavOpts.x = viewOpts.x;\n            flavOpts.y = viewOpts.y;\n            flavOpts.width = viewOpts.width;\n            viewOpts.y += 1;\n            viewOpts.height -= 1;\n        }\n        this.flavor = new Flavor.Flavor(flavOpts);\n    }\n    _initViewport(opts) {\n        const viewOpts = opts.viewport || {};\n        const viewInit = viewOpts;\n        viewInit.lock = true;\n        this.viewport = new Viewport.Viewport(viewInit);\n    }\n    async start() {\n        this.layer = new GWU.ui.Layer(this.ui);\n        this.buffer = this.layer.buffer;\n        this.io = this.layer.io;\n        this.running = true;\n        this.scheduler = new GWU.scheduler.Scheduler();\n        if (this.messages)\n            this.messages.clear();\n        this.map = this._makeMap.call(this, 0);\n        this.player = this._makePlayer.call(this);\n        this.map.setPlayer(this.player);\n        this.viewport.subject = this.player;\n        this._startMap.call(this, this.map, this.player);\n        if (this.scent) {\n            this.map.drawer.scent = this.scent;\n        }\n        this.map.actors.forEach((a) => {\n            this.scheduler.push(a, a.moveSpeed());\n        });\n        this.map.fov.update();\n        this.draw();\n        while (this.running) {\n            await this.animate();\n            await this.runTurn();\n        }\n        return this.result;\n    }\n    draw() {\n        this.viewport.draw(this.buffer);\n        if (this.messages)\n            this.messages.draw(this.buffer);\n        if (this.flavor)\n            this.flavor.draw(this.buffer);\n        if (this.buffer.changed) {\n            this.buffer.render();\n        }\n        this.buffer.changed = false;\n    }\n    finish(result) {\n        this.running = false;\n        this.layer.finish();\n        this.result = result;\n    }\n    async runTurn() {\n        const actor = this.scheduler.pop();\n        if (!actor) {\n            this.finish();\n            return;\n        }\n        let nextTime = 0;\n        while (nextTime === 0) {\n            if (actor === this.player) {\n                nextTime = await this.playerTurn(actor);\n            }\n            else if ('act' in actor) {\n                nextTime = await actor.act(this);\n            }\n            else if ('tick' in actor) {\n                nextTime = await actor.tick(); // dt === 100 -- TODO\n            }\n            this.draw();\n        }\n        if (nextTime >= 0) {\n            this.scheduler.push(actor, nextTime);\n        }\n    }\n    async animate() {\n        if (!this.layer.io._tweens.length)\n            return;\n        const timer = setInterval(() => {\n            const tick = GWU.io.makeTickEvent(16);\n            this.layer.io.enqueue(tick);\n        }, 16);\n        while (this.layer.io._tweens.length) {\n            const ev = await this.layer.io.nextTick();\n            if (ev && ev.dt) {\n                this.layer.io._tweens.forEach((a) => a && a.tick(ev.dt));\n                this.layer.io._tweens = this.layer.io._tweens.filter((a) => a && a.isRunning());\n            }\n            this.draw();\n        }\n        clearInterval(timer);\n    }\n    async playerTurn(player) {\n        let done = 0;\n        const timer = setInterval(() => {\n            const tick = GWU.io.makeTickEvent(16);\n            // console.log('-tick', Date.now());\n            this.layer.io.enqueue(tick);\n        }, 16);\n        let elapsed = 0;\n        while (!done && this.running) {\n            const ev = await this.layer.io.nextEvent(-1);\n            if (ev) {\n                if (ev.type === GWU.io.KEYPRESS) {\n                    this.map.clearPath();\n                    if (this.player.hasGoal()) {\n                        this.player.clearGoal();\n                    }\n                    else {\n                        const handler = GWU.io.handlerFor(ev, this.keymap);\n                        if (handler) {\n                            if (typeof handler === 'string') {\n                                const action = Command.getCommand(handler);\n                                if (action) {\n                                    done = await action.call(this, player, ev);\n                                }\n                            }\n                            else if (typeof handler === 'function') {\n                                done = await handler.call(this, player, ev);\n                            }\n                        }\n                    }\n                }\n                else if (ev.type === GWU.io.TICK) {\n                    this.layer.tick(ev); // timeouts\n                    elapsed += ev.dt || 16;\n                    if (this.viewport.tick(ev.dt)) {\n                        this.draw();\n                    }\n                    // console.log('-- event', elapsed);\n                }\n                else if (this.mouse && ev.type === GWU.io.MOUSEMOVE) {\n                    if (this.viewport.mousemove(ev)) {\n                        if (this.flavor) {\n                            const x = this.viewport.toInnerX(ev.x);\n                            const y = this.viewport.toInnerY(ev.y);\n                            const text = this.flavor.getFlavorText(this.map, x, y, this.map.fov);\n                            this.flavor.showText(text);\n                        }\n                        this.draw();\n                    }\n                }\n                else if (this.mouse && ev.type === GWU.io.CLICK) {\n                    // console.log('click', ev.x, ev.y);\n                    if (this.viewport.contains(ev)) {\n                        this.viewport.click(ev);\n                    }\n                    else if (this.messages && this.messages.contains(ev)) {\n                        await this.messages.showArchive(this);\n                    }\n                }\n            }\n            if (elapsed < 50) {\n                continue;\n            }\n            elapsed -= 50;\n            if (this.player.hasGoal()) {\n                const step = this.player.nextGoalStep();\n                if (!step) {\n                    this.player.clearGoal();\n                }\n                else {\n                    const action = Actor.getAction('moveDir');\n                    if (!action)\n                        throw new Error('Failed to find moveDir action.');\n                    done = await action(this, this.player, { dir: step });\n                    if (done && this.player.hasGoal()) {\n                        const goalMap = this.player.goalMap;\n                        this.viewport.showPath(goalMap.x, goalMap.y);\n                    }\n                }\n            }\n        }\n        clearInterval(timer);\n        return done;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Tile from './tile';\nimport '../effect/handlers';\nimport '../effect/types';\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([30, 30, 30]).rand(20, 0, 0, 0),\n    bg: GWU.color.from([2, 2, 10]).rand(0, 2, 2, 0),\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: 'TILE:DOOR_OPEN',\n        open: 'TILE:DOOR_OPEN_ALWAYS',\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            effects: 'TILE:DOOR~!',\n        },\n        enter: null,\n        open: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: 'EMIT:UP_STAIRS',\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: 'EMIT:DOWN_STAIRS',\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: GWU.color.from([25, 28, 60]).dance(20, 0, 4, 15),\n    bg: GWU.color.from([10, 15, 41]).dance(20, 5, 5, 5),\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([5, 8, 10]).dance(10, 0, 4, 15),\n    bg: GWU.color.from([10, 30, 30]).dance(6, 0, 10, 10),\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    flags: 'T_SHALLOW_WATER',\n    // depth: 'LIQUID', // 'SURFACE'?\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '\\u2630',\n    fg: [80, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_LIST_IN_SIDEBAR","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","T_IS_DEEP_LIQUID","T_SHALLOW_WATER","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_SAFE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","lastId","kind","_map","key","machineHome","depth","light","flags","entity","next","id","map","setEntityFlag","Flags.Entity","L_ON_MAP","addToMap","clearEntityFlag","removeFromMap","sprite","isDestroyed","hasEntityFlag","L_DESTROYED","other","constructor","copy","Object","assign","canBeSeen","tag","tags","includes","matches","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","buffer","bounds","drawStatus","dest","_observer","drawSprite","name","EntityKind","config","requireTileFlags","forbidTileFlags","avoidTileFlags","requireTileTags","forbidTileTags","avoidTileTags","flavor","description","make","split","t","trim","slice","from","Flags.Tile","init","_entity","hasAllTileFlags","hasTileFlag","T_BRIDGE","length","hasAllTileTags","hasAnyTileTag","_opts","mixer","Mixer","getAppearanceAt","wrapText","width","makeOpts","installedActions","installAction","fn","toLowerCase","getAction","Status","_set","_time","_count","_done","_value","changed","clearTime","clearCount","setOff","_update","done","count","Math","max","_addDone","value","range","current","delta","status","cleared","noticed","removeTime","rec","was","doneFn","Stats","_max","_rate","round","get","set","v","amount","allowOver","min","raiseValue","gain","lowerValue","drain","turns","r","elapsed","undefined","type","c","Error","Entity.Entity","super","ai","leader","items","visionDistance","data","_costMap","_goalMap","_mapToMe","actor","Flags.Depth","ACTOR","stats","grid","free","hasActorFlag","Flags.Actor","IS_PLAYER","action","actions","bump","IS_VISIBLE","WAS_VISIBLE","canSee","isAbleToSee","isPlayer","fov","isDirectlyVisible","xy","distanceBetween","forLineBetween","i","j","blocksVision","canSeeOrSense","isAbleToSense","isAnyKindOfVisible","game","startedVisible","player","setActorFlag","console","log","clearActorFlag","becameVisible","interrupt","endTurn","moveSpeed","pct","floor","_other","_item","item","pickupItem","dropItem","mapChanged","STABLE_COST_MAP","staleMap","alloc","height","update","_v","cellCost","goalMap","path","calculateDistances","costMap","handlers","installHandler","handler","effectTypes","installType","startsWith","endPos","indexOf","tile","substring","effects","Array","isArray","effect","entries","forEach","JSON","stringify","typeName","shift","makeFn","e","push","parts","installedEffects","trigger","bind","install","obj","clone","_a","_b","_c","_d","index","dissipate","priority","groundTile","article","tileMech","hasEffect","T_IS_FLAMMABLE","arraysIntersect","every","blocksMove","T_PATHING_BLOCKER","arg","color","result","fg","toString","options","_e","_f","base","extends","tiles","text","replace","search","Number","parseInt","makeEffect","message","Flags.TileMech","ch","bg","opacity","all","args","NULL","BasicEffect","chance","seen","Flags.Effect","endsWith","parseFloat","loc","ctx","force","rng","random","didSomething","eff","nextAlways","E_NEXT_ALWAYS","makeBasicEffect","makeSpreadEffect","SpreadEffect","grow","decrement","matchTile","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","spawnMap","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","E_NEXT_EVERYWHERE","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","cellIsOk","isStart","hasXY","hasCellFlag","Flags.Cell","EVENT_PROTECTED","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","hasTile","dir","x2","y2","madeChange","startProb","probDec","fill","DIRS","clearAll","clear","clearDepth","GAS","LIQUID","SURFACE","GROUND","blockingMap","eachActor","a","matchingLocNear","removeActor","addActor","eachItem","removeItem","addItem","makeEmitHandler","emitEffect","events","emit","makeMessageHandler","src","info","msg","messageEffect","aware","addAt","makeActivateMachine","activateMachine","machine","machineId","makeTileHandler","superpriority","blockedByActors","blockedByItems","tileEffect","setTile","makeClearHandler","layers","reduce","out","ALL_LAYERS","clearEffect","_ctx","makeFeatureHandler","featureEffect","feat","Effect.installedEffects","makeNourishEffect","nourishEffect","actorAt","adjust","n","default","pukeMsg","makeStatEffect","stat","statEffect","values","NEVER_SEEN","TILE.NULL","chokeCount","memory","TILE.tiles","snapshot","makeMixer","TILE.get","hasStableSnapshot","STABLE_SNAPSHOT","hasStableMemory","setCellFlag","hasItem","hasActor","clearCellFlag","needsRedraw","getSnapshot","checkEntities","some","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","withEntities","CHANGED","TILE.Tile","highestPriorityTile","cb","find","blocksPathing","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","T_IS_DOOR","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","T_ANY_LIQUID","blocksLayer","blockedByOtherLayers","highestPriority","currentGround","depthTile","wantGround","glowLightChanged","setMapFlag","Flags.Map","MAP_SIDEBAR_TILES_CHANGED","CAUGHT_FIRE_THIS_TURN","blackOut","tileFlag","tileMechFlag","hasTileMechFlag","event","ev","_activate","itemAt","hasItems","foundIndex","_actor","actors","HAS_FX","fx","fxAt","_fx","quantity","ITEM","messageYou","messageThe","messageA","addHelper","PainMessages","msgs","_msgs","m","add","singular","clamp","_format","painMessages","ais","AICtx","target","distanceMap","async","typical","isDead","willAttack","damagePct","getPct","morale","chargeChance","retreatChance","lastSawPlayer","clearGoal","start","canAttack","attack","tooFarFrom","canMoveToward","moveToward","tooCloseTo","canMoveAwayFrom","moveAwayFrom","hasGoal","setGoal","moveTowardGoal","scent","nextDir","moveDir","wanderOpt","object","firstOpt","matchingLoc","NO_PATH","step","nextStep","canPass","wander","idle","standStill","center","_game","_target","distanceFromTo","safetyMap","costGrid","FORBIDDEN","eachCell","AVOIDED","rescan","ActorKind","Entity.EntityKind","DEFAULT","DEFAULT_ACTOR","vision","normal","health","AI.make","waterOnly","lavaOnly","swim","fly","list","remove","OBSTRUCTION","OK","makeOptions","makeKind","kinds","randomKind","match","forbidTags","filter","k","bumpActions","getBumpActions","selfName","selfAction","ctx2","flashSprite","duration","animator","Entity.make","addFx","tween","visible","to","repeat","repeatDelay","onUpdate","removeFx","io","loop","addAnimation","hit","fadeInOut","yoyo","onFinish","moveSprite","source","ceil","maxAxisFromTo","speed","isLoc","vals","stepFn","stopBeforeWalls","moveFx","stop","isInShape","shape","cx","cy","allowCenter","sx","abs","sy","dirFromTo","fade","stopAtWalls","line","forLineFromTo","promises","lastIndex","Promise","radius","checkExplosionOpts","FOV","isBlocked","calculate","x1","y1","minX","minY","maxX","maxY","_obj","success","newX","newY","currentCell","newCell","try","FX.hit","canRemoveActor","canAddActor","moveActor","rate","dirIndex","number","pickup","quiet","avoidsItem","itemAction","canAddItem","pain","made","ItemKind","Flags.Item","isDoor","MapLayer","properties","_x","_y","_tile","_dt","TileLayer","GasLayer","volume","startingVolume","spread","d","clearTile","total","highestVolume","startingTile","highestTile","updateCellVolume","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","fire","TM_EXPLOSIVE_PROMOTE","x0","y0","fireEvent","highlightColor","BasicDrawer","Buffer","offsetX","offsetY","clearMapFlag","MAP_DANCES","drawCell","needSnapshot","getAppearance","putSnapshot","COLORS_DANCE","applyLight","separate","L_VISUALLY_DISTINCT","IS_CURSOR","invert","mix","IS_HIGHLIGHTED","s","colors","red","ground","surface","liquid","gas","drawInto","cosmetic","hasFx","dances","bake","isVisible","isRevealed","getLight","multiply","isCursor","scale","_animations","EventEmitter","seed","machineCount","drawer","cells","LightSystem","alwaysVisible","callback","onFovChange","FovSystem","initLayers","setPlayer","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","layer","isAt","fireEffects","_addItem","_fireAddItemEffects","_removeItem","_fireRemoveItemEffects","arrayDelete","isKey","hasPlayer","_addActor","_fireAddActorEffects","_removeActor","_fireRemoveActorEffects","_addFx","updated","_removeFx","fmt","dump","hasMapFlag","MAP_NEEDS_REDRAW","markCursor","clearPath","clearCursor","l","boundary","isBoundaryXY","clearTiles","dt","tick","isRunning","fireAll","willFire","EVENT_FIRED_THIS_TURN","promoteChance","w","originX","originY","eachGlowLight","_cb","FovFlags","PLAYER","isDark","storeMemory","clearMemory","makeVisible","updateChokepoints","updateCounts","passMap","passableArcCount","oldX","CLOCK_DIRS","oldY","cellCount","floodFillCount","i2","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","h","updateChokeCounts","layerVersion","lightVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","prefab","charToTile","isStringArray","len","members","horde","frequency","Flags","canSpawn","TRUE","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted","installCommand","getCommand","Actor.actions.moveDir","_ev","playerAction","Attributes","baseValues","_base","_bonus","_sustain","attributes","keys","raiseMax","old","_calcValue","loss","lowerMax","bonus","_addBonus","_clearBonus","arr","findIndex","o","splice","allAdjustments","adj","_applyAdjustment","sustain","fixed","restore","Skill","has","_bool","level","_int","disadvantage","advantage","b","_parent","succeed","fail","_has","_level","_fixed","Skills","_skills","lastIndexOf","Scent","_player","_data","highest","v1","hasLiquid","highestLoc","Player","mapToPlayer","mapToMe","getClosestValidLocation","getPath","PlayerKind","Actor.ActorKind","Attributes.Attributes","skills","Skills.Skills","attr","defaults","Actor.kinds","Viewport","_subject","Bounds","lockX","lock","lockY","contains","subject","halfWidth","halfHeight","right","top","bottom","edgeX","edgeY","thirdW","thirdH","blackOutRect","updateOffset","mapX","mapY","draw","showPath","toInnerX","toInnerY","pathTo","highlightPath","Messages","needsDraw","cache","MessageCache","archive","showArchive","confirmAll","isOnTop","fillRect","confirmed","drawText","then","MessageArchive","widget","Widget","tabStop","mode","_timeout","totalCount","shown","setTimeout","_forward","finish","click","clearTimeout","_reverse","fadePercent","dbuf","endY","dy","_used","_confirmed","fgColor","WidgetLayer","ui","run","Flavor","promptFg","overflow","isPrompt","buf","isRemembered","isMapped","isMagicMapped","intro","theItem","standsInTile","T_STAND_IN_TILE","needObjectArticle","Tile.NULL","surfaceTile","liquidTile","apply","mouse","running","keymap","UI","_makeMap","makeMap","_makePlayer","makePlayer","_startMap","startMap","messages","size","viewport","_initMenu","_initSidebar","_initMessages","_initFlavor","_initViewport","messOpts","viewInit","Message.Messages","flavOpts","viewOpts","Flavor.Flavor","Viewport.Viewport","Layer","scheduler","Scheduler","call","animate","runTurn","render","nextTime","playerTurn","act","_tweens","timer","setInterval","makeTickEvent","enqueue","nextTick","clearInterval","nextEvent","KEYPRESS","handlerFor","Command.getCommand","TICK","MOUSEMOVE","mousemove","getFlavorText","showText","CLICK","nextGoalStep","Actor.getAction","rand","enter","open","close","dance"],"mappings":"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"}