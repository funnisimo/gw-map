{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/actor/pain.js","../js/actor/stat.js","../js/actor/status.js","../js/actor/action.js","../js/actor/actor.js","../js/ai/ai.js","../js/ai/typical.js","../js/ai/wander.js","../js/ai/utils.js","../js/actor/kind.js","../js/actor/make.js","../js/actor/actions/bump.js","../js/actor/actions/standStill.js","../js/fx/fx.js","../js/actor/actions/moveDir.js","../js/actor/actions/idle.js","../js/actor/actions/pickup.js","../js/item/item.js","../js/item/kind.js","../js/item/make.js","../js/effect/effect.js","../js/effect/types/basic.js","../js/effect/types/spread.js","../js/effect/handlers/emit.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/tile.js","../js/effect/handlers/clear.js","../js/effect/handlers/feature.js","../js/effect/handlers/nourish.js","../js/effect/handlers/stat.js","../js/tile/tile.js","../js/tile/index.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/gasLayer.js","../js/layer/fireLayer.js","../js/map/cell.js","../js/draw/basic.js","../js/map/map.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/map/make.js","../js/path.js","../js/horde/horde.js","../js/horde/make.js","../js/command/command.js","../js/command/moveDir.js","../js/command/pickup.js","../js/memory/index.js","../js/player/attribute.js","../js/player/skill.js","../js/player/scent.js","../js/player/player.js","../js/player/kind.js","../js/player/make.js","../js/game/game.js","../js/tile/tiles.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_ON_MAP\"] = Fl(17)] = \"L_ON_MAP\";\n    Entity[Entity[\"DEFAULT_ACTOR\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ACTOR\";\n    Entity[Entity[\"DEFAULT_ITEM\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ITEM\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n    Actor[Actor[\"HAS_MEMORY\"] = Fl(1)] = \"HAS_MEMORY\";\n    Actor[Actor[\"USES_FOV\"] = Fl(2)] = \"USES_FOV\";\n    Actor[Actor[\"STABLE_COST_MAP\"] = Fl(3)] = \"STABLE_COST_MAP\";\n    Actor[Actor[\"IS_VISIBLE\"] = Fl(4)] = \"IS_VISIBLE\";\n    Actor[Actor[\"WAS_VISIBLE\"] = Fl(5)] = \"WAS_VISIBLE\";\n    Actor[Actor[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n    Item[Item[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_SHALLOW_WATER\"] = Fl(4)] = \"T_SHALLOW_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n    Tile[Tile[\"T_ANY_LIQUID\"] = Tile.T_IS_DEEP_LIQUID | Tile.T_SHALLOW_WATER] = \"T_ANY_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(0)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(1)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"KNOWN_TO_BE_SAFE\"] = Fl(2)] = \"KNOWN_TO_BE_SAFE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to speed checks\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(16)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(17)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(18)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(19)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_FX\"] = Fl(20)] = \"HAS_FX\";\n    Cell[Cell[\"HAS_TICK_EFFECT\"] = Fl(22)] = \"HAS_TICK_EFFECT\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(23)] = \"IS_CURSOR\";\n    Cell[Cell[\"IS_HIGHLIGHTED\"] = Fl(24)] = \"IS_HIGHLIGHTED\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_SAFE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_NEEDS_REDRAW\"] = Fl(1)] = \"MAP_NEEDS_REDRAW\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_IGNORE_FOV\"] = Fl(12)] = \"E_IGNORE_FOV\";\n    // E_SPREAD_CIRCLE = Fl(13), // Spread in a circle around the spot (using FOV), radius calculated using spread+decrement\n    // E_SPREAD_LINE = Fl(14), // Spread in a line in one random direction\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nlet lastId = 0;\nexport class Entity {\n    // lastSeen: GWU.xy.Loc = [-1, -1];\n    constructor(kind) {\n        this._map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n        this.id = '' + ++lastId;\n    }\n    get map() {\n        return this._map;\n    }\n    addToMap(map, x, y) {\n        this.x = x;\n        this.y = y;\n        this.setEntityFlag(Flags.Entity.L_ON_MAP);\n        if (this._map === map) {\n            return false;\n        }\n        this._map = map;\n        this.kind.addToMap(this, map);\n        return true;\n    }\n    removeFromMap() {\n        this.clearEntityFlag(Flags.Entity.L_ON_MAP);\n        this.kind.removeFromMap(this);\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    isAt(x, y) {\n        return this.x === x && this.y === y;\n    }\n    clone() {\n        const other = new this.constructor(this.kind);\n        other.copy(this);\n        return other;\n    }\n    copy(other) {\n        this.depth = other.depth;\n        this.light = other.light;\n        Object.assign(this.flags, other.flags);\n        this.next = other.next;\n        this.x = other.x;\n        this.y = other.y;\n        this.kind = other.kind;\n        this.id = other.id;\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    setEntityFlag(flag) {\n        this.flags.entity |= flag;\n    }\n    clearEntityFlag(flag) {\n        this.flags.entity &= ~flag;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isKey(x, y) {\n        return this.key && this.key.matches(x, y);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n    drawStatus(buffer, bounds) {\n        return this.kind.drawStatus(this, buffer, bounds);\n    }\n    drawInto(dest, _observer) {\n        dest.drawSprite(this.sprite);\n    }\n    toString() {\n        return `${this.constructor.name}-${this.id} @ ${this.x},${this.y}`;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nimport * as Flags from '../flags';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requireTileFlags = 0;\n        this.forbidTileFlags = 0;\n        this.avoidTileFlags = 0;\n        this.requireTileTags = [];\n        this.forbidTileTags = [];\n        this.avoidTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config.sprite ? config.sprite : config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requireTileFlags) {\n            this.requireTileFlags = GWU.flag.from(Flags.Tile, config.requireTileFlags);\n        }\n        if (config.avoidTileFlags) {\n            this.avoidTileFlags = GWU.flag.from(Flags.Tile, config.avoidTileFlags);\n        }\n        if (config.forbidTileFlags) {\n            this.forbidTileFlags = GWU.flag.from(Flags.Tile, config.forbidTileFlags);\n        }\n        if (config.requireTileTags) {\n            if (typeof config.requireTileTags === 'string') {\n                config.requireTileTags = config.requireTileTags.split(/[,|]/g);\n            }\n            this.requireTileTags = config.requireTileTags.map((t) => t.trim());\n        }\n        if (config.avoidTileTags) {\n            if (typeof config.avoidTileTags === 'string') {\n                config.avoidTileTags = config.avoidTileTags.split(/[,|]/g);\n            }\n            this.avoidTileTags = config.avoidTileTags.map((t) => t.trim());\n        }\n        if (config.forbidTileTags) {\n            if (typeof config.forbidTileTags === 'string') {\n                config.forbidTileTags = config.forbidTileTags.split(/[,|]/g);\n            }\n            this.forbidTileTags = config.forbidTileTags.map((t) => t.trim());\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    addToMap(_entity, _map) { }\n    removeFromMap(_entity) { }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requireTileFlags &&\n            !cell.hasAllTileFlags(this.requireTileFlags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        if (this.forbidTileFlags &&\n            cell.hasTileFlag(this.forbidTileFlags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        if (this.requireTileTags.length &&\n            !cell.hasAllTileTags(this.requireTileTags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        if (this.forbidTileTags.length &&\n            cell.hasAnyTileTag(this.forbidTileTags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        return false;\n    }\n    avoidsCell(cell, entity) {\n        if (this.forbidsCell(cell, entity))\n            return true;\n        if (this.avoidTileFlags &&\n            cell.hasTileFlag(this.avoidTileFlags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        if (this.avoidTileTags.length &&\n            cell.hasAnyTileTag(this.avoidTileTags) &&\n            !cell.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return true;\n        }\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n    drawStatus(entity, buffer, bounds) {\n        if (!entity.map)\n            return 0;\n        if (entity.isDestroyed)\n            return 0;\n        const mixer = new GWU.sprite.Mixer();\n        entity.map.getAppearanceAt(entity.x, entity.y, mixer);\n        buffer.drawSprite(bounds.x + 1, bounds.y, mixer);\n        buffer.wrapText(bounds.x + 3, bounds.y, bounds.width - 3, entity.getName(), 'purple');\n        return 1;\n    }\n}\nexport function make(opts, makeOpts = {}) {\n    const kind = new EntityKind(opts);\n    return kind.make(makeOpts);\n}\n","import * as GWU from 'gw-utils';\nexport class PainMessages {\n    constructor(msgs = []) {\n        this._msgs = [];\n        msgs.forEach((m) => this.add(m));\n    }\n    add(msg) {\n        this._msgs.push(msg);\n        return this;\n    }\n    get(pct, singular = true) {\n        const index = GWU.clamp(Math.floor(pct * this._msgs.length), 0, this._msgs.length - 1);\n        const msg = this._msgs[index];\n        return this._format(msg, singular);\n    }\n    _format(msg, singular = true) {\n        return msg.replace(/\\[(\\w+)\\|?(\\w*)\\]/g, singular ? '$1' : '$2');\n    }\n}\nexport const painMessages = {};\nexport function installPain(id, pain) {\n    if (Array.isArray(pain)) {\n        pain = new PainMessages(pain);\n    }\n    painMessages[id] = pain;\n}\nexport function getPain(id) {\n    const m = painMessages[id];\n    if (!m)\n        throw new Error('No such pain message index: ' + id);\n    return m;\n}\n","import * as GWU from 'gw-utils';\nexport class Stats {\n    constructor(opts = {}) {\n        this._max = {};\n        this._rate = {};\n        this._value = {};\n        this.init(opts);\n    }\n    get(name) {\n        return this._value[name] || 0;\n    }\n    getPct(name) {\n        const max = this.max(name);\n        return max ? Math.round((100 * this.get(name)) / max) : 0;\n    }\n    max(name) {\n        return this._max[name] || 0;\n    }\n    regen(name) {\n        return this._rate[name] || null;\n    }\n    init(opts) {\n        for (let name in opts) {\n            this.set(name, opts[name]);\n        }\n    }\n    set(name, v, max) {\n        if (typeof v !== 'number') {\n            const r = GWU.range.make(v);\n            v = r.value();\n        }\n        this._value[name] = v;\n        this._max[name] = max || v;\n    }\n    gain(name, amount, allowOver = false) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        let v = this._value[name] + amount;\n        if (!allowOver) {\n            v = Math.min(v, this._max[name]);\n        }\n        this._value[name] = v;\n    }\n    drain(name, amount) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._value[name] = Math.max(0, this._value[name] - amount);\n    }\n    raiseMax(name, amount, raiseValue = true) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._max[name] += amount;\n        if (raiseValue) {\n            this.gain(name, amount);\n        }\n    }\n    reduceMax(name, amount, lowerValue = false) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._max[name] = Math.max(0, this._max[name] - amount);\n        if (lowerValue) {\n            this.drain(name, amount);\n        }\n    }\n    setRegen(name, turns, count = 1) {\n        const r = (this._rate[name] = this._rate[name] || { elapsed: 0 });\n        r.turns = turns;\n        r.count = count;\n    }\n    regenAll() {\n        for (let name in this._max) {\n            const r = this._rate[name];\n            r.elapsed += 1;\n            if (r.elapsed >= r.turns) {\n                this.gain(name, r.count);\n                r.elapsed -= r.turns;\n            }\n        }\n    }\n    restore(name, value) {\n        if (value === undefined)\n            value = this._max[name];\n        this._value[name] = value;\n    }\n    adjust(name, type, amount) {\n        amount = GWU.range.from(amount);\n        const v = amount.value();\n        const c = this.get(name);\n        if (type === 'inc') {\n            this.gain(name, amount);\n        }\n        else if (type === 'dec') {\n            this.drain(name, amount);\n        }\n        else if (type === 'set') {\n            this.set(name, amount);\n        }\n        else if (type === 'min') {\n            const v = amount.value();\n            if (this.get(name) < v) {\n                this.set(name, v);\n            }\n        }\n        else if (type === 'max') {\n            if (this.get(name) > v) {\n                this.set(name, v);\n            }\n        }\n        else {\n            throw new Error('Invalid stat adjust type: ' + type);\n        }\n        return c !== this.get(name);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Status {\n    constructor() {\n        this._set = {};\n        this._time = {};\n        this._count = {};\n        this._done = {};\n        this._value = {};\n        this.changed = null;\n    }\n    clear(name) {\n        this.clearTime(name);\n        this.clearCount(name);\n        this.setOff(name);\n        return this._update(name);\n    }\n    get(name) {\n        return this._value[name] || false;\n    }\n    has(name) {\n        return this._value[name] || false;\n    }\n    _addDone(name, done) {\n        if (done) {\n            if (!this._done[name]) {\n                this._done[name] = done;\n            }\n        }\n    }\n    /**\n     * Sets the count for a status variable.\n     * If setting the count turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {number} count The count to set.\n     * @param {function} [done] The function to call whenever the count goes to 0.\n     * @returns {boolean} Whether or not setting the count turned the status on.\n     */\n    setCount(name, count, done) {\n        const status = this;\n        status._count[name] = Math.max(count, status._count[name] || 0);\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Increments the count for the status by the given amount (1=default)\n     * If incrementing the count turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {number} [count=1] The count to incrmeent.\n     * @param {function} [done] The function to call whenever the count goes to 0.\n     * @returns {boolean} Whether or not incrementing the count turned the status on.\n     */\n    increment(name, count = 1, done) {\n        if (typeof count == 'function') {\n            done = count;\n            count = 1;\n        }\n        const status = this;\n        status._count[name] = (status._count[name] || 0) + count;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Decrements the count for the status by the given amount (1=default)\n     * If decrementing the count turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * Also, if the status is turned off, and a done function was set, then it\n     * is called.\n     * @param {string} name The name of the status to adjust.\n     * @param {number} [count=1] The count to decrement.\n     * @returns {boolean} Whether or not decrementing the count turned the status off.\n     */\n    decrement(name, count = 1) {\n        const status = this;\n        status._count[name] = Math.max(0, (status._count[name] || 0) - count);\n        return this._update(name);\n    }\n    /**\n     * Clears all counts from the given status.\n     * If clearing the count turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * Also, if the status is turned off, and a done function was set, then it\n     * is called.\n     * @param {string} name The name of the status to adjust.\n     * @returns {boolean} Whether or not decrementing the count turned the status off.\n     */\n    clearCount(name) {\n        const status = this;\n        status._count[name] = 0;\n        return this._update(name);\n    }\n    /**\n     * Turns on the given status.\n     * @param {string} name The status to adjust.\n     * @param {function} [done] The function to call when the status is turned off.\n     * @returns {boolean} True if this turns on the status. (It could be on because of a time or count).\n     */\n    setOn(name, done) {\n        const status = this;\n        status._set[name] = true;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Turns off the given status.\n     *\n     * @param {string} name The status to adjust.\n     * @returns {boolean} True if this turns off the status. (It could be on because of a time or count).\n     */\n    setOff(name) {\n        const status = this;\n        status._set[name] = false;\n        return this._update(name);\n    }\n    /**\n     * Sets the time for a status variable.\n     * If setting the time turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to set.\n     * @param {function} [done] The function to call whenever the status goes false.\n     * @returns {boolean} Whether or not setting the time turned the status on.\n     */\n    setTime(name, value, done) {\n        const status = this;\n        // if (value === true) {\n        //   return RUT.Status.setOn(source, name, done);\n        // }\n        value = GWU.range.make(value).value();\n        const current = status._time[name] || 0;\n        status._time[name] = Math.max(value, current);\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Adds to the time for a status variable.\n     * If adding to the time turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to add.\n     * @param {function} [done] The function to call whenever the status goes false.\n     * @returns {boolean} Whether or not adding the time turned the status on.\n     */\n    addTime(name, value = 1, done) {\n        if (typeof value == 'function') {\n            done = value;\n            value = 1;\n        }\n        const status = this;\n        // if (value === true) {\n        //   return RUT.Status.setOn(source, name, done);\n        // }\n        value = GWU.range.make(value).value();\n        status._time[name] = (status._time[name] || 0) + value;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Removes time for a status variable.\n     * If removing to the time turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to remove.\n     * @returns {boolean} Whether or not removing the time turned the status off.\n     */\n    removeTime(name, value = 1) {\n        const status = this;\n        value = GWU.range.make(value).value();\n        status._time[name] = Math.max(0, (status._time[name] || 0) - value);\n        return this._update(name);\n    }\n    /**\n     * Removes all time for a status variable.\n     * If removing to the time turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * @param {string} name The name of the status to set.\n     * @returns {boolean} Whether or not removing the time turned the status off.\n     */\n    clearTime(name) {\n        const status = this;\n        status._time[name] = 0;\n        return this._update(name);\n    }\n    /**\n     * Removes time for all status variables that have time.\n     * If removing the time turns off any status (it was on),\n     * then this function returns an object with all of those statuses as keys and false as the values.  Otherwise, false.\n     * @param {Status|object} source The object to set the status on.  If object.status is set then that is where the values are updated.\n     * @param {string} name The name of the status to set.\n     * @returns {boolean|object} false or an object with the names of the statuses that were cleared as keys and false as the values.\n     */\n    decayAllTimes(delta = 1) {\n        const status = this;\n        const cleared = {};\n        let noticed = false;\n        for (let name in status._time) {\n            if (this.removeTime(name, delta)) {\n                noticed = true;\n                cleared[name] = false;\n            }\n        }\n        return noticed ? cleared : false;\n    }\n    /**\n     * Updates the value of the status and returns whether or not this change\n     * turned the status on or off (true = change, false = no change)\n     * @param {string} name The name of the status to update\n     * @returns {boolean} True if the value was turned on or off, False otherwise.\n     */\n    _update(name) {\n        const status = this;\n        const rec = this._value;\n        let was = rec[name];\n        let value = (rec[name] =\n            status._set[name] ||\n                status._time[name] > 0 ||\n                status._count[name] > 0 ||\n                false);\n        const doneFn = this._done[name];\n        if (!value && doneFn) {\n            doneFn(this, name);\n            status._done[name] = null;\n        }\n        if (was && !value) {\n            if (this.changed)\n                this.changed(this, name);\n            // console.log('called changed: false');\n            return true;\n        }\n        else if (!was && value) {\n            if (this.changed)\n                this.changed(this, name);\n            // console.log('called changed: true');\n            return true;\n        }\n        return false;\n    }\n}\n","export const installedActions = {};\nexport function installAction(name, fn) {\n    installedActions[name.toLowerCase()] = fn;\n}\nexport function getAction(name) {\n    return installedActions[name.toLowerCase()] || null;\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { getAction } from './action';\nimport { Status } from './status';\nimport { Stats } from './stat';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.ai = {};\n        this.leader = null;\n        this.items = null; // inventory\n        this.visionDistance = 99;\n        this.data = {};\n        this._costMap = null;\n        this._goalMap = null;\n        this._mapToMe = null;\n        this.next = null; // TODO - can we get rid of this?\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n        this.stats = new Stats();\n        this.status = new Status();\n    }\n    copy(other) {\n        super.copy(other);\n        this.leader = other.leader;\n        this.items = other.items;\n        this.visionDistance = other.visionDistance;\n    }\n    destroy() {\n        this.setEntityFlag(Flags.Entity.L_DESTROYED);\n        if (this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n        if (this._mapToMe) {\n            GWU.grid.free(this._mapToMe);\n            this._mapToMe = null;\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    setActorFlag(flag) {\n        this.flags.actor |= flag;\n    }\n    clearActorFlag(flag) {\n        this.flags.actor &= ~flag;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    isDead() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    getAction(name) {\n        const action = this.kind.actions[name];\n        if (action === undefined || action === true) {\n            const main = getAction(name); // default is to do any action\n            return main || false;\n        }\n        else if (action === false) {\n            return false;\n        }\n        return action;\n    }\n    getBumpActions() {\n        return this.kind.bump;\n    }\n    /////////////// VISIBILITY\n    becameVisible() {\n        return (this.hasActorFlag(Flags.Actor.IS_VISIBLE) &&\n            !this.hasActorFlag(Flags.Actor.WAS_VISIBLE));\n    }\n    canSee(x, y) {\n        if (x instanceof Entity.Entity) {\n            return this.canSee(x.x, x.y) && this.kind.isAbleToSee(this, x);\n        }\n        else if (this.map) {\n            if (this.isPlayer()) {\n                return this.map.fov.isDirectlyVisible(x, y);\n            }\n            if (GWU.xy.distanceBetween(this.x, this.y, x, y) >\n                this.visionDistance) {\n                return false;\n            }\n            return GWU.xy.forLineBetween(this.x, this.y, x, y, (i, j) => {\n                if (this.map.cell(i, j).blocksVision())\n                    return false;\n            });\n        }\n        else {\n            return false; // need a map or an fov\n        }\n    }\n    canSeeOrSense(x, y) {\n        if (x instanceof Entity.Entity) {\n            return (this.canSeeOrSense(x.x, x.y) &&\n                (this.kind.isAbleToSee(this, x) ||\n                    this.kind.isAbleToSense(this, x)));\n        }\n        if (this.map && this.isPlayer()) {\n            return this.map.fov.isAnyKindOfVisible(x, y);\n        }\n        return this.canSee(x, y);\n    }\n    isAbleToSee(entity) {\n        return this.kind.isAbleToSee(this, entity);\n    }\n    isAbleToSense(entity) {\n        return this.kind.isAbleToSense(this, entity);\n    }\n    ////////////////// ACTOR\n    async act(game) {\n        let startedVisible = false;\n        if (game.player.canSee(this)) {\n            this.setActorFlag(Flags.Actor.IS_VISIBLE);\n            startedVisible = true;\n        }\n        else {\n            if (this.hasActorFlag(Flags.Actor.IS_VISIBLE)) {\n                console.log('not visible');\n            }\n            this.clearActorFlag(Flags.Actor.IS_VISIBLE);\n        }\n        if (this.becameVisible()) {\n            console.log('became visible');\n            game.player.interrupt();\n        }\n        let r = 0;\n        if (this.ai && this.ai.fn) {\n            r = await this.ai.fn(game, this);\n        }\n        if (r == 0 && this.kind.ai.fn) {\n            r = await this.kind.ai.fn(game, this);\n        }\n        if (r) {\n            // did something\n            if (startedVisible || game.player.canSee(this)) {\n            }\n            return r;\n        }\n        // idle - always\n        return this.endTurn();\n    }\n    moveSpeed() {\n        return this.kind.moveSpeed;\n    }\n    startTurn() { }\n    endTurn(pct = 100) {\n        if (this.hasActorFlag(Flags.Actor.IS_VISIBLE)) {\n            this.setActorFlag(Flags.Actor.WAS_VISIBLE);\n        }\n        else {\n            this.clearActorFlag(Flags.Actor.WAS_VISIBLE);\n        }\n        return Math.floor((pct * this.moveSpeed()) / 100);\n    }\n    ///////\n    willAttack(_other) {\n        return true;\n    }\n    canPass(_other) {\n        return false;\n    }\n    ////////////////// INVENTORY\n    avoidsItem(_item) {\n        return false;\n    }\n    canAddItem(_item) {\n        return false;\n    }\n    addItem(_item) { }\n    pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n    // PATHFINDING\n    addToMap(map, x, y) {\n        const mapChanged = super.addToMap(map, x, y);\n        if (mapChanged) {\n            this.clearActorFlag(Flags.Actor.STABLE_COST_MAP);\n        }\n        return mapChanged;\n    }\n    removeFromMap() {\n        super.removeFromMap();\n        if (this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n        if (this._mapToMe) {\n            GWU.grid.free(this._mapToMe);\n            this._mapToMe = null;\n        }\n    }\n    /*\n    Calculates and returns the actor's move cost map.\n    Used in pathfinding.\n    */\n    costMap() {\n        if (!this.map) {\n            throw new Error('Actor must have map to calculate costMap.');\n        }\n        const staleMap = !this.hasActorFlag(Flags.Actor.STABLE_COST_MAP);\n        if (staleMap && this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (!this._costMap) {\n            this._costMap = GWU.grid.alloc(this.map.width, this.map.height);\n        }\n        else if (!staleMap) {\n            return this._costMap;\n        }\n        const kind = this.kind;\n        const map = this.map;\n        this._costMap.update((_v, x, y) => {\n            const cell = map.cell(x, y);\n            if (kind.forbidsCell(cell, this)) {\n                return cell.hasEntityFlag(Flags.Entity.L_BLOCKS_DIAGONAL)\n                    ? GWU.path.OBSTRUCTION\n                    : GWU.path.FORBIDDEN;\n            }\n            else if (kind.avoidsCell(cell, this)) {\n                return GWU.path.AVOIDED;\n            }\n            return GWU.path.OK;\n        });\n        this.setActorFlag(Flags.Actor.STABLE_COST_MAP);\n        /*\n\n            if (cellHasTerrainFlag(i, j, T_OBSTRUCTS_PASSABILITY)\n            && (!cellHasTMFlag(i, j, TM_IS_SECRET) || (discoveredTerrainFlagsAtLoc(i, j) & T_OBSTRUCTS_PASSABILITY)))\n            {\n                playerCostMap[i][j] = monsterCostMap[i][j] = cellHasTerrainFlag(i, j, T_OBSTRUCTS_DIAGONAL_MOVEMENT) ? PDS_OBSTRUCTION : PDS_FORBIDDEN;\n            } else if (cellHasTerrainFlag(i, j, T_SACRED)) {\n                    playerCostMap[i][j] = 1;\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n            } else if (cellHasTerrainFlag(i, j, T_LAVA_INSTA_DEATH)) {\n        monsterCostMap[i][j] = PDS_FORBIDDEN;\n        if (player.status[STATUS_LEVITATING] || !player.status[STATUS_IMMUNE_TO_FIRE]) {\n            playerCostMap[i][j] = 1;\n        } else {\n            playerCostMap[i][j] = PDS_FORBIDDEN;\n        }\n            } else {\n                if (pmap[i][j].flags & HAS_MONSTER) {\n                    monst = monsterAtLoc(i, j);\n                    if ((monst.creatureState == MONSTER_SLEEPING\n                         || monst.turnsSpentStationary > 2\n             || (monst.info.flags & MONST_GETS_TURN_ON_ACTIVATION)\n                         || monst.creatureState == MONSTER_ALLY)\n                        && monst.creatureState != MONSTER_FLEEING)\n                    {\n                        playerCostMap[i][j] = 1;\n                        monsterCostMap[i][j] = PDS_FORBIDDEN;\n                        continue;\n                    }\n                }\n\n                if (cellHasTerrainFlag(i, j, (T_AUTO_DESCENT | T_IS_DF_TRAP))) {\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n          if (player.status[STATUS_LEVITATING]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = PDS_FORBIDDEN;\n          }\n                } else if (cellHasTerrainFlag(i, j, T_IS_FIRE)) {\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n          if (player.status[STATUS_IMMUNE_TO_FIRE]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = PDS_FORBIDDEN;\n          }\n                } else if (cellHasTerrainFlag(i, j, (T_IS_DEEP_WATER | T_SPONTANEOUSLY_IGNITES))) {\n          if (player.status[STATUS_LEVITATING]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = 5;\n          }\n                    monsterCostMap[i][j] = 5;\n        } else if (cellHasTerrainFlag(i, j, T_OBSTRUCTS_PASSABILITY)\n                   && cellHasTMFlag(i, j, TM_IS_SECRET) && !(discoveredTerrainFlagsAtLoc(i, j) & T_OBSTRUCTS_PASSABILITY)\n                   && !(pmap[i][j].flags & IN_FIELD_OF_VIEW))\n             {\n            // Secret door that the player can't currently see\n            playerCostMap[i][j] = 100;\n            monsterCostMap[i][j] = 1;\n                } else {\n                    playerCostMap[i][j] = monsterCostMap[i][j] = 1;\n                }\n            }\n        }\n    }\n        */\n        return this._costMap;\n    }\n    get goalMap() {\n        return this._goalMap;\n    }\n    hasGoal() {\n        return !!this._goalMap;\n    }\n    setGoal(x, y) {\n        const map = this._map;\n        if (!map)\n            throw new Error('No map to set goal with!');\n        if (!this._goalMap) {\n            this._goalMap = GWU.grid.alloc(map.width, map.height);\n        }\n        const goalMap = this._goalMap;\n        GWU.path.calculateDistances(goalMap, x, y, this.costMap());\n        return this._goalMap;\n    }\n    clearGoal() {\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n    }\n    mapToMe() {\n        if (!this.map)\n            throw new Error('No map!');\n        if (!this._mapToMe) {\n            this._mapToMe = GWU.grid.alloc(this.map.width, this.map.height);\n        }\n        if (this._mapToMe.x !== this.x || this._mapToMe.y !== this.y) {\n            GWU.path.calculateDistances(this._mapToMe, this.x, this.y, this.costMap());\n        }\n        return this._mapToMe;\n    }\n}\n","export const ais = {};\nexport function install(name, fn) {\n    ais[name] = fn;\n}\nexport function make(opts) {\n    if (typeof opts === 'string') {\n        opts = { fn: opts };\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    if (typeof opts.fn === 'string') {\n        opts.fn = ais[opts.fn];\n    }\n    if (!opts.fn) {\n        opts.fn = ais.default;\n    }\n    return opts;\n}\n","import * as GWU from 'gw-utils';\nimport { getAction } from '../actor/action';\nimport * as AI from './ai';\nimport { wander } from './wander';\nexport class AICtx {\n    constructor(game, actor, target) {\n        this.item = null;\n        this.count = 0;\n        this.game = game;\n        this.actor = actor;\n        this.target = target || null;\n        this.distanceMap = GWU.grid.alloc(game.map.width, game.map.height);\n        if (target) {\n            const costMap = actor.costMap();\n            GWU.path.calculateDistances(this.distanceMap, target.x, target.y, costMap);\n        }\n    }\n    start() {\n        ++this.count;\n        return this;\n    }\n    done(result) {\n        --this.count;\n        if (this.count == 0) {\n            GWU.grid.free(this.distanceMap);\n        }\n        return result;\n    }\n}\n/*\nhttp://roguebasin.com/index.php/Roguelike_Intelligence_-_Stateless_AIs\n-- Typical AI\n*/\nexport async function typical(game, actor) {\n    if (actor.isDead())\n        return -1;\n    const map = actor.map;\n    if (!map)\n        return -1; // actor not on map ?!?!\n    const target = game.player;\n    const tryAttack = actor.canSee(target) && actor.willAttack(target);\n    if (tryAttack) {\n        const damagePct = 100 - actor.stats.getPct('health');\n        const morale = actor.stats.get('morale');\n        const chargeChance = 100;\n        const retreatChance = 0;\n        actor.ai.lastSawPlayer = [target.x, target.y];\n        actor.clearGoal();\n        console.log('SAW YOU!', actor.id, target.x, target.y);\n        const ctx = new AICtx(game, actor, target).start();\n        let result = 0;\n        if (damagePct > morale) {\n            if (canRunAwayFrom(game, actor, target, ctx)) {\n                result = await runAwayFrom(game, actor, target, ctx);\n            }\n            else if (canAttack(game, actor, target, ctx)) {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (tooFarFrom(game, actor, target, ctx) &&\n            canAttack(game, actor, target, ctx) &&\n            canMoveToward(game, actor, target, ctx)) {\n            if (GWU.random.chance(chargeChance)) {\n                result = await moveToward(game, actor, target, ctx);\n            }\n            else {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (tooCloseTo(game, actor, target, ctx) &&\n            canAttack(game, actor, target, ctx) &&\n            canMoveAwayFrom(game, actor, target, ctx)) {\n            if (GWU.random.chance(retreatChance)) {\n                result = await moveAwayFrom(game, actor, target, ctx);\n            }\n            else {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (canAttack(game, actor, target, ctx)) {\n            result = await attack(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n        if (tooFarFrom(game, actor, target, ctx) &&\n            canMoveToward(game, actor, target, ctx)) {\n            result = await moveToward(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n        if (tooCloseTo(game, actor, target, ctx) &&\n            canMoveAwayFrom(game, actor, target, ctx)) {\n            result = await moveAwayFrom(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n    }\n    // TODO - Use scent, menory, other teammates info, ...\n    else if (actor.ai.lastSawPlayer) {\n        if (!actor.hasGoal()) {\n            const loc = actor.ai.lastSawPlayer;\n            actor.setGoal(loc[0], loc[1]);\n        }\n        console.log('CHASING YOU!', actor.id, actor.goalMap.x, actor.goalMap.y);\n        const result = await moveTowardGoal(game, actor);\n        if (result) {\n            return result;\n        }\n        actor.ai.lastSawPlayer = null; // no longer\n        actor.clearGoal();\n    }\n    // check if they noticed the player scent\n    if (target.scent) {\n        const dir = target.scent.nextDir(actor.x, actor.y);\n        if (dir) {\n            console.log('tracking scent', actor.id, dir);\n            const moveDir = getAction('moveDir');\n            if (!moveDir)\n                throw new Error('No moveDir action found for Actors!');\n            const result = await moveDir(game, actor, { dir });\n            if (result)\n                return result;\n        }\n    }\n    const wanderOpt = GWU.object.firstOpt('wander', actor.ai, actor.kind.ai, false);\n    if (wanderOpt) {\n        if (actor.goalMap || // we have a current goal\n            typeof wanderOpt !== 'number' || // wander: true\n            GWU.random.chance(wanderOpt) // chance\n        ) {\n            const result = wander(game, actor);\n            if (result)\n                return result;\n        }\n        else {\n            const idle = getAction('idle');\n            if (idle) {\n                return idle(game, actor);\n            }\n        }\n    }\n    const standStill = getAction('standStill');\n    if (!standStill)\n        throw new Error('No standStill action found for actors!');\n    return standStill(game, actor);\n}\nAI.install('typical', typical);\nAI.install('default', typical);\nexport function canMoveToward(game, actor, target, ctx) {\n    // can move?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    const distanceMap = ctx.distanceMap;\n    const canMoveDiagonal = false;\n    // look for distance > current around me\n    let center = distanceMap[actor.x][actor.y];\n    let count = 0;\n    GWU.xy.eachNeighbor(actor.x, actor.y, (x, y) => {\n        if (distanceMap[x][y] < center) {\n            ++count;\n        }\n    }, canMoveDiagonal);\n    return ctx.done(count > 0);\n}\nexport async function moveToward(game, actor, target, ctx) {\n    // pathfinding?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    // distanceMap.dump();\n    const map = game.map;\n    const step = GWU.path.nextStep(ctx.distanceMap, actor.x, actor.y, (x, y) => {\n        const cell = map.cell(x, y);\n        if (!cell)\n            return true;\n        if (cell.hasActor() && cell.actor !== target)\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    });\n    let result = 0;\n    if (!step || (step[0] == 0 && step[1] == 0)) {\n        const standStill = getAction('standStill');\n        if (!standStill)\n            throw new Error('No standStill action found for actors!');\n        result = await standStill(game, actor);\n        return ctx.done(result);\n    }\n    const moveDir = getAction('moveDir');\n    if (!moveDir)\n        throw new Error('No moveDir action found for Actors!');\n    result = await moveDir(game, actor, { dir: step });\n    return ctx.done(result);\n}\nexport function canMoveAwayFrom(game, actor, target, ctx) {\n    // can move?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    const distanceMap = ctx.distanceMap;\n    const canMoveDiagonal = false;\n    // look for distance > current around me\n    let center = distanceMap[actor.x][actor.y];\n    let count = 0;\n    GWU.xy.eachNeighbor(actor.x, actor.y, (x, y) => {\n        const d = distanceMap[x][y];\n        if (d >= GWU.path.NO_PATH)\n            return;\n        if (distanceMap[x][y] > center) {\n            ++count;\n        }\n    }, canMoveDiagonal);\n    return ctx.done(count > 0);\n}\nexport async function moveAwayFrom(_game, actor, _target, _ctx) {\n    // safety/strategy?\n    // always move using safety map?\n    return actor.endTurn();\n}\nexport function canRunAwayFrom(_game, _actor, _target, _ctx) {\n    // can move?\n    return false;\n}\nexport async function runAwayFrom(_game, actor, _target, _ctx) {\n    // move toward loop if away from player\n    return actor.endTurn();\n}\nexport function canAttack(_game, actor, target, _ctx) {\n    // has attack?\n    // attack affects player?\n    // cooldown?\n    return GWU.xy.distanceFromTo(actor, target) <= 1;\n}\nexport async function attack(game, actor, target, _ctx) {\n    console.log('attack!', actor.id, target.id);\n    let attack = actor.getAction('attack');\n    if (!attack)\n        return 0;\n    return attack(game, actor);\n}\nexport function tooFarFrom(_game, actor, target, _ctx) {\n    // diagonal?\n    return GWU.xy.distanceFromTo(actor, target) > 1;\n}\nexport function tooCloseTo(_game, actor, target, _ctx) {\n    return GWU.xy.distanceFromTo(actor, target) < 1;\n}\n// TODO - make an action\nexport async function moveTowardGoal(game, actor) {\n    if (!actor.hasGoal())\n        return 0;\n    const nextStep = GWU.path.nextStep(actor.goalMap, actor.x, actor.y, (x, y) => {\n        return actor.map.hasActor(x, y);\n    });\n    if (!nextStep) {\n        actor.clearGoal();\n        return 0;\n    }\n    const moveDir = actor.getAction('moveDir');\n    if (!moveDir)\n        throw new Error('No moveDir action for actor!');\n    return await moveDir(game, actor, { dir: nextStep });\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { getAction } from '../actor/action';\nexport async function wander(game, actor) {\n    // Do we have a wander target?\n    let goalMap = actor.goalMap;\n    if (!goalMap) {\n        //      pick new wander target\n        const costMap = actor.costMap();\n        const loc = GWU.random.matchingLoc(costMap.width, costMap.height, (x, y) => {\n            return costMap[x][y] > 0 && costMap[x][y] !== GWU.path.NO_PATH;\n        });\n        if (!loc || loc[0] < 0 || loc[1] < 0) {\n            console.log('No wander location found!');\n            return 0;\n        }\n        //      build distance map to target\n        goalMap = actor.setGoal(loc[0], loc[1]);\n    }\n    // take the next step to the target\n    const step = GWU.path.nextStep(goalMap, actor.x, actor.y, (x, y) => {\n        if (!game.map.hasActor(x, y))\n            return false;\n        const other = game.map.actorAt(x, y);\n        if (!other) {\n            console.log(`Cell @ ${x},${y} has actor flag, but no actor.`);\n            game.map.cell(x, y).clearCellFlag(Flags.Cell.HAS_ACTOR);\n            return false;\n        }\n        return !actor.canPass(other);\n    });\n    if (!step) {\n        actor.clearGoal();\n        return 0;\n    }\n    let result = 0;\n    if (!step || (step[0] == 0 && step[1] == 0)) {\n        return 0; // did nothing\n    }\n    const moveDir = getAction('moveDir');\n    if (!moveDir)\n        throw new Error('No moveDir action found for Actors!');\n    result = await moveDir(game, actor, { dir: step });\n    return result;\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nexport function fillSafetyMap(safetyMap, actor, target) {\n    const costGrid = GWU.grid.alloc(actor.costMap());\n    GWU.path.calculateDistances(safetyMap, target.x, target.y, costGrid, true);\n    safetyMap.update((v) => v * -1); // Can set factor to be < -1 e.g. -1.2\n    actor.map.actors.forEach((a) => {\n        if (a.willAttack(actor)) {\n            costGrid[a.x][a.y] = GWU.path.FORBIDDEN; // This is why we allocate a copy\n        }\n    });\n    actor.map.eachCell((c, x, y) => {\n        if (c.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n            safetyMap[x][y] -= GWU.path.AVOIDED; // loop cells are extra good\n        }\n    });\n    GWU.path.rescan(safetyMap, costGrid, true);\n    safetyMap.update((v) => (v <= -30000 ? 30000 : v));\n    GWU.grid.free(costGrid);\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Actor } from './actor';\nimport * as AI from '../ai';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n        this.flags = {\n            actor: Flags.Actor.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.vision = {};\n        this.actions = {};\n        this.bump = ['attack'];\n        this.moveSpeed = 100;\n        if (opts.flags) {\n            this.flags.actor = GWU.flag.from(Flags.Actor, this.flags.actor, opts.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, opts.flags);\n        }\n        if (opts.vision) {\n            this.vision.normal = opts.vision;\n        }\n        this.stats = Object.assign({ health: 1, morale: 100 }, opts.stats);\n        if (opts.actions) {\n            Object.assign(this.actions, opts.actions);\n        }\n        if (opts.moveSpeed) {\n            this.moveSpeed = opts.moveSpeed;\n        }\n        this.ai = AI.make(opts.ai || 'default');\n        if (opts.bump) {\n            if (typeof opts.bump === 'string') {\n                opts.bump = opts.bump.split(/[|,]/g).map((t) => t.trim());\n            }\n            if (typeof opts.bump === 'function') {\n                opts.bump = [opts.bump];\n            }\n            if (Array.isArray(opts.bump)) {\n                this.bump = opts.bump.slice();\n            }\n        }\n        if (opts.waterOnly) {\n            this.forbidTileFlags =\n                this.forbidTileFlags & ~Flags.Tile.T_IS_DEEP_LIQUID;\n            this.avoidTileFlags =\n                this.avoidTileFlags & ~Flags.Tile.T_IS_DEEP_LIQUID;\n            this.requireTileFlags |= Flags.Tile.T_IS_DEEP_LIQUID;\n        }\n        else if (opts.lavaOnly) {\n            this.forbidTileFlags = this.forbidTileFlags & ~Flags.Tile.T_LAVA;\n            this.avoidTileFlags = this.avoidTileFlags & ~Flags.Tile.T_LAVA;\n            this.requireTileFlags |= Flags.Tile.T_LAVA;\n        }\n        else {\n            if (opts.swim) {\n                this.avoidTileFlags |= Flags.Tile.T_IS_DEEP_LIQUID;\n            }\n            else {\n                this.forbidTileFlags |= Flags.Tile.T_IS_DEEP_LIQUID;\n            }\n            if (opts.fly) {\n                this.forbidTileFlags =\n                    this.forbidTileFlags & ~Flags.Tile.T_LAVA;\n                this.avoidTileFlags = this.avoidTileFlags & ~Flags.Tile.T_LAVA;\n                this.requireTileFlags =\n                    this.requireTileFlags & ~Flags.Tile.T_LAVA;\n                this.forbidTileFlags =\n                    this.forbidTileFlags & ~Flags.Tile.T_IS_DEEP_LIQUID;\n                this.avoidTileFlags =\n                    this.avoidTileFlags & ~Flags.Tile.T_IS_DEEP_LIQUID;\n                this.requireTileFlags =\n                    this.requireTileFlags & ~Flags.Tile.T_IS_DEEP_LIQUID;\n            }\n        }\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n        Object.assign(actor.flags, this.flags);\n        // if (options.fov) {\n        //     actor.fov = options.fov;\n        // }\n        // if (options.memory) {\n        //     actor.memory = options.memory;\n        // }\n        if (this.vision.normal) {\n            actor.visionDistance = this.vision.normal;\n        }\n        actor.stats.init(this.stats);\n    }\n    addToMap(actor, map) {\n        super.addToMap(actor, map);\n        // if (this.hasActorFlag(Flags.Actor.HAS_MEMORY)) {\n        //     actor.memory = Memory.get(actor, map);\n        // }\n        // if (this.hasActorFlag(Flags.Actor.USES_FOV)) {\n        //     actor.fov = new GWU.fov.FovSystem(map);\n        //     actor.fov.follow = actor;\n        //     if (actor.memory) {\n        //         actor.fov.callback = actor.memory;\n        //     }\n        // }\n    }\n    removeFromMap(actor) {\n        super.removeFromMap(actor);\n        // if (actor._map && actor.memory) {\n        //     Memory.store(actor, actor._map, actor.memory);\n        // }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    canSeeEntity(_actor, _entity) {\n        return true;\n    }\n    isAbleToSee(_actor, _entity) {\n        return true;\n    }\n    isAbleToSense(_actor, _entity) {\n        return true;\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor)) {\n            return true;\n        }\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { installAction } from '../action';\n// BUMP\n//\n// prefixes:\n// @ = only for player\n// + = only for ally\n// - = only for opposed\n// = = only for same kind\n// $ = use my action (if used with one of the above, this comes last)\n//\nexport async function bump(game, actor, ctx = {}) {\n    const other = ctx.actor;\n    if (other) {\n        const bumpActions = other.getBumpActions();\n        for (let action of bumpActions) {\n            if (typeof action === 'string') {\n                if (action.startsWith('$')) {\n                    const selfName = action.substring(1);\n                    let selfAction = other.getAction(selfName);\n                    if (selfAction === false) {\n                        throw new Error('Cannot have bump action for self action that actor cannot do: ' +\n                            action);\n                    }\n                    const ctx2 = Object.assign({}, ctx, { actor });\n                    const result = await selfAction(game, other, ctx2);\n                    if (result)\n                        return result;\n                }\n                else {\n                    const config = actor.getAction(action);\n                    if (config === false) {\n                        throw new Error('Cannot configure actor with bump action they cannot do: ' +\n                            action);\n                    }\n                    else {\n                        action = config;\n                    }\n                    const result = await action(game, actor, ctx);\n                    if (result)\n                        return result;\n                }\n            }\n            else {\n                const result = await action(game, actor, ctx);\n                if (result)\n                    return result;\n            }\n        }\n    }\n    const item = ctx.item;\n    if (item) {\n        // TODO - Item Actions\n    }\n    return 0;\n}\ninstallAction('bump', bump);\n","import { installAction } from '../action';\nexport async function standStill(_game, actor, _ctx) {\n    return actor.endTurn();\n}\ninstallAction('standStill', standStill);\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\n// export class SpriteFX extends FX {\n//     sprite: GWU.sprite.SpriteConfig;\n//     stepCount: number;\n//     x: number;\n//     y: number;\n//     constructor(\n//         map: Map,\n//         sprite: string | GWU.sprite.SpriteConfig,\n//         x: number,\n//         y: number,\n//         opts: SpriteFxOptions = {}\n//     ) {\n//         const count = opts.blink || 1;\n//         const duration = opts.duration || 1000;\n//         opts.speed = opts.speed || duration / (2 * count - 1);\n//         super(map, opts);\n//         if (typeof sprite === 'string') {\n//             const name = sprite;\n//             sprite = GWU.sprite.sprites[sprite];\n//             if (!sprite) throw new Error('Cannot find sprite! ' + name);\n//         }\n//         this.sprite = sprite;\n//         this.x = x || 0;\n//         this.y = y || 0;\n//         this.stepCount = 2 * count - 1;\n//     }\n//     start() {\n//         this.map.addFx(this.x, this.y, this.sprite);\n//         return super.start();\n//     }\n//     step() {\n//         --this.stepCount;\n//         if (this.stepCount <= 0) return this.stop();\n//         if (this.stepCount % 2 == 0) {\n//             this.map.removeFx(this);\n//         } else {\n//             this.map.addFx(this.x, this.y, this);\n//         }\n//     }\n//     stop(result?: any) {\n//         this.map.removeFx(this);\n//         return super.stop(result);\n//     }\n//     moveDir(dx: number, dy: number) {\n//         return this.moveTo(this.x + dx, this.y + dy);\n//     }\n//     moveTo(x: number, y: number) {\n//         this.map.moveFx(x, y, this);\n//         return true;\n//     }\n// }\nexport async function flashSprite(map, x, y, sprite, duration = 100, count = 1, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ visible: true })\n        .to({ visible: false })\n        .repeat(count)\n        .repeatDelay(duration)\n        .duration(duration)\n        .onUpdate((obj) => {\n        if (obj.visible) {\n            map.addFx(x, y, entity);\n        }\n        else {\n            map.removeFx(entity);\n        }\n    });\n    // realTime\n    animator = animator || GWU.io.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nGWU.sprite.install('bump', 'white', 50);\nexport async function hit(map, target, sprite, duration, animator) {\n    sprite = sprite || 'hit';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('hit', 'red', 50);\nexport async function miss(map, target, sprite, duration, animator) {\n    sprite = sprite || 'miss';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('miss', 'green', 50);\nexport async function fadeInOut(map, x, y, sprite, duration = 100, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite).clone();\n    }\n    else {\n        sprite = GWU.sprite.make(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ opacity: 0 })\n        .to({ opacity: 100 })\n        .repeat(2)\n        .yoyo(true)\n        .duration(Math.floor(duration / 2))\n        .onUpdate((obj) => {\n        entity.sprite.opacity = obj.opacity;\n        map.cell(x, y).needsRedraw = true; // we changed the sprite so redraw\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n    });\n    // realTime\n    animator = animator || GWU.io.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport async function moveSprite(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    const from = { x: GWU.xy.x(source), y: GWU.xy.y(source) };\n    map.addFx(from.x, from.y, entity);\n    let duration = opts.duration ||\n        Math.ceil(16 * (GWU.xy.maxAxisFromTo(source, target) / (opts.speed || 8)));\n    if (GWU.xy.isLoc(target)) {\n        target = { x: target[0], y: target[1] };\n    }\n    const tween = GWU.tween\n        .make(from)\n        .to(target)\n        .duration(duration)\n        .onUpdate((vals) => {\n        // tweens dont update every step, so...\n        // draw line from current pos to vals pos\n        // check each step for blocking...\n        // end at either vals or last blocking spot\n        const dest = { x: entity.x, y: entity.y };\n        const ok = GWU.xy.forLineBetween(dest.x, dest.y, vals.x, vals.y, (x, y) => {\n            if (opts.stepFn) {\n                if (opts.stepFn(x, y)) {\n                    if (!opts.stopBeforeWalls) {\n                        dest.x = x;\n                        dest.y = y;\n                    }\n                    return false;\n                }\n            }\n            else if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (!opts.stopBeforeWalls) {\n                    dest.x = x;\n                    dest.y = y;\n                }\n                return false;\n            }\n            dest.x = x;\n            dest.y = y;\n        });\n        map.moveFx(entity, dest.x, dest.y);\n        if (!ok) {\n            tween.stop();\n        }\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n        return entity;\n    });\n    const animator = opts.animator || map;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport function bolt(map, source, target, sprite, opts = {}) {\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport async function projectile(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    if (sprite.ch && sprite.ch.length == 4) {\n        const dir = GWU.xy.dirFromTo(source, target);\n        let index = 0;\n        if (dir[0] && dir[1]) {\n            index = 2;\n            if (dir[0] != dir[1]) {\n                // remember up is -y\n                index = 3;\n            }\n        }\n        else if (dir[0]) {\n            index = 1;\n        }\n        const ch = sprite.ch[index];\n        sprite = GWU.sprite.make(ch, sprite.fg, sprite.bg);\n    }\n    else if (sprite.ch && sprite.ch.length !== 1) {\n        throw new Error('projectile requires 4 chars - vert,horiz,diag-left,diag-right (e.g: \"|-\\\\/\")');\n    }\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport function beam(map, from, to, sprite, opts = {}) {\n    opts.fade = opts.fade || 100;\n    if (opts.stopAtWalls === undefined)\n        opts.stopAtWalls = true;\n    const line = [];\n    GWU.xy.forLineFromTo(from, to, (x, y) => {\n        if (!map.hasXY(x, y))\n            return false;\n        if (opts.stepFn && opts.stepFn(x, y))\n            return false;\n        if (opts.stopAtWalls || opts.stopBeforeWalls) {\n            if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (opts.stopBeforeWalls)\n                    return false;\n                line.push([x, y]);\n                return false;\n            }\n        }\n        line.push([x, y]);\n        return true;\n    });\n    const duration = opts.duration || Math.ceil(16 * (line.length / (opts.speed || 8)));\n    const animator = opts.animator || map;\n    const promises = [];\n    let lastIndex = -1;\n    const tween = GWU.tween\n        .make({ index: 0 })\n        .to({ index: line.length - 1 })\n        .duration(duration)\n        .onUpdate((vals) => {\n        while (lastIndex < vals.index) {\n            ++lastIndex;\n            const loc = line[lastIndex] || [-1, -1];\n            promises.push(fadeInOut(map, loc[0], loc[1], sprite, opts.fade, animator));\n        }\n    })\n        .onFinish(async () => {\n        await Promise.all(promises);\n        const loc = line[line.length - 1];\n        return { x: loc[0], y: loc[1] };\n    });\n    animator.addAnimation(tween);\n    return tween.start();\n}\nfunction isInShape(shape, cx, cy, allowCenter, x, y) {\n    const sx = Math.abs(x - cx);\n    const sy = Math.abs(y - cy);\n    if (sx == 0 && sy == 0 && !allowCenter)\n        return false;\n    switch (shape) {\n        case '+':\n            return sx == 0 || sy == 0;\n        case 'x':\n        case 'X':\n            return sx == sy;\n        case '*':\n            return sx == 0 || sy == 0 || sx == sy;\n        default:\n            return true;\n    }\n}\nfunction checkExplosionOpts(opts) {\n    opts.speed = opts.speed || 2;\n    opts.fade = opts.fade || 100;\n    opts.shape = opts.shape || 'o';\n    if (opts.center === undefined) {\n        opts.center = true;\n    }\n}\nexport function explosion(map, x, y, radius, sprite, opts = {}) {\n    checkExplosionOpts(opts);\n    opts.animator = opts.animator || map;\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const grid = GWU.grid.alloc(map.width, map.height);\n    const fov = new GWU.fov.FOV({\n        isBlocked(x, y) {\n            return map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE);\n        },\n        hasXY(x, y) {\n            return map.hasXY(x, y);\n        },\n    });\n    fov.calculate(x, y, radius, (x1, y1) => {\n        grid[x1][y1] = 1;\n    });\n    const duration = opts.duration || 32 * (radius / opts.speed);\n    const promises = [];\n    const tween = GWU.tween\n        .make({ r: 0 })\n        .to({ r: radius })\n        .duration(duration)\n        .onUpdate((vals) => {\n        const minX = Math.max(0, x - vals.r);\n        const minY = Math.max(0, y - vals.r);\n        const maxX = Math.min(map.width - 1, x + vals.r);\n        const maxY = Math.min(map.height - 1, y + vals.r);\n        for (let x1 = minX; x1 <= maxX; ++x1) {\n            for (let y1 = minY; y1 <= maxY; ++y1) {\n                if (grid[x1][y1] &&\n                    GWU.xy.distanceBetween(x, y, x1, y1) <= vals.r) {\n                    grid[x1][y1] = 0;\n                    if (isInShape(opts.shape, x, y, opts.center, x1, y1)) {\n                        promises.push(fadeInOut(map, x1, y1, sprite, opts.fade, opts.animator));\n                    }\n                }\n            }\n        }\n    })\n        .onFinish(async (_obj, success) => {\n        GWU.grid.free(grid);\n        await Promise.all(promises);\n        return success;\n    });\n    opts.animator.addAnimation(tween);\n    return tween.start();\n}\n/*\nexport function explosionFor(\n    map: Map,\n    grid: GWU.grid.NumGrid,\n    x: number,\n    y: number,\n    radius: number,\n    sprite: string | GWU.sprite.SpriteConfig,\n    opts: ExplosionOptions = {}\n) {\n    checkExplosionOpts(opts);\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    const animation = new ExplosionFX(\n        map,\n        grid,\n        x,\n        y,\n        radius,\n        sprite,\n        opts.speed,\n        opts.fade,\n        opts.shape,\n        opts.center,\n        opts.stepFn\n    );\n    return opts.playFn!(animation);\n}\n*/\n","import { installAction } from '../action';\nimport { bump } from './bump';\nimport { standStill } from './standStill';\nimport * as FX from '../../fx';\nimport * as Flags from '../../flags';\nexport async function moveDir(game, actor, ctx = {}) {\n    //\n    const step = ctx.dir;\n    if (!step)\n        throw new Error('moveDir called with no direction!');\n    const newX = actor.x + step[0];\n    const newY = actor.y + step[1];\n    const map = game.map;\n    const currentCell = map.cell(actor.x, actor.y);\n    const newCell = map.cell(newX, newY);\n    let result = 0;\n    if (actor.forbidsCell(newCell)) {\n        if (ctx.try)\n            return 0;\n        FX.hit(map, newCell, 'hit', 100);\n        actor.clearGoal();\n        return actor.endTurn();\n    }\n    if (newCell.blocksMove()) {\n        if (ctx.try)\n            return 0;\n        FX.hit(map, newCell, 'hit', 100);\n        actor.clearGoal();\n        return actor.endTurn();\n    }\n    // can we leave?\n    if (!currentCell.canRemoveActor(actor)) {\n        if (ctx.try)\n            return 0;\n        // canActorLeave must add appropriate message\n        return actor.endTurn();\n    }\n    // is there an actor there?\n    if (newCell.hasActor() || newCell.hasItem()) {\n        if (ctx.try)\n            return 0;\n        const ctx2 = { actor: newCell.actor, item: newCell.item };\n        result = await bump(game, actor, ctx2);\n        if (result)\n            return result;\n    }\n    // can we enter?\n    if (!newCell.canAddActor(actor)) {\n        if (ctx.try)\n            return 0;\n        return actor.endTurn();\n    }\n    if (!map.moveActor(actor, newX, newY)) {\n        result = await standStill(game, actor, ctx);\n        return result;\n    }\n    let rate = 100;\n    if (newCell.hasTileFlag(Flags.Tile.T_DEEP_WATER)) {\n        rate = 150;\n    }\n    result = actor.endTurn(rate);\n    return result;\n}\ninstallAction('moveDir', moveDir);\n","import * as GWU from 'gw-utils';\nimport { installAction } from '../action';\nimport { moveDir } from './moveDir';\nexport async function idle(game, actor, _ctx) {\n    if (GWU.random.chance(50)) {\n        // do nothing\n        return actor.endTurn();\n    }\n    // try to step in a random direction\n    const dirIndex = GWU.random.number(4);\n    const dir = GWU.xy.DIRS[dirIndex];\n    const result = await moveDir(game, actor, { dir, try: true });\n    if (result)\n        return result;\n    // stand still\n    return actor.endTurn();\n}\ninstallAction('idle', idle);\n","import * as GWU from 'gw-utils';\nimport { installAction } from '../action';\nexport async function pickup(game, actor, ctx = {}) {\n    const map = actor.map;\n    if (!map)\n        throw new Error('Actor not on map!');\n    const item = actor.map.itemAt(actor.x, actor.y);\n    if (!item) {\n        if (!ctx.quiet) {\n            GWU.message.addAt(actor.x, actor.y, 'Nothing to pickup.');\n        }\n        return 0;\n    }\n    if (actor.avoidsItem(item))\n        return 0;\n    const itemAction = item.getAction('pickup');\n    if (itemAction === false) {\n        if (!ctx.quiet) {\n            GWU.message.addAt(actor.x, actor.y, 'You cannot pickup %{the.item}.', {\n                item,\n            });\n        }\n        return 0;\n    }\n    else if (typeof itemAction === 'function') {\n        // You have to do everything\n        const result = await itemAction(game, actor, item);\n        if (result)\n            return result; // handled\n    }\n    // logs error messages\n    if (!actor.canAddItem(item)) {\n        return 0;\n    }\n    if (!actor.map.removeItem(item)) {\n        return 0;\n    }\n    actor.addItem(item);\n    if (!ctx.quiet) {\n        GWU.message.addAt(actor.x, actor.y, 'You pickup %{the:item}.', {\n            item,\n        });\n    }\n    return actor.endTurn();\n}\ninstallAction('pickup', pickup);\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.quantity = other.quantity;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n    getAction(name) {\n        const action = this.kind.actions[name];\n        return action;\n    }\n    getBumpActions() {\n        return this.kind.bump;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n        this.flags = {\n            item: Flags.Item.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.actions = {};\n        this.bump = [];\n        if (config.flags) {\n            this.flags.item = GWU.flag.from(Flags.Item, this.flags.item, config.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, config.flags);\n        }\n        if (config.actions) {\n            Object.entries(config.actions).forEach(([key, value]) => {\n                this.actions[key] = value;\n            });\n        }\n        if (config.bump) {\n            if (typeof config.bump === 'string' ||\n                typeof config.bump === 'function') {\n                config.bump = [config.bump];\n            }\n            if (Array.isArray(config.bump)) {\n                this.bump = config.bump.slice();\n            }\n        }\n        this.avoidTileFlags |= Flags.Tile.T_DEEP_WATER;\n        this.forbidTileFlags |= Flags.Tile.T_LAVA | Flags.Tile.T_AUTO_DESCENT;\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n        Object.assign(item.flags, this.flags);\n        item.quantity = options.quantity || 1;\n    }\n    avoidsCell(cell, item) {\n        if (cell.isDoor())\n            return true;\n        return super.avoidsCell(cell, item);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","export const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id.toLowerCase()] = handler;\n}\nexport const effectTypes = {};\nexport function installType(id, type) {\n    effectTypes[id] = type;\n}\n// export class Effect {\n//     id = '';\n//     chance = 100 * 100; // 100%\n//     type: string; // self | bolt | beam | ball | burst | adjacent | spread\n//     aim: string; // actor | item | cell\n//     bolt: string | GWU.sprite.SpriteData | null = null;\n//     beam = false;\n//     range = 0;\n//     ball: string | GWU.sprite.SpriteData | null = null;\n//     radius = 0;\n//     center = false;\n//     effects: EffectFn[];\n//     good = false;\n//     seen = false;\n//     next: Effect | null = null;\n//     constructor(config: EffectConfig) {\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         this.aim = config.aim || 'actor';\n//         if (typeof config.chance === 'string') {\n//             // '20%' becomes 2000\n//             config.chance = Math.floor(Number.parseFloat(config.chance) * 100);\n//         }\n//         this.chance = config.chance || 100 * 100;\n//         const type = config.type || 'basic';\n//         const parts = type.split(':');\n//         if (type.startsWith('bolt') || type.startsWith('beam')) {\n//             // bolt:range:sprite\n//             this.type = parts[0];\n//             this.range = parts[1] ? Number.parseInt(parts[1]) : 99;\n//             this.bolt = parts[1] || 'missile';\n//             this.beam = type.startsWith('beam');\n//         } else if (\n//             type.startsWith('ball') ||\n//             type.startsWith('burst') ||\n//             type.startsWith('aura')\n//         ) {\n//             this.type = parts[0];\n//             this.radius = parts[1] ? Number.parseInt(parts[1]) : 2;\n//             this.range = parts[2] ? Number.parseInt(parts[2]) : 99;\n//             this.ball = parts[3] || 'explosion';\n//             this.center = !type.startsWith('aura');\n//         } else {\n//             this.type = 'basic';\n//         }\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         if (Array.isArray(config.effects)) {\n//             this.effects = config.effects.map((e) => {\n//                 if (typeof e === 'function') return e;\n//                 return effectFnFromString(e);\n//             });\n//         } else {\n//             this.effects = [];\n//             Object.entries(config.effects).forEach(([key, value]) => {\n//                 const handler = handlers[key.toLowerCase()];\n//                 if (handler) {\n//                     this.effects.push(handler(value));\n//                 } else if (typeof value === 'function') {\n//                     this.effects.push(value);\n//                 } else {\n//                     throw new Error('Unknown effect: ' + key);\n//                 }\n//             });\n//         }\n//         if (this.effects.length === 0) throw new Error('No effects!');\n//     }\n//     clone(): this {\n//         const other = new (this.constructor as new (\n//             config: EffectConfig\n//         ) => this)(this as EffectConfig);\n//         return other;\n//     }\n//     fire(map: Map.MapType, x: number, y: number, ctx: EffectCtx = {}): boolean {\n//         let didSomething = false;\n//         ctx.good = this.good;\n//         ctx.seen = this.seen;\n//         if (!this.chance || map.rng.chance(this.chance, 10000)) {\n//             // fire\n//             for (let effect of this.effects) {\n//                 if (GWU.data.gameHasEnded) break;\n//                 if (effect(map, x, y, ctx)) {\n//                     didSomething = true;\n//                 } else {\n//                     break;\n//                 }\n//             }\n//         }\n//         if (ctx.aware && didSomething) {\n//             this.seen = true;\n//         }\n//         this.good = ctx.good;\n//         return didSomething;\n//     }\n//     reset() {\n//         this.seen = false;\n//     }\n// }\n// export function effectFnFromString(e: string): EffectFn {\n//     const parts = e.split(':');\n//     if (parts.length === 0) throw new Error('Invalid effect string.');\n//     // @ts-ignore\n//     const name = parts.shift().toLowerCase();\n//     const handler = handlers[name] || null;\n//     if (!handler) {\n//         throw new Error('Failed to find effect handler: ' + name);\n//     }\n//     return handler(parts);\n// }\nexport function make(opts) {\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    let config = {};\n    if (typeof opts === 'string') {\n        // Special case\n        if (opts.toLowerCase().startsWith('spread:')) {\n            const endPos = opts.indexOf(':', 8);\n            const tile = opts.substring(8, endPos);\n            config = {\n                type: 'spread:' + opts.substring(endPos),\n                effects: ['tile:' + tile],\n            };\n        }\n        else {\n            config = { type: 'basic', effects: [opts] };\n        }\n    }\n    else if (typeof opts === 'function') {\n        config = { type: 'basic', effects: [opts] };\n    }\n    else if (Array.isArray(opts)) {\n        config = { type: 'basic', effects: opts };\n    }\n    else {\n        // @ts-ignore\n        if (opts.effect) {\n            // @ts-ignore\n            opts.effects = [opts.effect];\n            delete opts.effect;\n        }\n        // object only\n        if (opts.effects) {\n            Object.assign(config, opts);\n            if (typeof config.effects === 'string') {\n                config.effects = [opts.effects];\n            }\n            else if (typeof config.effects === 'function') {\n                config.effects = [opts.effects];\n            }\n        }\n        else {\n            config.effects = {};\n            Object.entries(opts).forEach(([key, value]) => {\n                const handler = handlers[key.toLowerCase()];\n                if (handler !== undefined) {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else if (typeof value === 'function') {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else {\n                    // @ts-ignore\n                    config[key] = value;\n                }\n            });\n        }\n    }\n    config.type = config.type || 'basic';\n    if (typeof config.type !== 'string')\n        throw new Error('Invalid effect type: ' + JSON.stringify(config.type));\n    const typeParts = config.type.split(':').map((t) => t.trim());\n    const typeName = typeParts.shift();\n    const makeFn = effectTypes[typeName.toLowerCase()];\n    if (!makeFn)\n        throw new Error('Invalid effect type: ' + typeName);\n    const effect = makeFn(config);\n    if (Array.isArray(config.effects)) {\n        config.effects.forEach((e) => {\n            if (typeof e === 'function') {\n                effect.effects.push(e);\n            }\n            else {\n                const parts = e.split(':').map((t) => t.trim());\n                if (parts.length === 1) {\n                    const effect = installedEffects[parts[0]];\n                    if (!effect)\n                        throw new Error('Failed to find effect with id: ' + parts[0]);\n                    effect.effects.push(effect.trigger.bind(effect));\n                }\n                else {\n                    const handler = handlers[parts[0].toLowerCase()];\n                    if (!handler)\n                        throw new Error('Unknown effect: ' + parts[0]);\n                    parts.shift();\n                    effect.effects.push(handler(parts));\n                }\n            }\n        });\n    }\n    else {\n        Object.entries(config.effects).forEach(([key, value]) => {\n            const handler = handlers[key.toLowerCase()];\n            if (!handler)\n                throw new Error('Failed to find handler type: ' + key);\n            effect.effects.push(handler(value));\n        });\n    }\n    if (config.next) {\n        effect.next = make(config.next);\n    }\n    return effect;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'object' && 'trigger' in opts) {\n        return opts;\n    }\n    if (typeof opts === 'string') {\n        const effect = installedEffects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\nfunction isEffect(obj) {\n    return typeof obj === 'object' && 'trigger' in obj;\n}\n//////////////////////////////\n// INSTALL\nexport const installedEffects = {};\nexport function install(id, config) {\n    const effect = isEffect(config) ? config.clone() : make(config);\n    installedEffects[id] = effect;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function resetAll() {\n    Object.values(installedEffects).forEach((e) => (e.seen = false));\n}\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nimport * as Flags from '../../flags';\nexport class BasicEffect {\n    constructor(config) {\n        this.effects = [];\n        this.chance = 100 * 100; // 100%\n        this.seen = false;\n        this.flags = 0;\n        this.next = null;\n        if (typeof config === 'object' && !Array.isArray(config)) {\n            this.flags = GWU.flag.from(Flags.Effect, config.flags);\n            if (typeof config.chance === 'string' &&\n                config.chance.endsWith('%')) {\n                this.chance = Number.parseFloat(config.chance) * 100;\n            }\n            else {\n                this.chance = Number.parseInt(config.chance || '10000');\n            }\n        }\n    }\n    clone() {\n        const other = new this.constructor();\n        other.effects = this.effects.slice();\n        other.chance = this.chance;\n        other.seen = false;\n        other.flags = this.flags;\n        other.next = this.next;\n        return other;\n    }\n    trigger(loc, ctx = {}) {\n        if (!ctx.force && this.chance) {\n            const rng = ctx.rng || loc.map.rng || GWU.random;\n            if (!rng.chance(this.chance, 10000))\n                return false;\n        }\n        let didSomething = false;\n        for (let eff of this.effects) {\n            if (eff(loc, ctx)) {\n                didSomething = true;\n            }\n        }\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                return this.next.trigger(loc, ctx);\n            }\n        }\n        return didSomething;\n    }\n}\nexport function makeBasicEffect(config) {\n    if (typeof config !== 'object') {\n        return new BasicEffect();\n    }\n    return new BasicEffect(config);\n}\nEffect.installType('basic', makeBasicEffect);\n","import * as GWU from 'gw-utils';\nimport { BasicEffect } from './basic';\nimport { installType } from '../effect';\nimport * as Flags from '../../flags';\nexport function makeSpreadEffect(config) {\n    return new SpreadEffect(config);\n}\ninstallType('spread', makeSpreadEffect);\nexport class SpreadEffect extends BasicEffect {\n    constructor(config) {\n        super(config);\n        this.grow = 0;\n        this.decrement = 0;\n        this.matchTile = '';\n        if (!config) {\n            config = { grow: 0, decrement: 0, flags: 0 };\n        }\n        if (typeof config === 'string') {\n            config = config.split(':').map((t) => t.trim());\n        }\n        if (Array.isArray(config)) {\n            if (config[0].toLowerCase() === 'spread') {\n                config.shift();\n            }\n            config = {\n                grow: config[0] || '0',\n                decrement: config[1] || '100',\n                flags: config[2] || '0',\n            };\n        }\n        else if (typeof config.type === 'string' &&\n            config.type.includes(':')) {\n            const parts = config.type.split(':').map((t) => t.trim());\n            if (parts[0].toLowerCase() === 'spread') {\n                parts.shift();\n            }\n            config.grow = parts[0] || '0';\n            config.decrement = parts[1] || '100';\n            config.flags = config.flags + '|' + parts[2];\n        }\n        this.grow = Number.parseInt(config.grow || 0);\n        this.decrement = Number.parseInt(config.decrement || 100);\n        this.flags = GWU.flag.from(Flags.Effect, config.flags || 0);\n        this.matchTile = config.matchTile || '';\n    }\n    clone() {\n        const other = super.clone();\n        other.grow = this.grow;\n        other.decrement = this.decrement;\n        other.matchTile = this.matchTile;\n        return other;\n    }\n    trigger(xy, ctx = {}) {\n        const abortIfBlocking = !!(this.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        let didSomething = false;\n        const map = xy.map;\n        const spawnMap = GWU.grid.alloc(map.width, map.height);\n        didSomething = computeSpawnMap(this, xy, spawnMap);\n        if (!didSomething) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (abortIfBlocking && mapDisruptedBy(map, spawnMap)) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, spawnMap, this.flags)) {\n                didSomething = true;\n            }\n        }\n        spawnMap.forEach((v, x, y) => {\n            if (!v)\n                return;\n            spawnMap[x][y] = 1; // convert from generations to off/on/success\n            for (let eff of this.effects) {\n                if (eff({ map, x, y }, ctx)) {\n                    didSomething = true;\n                    spawnMap[x][y] = 2;\n                }\n            }\n        });\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                if (this.flags & Flags.Effect.E_NEXT_EVERYWHERE) {\n                    spawnMap.forEach((v, x, y) => {\n                        if (!v)\n                            return;\n                        if (v == 2 || nextAlways) {\n                            this.next.trigger({ map, x, y }, ctx);\n                        }\n                    });\n                }\n                else {\n                    this.next.trigger({ map, x: xy.x, y: xy.y }, ctx);\n                }\n            }\n        }\n        GWU.grid.free(spawnMap);\n        return didSomething;\n    }\n}\nexport function mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(map.width, map.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(map.width, map.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (map.cell(i, j).isStairs()) {\n                disrupts = true;\n            }\n        }\n        else if (!map.cell(i, j).blocksMove()) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGWU.grid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.matchTile && !isStart && !cell.hasTile(effect.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, loc, spawnMap) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const map = loc.map;\n    let startProb = effect.grow || 0;\n    let probDec = effect.decrement || 0;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, loc.x, loc.y, true)) {\n        return false;\n    }\n    spawnMap[loc.x][loc.y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y])\n            return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const c = map.cell(x, y);\n            return !a.forbidsCell(c);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeActor(a);\n            map.addActor(loc[0], loc[1], a);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y])\n            return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const dest = map.cell(x, y);\n            return !i.forbidsCell(dest);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(i);\n            map.addItem(loc[0], loc[1], i);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import { installHandler } from '../effect';\n//////////////////////////////////////////////\n// EMIT\nexport function makeEmitHandler(config) {\n    if (Array.isArray(config))\n        config = config[0];\n    if (typeof config !== 'string')\n        throw new Error('Invalid EMIT handler config - ' + config);\n    return emitEffect.bind(undefined, config);\n}\nexport function emitEffect(id, loc, ctx) {\n    return loc.map.events.emit(id, loc, ctx);\n}\ninstallHandler('emit', makeEmitHandler);\n","import * as GWU from 'gw-utils';\nimport { installHandler } from '../effect';\n//////////////////////////////////////////////\n// MESSAGE\nexport function makeMessageHandler(src) {\n    if (Array.isArray(src))\n        src = src[0];\n    if (typeof src !== 'string') {\n        throw new Error('Need message for message effect.');\n    }\n    const info = {\n        msg: src,\n    };\n    return messageEffect.bind(undefined, info);\n}\nexport function messageEffect(info, loc, ctx) {\n    const seen = ctx.seen;\n    const msg = info.msg;\n    if (msg &&\n        msg.length &&\n        ctx.aware &&\n        !seen\n    // && map.isVisible(x, y)\n    ) {\n        GWU.message.addAt(loc.x, loc.y, msg, ctx);\n        return true;\n    }\n    return false;\n}\ninstallHandler('msg', makeMessageHandler);\n","import { installHandler } from '../effect';\n//////////////////////////////////////////////\n// ActivateMachine\nexport function makeActivateMachine() {\n    return activateMachine.bind(undefined);\n}\nexport function activateMachine(loc, ctx) {\n    const cell = loc.map.cell(loc.x, loc.y);\n    const machine = cell.machineId;\n    if (!machine)\n        return false;\n    return loc.map.activateMachine(machine, loc.x, loc.y, ctx);\n}\ninstallHandler('activateMachine', makeActivateMachine);\n","import { installHandler } from '../effect';\nexport function makeTileHandler(src) {\n    if (!src)\n        throw new Error('Tile effect needs configuration.');\n    if (typeof src === 'string') {\n        src = { id: src };\n    }\n    else if (Array.isArray(src)) {\n        src = { id: src[0] };\n    }\n    else if (!src.id) {\n        throw new Error('Tile effect needs configuration with id.');\n    }\n    const opts = src;\n    if (opts.id.includes('!')) {\n        opts.superpriority = true;\n    }\n    if (opts.id.includes('~')) {\n        opts.blockedByActors = true;\n        opts.blockedByItems = true;\n    }\n    opts.id = opts.id.replace(/[!~]*/g, '');\n    return tileEffect.bind(opts);\n}\nexport function tileEffect(loc, ctx) {\n    this.machine = ctx.machine || 0;\n    const didSomething = loc.map.setTile(loc.x, loc.y, this.id, this);\n    return didSomething;\n}\ninstallHandler('tile', makeTileHandler);\n","import * as Flags from '../../flags';\nimport { installHandler } from '../effect';\nexport function makeClearHandler(config) {\n    let layers = 0;\n    if (!config) {\n        layers = Flags.Depth.ALL_LAYERS;\n    }\n    else if (typeof config === 'number') {\n        layers = config;\n    }\n    else if (typeof config === 'string') {\n        const parts = config.split(/[,|]/g);\n        layers = parts.reduce((out, v) => {\n            if (typeof v === 'number')\n                return out | v;\n            const depth = Flags.Depth[v] || 0;\n            return out | depth;\n        }, 0);\n    }\n    else {\n        throw new Error('Invalid config for clear effect: ' + JSON.stringify(config));\n    }\n    return clearEffect.bind(undefined, layers);\n}\nexport function clearEffect(layers, loc, _ctx) {\n    if (!layers)\n        return false;\n    const cell = loc.map.cell(loc.x, loc.y);\n    return cell.clearDepth(layers);\n}\ninstallHandler('clear', makeClearHandler);\n","import * as Effect from '../effect';\nexport function makeFeatureHandler(id) {\n    if (Array.isArray(id))\n        id = id[0];\n    if (id && typeof id !== 'string') {\n        id = id.id;\n    }\n    if (!id || !id.length)\n        throw new Error('Feature effect needs ID');\n    return featureEffect.bind(undefined, id);\n}\nexport function featureEffect(id, loc, ctx) {\n    const feat = Effect.installedEffects[id];\n    if (!feat) {\n        throw new Error('Failed to find feature: ' + id);\n    }\n    return feat.trigger(loc, ctx);\n}\nEffect.installHandler('feature', makeFeatureHandler);\nEffect.installHandler('effect', makeFeatureHandler);\nEffect.installHandler('id', makeFeatureHandler);\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nexport function makeNourishEffect(opts) {\n    if (!opts)\n        throw new Error('Invalid Nourish config.');\n    let info = {};\n    if (typeof opts === 'string') {\n        opts = opts.split(':').map((t) => t.trim());\n    }\n    if (Array.isArray(opts)) {\n        info.type = opts[0] || 'inc';\n        info.amount = GWU.range.make(opts[1] || 1);\n    }\n    else if (opts.type || opts.amount) {\n        info.type = opts.type || 'inc';\n        info.amount = GWU.range.make(opts.amount || 1);\n    }\n    else {\n        throw new Error('Invalid Nourish config: ' + JSON.stringify(opts));\n    }\n    return nourishEffect.bind(undefined, info);\n}\nexport function nourishEffect(config, loc, _ctx) {\n    if (!config.amount)\n        return false;\n    // who am I nourishing?\n    const actor = loc.map.actorAt(loc.x, loc.y);\n    if (!actor) {\n        return false;\n    }\n    const stats = actor.stats;\n    const c = stats.get('food');\n    if (!stats.adjust('food', config.type, config.amount))\n        return false;\n    const n = stats.get('food');\n    if (n < c && n / stats.max('food') < 0.1) {\n        GWU.message.addAt(actor.x, actor.y, nourishEffect.default.pukeMsg, {\n            actor,\n        });\n    }\n    return true;\n}\nnourishEffect.default = {\n    pukeMsg: '%you vomit.',\n};\nEffect.installHandler('nourish', makeNourishEffect);\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nexport function makeStatEffect(opts) {\n    if (!opts)\n        throw new Error('Invalid Stat config.');\n    const info = {};\n    if (typeof opts === 'string') {\n        opts = opts.split(':').map((t) => t.trim());\n    }\n    if (Array.isArray(opts)) {\n        info.stat = opts[0];\n        info.type = opts[1] || 'inc';\n        info.amount = GWU.range.make(opts[2] || 1);\n    }\n    else if (opts.type || opts.amount) {\n        info.stat = opts.stat;\n        info.type = opts.type || 'inc';\n        info.amount = GWU.range.make(info.amount || 1);\n    }\n    else {\n        throw new Error('Invalid stat effect configuration: ' + JSON.stringify(opts));\n    }\n    return statEffect.bind(undefined, info);\n}\nexport function statEffect(config, loc, _ctx) {\n    if (!config.amount)\n        return false;\n    // who am I nourishing?\n    const actor = loc.map.actorAt(loc.x, loc.y);\n    if (!actor) {\n        return false;\n    }\n    // sustain?\n    const stats = actor.stats;\n    if (!stats.adjust('food', config.type, config.amount))\n        return false;\n    return true;\n}\nEffect.installHandler('stat', makeStatEffect);\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/effect';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string' && !value.includes(':')) {\n                effects[key] = value;\n                return;\n            }\n            try {\n                effects[key] = makeEffect(value);\n            }\n            catch (e) {\n                throw new Error(`Failed to add effect to tile => ${key} : ${JSON.stringify(value)} : ` + e.message);\n            }\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n// These are the minimal set of tiles to make the diggers work\nexport const NULL = install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\n// import './tiles';\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile, _opts) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts) {\n        const cell = this.map.cell(x, y);\n        return cell.setTile(tile, opts);\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // // Bookkeeping for fire, pressure plates and key-activated tiles.\n        // for (let x = 0; x < this.map.width; ++x) {\n        //     for (let y = 0; y < this.map.height; ++y) {\n        //         const cell = this.map.cell(x, y);\n        //         if (\n        //             !cell.hasCellFlag(\n        //                 Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM\n        //             ) &&\n        //             cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)\n        //         ) {\n        //             cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n        //         }\n        //     }\n        // }\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            cell.fireEvent(event, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nGWU.color.install('cellStatusName', 'light_blue');\nexport const NEVER_SEEN = {\n    tiles: [TILE.NULL],\n    item: null,\n    actor: null,\n    flags: {\n        cell: 0,\n        entity: TILE.NULL.flags.entity,\n        tile: TILE.NULL.flags.tile,\n        tileMech: TILE.NULL.flags.tileMech,\n    },\n};\nexport class Cell {\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.x = -1;\n        this.y = -1;\n        // toFire: Partial<Effect.EffectCtx>[] = [];\n        this.memory = null;\n        // this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.snapshot = GWU.sprite.makeMixer();\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n        this.memory = NEVER_SEEN;\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    get hasStableSnapshot() {\n        return this.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    }\n    get hasStableMemory() {\n        return this.hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    storeMemory() {\n        var _a;\n        this.setCellFlag(Flags.Cell.STABLE_MEMORY);\n        // store memory\n        this.memory = {\n            flags: {\n                cell: this.flags.cell,\n                entity: this.tiles.reduce((out, tile) => out | ((tile === null || tile === void 0 ? void 0 : tile.flags.entity) || 0), 0),\n                tile: this.tiles.reduce((out, tile) => out | ((tile === null || tile === void 0 ? void 0 : tile.flags.tile) || 0), 0),\n                tileMech: this.tiles.reduce((out, tile) => out | ((tile === null || tile === void 0 ? void 0 : tile.flags.tileMech) || 0), 0),\n            },\n            tiles: this.tiles.slice(),\n            item: ((_a = this.item) === null || _a === void 0 ? void 0 : _a.clone()) || null,\n            actor: null,\n        };\n        if (this.hasItem()) {\n            const item = this.item;\n            if (item) {\n                this.memory.flags.entity |= item.flags.entity;\n            }\n        }\n        if (this.hasActor()) {\n            const actor = this.actor;\n            if (actor) {\n                this.memory.flags.entity |= actor.flags.entity;\n            }\n            this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n    }\n    clearMemory() {\n        this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT | Flags.Cell.STABLE_MEMORY);\n        this.memory = null;\n        this.needsRedraw = true;\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        // this._actor = other.actor;\n        // this._item = other.item;\n        this.memory = other.memory;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n        other.getSnapshot(this.snapshot);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, checkEntities = false) {\n        var _a, _b;\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        if (!checkEntities)\n            return false;\n        if (this.hasItem()) {\n            if ((_a = this.item) === null || _a === void 0 ? void 0 : _a.hasEntityFlag(flag))\n                return true;\n        }\n        if (this.hasActor()) {\n            if ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.hasEntityFlag(flag))\n                return true;\n        }\n        return false;\n    }\n    hasAllEntityFlags(flags, checkEntities = false) {\n        return (this.entityFlags(checkEntities) & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        var _a, _b;\n        let flag = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            if (this.hasItem()) {\n                flag |= ((_a = this.item) === null || _a === void 0 ? void 0 : _a.flags.entity) || 0;\n            }\n            if (this.hasActor()) {\n                flag |= ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.flags.entity) || 0;\n            }\n        }\n        return flag;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            if (!this.memory) {\n                this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n                this.flags.cell &= ~Flags.Cell.STABLE_SNAPSHOT;\n                this.map.needsRedraw = true;\n            }\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return this.tiles.some((t) => t && t.blocksVision());\n    }\n    blocksPathing() {\n        return (this.tiles.some((t) => t && t.blocksPathing()) &&\n            !this.tiles.some((t) => t && t.hasTileFlag(Flags.Tile.T_BRIDGE)));\n    }\n    blocksMove() {\n        return this.tiles.some((t) => t && t.blocksMove());\n    }\n    blocksEffects() {\n        return this.tiles.some((t) => t && t.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isNull() {\n        return this.tiles.every((t) => !t || t === TILE.tiles.NULL);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isDoor() {\n        return this.hasTileFlag(Flags.Tile.T_IS_DOOR);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    // hasKey(): boolean {\n    //     return this._entities.some(\n    //         (e) => !!e.key && e.key.matches(this.x, this.y)\n    //     );\n    // }\n    hasLiquid() {\n        return this.hasTileFlag(Flags.Tile.T_ANY_LIQUID);\n    }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile, opts = {}) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (this.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && this.hasItem())\n            return false;\n        if (opts.blockedByActors && this.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && this.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const currentGround = this.depthTile(Flags.Depth.GROUND);\n            const wantGround = TILE.get(tile.groundTile);\n            if (currentGround !== wantGround) {\n                if (!this.setTile(wantGround, opts)) {\n                    return false;\n                }\n            }\n        }\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            this.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            this.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            this.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.needsRedraw = true;\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.snapshot.blackOut();\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    tileWithEffect(name) {\n        return this.tiles.find((t) => t === null || t === void 0 ? void 0 : t.hasEffect(name)) || null;\n    }\n    fireEvent(event, ctx = {}) {\n        // ctx.cell = this;\n        let didSomething = false;\n        // console.log('fire event - %s', event);\n        for (const tile of this.tiles) {\n            if (!tile || !tile.effects)\n                continue;\n            const ev = tile.effects[event];\n            if (ev) {\n                const r = this._activate(ev, ctx);\n                if (r) {\n                    didSomething = true;\n                }\n            }\n        }\n        return didSomething;\n    }\n    _activate(effect, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.installedEffects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = effect.trigger(this, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this.map.itemAt(this.x, this.y);\n    }\n    canAddItem(_item) {\n        return true;\n    }\n    canRemoveItem(_item) {\n        return true;\n    }\n    _addItem(_item) {\n        this.setCellFlag(Flags.Cell.HAS_ITEM);\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    _removeItem(item) {\n        let hasItems = false;\n        let foundIndex = -1;\n        this.map.items.forEach((obj, index) => {\n            if (obj === item) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasItems = true;\n            }\n        });\n        if (!hasItems) {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this.map.actorAt(this.x, this.y);\n    }\n    canAddActor(_actor) {\n        return true;\n    }\n    canRemoveActor(_actor) {\n        return true;\n    }\n    _addActor(actor) {\n        this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        if (actor.isPlayer()) {\n            this.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    _removeActor(actor) {\n        let hasActor = false;\n        let foundIndex = -1;\n        this.map.actors.forEach((obj, index) => {\n            if (obj === actor) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasActor = true;\n            }\n        });\n        if (!hasActor) {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    hasFx() {\n        return !!(this.flags.cell & Flags.Cell.HAS_FX);\n    }\n    get fx() {\n        return this.map.fxAt(this.x, this.y);\n    }\n    _addFx(_fx) {\n        this.setCellFlag(Flags.Cell.HAS_FX);\n        this.needsRedraw = true;\n    }\n    _removeFx(_fx) {\n        if (!this.fx) {\n            this.clearCellFlag(Flags.Cell.HAS_FX);\n        }\n        this.needsRedraw = true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        if (this.hasActor()) {\n            const actor = this.map.actorAt(this.x, this.y);\n            if (actor && actor.sprite.ch)\n                return actor.sprite.ch;\n        }\n        if (this.hasItem()) {\n            const item = this.map.itemAt(this.x, this.y);\n            if (item && item.sprite.ch)\n                return item.sprite.ch;\n        }\n        if (this.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return '=';\n        }\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n    drawStatus(buffer, bounds) {\n        const lines = buffer.wrapText(bounds.x + 1, bounds.y, bounds.width - 1, this.getName(), 'cellStatusName');\n        return lines;\n    }\n    toString() {\n        return `Cell @ ${this.x},${this.y}`;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nconst highlightColor = GWU.color.install('highlight', [100, 100, 0]);\nexport class BasicDrawer {\n    constructor() {\n        this.scent = false;\n    }\n    drawInto(dest, map, opts = {}) {\n        const buffer = dest instanceof GWU.buffer.Buffer ? dest : dest.buffer;\n        const offsetX = opts.offsetX || 0;\n        const offsetY = opts.offsetY || 0;\n        map.clearMapFlag(Flags.Map.MAP_DANCES);\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                if (map.hasXY(x + offsetX, y + offsetY)) {\n                    const cell = map.cell(x + offsetX, y + offsetY);\n                    this.drawCell(mixer, map, cell, map.fov);\n                    buffer.drawSprite(x, y, mixer);\n                }\n            }\n        }\n    }\n    drawCell(dest, map, cell, fov) {\n        dest.blackOut();\n        // const isVisible = fov ? fov.isAnyKindOfVisible(cell.x, cell.y) : true;\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (cell.needsRedraw || needSnapshot) {\n            this.getAppearance(dest, map, cell);\n            cell.putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            cell.getSnapshot(dest);\n            if (cell.hasCellFlag(Flags.Cell.COLORS_DANCE)) {\n                map.setMapFlag(Flags.Map.MAP_DANCES);\n            }\n        }\n        this.applyLight(dest, cell, fov);\n        let separate = false;\n        if (cell.memory) {\n            separate = !!(cell.memory.flags.entity &\n                (Flags.Entity.L_VISUALLY_DISTINCT |\n                    Flags.Entity.L_LIST_IN_SIDEBAR));\n        }\n        else {\n            separate = cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT |\n                Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        }\n        if (cell.hasCellFlag(Flags.Cell.IS_CURSOR)) {\n            dest.bg = dest.bg.mix(highlightColor, 50);\n            separate = true;\n        }\n        else if (cell.hasCellFlag(Flags.Cell.IS_HIGHLIGHTED)) {\n            dest.bg = dest.bg.mix(highlightColor, 25);\n            separate = true;\n            dest.invert();\n        }\n        if (this.scent && map.player) {\n            const s = GWU.clamp(map.player.scent.get(cell.x, cell.y) * 5, 0, 50);\n            if (s) {\n                const c = GWU.color.colors.red;\n                dest.mix(c, 0, s);\n            }\n        }\n        if (separate) {\n            [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n        }\n        return true;\n    }\n    // getCellAppearance(cell: CellType, dest: GWU.sprite.Mixer) {\n    //     dest.blackOut();\n    //     const isVisible = true; // this.fov.isAnyKindOfVisible(x, y);\n    //     const isRevealed = true; // this.fov.isRevealed(x, y);\n    //     const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     if (needSnapshot || (cell.needsRedraw && isVisible)) {\n    //         this.layers.forEach((layer) => layer.putAppearance(dest, cell));\n    //         if (dest.dances) {\n    //             cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n    //         } else {\n    //             cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n    //         }\n    //         dest.bake();\n    //         cell.putSnapshot(dest);\n    //         cell.needsRedraw = false;\n    //         cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     } else {\n    //         cell.getSnapshot(dest);\n    //     }\n    //     if (isVisible) {\n    //         const light = this.light.getLight(cell.x, cell.y);\n    //         dest.multiply(light);\n    //     } else if (isRevealed) {\n    //         dest.scale(50);\n    //     } else {\n    //         dest.blackOut();\n    //     }\n    //     if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n    //         [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n    //     }\n    // }\n    getAppearance(dest, map, cell) {\n        let tiles = cell.tiles;\n        let actor = null;\n        let item = null;\n        if (cell.memory) {\n            tiles = cell.memory.tiles;\n            item = cell.memory.item;\n        }\n        else {\n            actor = cell.hasActor() ? cell.actor : null;\n            item = cell.hasItem() ? cell.item : null;\n        }\n        const ground = tiles[Flags.Depth.GROUND];\n        const surface = tiles[Flags.Depth.SURFACE];\n        const liquid = tiles[Flags.Depth.LIQUID];\n        const gas = tiles[Flags.Depth.GAS]; // How to get volume!?!?!?!\n        dest.drawSprite(ground.sprite);\n        if (surface) {\n            dest.drawSprite(surface.sprite);\n        }\n        if (liquid) {\n            dest.drawSprite(liquid.sprite);\n        }\n        if (item) {\n            item.drawInto(dest);\n        }\n        if (actor) {\n            actor.drawInto(dest);\n        }\n        if (gas) {\n            const opacity = GWU.rng.cosmetic.number(50) + 25;\n            dest.drawSprite(gas.sprite, opacity);\n        }\n        if (cell.hasFx()) {\n            const fx = map.fxAt(cell.x, cell.y);\n            if (fx)\n                dest.drawSprite(fx.sprite);\n        }\n        if (dest.dances) {\n            cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n            map.setMapFlag(Flags.Map.MAP_DANCES);\n        }\n        else {\n            cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        dest.bake(true); // apply dancing\n    }\n    applyLight(dest, cell, fov) {\n        const isVisible = !fov || fov.isAnyKindOfVisible(cell.x, cell.y);\n        const isRevealed = !fov || fov.isRevealed(cell.x, cell.y);\n        const light = cell.map.light.getLight(cell.x, cell.y);\n        dest.multiply(light);\n        // TODO - is Clairy\n        // TODO - is Telepathy\n        if (fov && fov.isCursor(cell.x, cell.y)) {\n            dest.invert();\n        }\n        else if (!isVisible) {\n            if (isRevealed) {\n                dest.scale(70);\n            }\n            else {\n                dest.blackOut();\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\nimport * as Effect from '../effect';\nimport { BasicDrawer } from '../draw/basic';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        // _memory: GWU.grid.Grid<CellMemory>;\n        // machineCount = 0;\n        // _seed = 0;\n        this.rng = GWU.rng.random;\n        // id = 'MAP';\n        this.actors = [];\n        this.items = [];\n        this.fx = [];\n        this.player = null;\n        this._animations = [];\n        this.events = new GWU.events.EventEmitter();\n        this.flags = { map: 0 };\n        this.layers = [];\n        this.properties = { seed: 0, machineCount: 0 };\n        if (opts.id) {\n            this.properties.id = opts.id;\n        }\n        this.drawer = opts.drawer || new BasicDrawer();\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        // this._memory = GWU.grid.make(\n        //     width,\n        //     height,\n        //     (x, y) => new CellMemory(this, x, y)\n        // );\n        if (opts.seed) {\n            this.properties.seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        if (opts.fov === undefined) {\n            opts.alwaysVisible = true;\n        }\n        else if (opts.fov === false) {\n            opts.visible = true;\n        }\n        opts.callback = this.onFovChange.bind(this);\n        this.fov = new GWU.fov.FovSystem(this, opts);\n        this.initLayers();\n        if (opts.player) {\n            this.setPlayer(opts.player);\n        }\n    }\n    get seed() {\n        return this.properties.seed;\n    }\n    set seed(v) {\n        this.properties.seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    get width() {\n        return this.cells.width;\n    }\n    get height() {\n        return this.cells.height;\n    }\n    // memory(x: number, y: number): CellMemory {\n    //     return this._memory[x][y];\n    // }\n    // knowledge(x: number, y: number): CellInfoType {\n    //     if (this.fov.isAnyKindOfVisible(x, y)) return this.cell(x,y);\n    //     return this._memory[x][y];\n    // }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // items\n    hasItem(x, y) {\n        return this.cell(x, y).hasItem();\n    }\n    itemAt(x, y) {\n        return this.items.find((i) => i.isAt(x, y)) || null;\n    }\n    eachItem(cb) {\n        this.items.forEach(cb);\n    }\n    addItem(x, y, item, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        // if (!cell.canAddItem(item)) return false;\n        if (cell._addItem(item)) {\n            const index = this.items.indexOf(item);\n            if (index < 0) {\n                this.items.push(item);\n            }\n            item.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireAddItemEffects(item, cell);\n            }\n            if (index < 0) {\n                this.events.emit('item', this, item, true);\n            }\n            return true;\n        }\n        return false;\n    }\n    _fireAddItemEffects(item, cell) {\n        if (item.key &&\n            item.key.matches(cell.x, cell.y) &&\n            cell.hasEffect('key')) {\n            cell.fireEvent('key', {\n                key: item,\n                item,\n            });\n        }\n        else if (cell.hasEffect('add_item')) {\n            cell.fireEvent('add_item', {\n                key: item,\n                item,\n            });\n        }\n    }\n    addItemNear(x, y, item, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this.cell(i, j);\n            if (cell.hasItem())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (item.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        return this.addItem(loc[0], loc[1], item, fireEffects);\n    }\n    removeItem(item, fireEffects = false) {\n        const cell = this.cell(item.x, item.y);\n        // if (!cell.canRemoveItem(item)) return false;\n        if (cell._removeItem(item)) {\n            if (fireEffects) {\n                this._fireRemoveItemEffects(item, cell);\n            }\n            GWU.arrayDelete(this.items, item);\n            item.removeFromMap();\n            this.events.emit('item', this, item, false);\n            return true;\n        }\n        return false;\n    }\n    _fireRemoveItemEffects(item, cell) {\n        if (item.isKey(cell.x, cell.y) && cell.hasEffect('no_key')) {\n            cell.fireEvent('no_key', {\n                key: item,\n                item,\n            });\n        }\n        else if (cell.hasEffect('remove_item')) {\n            cell.fireEvent('remove_item', {\n                key: item,\n                item,\n            });\n        }\n    }\n    moveItem(item, x, y, fireEffects = false) {\n        if (item.map !== this)\n            throw new Error('Actor not on this map!');\n        const currentCell = this.cell(item.x, item.y);\n        const newCell = this.cell(x, y);\n        // if (!currentCell.canRemoveItem(item)) return false;\n        // if (!newCell.canAddItem(item)) return false;\n        currentCell._removeItem(item);\n        if (newCell._addItem(item)) {\n            if (fireEffects) {\n                this._fireRemoveItemEffects(item, currentCell);\n                this._fireAddItemEffects(item, newCell);\n            }\n            item.addToMap(this, x, y);\n        }\n        return true;\n    }\n    //  moveItem(item: Item, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = item.x;\n    //     const oldY = item.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[item.depth] as Layer.ItemLayer;\n    //     if (!( layer.removeItem(item))) return false;\n    //     if (!( this.addItem(x, y, item))) {\n    //         layer.forceItem(item.x, item.y, item);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (item.lastSeen) {\n    //     //         this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n    //     //         this.clearCellFlag(\n    //     //             item.lastSeen.x,\n    //     //             item.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         item.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.item = item;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     item.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    setPlayer(player) {\n        this.player = player;\n    }\n    actorAt(x, y) {\n        return this.actors.find((a) => a.isAt(x, y)) || null;\n    }\n    eachActor(cb) {\n        this.actors.forEach(cb);\n    }\n    addActor(x, y, actor, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (!cell.canAddActor(actor))\n            return false;\n        if (cell._addActor(actor)) {\n            const index = this.actors.indexOf(actor);\n            if (index < 0) {\n                this.actors.push(actor);\n            }\n            actor.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireAddActorEffects(actor, cell);\n            }\n            if (index < 0) {\n                this.events.emit('actor', this, actor, true);\n            }\n            return true;\n        }\n        return false;\n    }\n    _fireAddActorEffects(actor, cell) {\n        if (actor.isKey(cell.x, cell.y) && cell.hasEffect('key')) {\n            cell.fireEvent('key', {\n                key: actor,\n                actor,\n            });\n        }\n        else if (actor.isPlayer() && cell.hasEffect('add_player')) {\n            cell.fireEvent('add_player', {\n                player: actor,\n                actor,\n            });\n        }\n        else if (cell.hasEffect('add_actor')) {\n            cell.fireEvent('add_actor', {\n                actor,\n            });\n        }\n    }\n    addActorNear(x, y, actor, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this.cell(i, j);\n            if (cell.hasActor())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        return this.addActor(loc[0], loc[1], actor, fireEffects);\n    }\n    removeActor(actor, fireEffects = false) {\n        const cell = this.cell(actor.x, actor.y);\n        if (!cell.canRemoveActor(actor))\n            return false;\n        if (cell._removeActor(actor)) {\n            if (fireEffects) {\n                this._fireRemoveActorEffects(actor, cell);\n            }\n            actor.removeFromMap();\n            GWU.arrayDelete(this.actors, actor);\n            this.events.emit('actor', this, actor, false);\n            return true;\n        }\n        return false;\n    }\n    _fireRemoveActorEffects(actor, cell) {\n        if (actor.isKey(actor.x, actor.y) && cell.hasEffect('no_key')) {\n            cell.fireEvent('no_key', {\n                key: actor,\n                actor,\n            });\n        }\n        else if (actor.isPlayer() && cell.hasEffect('remove_player')) {\n            cell.fireEvent('remove_player', {\n                actor,\n                player: actor,\n            });\n        }\n        else if (cell.hasEffect('remove_actor')) {\n            cell.fireEvent('remove_actor', {\n                actor,\n            });\n        }\n    }\n    moveActor(actor, x, y, fireEffects = false) {\n        if (actor.map !== this)\n            throw new Error('Actor not on this map!');\n        const currentCell = this.cell(actor.x, actor.y);\n        const newCell = this.cell(x, y);\n        // if (!currentCell.canRemoveActor(actor)) return false;\n        // if (!newCell.canAddActor(actor)) return false;\n        currentCell._removeActor(actor);\n        if (newCell._addActor(actor)) {\n            actor.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireRemoveActorEffects(actor, currentCell);\n                this._fireAddActorEffects(actor, newCell);\n            }\n        }\n        return true;\n    }\n    //  moveActor(actor: Actor, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = actor.x;\n    //     const oldY = actor.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[actor.depth] as Layer.ActorLayer;\n    //     if (!( layer.removeActor(actor))) return false;\n    //     if (!( layer.addActor(x, y, actor))) {\n    //         layer.forceActor(actor.x, actor.y, actor);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (actor.lastSeen) {\n    //     //         this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(\n    //     //             actor\n    //     //         );\n    //     //         this.clearCellFlag(\n    //     //             actor.lastSeen.x,\n    //     //             actor.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         actor.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.actor = actor;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     actor.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    fxAt(x, y) {\n        return this.fx.find((i) => i.isAt(x, y)) || null;\n    }\n    eachFx(cb) {\n        this.fx.forEach(cb);\n    }\n    addFx(x, y, fx) {\n        const cell = this.get(x, y);\n        if (!cell)\n            return false;\n        fx.x = x;\n        fx.y = y;\n        cell._addFx(fx);\n        this.fx.push(fx);\n        this.events.emit('fx', this, fx, true);\n        return true;\n    }\n    moveFx(fx, x, y) {\n        const current = this.get(fx.x, fx.y);\n        const updated = this.get(x, y);\n        if (!updated)\n            return false;\n        current._removeFx(fx);\n        fx.x = x;\n        fx.y = y;\n        updated._addFx(fx);\n        return true;\n    }\n    removeFx(fx) {\n        const cell = this.get(fx.x, fx.y);\n        GWU.arrayDelete(this.fx, fx);\n        if (cell) {\n            cell._removeFx(fx);\n        }\n        this.events.emit('fx', this, fx, false);\n        return true;\n    }\n    // Information\n    // isVisible(x: number, y: number): boolean {\n    //     return this.fov.isAnyKindOfVisible(x, y);\n    // }\n    hasKey(x, y) {\n        const actor = this.actorAt(x, y);\n        if (actor && actor.isKey(x, y))\n            return true;\n        const item = this.itemAt(x, y);\n        if (item && item.isKey(x, y))\n            return true;\n        return false;\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const getCh = (cell) => {\n            return cell.dump();\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    get needsRedraw() {\n        return this.hasMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v)\n            this.setMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n        else\n            this.clearMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    hasEntityFlag(x, y, flag) {\n        return this.cell(x, y).hasEntityFlag(flag);\n    }\n    hasTileFlag(x, y, flag) {\n        return this.cell(x, y).hasTileFlag(flag);\n    }\n    highlightPath(path, markCursor = true) {\n        this.clearPath();\n        path.forEach((loc) => {\n            this.setCellFlag(loc[0], loc[1], Flags.Cell.IS_HIGHLIGHTED);\n        });\n        if (markCursor && path[0]) {\n            const loc = path[0];\n            this.setCellFlag(loc[0], loc[1], Flags.Cell.IS_CURSOR);\n        }\n        this.needsRedraw = true;\n    }\n    clearPath() {\n        this.cells.forEach((c) => c.clearCellFlag(Flags.Cell.IS_CURSOR | Flags.Cell.IS_HIGHLIGHTED));\n        this.needsRedraw = true;\n    }\n    showCursor(x, y) {\n        this.clearCursor();\n        this.cell(x, y).setCellFlag(Flags.Cell.IS_CURSOR);\n        this.needsRedraw = true;\n    }\n    clearCursor() {\n        this.cells.forEach((c) => c.clearCellFlag(Flags.Cell.IS_CURSOR));\n        this.needsRedraw = true;\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        // this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile\n    // useMemory = false\n    ) {\n        return this.cell(x, y).hasTile(tile);\n        // if (!useMemory) return this.cell(x, y).hasTile(tile);\n        // return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            const name = tile;\n            tile = TILE.get(name);\n            if (!tile)\n                throw new Error('Failed to find tile: ' + name);\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clearTiles(tile);\n    }\n    tick(dt) {\n        let didSomething = false;\n        this._animations.forEach((a) => {\n            didSomething = a.tick(dt) || didSomething;\n        });\n        this._animations = this._animations.filter((a) => a.isRunning());\n        didSomething = this.fireAll('tick') || didSomething;\n        for (let layer of this.layers) {\n            if (layer && layer.tick(dt)) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cell(x, y));\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.actors = src.actors.slice();\n        this.items = src.items.slice();\n        this.flags.map = src.flags.map;\n        // this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.fireEvent(event, ctx);\n    }\n    fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        willFire.forEach((w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    cell.fireEvent(event, {\n                        force: true,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        cell.fireEvent('machine', ctx) || didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    // DRAW\n    drawInto(dest, opts) {\n        this.drawer.drawInto(dest, this, opts);\n    }\n    getAppearanceAt(x, y, dest) {\n        const cell = this.cell(x, y);\n        return this.drawer.drawCell(dest, this, cell);\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(cb) {\n        // TODO - Clairy, Telepathy, Detect, etc...\n        if (this.player) {\n            cb(this.player.x, this.player.y, this.player.visionDistance, GWU.fov.FovFlags.PLAYER);\n        }\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n    // redrawCell(x: number, y: number): void {\n    //     // if (clearMemory) {\n    //     //     this.clearMemory(x, y);\n    //     // }\n    //     this.cell(x, y).needsRedraw = true;\n    // }\n    storeMemory(x, y) {\n        const cell = this.cell(x, y);\n        cell.storeMemory();\n    }\n    makeVisible(x, y) {\n        const cell = this.cell(x, y);\n        cell.clearMemory();\n    }\n    onFovChange(x, y, isVisible) {\n        if (!isVisible) {\n            this.storeMemory(x, y);\n        }\n        else {\n            this.makeVisible(x, y);\n        }\n    }\n    // Animator\n    addAnimation(a) {\n        this._animations.push(a);\n    }\n    removeAnimation(a) {\n        GWU.arrayDelete(this._animations, a);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount =\n                                                cellCount;\n                                            map.cell(i2, j2).flags.cell &=\n                                                ~Flags.Cell.IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        // fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        // if (this.map.fov.changed) {\n        //     this.fovVersion = this.version;\n        //     this.map.fov.changed = false;\n        // }\n        // if (snap.version !== this.fovVersion) {\n        //     snap.map.fov.copy(this.map.fov);\n        // }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        // if (snap.version < this.fovVersion || this.map.fov.changed) {\n        //     this.map.fov.copy(snap.map.fov);\n        //     this.fovVersion = snap.version;\n        // }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import { Map } from './map';\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile === undefined) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === undefined) {\n        opts.boundary = 'WALL';\n    }\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nexport function getCellPathCost(map, x, y) {\n    const cell = map.cell(x, y);\n    if (cell.blocksMove())\n        return GWU.path.OBSTRUCTION;\n    if (cell.blocksPathing())\n        return GWU.path.FORBIDDEN;\n    if (cell.hasActor())\n        return 10;\n    return 1;\n}\nexport function fillCostMap(map, costMap) {\n    costMap.update((_v, x, y) => getCellPathCost(map, x, y));\n}\nexport function getPathBetween(map, x0, y0, x1, y1, options = {}) {\n    const distanceMap = GWU.grid.alloc(map.width, map.height);\n    const costMap = GWU.grid.alloc(map.width, map.height);\n    fillCostMap(map, costMap);\n    GWU.path.calculateDistances(distanceMap, x0, y0, costMap, options.eightWays, GWU.xy.straightDistanceBetween(x0, y0, x1, y1) + 1);\n    const path = GWU.path.getPath(distanceMap, x1, y1, (x, y) => map.cell(x, y).blocksMove(), options.eightWays);\n    GWU.grid.free(costMap);\n    GWU.grid.free(distanceMap);\n    return path;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    spawn(map, x = -1, y = -1, opts = {}) {\n        var _a;\n        opts.canSpawn = opts.canSpawn || GWU.TRUE;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_a = opts.machine) !== null && _a !== void 0 ? _a : 0;\n        const leader = this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addLeader(leader, map, x, y, opts)) {\n            return null;\n        }\n        return leader;\n    }\n    _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        entries.forEach(([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                this._spawnMember(kindId, map, leader, opts);\n            }\n        });\n        return count;\n    }\n    _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1, -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addMember(member, map, x, y, leader, opts)) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canSpawn(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n","export const actions = {};\nexport function installCommand(name, fn) {\n    actions[name] = fn;\n}\nexport function getCommand(name) {\n    return actions[name];\n}\n","import { installCommand } from './command';\nimport * as Actor from '../actor';\n// COMMANDS\n// this === GAME\nexport async function moveDir(actor, e) {\n    const dir = e.dir;\n    if (!actor.map || !dir)\n        return -1;\n    return Actor.actions.moveDir(this, actor, e);\n}\ninstallCommand('moveDir', moveDir);\n","import * as GWU from 'gw-utils';\nimport { installCommand } from './command';\nexport async function pickup(actor, _ev) {\n    if (!actor.map)\n        return -1;\n    const playerAction = actor.getAction('pickup');\n    if (!playerAction) {\n        GWU.message.addAt(actor.x, actor.y, 'You cannot pickup items.');\n        return actor.endTurn();\n    }\n    else {\n        // You have to do everything\n        const result = await playerAction(this, actor);\n        if (result)\n            return result; // handled\n    }\n    // Should never get here, but...\n    const standStill = actor.getAction('standStill');\n    if (!standStill)\n        throw new Error('Actor cannot stand still.');\n    return standStill(this, actor);\n}\ninstallCommand('pickup', pickup);\n","// export * from './memory';\n// export * from './system';\nexport const empty = {};\n","/*\n    Attributes\n    ========================\n\n    To configure attributes, set the defaults:\n\n    Attribute.install(')\n\n    const attr = new Attributes(10);\n\n    attr.set('str', 10);\n    attr.set('dex', 10);\n    ...\n    attr.set('chr', 10);\n\n    // to get the current value\n    attr.get('str');\n\n    // To raise an attribute permanently\n    attr.gain('chr', 1);\n\n    // To raise an attribute temporarily\n    attr.gain('chr', 1, false);\n\n    // To lower an attribute permanently\n    attr.drain('chr', 1, true);\n\n    // to lower an attribute temporarily\n    attr.drain('chr', 1);\n\n    // to restore (remove) all temporary changes\n    attr.restore();\n\n    // to add a temporary change that can be removed by itself\n    attr.addBonus('str', 1);\n\n    // to remove the bonus\n    attr.clearBonus('str', 1);\n\n    // adjustments (bonuses) are also possible via:\n    attr.adjust('str', { bonus: 1 });\n\n    // But adjustments can also set the\n    attr.adjust('str', { fixed: 14 });      // temporarily sets base\n    attr.adjust('str', { base: 21 });       // resets the base\n    attr.adjust('str', { restore: true });  // removes all bonuses/penalties\n    attr.adjust('str', { min: 10 });        // limits value\n    attr.adjust('str', { max: 30 });        // limits value\n    attr.adjust('str', { sustain: true });  // turns off lowering values\n*/\nexport class Attributes {\n    constructor(baseValues) {\n        this._base = {};\n        this._max = {};\n        this._bonus = {};\n        this._sustain = {};\n        this._value = {};\n        this.changed = null;\n        this.init(baseValues);\n    }\n    init(baseValues) {\n        for (let k in attributes) {\n            const v = typeof baseValues === 'number' ? baseValues : attributes[k];\n            this.set(k, v);\n        }\n        if (typeof baseValues !== 'number') {\n            for (let k in baseValues) {\n                this.set(k, baseValues[k]);\n            }\n        }\n    }\n    forEach(fn) {\n        Object.keys(attributes).forEach((k) => fn(this.get(k)));\n    }\n    // modifier(name: string) {\n    //     return Math.floor((this.get(name) - 10) / 2);\n    // }\n    get(name) {\n        return this._value[name] || 0;\n    }\n    set(name, value = 0) {\n        this._value[name] = value;\n        this._base[name] = value;\n        this._max[name] = value;\n        this._bonus[name] = [];\n        return value;\n    }\n    base(name) {\n        return this._base[name] || 0;\n    }\n    max(name) {\n        return this._max[name] || 0;\n    }\n    sustain(name) {\n        return this._sustain[name] || false;\n    }\n    gain(name, delta, raiseMax = true) {\n        if (delta < 0 && this._sustain[name])\n            return 0;\n        this._base[name] += delta;\n        if (raiseMax && this._base[name] > this._max[name]) {\n            this._max[name] = this._base[name];\n        }\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    drain(name, loss, lowerMax = false) {\n        if (loss < 0)\n            loss = -loss;\n        const changed = this.gain(name, -loss, false);\n        if (changed && lowerMax) {\n            this._max[name] = this._base[name];\n        }\n        return changed;\n    }\n    restore(name) {\n        this._base[name] = this._max[name];\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    addBonus(name, bonus) {\n        return this._addBonus(name, { bonus });\n    }\n    _addBonus(name, bonus) {\n        if (typeof bonus === 'number')\n            bonus = { bonus };\n        if (this._value[name] === undefined) {\n            this.set(name, 0);\n        }\n        this._bonus[name].push(bonus);\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    clearBonus(name, bonus) {\n        return this._clearBonus(name, { bonus });\n    }\n    _clearBonus(name, bonus) {\n        if (typeof bonus === 'number')\n            bonus = { bonus };\n        let arr = this._bonus[name] || [];\n        let key = JSON.stringify(bonus);\n        let index = arr.findIndex((o) => {\n            return JSON.stringify(o) == key;\n        });\n        if (index > -1) {\n            arr.splice(index, 1);\n            let old = this.get(name);\n            return this._calcValue(name) - old;\n        }\n        return 0;\n    }\n    _calcValue(name) {\n        let allAdjustments = {};\n        this._bonus[name].forEach((adj) => this._applyAdjustment(allAdjustments, adj));\n        this._sustain[name] = allAdjustments.sustain || false;\n        let value = this._base[name] || 0;\n        if (allAdjustments.fixed !== undefined) {\n            value = allAdjustments.fixed;\n        }\n        else {\n            value += allAdjustments.bonus || 0;\n            if (allAdjustments.min !== undefined) {\n                value = Math.max(allAdjustments.min, value);\n            }\n            if (allAdjustments.max !== undefined) {\n                value = Math.min(allAdjustments.max, value);\n            }\n        }\n        return (this._value[name] = value);\n    }\n    adjust(name, adj) {\n        let delta = undefined;\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        if (adj.base) {\n            delta = this.gain(name, adj.base);\n        }\n        else if (adj.restore) {\n            delta = this.restore(name);\n            if (delta == 0)\n                delta = undefined;\n        }\n        else {\n            delta = this._addBonus(name, adj);\n        }\n        if (this.changed && delta !== undefined)\n            this.changed(this, name);\n        return delta;\n    }\n    clearAdjustment(name, adj) {\n        let delta = undefined;\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        if (adj.base) {\n            delta = this.drain(name, adj.base, true);\n        }\n        else if (adj.restore) {\n            // do nothing...\n        }\n        else {\n            delta = this._clearBonus(name, adj);\n        }\n        if (this.changed && delta !== undefined)\n            this.changed(this, name);\n        return delta;\n    }\n    _applyAdjustment(total, opts) {\n        if (opts.bonus) {\n            total.bonus = (total.bonus || 0) + opts.bonus;\n        }\n        if (opts.fixed !== undefined) {\n            total.fixed = Math.max(total.fixed || 0, opts.fixed);\n        }\n        if (opts.min !== undefined) {\n            total.min = Math.max(total.min || 0, opts.min);\n        }\n        if (opts.max !== undefined) {\n            total.max = Math.max(total.max || 0, opts.max);\n        }\n        if (opts.sustain !== undefined) {\n            total.sustain = opts.sustain;\n        }\n    }\n}\nexport const attributes = {};\nexport function installAttribute(attr) {\n    if (typeof attr === 'string') {\n        attributes[attr] = 0;\n        return;\n    }\n    // clear existing\n    Object.keys(attributes).forEach((k) => {\n        delete attributes[k];\n    });\n    Object.assign(attributes, attr);\n}\nexport function makeAttributes(defaults) {\n    return new Attributes(defaults);\n}\n/*\nfunction adjust(being, ...args) {\n    let adj;\n    if (args.length == 1 && typeof args[0] == 'number') {\n        adj = RUT.Attributes.map((key) => {\n            return { name: key, bonus: args[0] };\n        });\n    } else {\n        adj = normalize_adjustment(args);\n    }\n\n    let results = adj.reduce((out, a) => {\n        let delta = undefined;\n        if (a.base) {\n            delta = being.attributes.addBase(a.name, a.base);\n        } else if (a.restore) {\n            delta = being.attributes.restoreBase(a.name);\n            if (delta == 0) delta = undefined;\n        } else {\n            delta = being.attributes.addBonus(a.name, a);\n        }\n        if (delta !== undefined) {\n            out[a.name] = delta;\n        }\n        return out;\n    }, {});\n    being.changed({ attributes: results });\n\n    return results;\n};\n\n function clearAdjustment(being, ...args) {\n    let adj;\n    if (args.length == 1 && typeof args[0] == 'number') {\n        adj = RUT.Attributes.map((key) => {\n            return { name: key, bonus: args[0] };\n        });\n    } else {\n        adj = normalize_adjustment(args);\n    }\n\n    let results = adj.reduce((out, a) => {\n        let delta = 0;\n        delta += being.attributes.clearBonus(a.name, a);\n\n        out[a.name] = delta;\n        return out;\n    }, {});\n    being.changed({ attributes: results });\n    return results;\n};\n\nRUT.Attribute.rollAttributes = function (opts = {}) {\n    let dice = [];\n    let total = 0;\n\n    if (RUT.Calc.isValue(opts)) opts = { value: opts };\n    Object.defaults(opts, RUT.Config.Attribute.rollAttributes);\n\n    let attributes = RUT.Config.Attributes;\n\n    let min_average = Math.max(opts.min_average - 5, 0);\n    let max_average = Math.min(opts.max_average - 5, RUT.Config.ATTRIBUTE_MAX);\n\n    let min_total = min_average * attributes.length;\n    let max_total = max_average * attributes.length;\n\n    do {\n        total = 0;\n        dice = [];\n        for (let i = 0; i < 18; ++i) {\n            dice.push(RUT.RNG.rollDie(3 + (i % 3)));\n            total += dice[i];\n        }\n    } while (total <= min_total || total > max_total);\n\n    let values = attributes.reduce((out, name, i) => {\n        let index = 3 * i;\n        let value = 5 + dice[index] + dice[index + 1] + dice[index + 2];\n        if (opts.value) {\n            value = RUT.Calc.calc(opts.value);\n        } else if (opts[name]) {\n            value = RUT.Calc.calc(opts[name]);\n        }\n        out[name] = value;\n        return out;\n    }, {});\n    return values;\n};\nRUT.Config.Attribute.rollAttributes = { min_average: 11, max_average: 14 };\n*/\n/*\nexport function normalize_adjustment(args: ) {\n    if (args.length == 3) {\n        let opts = args[2];\n        if (RUT.Calc.isValue(opts)) {\n            opts = { bonus: opts };\n        }\n        let name = `${args[0]}.${args[1]}`;\n        return [Object.assign({ name }, opts)];\n    }\n    if (args.length == 2) {\n        let opts = args[1];\n        if (opts === true || opts === false) {\n            opts = { has: opts };\n        } else if (RUT.Calc.isValue(opts)) {\n            opts = { bonus: opts };\n        }\n        return [Object.assign({ name: args[0] }, opts)];\n    }\n\n    let opts = args[0];\n    if (opts.name) {\n        return [opts];\n    }\n    if (opts.attribute) {\n        opts.name = opts.attribute;\n        return [opts];\n    }\n    if (opts.restore) {\n        if (opts.restore == 'all') {\n            return RUT.Attributes.map((a) => {\n                return { name: a, restore: true };\n            });\n        }\n        return [{ name: opts.restore, restore: true }];\n    }\n    if (opts.skill) {\n        opts.name = opts.skill;\n        return [opts];\n    }\n    if (opts.stat) {\n        opts.name = opts.stat;\n        return [opts];\n    }\n    if (opts.save) {\n        opts.name = opts.save;\n        return [opts];\n    }\n    // if (opts.saves) {\n    //   opts.name = opts.saves;\n    //   return [opts];\n    // }\n    if (opts.ability) {\n        opts.name = opts.ability;\n        return [opts];\n    }\n\n    // now we assume that each key is for a separate skill...\n    return Object.keys(opts).reduce((out, key) => {\n        let opt = opts[key];\n        if (key == 'reset' || key == 'restore') {\n            if (typeof opt == 'string') opt = [opt];\n            opt.forEach((a) => {\n                out.push({ name: a, restore: true });\n            });\n        } else {\n            if (typeof opt == 'number' || Array.isArray(opt)) {\n                opt = { bonus: opt };\n            } else if (opt === true || opt === false) {\n                opt = { has: opt };\n            } else if (opt == 'reset' || opt == 'restore') {\n                opt = { restore: true };\n            } else if (opt == 'sustain') {\n                opt = { sustain: true };\n            }\n            out.push(Object.assign({ name: key }, opt));\n        }\n        return out;\n    }, []);\n}\n*/\n","/*\nSkills\n\nSkills generally fall into 2 categories - binary and progressive.\n\n\n// Create a skills object\nconst skills = new Skills();\n\n// set skills\nskills.set('diving', true); // = { has: true, level: 0 }\nskills.set('diving', 10); // = { has: true, level: 10 }\n\nskills.remove('diving'); // {}\n\n// adjustments\nskills.adjust('diving', { bonus: 1 });\nskills.adjust('diving', { disadvantage: true });\nskills.adjust('diving', { advantage: 3 });\nskills.adjust('diving', { fixed: 10 });\nskills.adjust('diving', { critical: 5 });\n\n\n\n\n\n*/\nclass Skill {\n    constructor(name) {\n        this.name = name;\n    }\n    get has() {\n        return this._bool('_has');\n    }\n    get level() {\n        return this._int('_level');\n    }\n    get disadvantage() {\n        return this._bool('_disadvantage');\n    }\n    get advantage() {\n        return this._bool('_advantage');\n    }\n    get fixed() {\n        return this._int('_fixed');\n    }\n    get bonus() {\n        const b = this._int('_bonus') || 0;\n        if (!this._parent)\n            return b;\n        return b + this._parent.bonus;\n    }\n    get succeed() {\n        return this._bool('_succeed');\n    }\n    get fail() {\n        return this._bool('_fail');\n    }\n    set(value) {\n        if (value === false) {\n            this._has = false;\n            this._level = 0;\n        }\n        else {\n            this._has = true;\n            this._level = value === true ? 0 : value;\n        }\n    }\n    _value(name) {\n        if (this[name] !== undefined) {\n            // @ts-ignore\n            return this[name];\n        }\n        if (this._parent) {\n            // @ts-ignore\n            return this._parent._value(name);\n        }\n        return undefined;\n    }\n    _bool(name) {\n        return !!this._value(name);\n    }\n    _int(name) {\n        return this._value(name);\n    }\n    adjust(adj) {\n        Object.entries(adj).forEach(([key, value]) => {\n            key = '_' + key;\n            if (value === undefined)\n                return;\n            if (key === '_fixed') {\n                if (typeof value !== 'number') {\n                    throw new Error('fixed skill adjustment must be a number.');\n                }\n                value = Math.max(value, this._fixed || 0);\n            }\n            else if (key === '_bonus') {\n                if (typeof value !== 'number') {\n                    throw new Error('fixed skill adjustment must be a number.');\n                }\n                value = value + (this._bonus || 0);\n            }\n            // @ts-ignore\n            this[key] = value;\n        });\n    }\n    clear(adj) {\n        Object.keys(adj).forEach((key) => {\n            key = '_' + key;\n            // @ts-ignore\n            if (this[key] !== undefined) {\n                // @ts-ignore\n                this[key] = undefined;\n            }\n        });\n    }\n}\nexport class Skills {\n    constructor(vals = {}) {\n        this._skills = {};\n        Object.entries(vals).forEach(([key, value]) => {\n            this.set(key, value);\n        });\n    }\n    set(name, value) {\n        const s = this.get(name);\n        s.set(value);\n        return s;\n    }\n    get(name) {\n        let s = this._skills[name];\n        if (s)\n            return s;\n        s = this._skills[name] = new Skill(name);\n        const index = name.lastIndexOf('.');\n        if (index > 0) {\n            s._parent = this.get(name.substring(0, index));\n        }\n        else {\n            s.set(false);\n        }\n        return s;\n    }\n    adjust(name, adj) {\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        let s = this.get(name);\n        s.adjust(adj);\n        return s;\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Scent {\n    constructor(player) {\n        this._player = player;\n    }\n    get(x, y) {\n        if (!this._data)\n            return 0;\n        return this._data[x][y];\n    }\n    clear() {\n        if (!this._player.map)\n            return;\n        if (this._data)\n            GWU.grid.free(this._data);\n        this._data = GWU.grid.alloc(this._player.map.width, this._player.map.height);\n    }\n    update() {\n        if (!this._player.map)\n            return;\n        const scent = this._player.data.scent || 10;\n        this._data[this._player.x][this._player.y] = scent;\n        const updated = GWU.grid.alloc(this._data.width, this._data.height);\n        const map = this._player.map;\n        this._data.forEach((v, x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.blocksMove())\n                return;\n            let highest = v;\n            GWU.xy.eachNeighbor(x, y, (x1, y1) => {\n                if (!this._data.hasXY(x1, y1))\n                    return;\n                const v1 = this._data[x1][y1];\n                if (v1 > highest) {\n                    highest = v1;\n                }\n            }, true);\n            const delta = cell.hasLiquid() ? 3 : 1;\n            updated[x][y] = Math.max(0, highest - delta);\n        });\n        GWU.grid.free(this._data);\n        this._data = updated;\n    }\n    nextDir(x, y) {\n        const v = this._data[x][y] || 0;\n        if (!v)\n            return null;\n        let highest = v;\n        let highestLoc = [];\n        GWU.xy.eachNeighbor(x, y, (x1, y1) => {\n            if (!this._data.hasXY(x1, y1))\n                return;\n            const v1 = this._data[x1][y1];\n            if (v1 == highest) {\n                highestLoc.push([x1, y1]);\n            }\n            else if (v1 > highest) {\n                highestLoc = [[x1, y1]];\n                highest = v1;\n            }\n        }, false);\n        if (!highestLoc.length)\n            return null;\n        const loc = GWU.random.item(highestLoc);\n        loc[0] = loc[0] - x;\n        loc[1] = loc[1] - y;\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Actor } from '../actor';\nimport { Scent } from './scent';\n// import { Memory } from '../memory';\nexport class Player extends Actor {\n    constructor(kind) {\n        super(kind);\n        this.scent = new Scent(this);\n    }\n    interrupt() {\n        this.clearGoal();\n    }\n    endTurn(pct = 100) {\n        if (this.map) {\n            this.map.fov.update();\n            this.scent.update();\n        }\n        return super.endTurn(pct);\n    }\n    addToMap(map, x, y) {\n        if (!super.addToMap(map, x, y))\n            return false;\n        this.scent.clear();\n        return true;\n    }\n    pathTo(...args) {\n        let x = args[0];\n        let y = args[1];\n        if (args.length === 1) {\n            x = args[0].x;\n            y = args[0].y;\n        }\n        if (!this.map)\n            return null;\n        const mapToPlayer = this.mapToMe();\n        const path = GWU.path.getPath(mapToPlayer, x, y, (x, y) => !this.map.fov.isRevealed(x, y));\n        return path;\n    }\n}\nPlayer.default = {\n    ch: '@',\n    fg: 'white',\n    name: 'You',\n    swim: true,\n};\n","import * as Actor from '../actor';\nimport * as Skills from './skill';\nimport * as Attributes from './attribute';\nimport { Player } from './player';\nimport * as Flags from '../flags';\nexport class PlayerKind extends Actor.ActorKind {\n    constructor(opts = {}) {\n        super((() => {\n            if (!opts.sprite) {\n                opts.ch = opts.ch || Player.default.ch;\n                opts.fg = opts.fg || Player.default.fg;\n            }\n            if (!opts.name) {\n                opts.name = Player.default.name;\n            }\n            if (opts.swim === undefined) {\n                opts.swim = Player.default.swim;\n            }\n            return opts;\n        })());\n        this.flags.actor |= Flags.Actor.IS_PLAYER;\n        this.attributes = new Attributes.Attributes(opts.attributes || {});\n        this.skills = new Skills.Skills(opts.skills || {});\n    }\n    make(options) {\n        const actor = new Player(this);\n        this.init(actor, options);\n        return actor;\n    }\n}\n","import { PlayerKind } from './kind';\nimport * as Actor from '../actor';\nexport function make(id, makeOptions) {\n    let kind;\n    if (typeof id === 'string') {\n        // @ts-ignore\n        kind = Actor.get(id);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + id);\n        if (!(kind instanceof PlayerKind))\n            throw new Error('Not a player kind.');\n    }\n    else if (id instanceof PlayerKind) {\n        kind = id;\n    }\n    else {\n        kind = makeKind(id);\n    }\n    return kind.make(makeOptions);\n}\nexport function install(id, kind) {\n    if (kind instanceof PlayerKind) {\n        Actor.kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    Actor.kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof PlayerKind)\n        return id;\n    const k = Actor.kinds[id];\n    if (k && !(k instanceof PlayerKind)) {\n        throw new Error('No a player kind.');\n    }\n    return k;\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new PlayerKind(config);\n}\n","import * as GWU from 'gw-utils';\nimport * as Command from '../command';\nimport * as Actor from '../actor';\nimport * as Flags from '../flags';\nexport class Game {\n    constructor(opts) {\n        this.result = undefined;\n        this.mouse = false;\n        this.fov = false;\n        this.scent = false;\n        this.running = false;\n        this.keymap = {};\n        this.ui = opts.ui || new GWU.ui.UI(opts);\n        this._makeMap = opts.makeMap;\n        this._makePlayer = opts.makePlayer;\n        this._startMap = opts.startMap;\n        if (opts.keymap) {\n            Object.assign(this.keymap, opts.keymap);\n        }\n        if (opts.mouse) {\n            this.mouse = true;\n        }\n        if (opts.fov) {\n            this.fov = true;\n        }\n        if (opts.scent) {\n            this.scent = true;\n        }\n    }\n    async start() {\n        this.layer = new GWU.ui.Layer(this.ui);\n        this.buffer = this.layer.buffer;\n        this.io = this.layer.io;\n        this.running = true;\n        this.scheduler = new GWU.scheduler.Scheduler();\n        this.map = this._makeMap(0);\n        this.player = this._makePlayer();\n        this.map.setPlayer(this.player);\n        this._startMap(this.map, this.player);\n        if (this.scent) {\n            this.map.drawer.scent = this.scent;\n        }\n        this.map.actors.forEach((a) => {\n            this.scheduler.push(a, a.moveSpeed());\n        });\n        this.map.fov.update();\n        this.draw();\n        while (this.running) {\n            await this.animate();\n            await this.runTurn();\n        }\n        return this.result;\n    }\n    draw() {\n        if (this.map && this.map.needsRedraw) {\n            this.map.drawInto(this.buffer);\n            this.buffer.render();\n        }\n    }\n    finish(result) {\n        this.running = false;\n        this.layer.finish();\n        this.result = result;\n    }\n    async runTurn() {\n        const actor = this.scheduler.pop();\n        if (!actor) {\n            this.finish();\n            return;\n        }\n        let nextTime = 0;\n        while (nextTime === 0) {\n            if (actor === this.player) {\n                nextTime = await this.playerTurn(actor);\n            }\n            else if ('act' in actor) {\n                nextTime = await actor.act(this);\n            }\n            else if ('tick' in actor) {\n                nextTime = await actor.tick(); // dt === 100 -- TODO\n            }\n            this.draw();\n        }\n        if (nextTime >= 0) {\n            this.scheduler.push(actor, nextTime);\n        }\n    }\n    async animate() {\n        if (!this.layer.io._tweens.length)\n            return;\n        const timer = setInterval(() => {\n            const tick = GWU.io.makeTickEvent(16);\n            this.layer.io.enqueue(tick);\n        }, 16);\n        while (this.layer.io._tweens.length) {\n            const ev = await this.layer.io.nextTick();\n            if (ev && ev.dt) {\n                this.layer.io._tweens.forEach((a) => a && a.tick(ev.dt));\n                this.layer.io._tweens = this.layer.io._tweens.filter((a) => a && a.isRunning());\n            }\n            this.draw();\n        }\n        clearInterval(timer);\n    }\n    async playerTurn(player) {\n        let done = 0;\n        const timer = setInterval(() => {\n            const tick = GWU.io.makeTickEvent(16);\n            // console.log('-tick', Date.now());\n            this.layer.io.enqueue(tick);\n        }, 16);\n        let elapsed = 0;\n        while (!done && this.running) {\n            const ev = await this.layer.io.nextEvent(-1);\n            if (ev) {\n                if (ev.type === GWU.io.KEYPRESS) {\n                    this.map.clearPath();\n                    if (this.player.hasGoal()) {\n                        this.player.clearGoal();\n                    }\n                    else {\n                        const handler = GWU.io.handlerFor(ev, this.keymap);\n                        if (handler) {\n                            if (typeof handler === 'string') {\n                                const action = Command.getCommand(handler);\n                                if (action) {\n                                    done = await action.call(this, player, ev);\n                                }\n                            }\n                            else if (typeof handler === 'function') {\n                                done = await handler.call(this, player, ev);\n                            }\n                        }\n                    }\n                }\n                else if (ev.type === GWU.io.TICK) {\n                    this.layer.tick(ev); // timeouts\n                    elapsed += ev.dt || 16;\n                    if (this.map.hasMapFlag(Flags.Map.MAP_DANCES) &&\n                        GWU.cosmetic.chance(10)) {\n                        this.map.eachCell((c) => {\n                            if (c.hasCellFlag(Flags.Cell.COLORS_DANCE) &&\n                                this.map.fov.isAnyKindOfVisible(c.x, c.y) &&\n                                GWU.cosmetic.chance(2)) {\n                                c.needsRedraw = true;\n                            }\n                        });\n                        this.map.needsRedraw = true;\n                        this.draw();\n                    }\n                    // console.log('-- event', elapsed);\n                }\n                else if (this.mouse && ev.type === GWU.io.MOUSEMOVE) {\n                    if (!this.player.hasGoal()) {\n                        // console.log('mouse', ev.x, ev.y);\n                        const path = this.player.pathTo(ev.x, ev.y);\n                        if (path) {\n                            this.map.highlightPath(path, true);\n                        }\n                        else {\n                            this.map.clearPath();\n                        }\n                        this.draw();\n                    }\n                }\n                else if (this.mouse && ev.type === GWU.io.CLICK) {\n                    console.log('click', ev.x, ev.y);\n                    if (this.player.hasGoal()) {\n                        this.player.clearGoal();\n                    }\n                    else {\n                        this.player.setGoal(ev.x, ev.y);\n                    }\n                }\n            }\n            if (elapsed < 50) {\n                continue;\n            }\n            elapsed -= 50;\n            if (this.player.hasGoal()) {\n                const goalMap = this.player.goalMap;\n                const step = GWU.path.nextStep(goalMap, this.player.x, this.player.y, (x, y) => this.map.hasActor(x, y) &&\n                    this.map.actorAt(x, y) !== this.player);\n                if (!step) {\n                    this.player.clearGoal();\n                }\n                else {\n                    const action = Actor.getAction('moveDir');\n                    if (!action)\n                        throw new Error('Failed to find moveDir action.');\n                    done = await action(this, this.player, { dir: step });\n                    if (done && this.player.hasGoal()) {\n                        const path = this.player.pathTo(goalMap.x, goalMap.y);\n                        if (path && path.length) {\n                            // path.shift(); //remove player location\n                            this.map.highlightPath(path, true);\n                        }\n                        else {\n                            this.map.clearPath();\n                        }\n                    }\n                }\n            }\n        }\n        clearInterval(timer);\n        return done;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Tile from './tile';\nimport '../effect/handlers';\nimport '../effect/types';\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([30, 30, 30]).rand(20, 0, 0, 0),\n    bg: GWU.color.from([2, 2, 10]).rand(0, 2, 2, 0),\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: 'TILE:DOOR_OPEN',\n        open: 'TILE:DOOR_OPEN_ALWAYS',\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            effects: 'TILE:DOOR~!',\n        },\n        enter: null,\n        open: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: 'EMIT:UP_STAIRS',\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: 'EMIT:DOWN_STAIRS',\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: GWU.color.from([25, 28, 60]).dance(20, 0, 4, 15),\n    bg: GWU.color.from([10, 15, 41]).dance(20, 5, 5, 5),\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([5, 8, 10]).dance(10, 0, 4, 15),\n    bg: GWU.color.from([10, 30, 30]).dance(6, 0, 10, 10),\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    flags: 'T_SHALLOW_WATER',\n    // depth: 'LIQUID', // 'SURFACE'?\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '\\u2630',\n    fg: [80, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_LIST_IN_SIDEBAR","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","T_IS_DEEP_LIQUID","T_SHALLOW_WATER","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_SAFE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","lastId","kind","_map","key","machineHome","depth","light","flags","entity","next","id","map","setEntityFlag","Flags.Entity","L_ON_MAP","addToMap","clearEntityFlag","removeFromMap","sprite","isDestroyed","hasEntityFlag","L_DESTROYED","other","constructor","copy","Object","assign","canBeSeen","tag","tags","includes","matches","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","buffer","bounds","drawStatus","dest","_observer","drawSprite","name","EntityKind","config","requireTileFlags","forbidTileFlags","avoidTileFlags","requireTileTags","forbidTileTags","avoidTileTags","flavor","description","make","split","t","trim","slice","from","Flags.Tile","init","_entity","hasAllTileFlags","hasTileFlag","T_BRIDGE","length","hasAllTileTags","hasAnyTileTag","_opts","mixer","Mixer","getAppearanceAt","wrapText","width","makeOpts","PainMessages","msgs","_msgs","forEach","m","add","msg","push","pct","singular","index","clamp","Math","floor","_format","replace","painMessages","Stats","_max","_rate","_value","max","round","get","set","v","range","value","amount","allowOver","min","raiseValue","gain","lowerValue","drain","turns","count","r","elapsed","undefined","type","c","Error","Status","_set","_time","_count","_done","changed","clearTime","clearCount","setOff","_update","done","_addDone","current","delta","status","cleared","noticed","removeTime","rec","was","doneFn","installedActions","installAction","fn","toLowerCase","getAction","Entity.Entity","super","ai","leader","items","visionDistance","data","_costMap","_goalMap","_mapToMe","actor","Flags.Depth","ACTOR","stats","grid","free","hasActorFlag","Flags.Actor","IS_PLAYER","action","actions","bump","IS_VISIBLE","WAS_VISIBLE","canSee","isAbleToSee","isPlayer","fov","isDirectlyVisible","xy","distanceBetween","forLineBetween","i","j","blocksVision","canSeeOrSense","isAbleToSense","isAnyKindOfVisible","game","startedVisible","player","setActorFlag","console","log","clearActorFlag","becameVisible","interrupt","endTurn","moveSpeed","_other","_item","item","pickupItem","dropItem","mapChanged","STABLE_COST_MAP","staleMap","alloc","height","update","_v","path","OBSTRUCTION","FORBIDDEN","AVOIDED","OK","goalMap","calculateDistances","costMap","ais","install","default","AICtx","target","distanceMap","result","async","typical","isDead","willAttack","damagePct","getPct","morale","chargeChance","retreatChance","lastSawPlayer","clearGoal","ctx","start","canAttack","attack","tooFarFrom","canMoveToward","random","chance","moveToward","tooCloseTo","canMoveAwayFrom","moveAwayFrom","hasGoal","loc","setGoal","moveTowardGoal","scent","dir","nextDir","moveDir","wanderOpt","object","firstOpt","matchingLoc","NO_PATH","step","nextStep","hasActor","actorAt","canPass","clearCellFlag","Flags.Cell","wander","idle","standStill","center","eachNeighbor","blocksMove","_game","_target","_ctx","distanceFromTo","safetyMap","costGrid","actors","a","eachCell","hasCellFlag","rescan","_actor","ActorKind","Entity.EntityKind","DEFAULT","DEFAULT_ACTOR","vision","normal","health","AI.make","Array","isArray","waterOnly","lavaOnly","swim","fly","options","blocksPathing","list","remove","info","makeOptions","makeKind","kinds","randomKind","match","forbidTags","startsWith","substring","values","filter","k","arraysIntersect","rng","bumpActions","getBumpActions","selfName","selfAction","ctx2","flashSprite","duration","animator","Entity.make","addFx","tween","visible","to","repeat","repeatDelay","onUpdate","obj","removeFx","io","loop","addAnimation","hit","fadeInOut","clone","opacity","yoyo","needsRedraw","onFinish","moveSprite","source","ceil","maxAxisFromTo","speed","isLoc","vals","ok","stepFn","stopBeforeWalls","moveFx","stop","isInShape","shape","cx","cy","allowCenter","sx","abs","sy","ch","dirFromTo","fg","bg","fade","stopAtWalls","line","forLineFromTo","hasXY","promises","lastIndex","Promise","all","radius","checkExplosionOpts","FOV","isBlocked","calculate","x1","y1","minX","minY","maxX","maxY","_obj","success","newX","newY","currentCell","newCell","try","FX.hit","canRemoveActor","hasItem","canAddActor","moveActor","rate","dirIndex","number","DIRS","pickup","itemAt","quiet","message","addAt","avoidsItem","itemAction","canAddItem","removeItem","addItem","pain","JSON","stringify","made","quantity","ITEM","ItemKind","Flags.Item","entries","isDoor","handlers","installHandler","handler","effectTypes","installType","endPos","indexOf","tile","effects","effect","typeName","shift","makeFn","e","parts","installedEffects","trigger","bind","BasicEffect","seen","Flags.Effect","endsWith","Number","parseFloat","parseInt","force","didSomething","eff","nextAlways","E_NEXT_ALWAYS","makeBasicEffect","makeSpreadEffect","SpreadEffect","grow","decrement","matchTile","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","spawnMap","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","E_NEXT_EVERYWHERE","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","cellIsOk","isStart","EVENT_PROTECTED","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","E_NO_TOUCH_WALLS","hasTile","x2","y2","madeChange","startProb","probDec","fill","clearAll","clear","clearDepth","GAS","LIQUID","SURFACE","GROUND","blockingMap","eachActor","matchingLocNear","removeActor","addActor","eachItem","makeEmitHandler","emitEffect","events","emit","makeMessageHandler","src","messageEffect","aware","makeActivateMachine","activateMachine","machine","machineId","makeTileHandler","superpriority","blockedByActors","blockedByItems","tileEffect","setTile","makeClearHandler","layers","reduce","out","ALL_LAYERS","clearEffect","makeFeatureHandler","featureEffect","feat","Effect.installedEffects","makeNourishEffect","nourishEffect","adjust","n","pukeMsg","makeStatEffect","stat","statEffect","_a","_b","_c","_d","dissipate","priority","groundTile","article","tileMech","hasEffect","T_IS_FLAMMABLE","every","T_PATHING_BLOCKER","arg","color","toString","_e","_f","base","extends","tiles","text","search","makeEffect","Flags.TileMech","args","NULL","MapLayer","properties","_x","_y","_tile","_dt","TileLayer","GasLayer","volume","depthTile","startingVolume","spread","d","clearTile","total","highestVolume","startingTile","highestTile","updateCellVolume","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","CAUGHT_FIRE_THIS_TURN","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","fire","hasTileMechFlag","TM_EXPLOSIVE_PROMOTE","x0","y0","event","fireEvent","NEVER_SEEN","TILE.NULL","chokeCount","memory","TILE.tiles","snapshot","makeMixer","TILE.get","hasStableSnapshot","STABLE_SNAPSHOT","hasStableMemory","setCellFlag","getSnapshot","checkEntities","some","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","withEntities","CHANGED","TILE.Tile","highestPriorityTile","cb","find","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","T_IS_DOOR","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","T_ANY_LIQUID","blocksLayer","blockedByOtherLayers","highestPriority","currentGround","wantGround","glowLightChanged","setMapFlag","Flags.Map","MAP_SIDEBAR_TILES_CHANGED","blackOut","tileFlag","tileMechFlag","ev","_activate","hasItems","foundIndex","HAS_FX","fx","fxAt","_fx","highlightColor","BasicDrawer","Buffer","offsetX","offsetY","clearMapFlag","MAP_DANCES","drawCell","needSnapshot","getAppearance","putSnapshot","COLORS_DANCE","applyLight","separate","L_VISUALLY_DISTINCT","IS_CURSOR","mix","IS_HIGHLIGHTED","invert","s","colors","red","ground","surface","liquid","gas","drawInto","cosmetic","hasFx","dances","bake","isVisible","isRevealed","getLight","multiply","isCursor","scale","_animations","EventEmitter","seed","machineCount","drawer","cells","LightSystem","alwaysVisible","callback","onFovChange","FovSystem","initLayers","setPlayer","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","layer","isAt","fireEffects","_addItem","_fireAddItemEffects","_removeItem","_fireRemoveItemEffects","arrayDelete","isKey","hasPlayer","_addActor","_fireAddActorEffects","_removeActor","_fireRemoveActorEffects","_addFx","updated","_removeFx","fmt","dump","hasMapFlag","MAP_NEEDS_REDRAW","markCursor","clearPath","clearCursor","l","boundary","isBoundaryXY","clearTiles","dt","tick","isRunning","fireAll","willFire","EVENT_FIRED_THIS_TURN","promoteChance","w","originX","originY","eachGlowLight","_cb","FovFlags","PLAYER","isDark","storeMemory","clearMemory","makeVisible","updateChokepoints","updateCounts","passMap","passableArcCount","oldX","CLOCK_DIRS","oldY","cellCount","floodFillCount","i2","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","h","updateChokeCounts","layerVersion","lightVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","prefab","charToTile","isStringArray","len","getCellPathCost","fillCostMap","eightWays","straightDistanceBetween","getPath","members","horde","frequency","Flags","canSpawn","TRUE","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted","installCommand","getCommand","Actor.actions.moveDir","_ev","playerAction","Attributes","baseValues","_base","_bonus","_sustain","attributes","keys","raiseMax","old","_calcValue","loss","lowerMax","bonus","_addBonus","_clearBonus","arr","findIndex","o","splice","allAdjustments","adj","_applyAdjustment","sustain","fixed","restore","Skill","has","_bool","level","_int","disadvantage","advantage","b","_parent","succeed","fail","_has","_level","_fixed","Skills","_skills","lastIndexOf","Scent","_player","_data","highest","v1","hasLiquid","highestLoc","Player","mapToPlayer","mapToMe","PlayerKind","Actor.ActorKind","Attributes.Attributes","skills","Skills.Skills","attr","defaults","Actor.kinds","mouse","running","keymap","ui","UI","_makeMap","makeMap","_makePlayer","makePlayer","_startMap","startMap","Layer","scheduler","Scheduler","draw","animate","runTurn","render","finish","nextTime","playerTurn","act","_tweens","timer","setInterval","makeTickEvent","enqueue","nextTick","clearInterval","nextEvent","KEYPRESS","handlerFor","Command.getCommand","call","TICK","MOUSEMOVE","pathTo","highlightPath","CLICK","Actor.getAction","rand","enter","open","close","dance"],"mappings":"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"}