{"version":3,"file":"gw-map.min.js","sources":["../js/flags.js","../js/light.js","../js/entity.js","../js/tile.js","../js/cell.js","../js/visibility.js","../js/effect.js","../js/map.js","../js/tiles.js"],"sourcesContent":["import { flag as Flag } from 'gw-utils';\nexport var Layer;\n(function (Layer) {\n    Layer[Layer[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Layer[Layer[\"GROUND\"] = 0] = \"GROUND\";\n    Layer[Layer[\"LIQUID\"] = 1] = \"LIQUID\";\n    Layer[Layer[\"SURFACE\"] = 2] = \"SURFACE\";\n    Layer[Layer[\"GAS\"] = 3] = \"GAS\";\n    Layer[Layer[\"ITEM\"] = 4] = \"ITEM\";\n    Layer[Layer[\"ACTOR\"] = 5] = \"ACTOR\";\n    Layer[Layer[\"PLAYER\"] = 6] = \"PLAYER\";\n    Layer[Layer[\"FX\"] = 7] = \"FX\";\n    Layer[Layer[\"UI\"] = 8] = \"UI\";\n})(Layer || (Layer = {}));\nconst Fl = Flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_SUPERPRIORITY\"] = Fl(1)] = \"L_SUPERPRIORITY\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(11)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(12)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(13)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(14)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(15)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_IS_WALL\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_IS_WALL\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_IS_WALL |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Activation;\n(function (Activation) {\n    Activation[Activation[\"DFF_SUBSEQ_ALWAYS\"] = Fl(0)] = \"DFF_SUBSEQ_ALWAYS\";\n    Activation[Activation[\"DFF_SUBSEQ_EVERYWHERE\"] = Fl(1)] = \"DFF_SUBSEQ_EVERYWHERE\";\n    Activation[Activation[\"DFF_TREAT_AS_BLOCKING\"] = Fl(2)] = \"DFF_TREAT_AS_BLOCKING\";\n    Activation[Activation[\"DFF_PERMIT_BLOCKING\"] = Fl(3)] = \"DFF_PERMIT_BLOCKING\";\n    Activation[Activation[\"DFF_BLOCKED_BY_OTHER_LAYERS\"] = Fl(4)] = \"DFF_BLOCKED_BY_OTHER_LAYERS\";\n    Activation[Activation[\"DFF_SUPERPRIORITY\"] = Fl(5)] = \"DFF_SUPERPRIORITY\";\n    Activation[Activation[\"DFF_NO_REDRAW_CELL\"] = Fl(6)] = \"DFF_NO_REDRAW_CELL\";\n    Activation[Activation[\"DFF_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"DFF_ABORT_IF_BLOCKS_MAP\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"DFF_BLOCKED_BY_ITEMS\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"DFF_BLOCKED_BY_ACTORS\";\n    Activation[Activation[\"DFF_ALWAYS_FIRE\"] = Fl(10)] = \"DFF_ALWAYS_FIRE\";\n    Activation[Activation[\"DFF_NO_MARK_FIRED\"] = Fl(11)] = \"DFF_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Activation[Activation[\"DFF_PROTECTED\"] = Fl(12)] = \"DFF_PROTECTED\";\n    Activation[Activation[\"DFF_SPREAD_CIRCLE\"] = Fl(13)] = \"DFF_SPREAD_CIRCLE\";\n    Activation[Activation[\"DFF_SPREAD_LINE\"] = Fl(14)] = \"DFF_SPREAD_LINE\";\n    Activation[Activation[\"DFF_NULL_SURFACE\"] = Fl(15)] = \"DFF_NULL_SURFACE\";\n    Activation[Activation[\"DFF_NULL_LIQUID\"] = Fl(16)] = \"DFF_NULL_LIQUID\";\n    Activation[Activation[\"DFF_NULL_GAS\"] = Fl(17)] = \"DFF_NULL_GAS\";\n    Activation[Activation[\"DFF_EVACUATE_CREATURES\"] = Fl(18)] = \"DFF_EVACUATE_CREATURES\";\n    Activation[Activation[\"DFF_EVACUATE_ITEMS\"] = Fl(19)] = \"DFF_EVACUATE_ITEMS\";\n    Activation[Activation[\"DFF_BUILD_IN_WALLS\"] = Fl(20)] = \"DFF_BUILD_IN_WALLS\";\n    Activation[Activation[\"DFF_MUST_TOUCH_WALLS\"] = Fl(21)] = \"DFF_MUST_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_NO_TOUCH_WALLS\"] = Fl(22)] = \"DFF_NO_TOUCH_WALLS\";\n    // These should be effect types\n    Activation[Activation[\"DFF_ACTIVATE_DORMANT_MONSTER\"] = Fl(23)] = \"DFF_ACTIVATE_DORMANT_MONSTER\";\n    Activation[Activation[\"DFF_AGGRAVATES_MONSTERS\"] = Fl(24)] = \"DFF_AGGRAVATES_MONSTERS\";\n    Activation[Activation[\"DFF_RESURRECT_ALLY\"] = Fl(25)] = \"DFF_RESURRECT_ALLY\";\n    Activation[Activation[\"DFF_EMIT_EVENT\"] = Fl(26)] = \"DFF_EMIT_EVENT\";\n    Activation[Activation[\"DFF_ONLY_IF_EMPTY\"] = Activation.DFF_BLOCKED_BY_ITEMS | Activation.DFF_BLOCKED_BY_ACTORS] = \"DFF_ONLY_IF_EMPTY\";\n    Activation[Activation[\"DFF_NULLIFY_CELL\"] = Activation.DFF_NULL_SURFACE | Activation.DFF_NULL_LIQUID | Activation.DFF_NULL_GAS] = \"DFF_NULLIFY_CELL\";\n})(Activation || (Activation = {}));\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(4)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(5)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(6)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(7)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(8)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(9)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(10)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(11)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(12)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(13)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(14)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(15)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(16)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(17)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(18)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(19)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"VISIBLE\"] = Fl(0)] = \"VISIBLE\";\n    Cell[Cell[\"WAS_VISIBLE\"] = Fl(1)] = \"WAS_VISIBLE\";\n    Cell[Cell[\"CLAIRVOYANT_VISIBLE\"] = Fl(2)] = \"CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"WAS_CLAIRVOYANT_VISIBLE\"] = Fl(3)] = \"WAS_CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"TELEPATHIC_VISIBLE\"] = Fl(4)] = \"TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"WAS_TELEPATHIC_VISIBLE\"] = Fl(5)] = \"WAS_TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"ITEM_DETECTED\"] = Fl(6)] = \"ITEM_DETECTED\";\n    Cell[Cell[\"WAS_ITEM_DETECTED\"] = Fl(7)] = \"WAS_ITEM_DETECTED\";\n    Cell[Cell[\"MONSTER_DETECTED\"] = Fl(8)] = \"MONSTER_DETECTED\";\n    Cell[Cell[\"WAS_MONSTER_DETECTED\"] = Fl(9)] = \"WAS_MONSTER_DETECTED\";\n    Cell[Cell[\"REVEALED\"] = Fl(10)] = \"REVEALED\";\n    Cell[Cell[\"MAGIC_MAPPED\"] = Fl(11)] = \"MAGIC_MAPPED\";\n    Cell[Cell[\"IN_FOV\"] = Fl(12)] = \"IN_FOV\";\n    Cell[Cell[\"WAS_IN_FOV\"] = Fl(13)] = \"WAS_IN_FOV\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(14)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"CELL_CHANGED\"] = Fl(15)] = \"CELL_CHANGED\";\n    // These are to help memory\n    Cell[Cell[\"HAS_SURFACE\"] = Fl(16)] = \"HAS_SURFACE\";\n    Cell[Cell[\"HAS_LIQUID\"] = Fl(17)] = \"HAS_LIQUID\";\n    Cell[Cell[\"HAS_GAS\"] = Fl(18)] = \"HAS_GAS\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(19)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(20)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(21)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(22)] = \"HAS_ITEM\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(23)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(24)] = \"IS_CURSOR\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(25)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"LIGHT_CHANGED\"] = Fl(26)] = \"LIGHT_CHANGED\";\n    Cell[Cell[\"CELL_LIT\"] = Fl(27)] = \"CELL_LIT\";\n    Cell[Cell[\"IS_IN_SHADOW\"] = Fl(28)] = \"IS_IN_SHADOW\";\n    Cell[Cell[\"CELL_DARK\"] = Fl(29)] = \"CELL_DARK\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.REVEALED |\n        Cell.MAGIC_MAPPED |\n        Cell.ITEM_DETECTED |\n        Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE | Cell.CLAIRVOYANT_VISIBLE | Cell.TELEPATHIC_VISIBLE] = \"ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"IS_WAS_ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE |\n        Cell.WAS_VISIBLE |\n        Cell.CLAIRVOYANT_VISIBLE |\n        Cell.WAS_CLAIRVOYANT_VISIBLE |\n        Cell.TELEPATHIC_VISIBLE |\n        Cell.WAS_TELEPATHIC_VISIBLE] = \"IS_WAS_ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"WAS_ANY_KIND_OF_VISIBLE\"] = Cell.WAS_VISIBLE |\n        Cell.WAS_CLAIRVOYANT_VISIBLE |\n        Cell.WAS_TELEPATHIC_VISIBLE] = \"WAS_ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.VISIBLE | Cell.IN_FOV | Cell.NEEDS_REDRAW | Cell.CELL_CHANGED] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n///////////////////////////////////////////////////////\n// CELL MECH\nexport var CellMech;\n(function (CellMech) {\n    CellMech[CellMech[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    CellMech[CellMech[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    CellMech[CellMech[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    CellMech[CellMech[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(4)] = \"CAUGHT_FIRE_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_FIRED_THIS_TURN\"] = Fl(5)] = \"EVENT_FIRED_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_PROTECTED\"] = Fl(6)] = \"EVENT_PROTECTED\";\n    CellMech[CellMech[\"IS_IN_LOOP\"] = Fl(10)] = \"IS_IN_LOOP\";\n    CellMech[CellMech[\"IS_CHOKEPOINT\"] = Fl(11)] = \"IS_CHOKEPOINT\";\n    CellMech[CellMech[\"IS_GATE_SITE\"] = Fl(12)] = \"IS_GATE_SITE\";\n    CellMech[CellMech[\"IS_IN_ROOM_MACHINE\"] = Fl(13)] = \"IS_IN_ROOM_MACHINE\";\n    CellMech[CellMech[\"IS_IN_AREA_MACHINE\"] = Fl(14)] = \"IS_IN_AREA_MACHINE\";\n    CellMech[CellMech[\"IS_POWERED\"] = Fl(15)] = \"IS_POWERED\";\n    CellMech[CellMech[\"IMPREGNABLE\"] = Fl(20)] = \"IMPREGNABLE\";\n    CellMech[CellMech[\"DARKENED\"] = Fl(19)] = \"DARKENED\";\n    CellMech[CellMech[\"IS_IN_MACHINE\"] = CellMech.IS_IN_ROOM_MACHINE | CellMech.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    CellMech[CellMech[\"PERMANENT_MECH_FLAGS\"] = CellMech.SEARCHED_FROM_HERE |\n        CellMech.PRESSURE_PLATE_DEPRESSED |\n        CellMech.KNOWN_TO_BE_TRAP_FREE |\n        CellMech.IS_IN_LOOP |\n        CellMech.IS_CHOKEPOINT |\n        CellMech.IS_GATE_SITE |\n        CellMech.IS_IN_MACHINE |\n        CellMech.IMPREGNABLE] = \"PERMANENT_MECH_FLAGS\";\n})(CellMech || (CellMech = {}));\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_STABLE_GLOW_LIGHTS\"] = Fl(1)] = \"MAP_STABLE_GLOW_LIGHTS\";\n    Map[Map[\"MAP_STABLE_LIGHTS\"] = Fl(2)] = \"MAP_STABLE_LIGHTS\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = Map.MAP_STABLE_LIGHTS | Map.MAP_STABLE_GLOW_LIGHTS] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import { utils as Utils, range as Range, grid as Grid, color as Color, data as DATA, config as CONFIG, make as Make, } from 'gw-utils';\nimport * as Flags from './flags';\n// const LIGHT_SMOOTHING_THRESHOLD = 150;       // light components higher than this magnitude will be toned down a little\nexport const config = (CONFIG.light = { INTENSITY_DARK: 20 }); // less than 20% for highest color in rgb\nconst LIGHT_COMPONENTS = Color.make();\nexport class Light {\n    constructor(color, range, fadeTo, pass = false) {\n        this.fadeTo = 0;\n        this.passThroughActors = false;\n        this.id = null;\n        this.color = Color.from(color) || null; /* color */\n        this.radius = Range.make(range || 1);\n        this.fadeTo = fadeTo || 0;\n        this.passThroughActors = pass; // generally no, but miner light does (TODO - string parameter?  'false' or 'true')\n    }\n    copy(other) {\n        this.color = other.color;\n        this.radius.copy(other.radius);\n        this.fadeTo = other.fadeTo;\n        this.passThroughActors = other.passThroughActors;\n    }\n    get intensity() {\n        return intensity(this.color);\n    }\n    // Returns true if any part of the light hit cells that are in the player's field of view.\n    paint(map, x, y, maintainShadows = false, isMinersLight = false) {\n        if (!map)\n            return false;\n        let k;\n        // let colorComponents = [0,0,0];\n        let lightMultiplier;\n        let radius = this.radius.value();\n        let outerRadius = Math.ceil(radius);\n        // calcLightComponents(colorComponents, this);\n        LIGHT_COMPONENTS.copy(this.color).bake();\n        // console.log('paint', LIGHT_COMPONENTS.toString(true), x, y, outerRadius);\n        // the miner's light does not dispel IS_IN_SHADOW,\n        // so the player can be in shadow despite casting his own light.\n        const dispelShadows = !isMinersLight &&\n            !maintainShadows &&\n            intensity(LIGHT_COMPONENTS) > config.INTENSITY_DARK;\n        const fadeToPercent = this.fadeTo;\n        const grid = Grid.alloc(map.width, map.height, 0);\n        map.calcFov(grid, x, y, outerRadius, this.passThroughActors ? 0 : Flags.Cell.HAS_ANY_ACTOR, Flags.Entity.L_BLOCKS_VISION);\n        let overlappedFieldOfView = false;\n        grid.forCircle(x, y, outerRadius, (v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            lightMultiplier = Math.floor(100 -\n                (100 - fadeToPercent) *\n                    (Utils.distanceBetween(x, y, i, j) / radius));\n            for (k = 0; k < 3; k++) {\n                cell.light[k] += Math.floor((LIGHT_COMPONENTS[k] * lightMultiplier) / 100);\n            }\n            if (dispelShadows) {\n                cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n            }\n            if (cell.flags &\n                (Flags.Cell.IN_FOV | Flags.Cell.ANY_KIND_OF_VISIBLE)) {\n                overlappedFieldOfView = true;\n            }\n            // console.log(i, j, lightMultiplier, cell.light);\n        });\n        if (dispelShadows) {\n            const cell = map.cell(x, y);\n            cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n        }\n        Grid.free(grid);\n        return overlappedFieldOfView;\n    }\n}\nexport function intensity(color) {\n    return Math.max(color[0], color[1], color[2]);\n}\nexport function make(...args) {\n    if (args.length == 1) {\n        const config = args[0];\n        if (typeof config === 'string') {\n            const cached = lights[config];\n            if (cached)\n                return cached;\n            const [color, radius, fadeTo, pass] = config\n                .split(/[,|]/)\n                .map((t) => t.trim());\n            return new Light(Color.from(color), Range.from(radius || 1), Number.parseInt(fadeTo || '0'), !!pass && pass !== 'false');\n        }\n        else if (Array.isArray(config)) {\n            const [color, radius, fadeTo, pass] = config;\n            return new Light(color, radius, fadeTo, pass);\n        }\n        else if (config && config.color) {\n            return new Light(Color.from(config.color), Range.from(config.radius), Number.parseInt(config.fadeTo || '0'), config.pass);\n        }\n        else {\n            throw new Error('Unknown Light config - ' + config);\n        }\n    }\n    else {\n        const [color, radius, fadeTo, pass] = args;\n        return new Light(color, radius, fadeTo, pass);\n    }\n}\nMake.light = make;\nexport const lights = {};\nexport function from(...args) {\n    if (args.length != 1)\n        Utils.ERROR('Unknown Light config: ' + JSON.stringify(args));\n    const arg = args[0];\n    if (typeof arg === 'string') {\n        const cached = lights[arg];\n        if (cached)\n            return cached;\n    }\n    return make(arg);\n}\nexport function install(id, ...args) {\n    let source;\n    if (args.length == 1) {\n        source = make(args[0]);\n    }\n    else {\n        source = make(args[0], args[1], args[2], args[3]);\n    }\n    lights[id] = source;\n    if (source)\n        source.id = id;\n    return source;\n}\nexport function installAll(config = {}) {\n    const entries = Object.entries(config);\n    entries.forEach(([name, info]) => {\n        install(name, info);\n    });\n}\n// export function calcLightComponents(colorComponents, theLight) {\n// \tconst randComponent = cosmetic.range(0, theLight.color.rand);\n// \tcolorComponents[0] = randComponent + theLight.color.red + cosmetic.range(0, theLight.color.redRand);\n// \tcolorComponents[1] = randComponent + theLight.color.green + cosmetic.range(0, theLight.color.greenRand);\n// \tcolorComponents[2] = randComponent + theLight.color.blue + cosmetic.range(0, theLight.color.blueRand);\n// }\nfunction updateDisplayDetail(map) {\n    map.eachCell((cell, _i, _j) => {\n        // clear light flags\n        cell.flags &= ~(Flags.Cell.CELL_LIT | Flags.Cell.CELL_DARK);\n        if (cell.light.some((v, i) => v !== cell.oldLight[i])) {\n            cell.lightChanged = true;\n        }\n        if (cell.isDark()) {\n            cell.flags |= Flags.Cell.CELL_DARK;\n        }\n        else if (!(cell.flags & Flags.Cell.IS_IN_SHADOW)) {\n            cell.flags |= Flags.Cell.CELL_LIT;\n        }\n    });\n}\n// export function backUpLighting(map: Map.Map, lights: LightDataGrid) {\n//   let k;\n//   map.eachCell((cell, i, j) => {\n//     for (k = 0; k < 3; k++) {\n//       lights[i][j][k] = cell.light[k];\n//     }\n//   });\n// }\n// export function restoreLighting(map: Map.Map, lights: LightDataGrid) {\n//   let k;\n//   map.eachCell((cell, i, j) => {\n//     for (k = 0; k < 3; k++) {\n//       cell.light[k] = lights[i][j][k];\n//     }\n//   });\n// }\nexport function recordOldLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.oldLight[k] = cell.light[k];\n            cell.lightChanged = false;\n        }\n    });\n}\nexport function zeroOutLights(map) {\n    let k;\n    const light = map.ambientLight ? map.ambientLight : [0, 0, 0];\n    map.eachCell((cell, _i, _j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = light[k];\n        }\n        cell.flags |= Flags.Cell.IS_IN_SHADOW;\n    });\n}\nexport function recordGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.glowLight[k] = cell.light[k];\n        }\n    });\n}\nexport function restoreGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = cell.glowLight[k];\n        }\n    });\n}\nexport function updateLighting(map) {\n    if (!map.anyLightChanged)\n        return false;\n    // Copy Light over oldLight\n    recordOldLights(map);\n    // and then zero out Light.\n    zeroOutLights(map);\n    if (!map.staticLightChanged) {\n        restoreGlowLights(map);\n    }\n    else {\n        // GW.debug.log('painting glow lights.');\n        // Paint all glowing tiles.\n        map.eachStaticLight((light, x, y) => {\n            //   const light = lights[id];\n            if (light) {\n                light.paint(map, x, y);\n            }\n        });\n        recordGlowLights(map);\n        map.staticLightChanged = false;\n    }\n    // Cycle through monsters and paint their lights:\n    map.eachDynamicLight((light, x, y) => {\n        light.paint(map, x, y);\n        // if (monst.mutationIndex >= 0 && mutationCatalog[monst.mutationIndex].light != lights['NO_LIGHT']) {\n        //     paint(map, mutationCatalog[monst.mutationIndex].light, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isBurning()) { // monst.status.burning && !(actor.kind.flags & Flags.Actor.AF_FIERY)) {\n        // \tpaint(map, lights.BURNING_CREATURE, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isTelepathicallyRevealed()) {\n        // \tpaint(map, lights['TELEPATHY_LIGHT'], actor.x, actor.y, false, true);\n        // }\n    });\n    // Also paint telepathy lights for dormant monsters.\n    // for (monst of map.dormantMonsters) {\n    //     if (monsterTelepathicallyRevealed(monst)) {\n    //         paint(map, lights['TELEPATHY_LIGHT'], monst.xLoc, monst.yLoc, false, true);\n    //     }\n    // }\n    updateDisplayDetail(map);\n    // Miner's light:\n    const PLAYER = DATA.player;\n    if (PLAYER) {\n        const PLAYERS_LIGHT = lights.PLAYERS_LIGHT;\n        if (PLAYERS_LIGHT && PLAYERS_LIGHT.radius) {\n            PLAYERS_LIGHT.paint(map, PLAYER.x, PLAYER.y, true, true);\n        }\n    }\n    map.anyLightChanged = false;\n    // if (PLAYER.status.invisible) {\n    //     PLAYER.info.foreColor = playerInvisibleColor;\n    // } else if (playerInDarkness()) {\n    // \tPLAYER.info.foreColor = playerInDarknessColor;\n    // } else if (pmap[PLAYER.xLoc][PLAYER.yLoc].flags & IS_IN_SHADOW) {\n    // \tPLAYER.info.foreColor = playerInShadowColor;\n    // } else {\n    // \tPLAYER.info.foreColor = playerInLightColor;\n    // }\n    return true;\n}\n// TODO - Move?\nexport function playerInDarkness(map, PLAYER, darkColor) {\n    const cell = map.cell(PLAYER.x, PLAYER.y);\n    return cell.isDark(darkColor);\n    // return (\n    //   cell.light[0] + 10 < darkColor.r &&\n    //   cell.light[1] + 10 < darkColor.g &&\n    //   cell.light[2] + 10 < darkColor.b\n    // );\n}\n","import * as GW from 'gw-utils';\nimport { Entity as Flags, Layer } from './flags';\nimport * as Light from './light';\nexport { Flags, Layer };\nexport class Entity {\n    constructor(config) {\n        this.priority = 50;\n        this.layer = 0;\n        this.light = null;\n        this.flags = { layer: 0 };\n        this.sprite = GW.make.sprite(config.sprite || config);\n        this.light = config.light ? Light.make(config.light) : null;\n        this.priority = GW.utils.first(config.priority, 50);\n        this.layer =\n            (config.layer && typeof config.layer !== 'number'\n                ? Layer[config.layer]\n                : config.layer) || 0;\n        // @ts-ignore\n        this.flags.layer = GW.flag.from(Flags, config.layerFlags, config.flags, 0);\n    }\n    hasLayerFlag(flag) {\n        return (this.flags.layer & flag) > 0;\n    }\n}\nexport function make(config) {\n    return new Entity(config);\n}\nGW.make.layer = make;\n","import { flag as Flag, utils as Utils, color as Color, make as Make, effect as Effect, } from 'gw-utils';\nimport { Tile as Flags, TileMech as MechFlags } from './flags';\nimport * as Layer from './entity';\nexport { Flags, MechFlags };\n/** Tile Class */\nexport class Tile extends Layer.Entity {\n    /**\n     * Creates a new Tile object.\n     * @param {Object} [config={}] - The configuration of the Tile\n     * @param {String|Number|String[]} [config.flags=0] - Flags and MechFlags for the tile\n     * @param {String} [config.layer=GROUND] - Name of the layer for this tile\n     * @param {String} [config.ch] - The sprite character\n     * @param {String} [config.fg] - The sprite foreground color\n     * @param {String} [config.bg] - The sprite background color\n     */\n    constructor(config) {\n        super((() => {\n            if (!config.Extends)\n                return config;\n            if (typeof config.Extends === 'string') {\n                config.Extends = tiles[config.Extends];\n                if (!config.Extends)\n                    throw new Error('Unknown tile base - ' + config.Extends);\n            }\n            const base = config.Extends;\n            config.ch = Utils.first(config.ch, base.sprite.ch, -1);\n            config.fg = Utils.first(config.fg, base.sprite.fg, -1);\n            config.bg = Utils.first(config.bg, base.sprite.bg, -1);\n            config.layer = Utils.first(config.layer, base.layer);\n            config.priority = Utils.first(config.priority, base.priority);\n            config.opacity = Utils.first(config.opacity, base.sprite.opacity);\n            config.light = Utils.first(config.light, base.light);\n            return config;\n        })());\n        this.flags = { layer: 0, tile: 0, tileMech: 0 };\n        this.activates = {};\n        this.flavor = null;\n        this.desc = null;\n        this.article = null;\n        this.dissipate = 2000; // 20 * 100 = 20%\n        this.defaultGround = null;\n        let base = config.Extends;\n        if (base) {\n            Utils.assignOmitting(['sprite', 'depth', 'priority', 'activates', 'flags', 'light'], this, base);\n            if (base.activates) {\n                Object.assign(this.activates, base.activates);\n            }\n            Object.assign(this.flags, base.flags);\n        }\n        Utils.assignOmitting([\n            'Extends',\n            'extends',\n            'flags',\n            'layerFlags',\n            'mechFlags',\n            'sprite',\n            'activates',\n            'ch',\n            'fg',\n            'bg',\n            'opacity',\n            'light',\n            'layer',\n            'priority',\n            'flags',\n            'ground',\n            'light',\n        ], this, config);\n        this.name = config.name || (base ? base.name : config.id);\n        this.id = config.id;\n        if (config.ground) {\n            this.defaultGround = config.ground;\n        }\n        // @ts-ignore\n        this.flags.tile = Flag.from(Flags, this.flags.tile, config.flags);\n        // @ts-ignore\n        this.flags.layer = Flag.from(Layer.Flags, this.flags.layer, config.layerFlags || config.flags);\n        // @ts-ignore\n        this.flags.tileMech = Flag.from(MechFlags, this.flags.tileMech, config.mechFlags || config.flags);\n        if (config.activates) {\n            Object.entries(config.activates).forEach(([key, info]) => {\n                if (info) {\n                    if (typeof info === 'string') {\n                        if (tiles[info]) {\n                            info = { tile: info };\n                        }\n                        else {\n                            this.activates[key] = info;\n                            return;\n                        }\n                    }\n                    const activation = Effect.make(info);\n                    this.activates[key] = activation;\n                }\n                else {\n                    delete this.activates[key];\n                }\n            });\n        }\n    }\n    /**\n     * Returns whether or not this tile as the given flag.\n     * Will return true if any bit in the flag is true, so testing with\n     * multiple flags will return true if any of them is set.\n     * @param {number} flag - The flag to check\n     * @returns {boolean} Whether or not the flag is set\n     */\n    hasAllFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllLayerFlags(flag) {\n        return (this.flags.layer & flag) === flag;\n    }\n    hasAllMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksPathing() {\n        return (this.flags.layer & Layer.Flags.L_BLOCKS_MOVE ||\n            this.flags.tile & Flags.T_PATHING_BLOCKER);\n    }\n    activatesOn(name) {\n        return !!this.activates[name];\n    }\n    getName(arg) {\n        let opts = {};\n        if (arg === true || arg === false) {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = Color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts = {}) {\n        return this.getName(opts);\n    }\n}\n// Types.Tile = Tile;\nexport function make(config) {\n    return new Tile(config);\n}\nMake.tile = make;\nexport const tiles = {};\nexport function install(...args) {\n    let id = args[0];\n    let base = args[1];\n    let config = args[2];\n    if (arguments.length == 1) {\n        config = args[0];\n        base = config.Extends || null;\n        id = config.id;\n    }\n    else if (arguments.length == 2) {\n        config = base;\n    }\n    if (typeof base === 'string') {\n        config.Extends =\n            tiles[base] || Utils.ERROR('Unknown base tile: ' + base);\n    }\n    // config.name = config.name || base.name || id.toLowerCase();\n    config.id = id;\n    const tile = make(config);\n    tiles[id] = tile;\n    return tile;\n}\n/**\n * Adds multiple tiles to the GW.tiles collection.\n * It extracts all the id:opts pairs from the config object and uses\n * them to call addTileKind.\n * @param {Object} config - The tiles to add in [id, config] pairs\n * @returns {void} Nothing\n * @see addTileKind\n */\nexport function installAll(config) {\n    Object.entries(config).forEach(([id, opts]) => {\n        opts.id = id;\n        install(id, opts);\n    });\n}\n","import { color as Color, sprite as Sprite, utils as Utils, config as CONFIG, data as DATA, random, make as Make, effect as Effect, } from 'gw-utils';\nimport { Tile, tiles as TILES } from './tile';\nimport * as Light from './light';\nimport { Cell as Flags, CellMech as MechFlags, Tile as TileFlags, Map as MapFlags, Entity as LayerFlags, Layer, } from './flags';\nexport { Flags, MechFlags };\n// TODO - Move to gw-ui\nColor.install('cursorColor', 25, 100, 150);\nCONFIG.cursorPathIntensity = 50;\nexport class CellMemory {\n    constructor() {\n        this.mixer = new Sprite.Mixer();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.layerFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    clear() {\n        this.mixer.nullify();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.layerFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    copy(other) {\n        const mixer = this.mixer;\n        Object.assign(this, other);\n        this.mixer = mixer;\n        this.mixer.copy(other.mixer);\n    }\n}\nexport class Cell {\n    constructor() {\n        this._tiles = [];\n        this.layers = null;\n        this._actor = null;\n        this._item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory = new CellMemory();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n    }\n    copy(other) {\n        Utils.copyObject(this, other);\n    }\n    nullify() {\n        for (let i = 0; i < this._tiles.length; ++i) {\n            this._tiles[i] = null;\n        }\n        this.layers = null;\n        this._actor = null;\n        this._item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory.clear();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n    }\n    clear(floorTile = 'FLOOR') {\n        this.nullify();\n        if (typeof floorTile === 'string') {\n            floorTile = TILES[floorTile];\n        }\n        if (floorTile) {\n            this._tiles[0] = floorTile;\n        }\n    }\n    // clearLayers(nullLiquid = false, nullSurface = false, nullGas = false) {\n    //     if (nullLiquid) {\n    //         this._tiles[1] = null;\n    //         this.liquidVolume = 0;\n    //     }\n    //     if (nullSurface) {\n    //         this._tiles[2] = null;\n    //     }\n    //     if (nullGas) {\n    //         this._tiles[3] = null;\n    //         this.gasVolume = 0;\n    //     }\n    //     this.flags |= Flags.CELL_CHANGED;\n    // }\n    get ground() {\n        var _a;\n        return ((_a = this._tiles[Layer.GROUND]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get liquid() {\n        var _a;\n        return ((_a = this._tiles[Layer.LIQUID]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get surface() {\n        var _a;\n        return ((_a = this._tiles[Layer.SURFACE]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get gas() {\n        var _a;\n        return ((_a = this._tiles[Layer.GAS]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get groundTile() {\n        return this._tiles[Layer.GROUND] || TILES.NULL;\n    }\n    get liquidTile() {\n        return this._tiles[Layer.LIQUID] || TILES.NULL;\n    }\n    get surfaceTile() {\n        return this._tiles[Layer.SURFACE] || TILES.NULL;\n    }\n    get gasTile() {\n        return this._tiles[Layer.GAS] || TILES.NULL;\n    }\n    dump() {\n        if (this.actor)\n            return this.actor.sprite.ch;\n        if (this.item)\n            return this.item.sprite.ch;\n        for (let i = this._tiles.length - 1; i >= 0; --i) {\n            if (!this._tiles[i])\n                continue;\n            const tile = this._tiles[i] || TILES.NULL;\n            if (tile.sprite.ch)\n                return tile.sprite.ch;\n        }\n        return TILES.NULL.sprite.ch;\n    }\n    get changed() {\n        return (this.flags & Flags.CELL_CHANGED) > 0;\n    }\n    set changed(v) {\n        if (v) {\n            this.flags |= Flags.CELL_CHANGED;\n        }\n        else {\n            this.flags &= ~Flags.CELL_CHANGED;\n        }\n    }\n    isVisible() {\n        return this.flags & Flags.VISIBLE ? true : false;\n    }\n    isAnyKindOfVisible() {\n        return (this.flags &\n            Flags.ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isOrWasAnyKindOfVisible() {\n        return (this.flags &\n            Flags.IS_WAS_ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isRevealed(orMapped = false) {\n        const flag = Flags.REVEALED | (orMapped ? Flags.MAGIC_MAPPED : 0);\n        return (this.flags & flag) > 0;\n    }\n    listInSidebar() {\n        return this.hasLayerFlag(LayerFlags.L_LIST_IN_SIDEBAR, true);\n    }\n    get needsRedraw() {\n        return (this.flags & Flags.NEEDS_REDRAW) > 0;\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags |= Flags.NEEDS_REDRAW;\n        }\n        else {\n            this.flags &= ~Flags.NEEDS_REDRAW;\n        }\n    }\n    // TODO - Use functions in LIGHT to check these on cell.light directly???\n    hasVisibleLight() {\n        return Light.intensity(this.light) > CONFIG.light.INTENSITY_DARK;\n    } // TODO\n    isDark(darkColor) {\n        const intensity = darkColor\n            ? Light.intensity(darkColor)\n            : CONFIG.light.INTENSITY_DARK;\n        return Light.intensity(this.light) <= intensity;\n    } // TODO\n    get lightChanged() {\n        return (this.flags & Flags.LIGHT_CHANGED) > 0;\n    }\n    set lightChanged(v) {\n        if (v) {\n            this.flags |= Flags.LIGHT_CHANGED | Flags.NEEDS_REDRAW;\n        }\n        else {\n            this.flags &= ~Flags.LIGHT_CHANGED;\n        }\n    }\n    tile(layer = Layer.GROUND) {\n        return this._tiles[layer] || TILES.NULL;\n    }\n    tileId(layer = Layer.GROUND) {\n        var _a;\n        return ((_a = this._tiles[layer]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    volume(layer = Layer.GAS) {\n        if (layer === Layer.GAS)\n            return this.gasVolume;\n        if (layer === Layer.LIQUID)\n            return this.liquidVolume;\n        return 0;\n    }\n    setVolume(layer, volume = 0) {\n        if (layer === Layer.GAS) {\n            this.gasVolume = volume;\n        }\n        else if (layer === Layer.LIQUID) {\n            this.liquidVolume = volume;\n        }\n    }\n    *tiles() {\n        for (let tile of this._tiles) {\n            if (tile) {\n                yield tile;\n            }\n        }\n    }\n    layerFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.layerFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags.layer;\n        }\n        return flags;\n    }\n    tileFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags.tile;\n        }\n        return flags;\n    }\n    tileMechFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileMechFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags.tileMech;\n        }\n        return flags;\n    }\n    hasLayerFlag(flag, limitToPlayerKnowledge = false) {\n        const flags = this.layerFlags(limitToPlayerKnowledge);\n        return !!(flag & flags);\n    }\n    hasAllLayerFlags(flag, limitToPlayerKnowledge = false) {\n        const flags = this.layerFlags(limitToPlayerKnowledge);\n        return (flag & flags) === flag;\n    }\n    hasTileFlag(flagMask, limitToPlayerKnowledge = false) {\n        const tileFlags = this.tileFlags(limitToPlayerKnowledge);\n        return !!(flagMask & tileFlags);\n    }\n    hasAllTileFlags(flags, limitToPlayerKnowledge = false) {\n        return (flags & this.tileFlags(limitToPlayerKnowledge)) === flags;\n    }\n    hasTileMechFlag(flagMask, limitToPlayerKnowledge = false) {\n        const mechFlags = this.tileMechFlags(limitToPlayerKnowledge);\n        return !!(flagMask & mechFlags);\n    }\n    hasAllTileMechFlags(flags, limitToPlayerKnowledge = false) {\n        return (flags & this.tileMechFlags(limitToPlayerKnowledge)) === flags;\n    }\n    setFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags |= cellFlag;\n        this.mechFlags |= cellMechFlag;\n        // this.flags |= Flags.NEEDS_REDRAW;\n    }\n    clearFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags &= ~cellFlag;\n        this.mechFlags &= ~cellMechFlag;\n        // if ((~cellFlag) & Flags.NEEDS_REDRAW) {\n        //   this.flags |= Flags.NEEDS_REDRAW;\n        // }\n    }\n    hasFlag(flag, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellFlags\n            : this.flags;\n        return (flag & flags) > 0;\n    }\n    hasMechFlag(flag, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellMechFlags\n            : this.mechFlags;\n        return (flag & flags) > 0;\n    }\n    hasTile(tile) {\n        let id;\n        if (typeof tile === 'string') {\n            id = tile;\n        }\n        else {\n            id = tile.id;\n        }\n        return this._tiles.some((t) => t && t.id === id);\n    }\n    // hasTileInGroup(...groups) {\n    //   if (groups.length == 1 && Array.isArray(groups[0])) {\n    //     groups = groups[0];\n    //   }\n    //   return this.layers.some( (tileId) => {\n    //     const tile = TILES[tileId] || TILES.NOTHING;\n    //     return Utils.intersect(groups, tile.groups);\n    //   });\n    // }\n    // promotedTileFlags() {\n    //   return this.successorTileFlags(\"promote\");\n    // }\n    // discoveredTileFlags() {\n    //   return this.successorTileFlags(\"discover\");\n    // }\n    // hasDiscoveredTileFlag(flag: number) {\n    //   // if (!this.hasTileMechFlag(TM_IS_SECRET)) return false;\n    //   return this.discoveredTileFlags() & flag;\n    // }\n    topmostTile(skipGas = false) {\n        let best = TILES.NULL;\n        let bestPriority = -10000;\n        for (let layer = Layer.GROUND; layer <= (skipGas ? Layer.LIQUID : Layer.GAS); ++layer) {\n            // @ts-ignore\n            const tile = this._tiles[layer];\n            if (!tile)\n                continue;\n            if (tile.priority > bestPriority) {\n                best = tile;\n                bestPriority = tile.priority;\n            }\n        }\n        return best;\n    }\n    tileWithLayerFlag(layerFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags.layer & layerFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileWithFlag(tileFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags.tile & tileFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileWithMechFlag(mechFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags.tileMech & mechFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileDesc() {\n        return this.topmostTile().desc;\n    }\n    tileFlavor() {\n        return this.topmostTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.topmostTile().getName(opts);\n    }\n    isNull() {\n        return this.ground === null;\n    }\n    isClear() {\n        return (this.liquid === null && this.gas === null && this.surface === null);\n    }\n    isEmpty() {\n        return !(this._actor || this._item);\n    }\n    isMoveableNow(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const layerFlags = useMemory\n            ? this.memory.layerFlags\n            : this.layerFlags(false);\n        return (layerFlags & LayerFlags.L_BLOCKS_MOVE) === 0;\n    }\n    isWalkableNow(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const layerFlags = useMemory\n            ? this.memory.layerFlags\n            : this.layerFlags(false);\n        if (layerFlags & LayerFlags.L_BLOCKS_MOVE)\n            return false;\n        const tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        if (!(tileFlags & TileFlags.T_IS_DEEP_LIQUID))\n            return true;\n        return (tileFlags & TileFlags.T_BRIDGE) > 0;\n    }\n    canBeWalked(limitToPlayerKnowledge = false) {\n        if (this.isWalkableNow(limitToPlayerKnowledge))\n            return true;\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const layerFlags = useMemory\n            ? this.memory.layerFlags\n            : this.layerFlags(false);\n        return (layerFlags & LayerFlags.L_SECRETLY_PASSABLE) > 0;\n    }\n    isWall(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let layerFlags = useMemory ? this.memory.layerFlags : this.layerFlags();\n        return (layerFlags & LayerFlags.L_IS_WALL) === LayerFlags.L_IS_WALL;\n    }\n    isObstruction(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let layerFlags = useMemory ? this.memory.layerFlags : this.layerFlags();\n        return !!(layerFlags & LayerFlags.L_BLOCKS_DIAGONAL);\n    }\n    isDoorway(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let layerFlags = useMemory ? this.memory.layerFlags : this.layerFlags();\n        return ((layerFlags & LayerFlags.L_BLOCKS_VISION) > 0 &&\n            (layerFlags & LayerFlags.L_BLOCKS_MOVE) === 0);\n    }\n    isSecretDoorway(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge)\n            return false;\n        const layerFlags = this.layerFlags(limitToPlayerKnowledge);\n        return (layerFlags & LayerFlags.L_SECRETLY_PASSABLE) > 0;\n    }\n    blocksPathing(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        if (!this.isWalkableNow(limitToPlayerKnowledge))\n            return true;\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_PATHING_BLOCKER);\n    }\n    blocksVision() {\n        const layerFlags = this.layerFlags();\n        return !!(layerFlags & LayerFlags.L_BLOCKS_VISION);\n    }\n    blocksEffects() {\n        const layerFlags = this.layerFlags();\n        return !!(layerFlags & LayerFlags.L_BLOCKS_EFFECTS);\n    }\n    isLiquid(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_IS_DEEP_LIQUID);\n    }\n    // TODO - Should this look at the tiles instead of the flags?\n    // What if a gas tile is not set with T_GAS?\n    // Should we force T_GAS if layer === GAS when creating a tile?\n    // Should these be cell flags - indicating we have this layer\n    hasGas(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let cellFlags = useMemory ? this.memory.cellFlags : this.flags;\n        return !!(cellFlags & Flags.HAS_GAS);\n    }\n    // TODO - Check floor and actor\n    hasKey() {\n        return false;\n    }\n    markRevealed() {\n        this.flags &= ~Flags.STABLE_MEMORY;\n        if (this.flags & Flags.REVEALED)\n            return false;\n        this.flags |= Flags.REVEALED;\n        return !this.isWall();\n    }\n    obstructsLayer(depth) {\n        return (depth === Layer.SURFACE &&\n            this.hasLayerFlag(LayerFlags.L_BLOCKS_SURFACE));\n    }\n    setTile(tileId = null, volume = 0, map) {\n        map = map || DATA.map;\n        let tile;\n        if (tileId === null) {\n            tile = TILES.NULL;\n            tileId = null;\n        }\n        else if (typeof tileId === 'string') {\n            tile = TILES[tileId];\n        }\n        else if (tileId instanceof Tile) {\n            tile = tileId;\n            tileId = tile.id;\n        }\n        if (!tile) {\n            return Utils.ERROR('Unknown tile - ' + tileId);\n        }\n        if (tile.layer > 0 && !this._tiles[0]) {\n            this.setTile(tile.defaultGround || TILES.FLOOR, 0, map); // TODO - do not use FLOOR?  Does map have the tile to use?\n        }\n        const oldTile = this._tiles[tile.layer] || TILES.NULL;\n        const oldTileId = oldTile === TILES.NULL ? null : oldTile.id;\n        if (oldTile.blocksPathing() != tile.blocksPathing()) {\n            DATA.staleLoopMap = true;\n        }\n        if (tile.flags.tile & TileFlags.T_IS_FIRE &&\n            !(oldTile.flags.tile & TileFlags.T_IS_FIRE)) {\n            this.mechFlags |= MechFlags.CAUGHT_FIRE_THIS_TURN;\n        }\n        const blocksVision = tile.flags.layer & LayerFlags.L_BLOCKS_VISION;\n        const oldBlocksVision = oldTile.flags.layer & LayerFlags.L_BLOCKS_VISION;\n        if (map &&\n            this.isAnyKindOfVisible() &&\n            blocksVision != oldBlocksVision) {\n            map.setFlag(MapFlags.MAP_FOV_CHANGED);\n        }\n        if (oldTileId !== null)\n            this.removeLayer(oldTile);\n        this._tiles[tile.layer] = tileId === null ? null : tile;\n        if (tileId !== null)\n            this.addLayer(tile);\n        let layerFlag = 0;\n        if (tile.layer == Layer.LIQUID) {\n            layerFlag = Flags.HAS_LIQUID;\n            this.liquidVolume =\n                volume + (tileId == oldTileId ? this.liquidVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_LIQUID);\n        }\n        else if (tile.layer == Layer.GAS) {\n            layerFlag = Flags.HAS_GAS;\n            this.gasVolume =\n                volume + (tileId == oldTileId ? this.gasVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_GAS);\n        }\n        else if (tile.layer === Layer.SURFACE) {\n            layerFlag = Flags.HAS_SURFACE;\n        }\n        if (tileId) {\n            this.flags |= layerFlag;\n        }\n        else {\n            this.flags &= ~layerFlag;\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED | Flags.NEEDS_REDRAW;\n        if (map && oldTile.light !== tile.light) {\n            map.clearFlag(MapFlags.MAP_STABLE_GLOW_LIGHTS | MapFlags.MAP_STABLE_LIGHTS);\n        }\n        return true;\n    }\n    clearLayer(depth) {\n        // @ts-ignore\n        if (typeof depth === 'string')\n            depth = Layer[depth];\n        const current = this._tiles[depth];\n        if (current) {\n            // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n            this.flags |= Flags.CELL_CHANGED;\n            this.removeLayer(current);\n        }\n        this._tiles[depth] = null;\n        let layerFlag = 0;\n        if (depth == Layer.LIQUID) {\n            layerFlag = Flags.HAS_LIQUID;\n            this.liquidVolume = 0;\n        }\n        else if (depth == Layer.GAS) {\n            layerFlag = Flags.HAS_GAS;\n            this.gasVolume = 0;\n        }\n        else if (depth == Layer.SURFACE) {\n            layerFlag = Flags.HAS_SURFACE;\n        }\n        else if (depth == Layer.GROUND) {\n            this._tiles[Layer.GROUND] = TILES.FLOOR; // TODO - ????!!!\n        }\n        this.flags &= ~layerFlag;\n    }\n    clearLayersExcept(except = Layer.GROUND, ground) {\n        const floorTile = ground ? TILES[ground] : this.groundTile;\n        for (let layer = 0; layer < this._tiles.length; layer++) {\n            if (layer != except && layer != Layer.GAS) {\n                if (layer === Layer.GROUND) {\n                    if (floorTile !== this.groundTile)\n                        this.setTile(floorTile);\n                }\n                else {\n                    this.clearLayer(layer);\n                }\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    clearLayersWithFlags(tileFlags, tileMechFlags = 0) {\n        for (let i = 0; i < this._tiles.length; ++i) {\n            const tile = this._tiles[i];\n            if (!tile)\n                continue;\n            if (tileFlags && tileMechFlags) {\n                if (tile.flags.tile & tileFlags &&\n                    tile.flags.tileMech & tileMechFlags) {\n                    this.clearLayer(i);\n                }\n            }\n            else if (tileFlags) {\n                if (tile.flags.tile & tileFlags) {\n                    this.clearLayer(i);\n                }\n            }\n            else if (tileMechFlags) {\n                if (tile.flags.tileMech & tileMechFlags) {\n                    this.clearLayer(i);\n                }\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n    }\n    // EVENTS\n    async activate(name, map, x, y, ctx = {}) {\n        ctx.cell = this;\n        let fired = false;\n        if (ctx.layer !== undefined) {\n            const tile = this.tile(ctx.layer);\n            if (tile && tile.activates) {\n                const ev = tile.activates[name];\n                let effect;\n                if (typeof ev === 'string') {\n                    effect = Effect.effects[ev];\n                }\n                else {\n                    effect = ev;\n                }\n                if (effect) {\n                    // console.log(' - has event');\n                    if (ctx.force ||\n                        !effect.chance ||\n                        random.chance(effect.chance, 10000)) {\n                        ctx.tile = tile;\n                        // console.log(' - spawn event @%d,%d - %s', x, y, name);\n                        fired = await effect.fire(map, x, y, ctx);\n                        // cell.debug(\" - spawned\");\n                    }\n                }\n            }\n        }\n        else {\n            // console.log('fire event - %s', name);\n            for (let tile of this.tiles()) {\n                if (!tile.activates)\n                    continue;\n                const ev = tile.activates[name];\n                // console.log(' - ', ev);\n                let effect;\n                if (typeof ev === 'string') {\n                    effect = Effect.effects[ev];\n                }\n                else {\n                    effect = ev;\n                }\n                if (effect) {\n                    // cell.debug(\" - has event\");\n                    if (ctx.force ||\n                        !effect.chance ||\n                        random.chance(effect.chance, 10000)) {\n                        ctx.tile = tile;\n                        // console.log(' - spawn event @%d,%d - %s', x, y, name);\n                        fired = (await effect.fire(map, x, y, ctx)) || fired;\n                        // cell.debug(\" - spawned\");\n                        if (fired) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return fired;\n    }\n    activatesOn(name) {\n        for (let tile of this.tiles()) {\n            if (tile.activatesOn(name))\n                return true;\n        }\n        return false;\n    }\n    // ITEM\n    get item() {\n        return this._item;\n    }\n    set item(item) {\n        if (this.item) {\n            this.removeLayer(this.item);\n        }\n        this._item = item;\n        if (item) {\n            this.flags |= Flags.HAS_ITEM;\n            this.addLayer(item);\n        }\n        else {\n            this.flags &= ~Flags.HAS_ITEM;\n        }\n    }\n    // ACTOR\n    get actor() {\n        return this._actor;\n    }\n    set actor(actor) {\n        if (this.actor) {\n            this.removeLayer(this.actor);\n        }\n        this._actor = actor;\n        if (actor) {\n            this.flags |= Flags.HAS_ANY_ACTOR;\n            this.addLayer(actor);\n        }\n        else {\n            this.flags &= ~Flags.HAS_ANY_ACTOR;\n        }\n    }\n    addLayer(layer) {\n        if (!layer)\n            return;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        let current = this.layers;\n        if (!current ||\n            current.layer.layer > layer.layer ||\n            (current.layer.layer == layer.layer &&\n                current.layer.priority > layer.priority)) {\n            this.layers = {\n                layer,\n                next: current,\n            };\n            return;\n        }\n        while (current.next &&\n            (current.layer.layer < layer.layer ||\n                (current.layer.layer == layer.layer &&\n                    current.layer.priority <= layer.priority))) {\n            current = current.next;\n        }\n        const item = {\n            layer,\n            next: current.next,\n        };\n        current.next = item;\n    }\n    removeLayer(layer) {\n        if (!layer)\n            return false;\n        if (!this.layers)\n            return false;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        if (this.layers && this.layers.layer === layer) {\n            this.layers = this.layers.next;\n            return true;\n        }\n        let prev = this.layers;\n        let current = this.layers.next;\n        while (current) {\n            if (current.layer === layer) {\n                prev.next = current.next;\n                return true;\n            }\n            prev = current;\n            current = current.next;\n        }\n        return false;\n    }\n    // MEMORY\n    storeMemory() {\n        const memory = this.memory;\n        memory.tileFlags = this.tileFlags();\n        memory.tileMechFlags = this.tileMechFlags();\n        memory.layerFlags = this.layerFlags();\n        memory.cellFlags = this.flags;\n        memory.cellMechFlags = this.mechFlags;\n        memory.tile = this.topmostTile();\n        if (this.item) {\n            memory.item = this.item;\n            memory.itemQuantity = this.item.quantity;\n        }\n        else {\n            memory.item = null;\n            memory.itemQuantity = 0;\n        }\n        memory.actor = this.actor;\n        getAppearance(this, memory.mixer);\n        if (this.actor && this.isOrWasAnyKindOfVisible()) {\n            if (this.actor.rememberedInCell &&\n                this.actor.rememberedInCell !== this) {\n                // console.log(\"remembered in cell change\");\n                this.actor.rememberedInCell.storeMemory();\n                this.actor.rememberedInCell.flags |= Flags.NEEDS_REDRAW;\n            }\n            this.actor.rememberedInCell = this;\n        }\n    }\n}\nexport function make(tile) {\n    const cell = new Cell();\n    if (tile) {\n        cell.setTile(tile);\n    }\n    return cell;\n}\nMake.cell = make;\nexport function getAppearance(cell, dest) {\n    const memory = cell.memory.mixer;\n    memory.blackOut();\n    let needDistinctness = cell.layerFlags() & LayerFlags.L_VISUALLY_DISTINCT;\n    let current = cell.layers;\n    while (current) {\n        const layer = current.layer;\n        let alpha = layer.sprite.opacity || 100;\n        if (layer.layer == Layer.LIQUID) {\n            alpha = Utils.clamp(cell.liquidVolume * 34, 20, 100);\n        }\n        else if (layer.layer == Layer.GAS) {\n            alpha = Utils.clamp(cell.gasVolume * 34, 20, 100);\n        }\n        memory.drawSprite(layer.sprite, alpha);\n        current = current.next;\n    }\n    memory.fg.multiply(cell.light);\n    memory.bg.multiply(cell.light);\n    memory.bake(!cell.isAnyKindOfVisible()); // turns off dancing if not visible\n    if (needDistinctness) {\n        Color.separate(memory.fg, memory.bg);\n    }\n    dest.drawSprite(memory);\n    return true;\n}\n","import * as GW from 'gw-utils';\nimport * as Flags from './flags';\nimport * as Map from './map';\nfunction demoteCellVisibility(cell) {\n    cell.flags &= ~(Flags.Cell.WAS_ANY_KIND_OF_VISIBLE | Flags.Cell.IN_FOV);\n    if (cell.flags & Flags.Cell.VISIBLE) {\n        cell.flags &= ~Flags.Cell.VISIBLE;\n        cell.flags |= Flags.Cell.WAS_VISIBLE;\n    }\n    if (cell.flags & Flags.Cell.CLAIRVOYANT_VISIBLE) {\n        cell.flags &= ~Flags.Cell.CLAIRVOYANT_VISIBLE;\n        cell.flags |= Flags.Cell.WAS_CLAIRVOYANT_VISIBLE;\n    }\n    if (cell.flags & Flags.Cell.TELEPATHIC_VISIBLE) {\n        cell.flags &= ~Flags.Cell.TELEPATHIC_VISIBLE;\n        cell.flags |= Flags.Cell.WAS_TELEPATHIC_VISIBLE;\n    }\n}\nfunction _updateCellVisibility(cell, i, j, map) {\n    const isVisible = cell.flags & Flags.Cell.VISIBLE;\n    const wasVisible = cell.flags & Flags.Cell.WAS_VISIBLE;\n    if (isVisible && wasVisible) {\n        if (cell.lightChanged) {\n            map.redrawCell(cell);\n        }\n    }\n    else if (isVisible && !wasVisible) {\n        // if the cell became visible this move\n        if (!(cell.flags & Flags.Cell.REVEALED) && GW.data.automationActive) {\n            if (cell.item) {\n                const theItem = cell.item;\n                if (theItem.hasLayerFlag(Flags.Entity.L_INTERRUPT_WHEN_SEEN)) {\n                    GW.message.add('§you§ §see§ ΩitemMessageColorΩ§item§∆.', {\n                        item: theItem,\n                        actor: GW.data.player,\n                    });\n                }\n            }\n            if (!(cell.flags & Flags.Cell.MAGIC_MAPPED) &&\n                cell.hasLayerFlag(Flags.Entity.L_INTERRUPT_WHEN_SEEN)) {\n                const tile = cell.tileWithLayerFlag(Flags.Entity.L_INTERRUPT_WHEN_SEEN);\n                if (tile) {\n                    GW.message.add('§you§ §see§ ΩbackgroundMessageColorΩ§item§∆.', {\n                        actor: GW.data.player,\n                        item: tile.name,\n                    });\n                }\n            }\n        }\n        map.markRevealed(i, j);\n        map.redrawCell(cell);\n    }\n    else if (!isVisible && wasVisible) {\n        // if the cell ceased being visible this move\n        cell.storeMemory();\n        map.redrawCell(cell);\n    }\n    return isVisible;\n}\nfunction _updateCellClairyvoyance(cell, _i, _j, map) {\n    const isClairy = cell.flags & Flags.Cell.CLAIRVOYANT_VISIBLE;\n    const wasClairy = cell.flags & Flags.Cell.WAS_CLAIRVOYANT_VISIBLE;\n    if (isClairy && wasClairy) {\n        if (cell.lightChanged) {\n            map.redrawCell(cell);\n        }\n    }\n    else if (!isClairy && wasClairy) {\n        // ceased being clairvoyantly visible\n        cell.storeMemory();\n        map.redrawCell(cell);\n    }\n    else if (!wasClairy && isClairy) {\n        // became clairvoyantly visible\n        cell.flags &= ~Flags.Cell.STABLE_MEMORY;\n        map.redrawCell(cell);\n    }\n    return isClairy;\n}\nfunction _updateCellTelepathy(cell, _i, _j, map) {\n    const isTele = cell.flags & Flags.Cell.TELEPATHIC_VISIBLE;\n    const wasTele = cell.flags & Flags.Cell.WAS_TELEPATHIC_VISIBLE;\n    if (isTele && wasTele) {\n        if (cell.lightChanged) {\n            map.redrawCell(cell);\n        }\n    }\n    else if (!isTele && wasTele) {\n        // ceased being telepathically visible\n        cell.storeMemory();\n        map.redrawCell(cell);\n    }\n    else if (!wasTele && isTele) {\n        // became telepathically visible\n        if (!(cell.flags & Flags.Cell.REVEALED) &&\n            !cell.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER)) {\n            GW.data.xpxpThisTurn++;\n        }\n        cell.flags &= ~Flags.Cell.STABLE_MEMORY;\n        map.redrawCell(cell);\n    }\n    return isTele;\n}\nfunction _updateCellDetect(cell, _i, _j, map) {\n    const isMonst = cell.flags & Flags.Cell.MONSTER_DETECTED;\n    const wasMonst = cell.flags & Flags.Cell.WAS_MONSTER_DETECTED;\n    if (isMonst && wasMonst) {\n        if (cell.lightChanged) {\n            map.redrawCell(cell);\n        }\n    }\n    else if (!isMonst && wasMonst) {\n        // ceased being detected visible\n        cell.flags &= ~Flags.Cell.STABLE_MEMORY;\n        map.redrawCell(cell);\n        cell.storeMemory();\n    }\n    else if (!wasMonst && isMonst) {\n        // became detected visible\n        cell.flags &= ~Flags.Cell.STABLE_MEMORY;\n        map.redrawCell(cell);\n        cell.storeMemory();\n    }\n    return isMonst;\n}\nfunction promoteCellVisibility(cell, i, j, map) {\n    if (cell.flags & Flags.Cell.IN_FOV &&\n        map.hasVisibleLight(i, j) &&\n        !(cell.mechFlags & Flags.CellMech.DARKENED)) {\n        cell.flags |= Flags.Cell.VISIBLE;\n    }\n    if (_updateCellVisibility(cell, i, j, map))\n        return;\n    if (_updateCellClairyvoyance(cell, i, j, map))\n        return;\n    if (_updateCellTelepathy(cell, i, j, map))\n        return;\n    if (_updateCellDetect(cell, i, j, map))\n        return;\n}\nexport function initMap(map) {\n    if (!(map.flags & Map.Flags.MAP_CALC_FOV)) {\n        map.forEach((cell) => (cell.flags |= Flags.Cell.REVEALED));\n        return;\n    }\n    map.clearFlags(0, Flags.Cell.IS_WAS_ANY_KIND_OF_VISIBLE);\n}\nexport function update(map, x, y, maxRadius) {\n    if (!(map.flags & Map.Flags.MAP_CALC_FOV) || !map.fov)\n        return false;\n    if (x == map.fov.x && y == map.fov.y) {\n        if (!(map.flags & Flags.Map.MAP_FOV_CHANGED))\n            return false;\n    }\n    map.flags &= ~Flags.Map.MAP_FOV_CHANGED;\n    map.fov.x = x;\n    map.fov.y = y;\n    map.forEach(demoteCellVisibility);\n    // Calculate player's field of view (distinct from what is visible, as lighting hasn't been done yet).\n    const grid = GW.grid.alloc(map.width, map.height, 0);\n    map.calcFov(grid, x, y, maxRadius);\n    grid.forEach((v, i, j) => {\n        if (v) {\n            map.setCellFlags(i, j, Flags.Cell.IN_FOV);\n        }\n    });\n    GW.grid.free(grid);\n    map.setCellFlags(x, y, Flags.Cell.IN_FOV | Flags.Cell.VISIBLE);\n    // if (PLAYER.bonus.clairvoyance < 0) {\n    //   discoverCell(PLAYER.xLoc, PLAYER.yLoc);\n    // }\n    //\n    // if (PLAYER.bonus.clairvoyance != 0) {\n    // \tupdateClairvoyance();\n    // }\n    //\n    // updateTelepathy();\n    // updateMonsterDetection();\n    // updateLighting();\n    map.forEach(promoteCellVisibility);\n    // if (PLAYER.status.hallucinating > 0) {\n    // \tfor (theItem of DUNGEON.items) {\n    // \t\tif ((pmap[theItem.xLoc][theItem.yLoc].flags & DISCOVERED) && refreshDisplay) {\n    // \t\t\trefreshDungeonCell(theItem.xLoc, theItem.yLoc);\n    // \t\t}\n    // \t}\n    // \tfor (monst of DUNGEON.monsters) {\n    // \t\tif ((pmap[monst.xLoc][monst.yLoc].flags & DISCOVERED) && refreshDisplay) {\n    // \t\t\trefreshDungeonCell(monst.xLoc, monst.yLoc);\n    // \t\t}\n    // \t}\n    // }\n    return true;\n}\n","import * as GW from 'gw-utils';\nimport * as Cell from './cell';\nimport * as Tile from './tile';\nimport * as Entity from './entity';\nconst Flags = GW.effect.Flags;\nexport function makeTileEffect(config) {\n    if (!config) {\n        GW.utils.ERROR('Config required to make tile effect.');\n        return null;\n    }\n    if (typeof config === 'string') {\n        config = config.split(/[,|]/).map((t) => t.trim());\n    }\n    if (Array.isArray(config)) {\n        config = {\n            id: config[0],\n            spread: config[1] || 0,\n            decrement: config[2] || 0,\n        };\n    }\n    config.id = config.id || config.tile;\n    config.spread = config.spread || 0;\n    config.decrement = config.decrement || 0;\n    if (config.spread >= 100 && config.decrement <= 0) {\n        config.decrement = 100;\n    }\n    config.matchTile = config.matchTile || config.match || config.needs || null;\n    config.volume = config.volume || 0;\n    if (!config.id) {\n        GW.utils.ERROR('id required to make tile effect.');\n    }\n    return tileEffect.bind(config);\n}\nGW.effect.installType('tile', makeTileEffect);\nexport async function tileEffect(effect, x, y) {\n    const id = this.id;\n    const tile = Tile.tiles[id] || null;\n    if (!tile)\n        return false;\n    const abortIfBlocking = !!(effect.flags & Flags.E_ABORT_IF_BLOCKS_MAP);\n    const isBlocking = !!(abortIfBlocking &&\n        !(effect.flags & Flags.E_PERMIT_BLOCKING) &&\n        (tile.blocksPathing() || effect.flags & Flags.E_TREAT_AS_BLOCKING));\n    let didSomething = false;\n    const map = effect.map;\n    didSomething = computeSpawnMap(this, effect, x, y);\n    if (!didSomething) {\n        return false;\n    }\n    if (abortIfBlocking &&\n        isBlocking &&\n        map.gridDisruptsWalkability(effect.grid)) {\n        // GW.grid.free(spawnMap);\n        return false;\n    }\n    if (effect.flags & Flags.E_EVACUATE_CREATURES) {\n        // first, evacuate creatures, so that they do not re-trigger the tile.\n        if (evacuateCreatures(map, effect.grid)) {\n            didSomething = true;\n        }\n    }\n    if (effect.flags & Flags.E_EVACUATE_ITEMS) {\n        // first, evacuate items, so that they do not re-trigger the tile.\n        if (evacuateItems(map, effect.grid)) {\n            didSomething = true;\n        }\n    }\n    if (effect.flags & Flags.E_CLEAR_CELL) {\n        // first, clear other tiles (not base/ground)\n        if (clearCells(map, effect.grid)) {\n            didSomething = true;\n        }\n    }\n    const spawned = spawnTiles(effect.flags, effect.grid, effect.map, tile, this.volume);\n    if (spawned) {\n        didSomething = true;\n        // await spawnMap.forEachAsync( (v, x, y) => {\n        //     if (!v) return;\n        //     await map.applyInstantEffects(x, y);\n        // });\n        // if (applyEffects) {\n        // if (PLAYER.xLoc == i && PLAYER.yLoc == j && !PLAYER.status.levitating && refresh) {\n        // \tflavorMessage(tileFlavor(PLAYER.xLoc, PLAYER.yLoc));\n        // }\n        // if (cell.actor || cell.item) {\n        // \tfor(let t of cell.tiles()) {\n        // \t\tawait t.applyInstantEffects(map, i, j, cell);\n        // \t\tif (Data.gameHasEnded) {\n        // \t\t\treturn true;\n        // \t\t}\n        // \t}\n        // }\n        // if (tile.flags & TileFlags.T_IS_FIRE) {\n        // \tif (cell.flags & CellFlags.HAS_ITEM) {\n        // \t\ttheItem = map.itemAt(i, j);\n        // \t\tif (theItem.flags & Flags.Item.ITEM_FLAMMABLE) {\n        // \t\t\tawait burnItem(theItem);\n        // \t\t}\n        // \t}\n        // }\n        // }\n    }\n    // GW.grid.free(spawnMap);\n    return didSomething;\n}\n// tick\nexport async function fireAll(map, event) {\n    const willFire = GW.grid.alloc(map.width, map.height);\n    // Figure out which tiles will fire - before we change everything...\n    map.forEach((cell, x, y) => {\n        cell.clearFlags(0, Cell.MechFlags.EVENT_FIRED_THIS_TURN);\n        for (let tile of cell.tiles()) {\n            const effect = GW.effect.from(tile.activates[event]);\n            if (!effect)\n                continue;\n            let promoteChance = 0;\n            // < 0 means try to fire my neighbors...\n            if (effect.chance < 0) {\n                promoteChance = 0;\n                map.eachNeighbor(x, y, (n, _i, _j) => {\n                    if (!n.hasLayerFlag(Entity.Flags.L_BLOCKS_EFFECTS) &&\n                        n.tileId(tile.layer) != cell.tileId(tile.layer) &&\n                        !(n.mechFlags &\n                            Cell.MechFlags.CAUGHT_FIRE_THIS_TURN)) {\n                        // TODO - Should this break from the loop after doing this once or keep going?\n                        promoteChance += -1 * effect.chance;\n                    }\n                }, true);\n            }\n            else {\n                promoteChance = effect.chance || 100 * 100; // 100%\n            }\n            if (!(cell.mechFlags & Cell.MechFlags.CAUGHT_FIRE_THIS_TURN) &&\n                GW.random.chance(promoteChance, 10000)) {\n                willFire[x][y] |= GW.flag.fl(tile.layer);\n                cell.mechFlags |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n            }\n        }\n    });\n    // Then activate them - so that we don't activate the next generation as part of the forEach\n    await willFire.forEachAsync(async (w, x, y) => {\n        if (!w)\n            return;\n        const cell = map.cell(x, y);\n        for (let layer = 0; layer <= Entity.Layer.GAS; ++layer) {\n            if (w & GW.flag.fl(layer)) {\n                await cell.activate(event, map, x, y, { force: true, layer });\n            }\n        }\n    });\n    GW.grid.free(willFire);\n}\n// Spawn\nexport function spawnTiles(flags, spawnMap, map, tile, volume = 0) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = flags & Flags.E_BLOCKED_BY_OTHER_LAYERS;\n    const superpriority = flags & Flags.E_SUPERPRIORITY;\n    // const applyEffects = ctx.refreshCell;\n    volume = volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            const isRoot = spawnMap[i][j] === 1;\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.mechFlags & Cell.MechFlags.EVENT_FIRED_THIS_TURN &&\n                !isRoot) {\n                continue;\n            }\n            if (cell.tile(tile.layer) === tile) {\n                // If the new cell already contains the fill terrain,\n                if (tile.layer == Entity.Layer.GAS) {\n                    spawnMap[i][j] = 1;\n                    cell.gasVolume += volume;\n                }\n                else if (tile.layer == Entity.Layer.LIQUID) {\n                    spawnMap[i][j] = 1;\n                    cell.liquidVolume += volume;\n                }\n            }\n            else if ((superpriority ||\n                cell.tile(tile.layer).priority < tile.priority) && // If the terrain in the layer to be overwritten has a higher priority number (unless superpriority),\n                !cell.obstructsLayer(tile.layer) && // If we will be painting into the surface layer when that cell forbids it,\n                (!cell.item || !(flags & Flags.E_BLOCKED_BY_ITEMS)) &&\n                (!cell.actor || !(flags & Flags.E_BLOCKED_BY_ACTORS)) &&\n                (!blockedByOtherLayers ||\n                    cell.topmostTile().priority < tile.priority) // TODO - highestPriorityTile()\n            ) {\n                // if the fill won't violate the priority of the most important terrain in this cell:\n                spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                map.setTile(i, j, tile, volume);\n                // map.redrawCell(cell);\n                // if (volume && cell.gas) {\n                //     cell.volume += (feat.volume || 0);\n                // }\n                // debug('- tile', i, j, 'tile=', tile.id);\n                // cell.mechFlags |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                accomplishedSomething = true;\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.changed = true;\n    }\n    return accomplishedSomething;\n}\n// Spread\nfunction cellIsOk(config, map, x, y, flags, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (flags & Flags.E_BUILD_IN_WALLS) {\n        if (!cell.isWall())\n            return false;\n    }\n    else if (flags & Flags.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = true;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    else if (flags & Flags.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (cell.isWall())\n            return false; // or on wall\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = false;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    else if (cell.blocksEffects() && !config.matchTile && !isStart) {\n        return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (config.matchTile && !cell.hasTile(config.matchTile))\n        return false;\n    return true;\n}\nexport function computeSpawnMap(config, effect, x, y) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const map = effect.map;\n    const flags = effect.flags;\n    const grid = effect.grid;\n    let startProb = config.spread || 0;\n    let probDec = config.decrement || 0;\n    const spawnMap = grid;\n    spawnMap.fill(0);\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GW.utils.DIRS[dir][0];\n                            y2 = j + GW.utils.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                cellIsOk(config, map, x2, y2, flags, false) &&\n                                GW.random.chance(startProb)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    if (!cellIsOk(config, map, x, y, flags, true)) {\n        spawnMap[x][y] = 0;\n        --count;\n    }\n    return count > 0;\n}\n// export function spreadCircle(\n//     this: any,\n//     ctx: GW.effect.EffectCtx,\n//     spawnMap: GW.grid.NumGrid\n// ) {\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     let radius = 0;\n//     startProb = startProb || 100;\n//     if (startProb >= 100) {\n//         probDec = probDec || 100;\n//     }\n//     while (GW.random.chance(startProb)) {\n//         startProb -= probDec;\n//         ++radius;\n//     }\n//     // startProb = 100;\n//     // probDec = 0;\n//     spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n//         if (!cellIsOk(this, i, j, ctx)) return 0;\n//         // const dist = Math.floor(Utils.distanceBetween(x, y, i, j));\n//         // const prob = startProb - dist * probDec;\n//         // if (!random.chance(prob)) return 0;\n//         return 1;\n//     });\n//     // spawnMap[x][y] = 1;\n//     // if (!isOk(flags, x, y, ctx)) {\n//     //     spawnMap[x][y] = 0;\n//     // }\n//     return true;\n// }\n// export function spreadLine(\n//     this: any,\n//     ctx: GW.effect.EffectCtx,\n//     spawnMap: GW.grid.NumGrid\n// ) {\n//     let x2, y2;\n//     let madeChange;\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     if (startProb) {\n//         madeChange = true;\n//         if (startProb >= 100) {\n//             probDec = probDec || 100;\n//         }\n//         x2 = x;\n//         y2 = y;\n//         const dir = GW.utils.DIRS[GW.random.number(4)];\n//         while (madeChange) {\n//             madeChange = false;\n//             x2 = x2 + dir[0];\n//             y2 = y2 + dir[1];\n//             if (\n//                 spawnMap.hasXY(x2, y2) &&\n//                 !spawnMap[x2][y2] &&\n//                 cellIsOk(this, x2, y2, ctx) &&\n//                 GW.random.chance(startProb)\n//             ) {\n//                 spawnMap[x2][y2] = 1;\n//                 madeChange = true;\n//                 startProb -= probDec;\n//             }\n//         }\n//     }\n//     if (!cellIsOk(this, x, y, ctx)) {\n//         spawnMap[x][y] = 0;\n//     }\n//     return true;\n// }\nexport function clearCells(map, spawnMap) {\n    let didSomething = false;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        map.clearCell(i, j);\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let i, j;\n    let didSomething = false;\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            if (!blockingMap[i][j])\n                continue;\n            const cell = map.cell(i, j);\n            if (!cell.actor)\n                continue;\n            const monst = cell.actor;\n            const loc = map.matchingLocNear(i, j, (cell) => {\n                return !monst.forbidsCell(cell);\n            }, { hallways: true, blockingMap });\n            if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                map.moveActor(loc[0], loc[1], monst);\n                // map.redrawXY(loc[0], loc[1]);\n                didSomething = true;\n            }\n        }\n    }\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    blockingMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (!cell.item)\n            return;\n        const item = cell.item;\n        const loc = map.matchingLocNear(i, j, (dest) => {\n            return !item.forbidsCell(dest);\n        }, { hallways: true, blockingMap });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(item);\n            map.addItem(loc[0], loc[1], item);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import { utils as Utils, random, grid as Grid, fov as Fov, flag as Flag, path as Path, color as Color, colors as COLORS, config as CONFIG, data as DATA, make as Make, sprite as Sprite, effect as EFFECT, } from 'gw-utils';\nimport * as Cell from './cell';\nimport * as Tile from './tile';\nimport { Map as Flags, Cell as CellFlags, Tile as TileFlags, CellMech as CellMechFlags, TileMech as TileMechFlags, Layer as TileLayer, Entity as LayerFlags, } from './flags';\nimport * as Light from './light';\nimport * as Entity from './entity';\nimport * as Visibility from './visibility';\nimport * as Effect from './effect';\nexport { Flags };\nUtils.setDefaults(CONFIG, {\n    'map.deepestLevel': 99,\n});\nexport class Map {\n    constructor(w, h, opts = {}) {\n        this.locations = {};\n        this.config = {};\n        this._actors = null;\n        this._items = null;\n        this.flags = 0;\n        this.lights = null;\n        this.fov = null;\n        this._width = w;\n        this._height = h;\n        this.cells = Grid.make(w, h, () => new Cell.Cell());\n        this.locations = opts.locations || {};\n        this.config = Object.assign({}, opts);\n        this.config.tick = this.config.tick || 100;\n        this._actors = null;\n        this._items = null;\n        this.flags = Flag.from(Flags, Flags.MAP_DEFAULT, opts.flags);\n        const ambient = opts.ambient || opts.ambientLight || opts.light || 'white';\n        this.ambientLight = Color.make(ambient);\n        if (opts.ambient || opts.ambientLight || opts.light) {\n            this.ambientLightChanged = true;\n        }\n        this.lights = null;\n        this.id = opts.id;\n        if (this.config.fov) {\n            this.flags |= Flags.MAP_CALC_FOV;\n            this.fov = { x: -1, y: -1 };\n        }\n        if (opts.updateLiquid && typeof opts.updateLiquid === 'function') {\n            this.updateLiquid = opts.updateLiquid.bind(this);\n        }\n        if (opts.updateGas && typeof opts.updateGas === 'function') {\n            this.updateGas = opts.updateGas.bind(this);\n        }\n        Light.updateLighting(this); // to set the ambient light\n        Visibility.initMap(this);\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    async start() { }\n    clear(floorTile = 'FLOOR') {\n        this.cells.forEach((c) => c.clear(floorTile));\n        this.changed = true;\n    }\n    dump(fmt) {\n        this.cells.dump(fmt || ((c) => c.dump()));\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    eachCell(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    forEach(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    async forEachAsync(fn) {\n        return this.cells.forEachAsync((c, i, j) => fn(c, i, j, this));\n    }\n    forRect(x, y, w, h, fn) {\n        this.cells.forRect(x, y, w, h, (c, i, j) => fn(c, i, j, this));\n    }\n    eachNeighbor(x, y, fn, only4dirs = false) {\n        this.cells.eachNeighbor(x, y, (c, i, j) => fn(c, i, j, this), only4dirs);\n    }\n    eachNeighborAsync(x, y, fn, only4dirs = false) {\n        return this.cells.eachNeighborAsync(x, y, (c, i, j) => fn(c, i, j, this), only4dirs);\n    }\n    randomEach(fn) {\n        this.cells.randomEach((c, i, j) => fn(c, i, j, this));\n    }\n    count(fn) {\n        let count = 0;\n        this.forEach((c, x, y, g) => {\n            if (fn(c, x, y, g)) {\n                ++count;\n            }\n        });\n        return count;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.cells.isBoundaryXY(x, y);\n    }\n    get changed() {\n        return (this.flags & Flags.MAP_CHANGED) > 0;\n    }\n    set changed(v) {\n        if (v === true) {\n            this.flags |= Flags.MAP_CHANGED;\n        }\n        else if (v === false) {\n            this.flags &= ~Flags.MAP_CHANGED;\n        }\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).flags & flag;\n    }\n    hasCellMechFlag(x, y, flag) {\n        return this.cell(x, y).mechFlags & flag;\n    }\n    hasLayerFlag(x, y, flag) {\n        return this.cell(x, y).hasLayerFlag(flag);\n    }\n    hasTileFlag(x, y, flag) {\n        return this.cell(x, y).hasTileFlag(flag);\n    }\n    hasTileMechFlag(x, y, flag) {\n        return this.cell(x, y).hasTileMechFlag(flag);\n    }\n    redrawCell(cell) {\n        // if (cell.isAnyKindOfVisible()) {\n        cell.needsRedraw = true;\n        this.flags |= Flags.MAP_CHANGED;\n        // }\n    }\n    redrawXY(x, y) {\n        const cell = this.cell(x, y);\n        this.redrawCell(cell);\n    }\n    redrawAll() {\n        this.forEach((c) => {\n            // if (c.isAnyKindOfVisible()) {\n            c.needsRedraw = true;\n            // }\n        });\n        this.changed = true;\n    }\n    drawInto(canvas, opts = {}) {\n        Light.updateLighting(this);\n        if (typeof opts === 'boolean')\n            opts = { force: opts };\n        const mixer = new Sprite.Mixer();\n        for (let x = 0; x < canvas.width; ++x) {\n            for (let y = 0; y < canvas.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.needsRedraw || opts.force) {\n                    getCellAppearance(this, x, y, mixer);\n                    const glyph = typeof mixer.ch === 'number'\n                        ? mixer.ch\n                        : canvas.toGlyph(mixer.ch);\n                    canvas.draw(x, y, glyph, mixer.fg.toInt(), mixer.bg.toInt());\n                    cell.needsRedraw = false;\n                }\n            }\n        }\n    }\n    revealAll() {\n        this.forEach((c) => {\n            c.markRevealed();\n            c.storeMemory();\n        });\n        if (DATA.player) {\n            DATA.player.invalidateCostMap();\n        }\n    }\n    markRevealed(x, y) {\n        if (!this.cell(x, y).markRevealed())\n            return;\n        if (DATA.player) {\n            DATA.player.invalidateCostMap();\n        }\n    }\n    makeVisible(v = true) {\n        if (v) {\n            this.setFlags(0, Cell.Flags.VISIBLE);\n        }\n        else {\n            this.clearFlags(0, Cell.Flags.ANY_KIND_OF_VISIBLE);\n        }\n    }\n    isVisible(x, y) {\n        return this.cell(x, y).isVisible();\n    }\n    isAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isAnyKindOfVisible();\n    }\n    isOrWasAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isOrWasAnyKindOfVisible();\n    }\n    isRevealed(x, y) {\n        return this.cell(x, y).isRevealed();\n    }\n    get anyLightChanged() {\n        return (this.flags & Flags.MAP_STABLE_LIGHTS) == 0;\n    }\n    set anyLightChanged(v) {\n        if (v) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        else {\n            this.flags |= Flags.MAP_STABLE_LIGHTS;\n        }\n    }\n    get ambientLightChanged() {\n        return this.staticLightChanged;\n    }\n    set ambientLightChanged(v) {\n        this.staticLightChanged = v;\n    }\n    get staticLightChanged() {\n        return (this.flags & Flags.MAP_STABLE_GLOW_LIGHTS) == 0;\n    }\n    set staticLightChanged(v) {\n        if (v) {\n            this.flags &= ~(Flags.MAP_STABLE_GLOW_LIGHTS | Flags.MAP_STABLE_LIGHTS);\n        }\n        else {\n            this.flags |= Flags.MAP_STABLE_GLOW_LIGHTS;\n        }\n    }\n    setFlag(flag) {\n        this.flags |= flag;\n        this.changed = true;\n    }\n    setFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags |= mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((c) => c.setFlags(cellFlag, cellMechFlag));\n        }\n        this.changed = true;\n    }\n    clearFlag(flag) {\n        this.flags &= ~flag;\n        this.changed = true;\n    }\n    clearFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags &= ~mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((cell) => cell.clearFlags(cellFlag, cellMechFlag));\n        }\n        this.changed = true;\n    }\n    // setCellFlag(x: number, y: number, flag: number) {\n    //   this.cell(x, y).flags |= flag;\n    // }\n    setCellFlags(x, y, cellFlag = 0, cellMechFlag = 0) {\n        this.cell(x, y).setFlags(cellFlag, cellMechFlag);\n        this.flags |= Flags.MAP_CHANGED;\n    }\n    clearCellFlags(x, y, cellFlags = 0, cellMechFlags = 0) {\n        this.cell(x, y).clearFlags(cellFlags, cellMechFlags);\n        this.changed = true;\n    }\n    hasTile(x, y, tile) {\n        return this.cells[x][y].hasTile(tile);\n    }\n    layerFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].layerFlags(limitToPlayerKnowledge);\n    }\n    tileFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileFlags(limitToPlayerKnowledge);\n    }\n    tileMechFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileMechFlags(limitToPlayerKnowledge);\n    }\n    tileWithLayerFlag(x, y, mechFlag = 0) {\n        return this.cells[x][y].tileWithLayerFlag(mechFlag);\n    }\n    tileWithFlag(x, y, flag = 0) {\n        return this.cells[x][y].tileWithFlag(flag);\n    }\n    tileWithMechFlag(x, y, mechFlag = 0) {\n        return this.cells[x][y].tileWithMechFlag(mechFlag);\n    }\n    hasKnownTileFlag(x, y, flagMask = 0) {\n        return this.cells[x][y].memory.tileFlags & flagMask;\n    }\n    // hasTileInGroup(x, y, ...groups) { return this.cells[x][y].hasTileInGroup(...groups); }\n    // discoveredTileFlags(x: number, y: number) {\n    //   return this.cells[x][y].discoveredTileFlags();\n    // }\n    // hasDiscoveredTileFlag(x: number, y: number, flag = 0) {\n    //   return this.cells[x][y].hasDiscoveredTileFlag(flag);\n    // }\n    isClear(x, y) {\n        return this.cells[x][y].isClear();\n    }\n    isEmpty(x, y) {\n        return this.cells[x][y].isEmpty();\n    }\n    isObstruction(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isObstruction(limitToPlayerKnowledge);\n    }\n    isDoorway(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isDoorway(limitToPlayerKnowledge);\n    }\n    isSecretDoorway(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isSecretDoorway(limitToPlayerKnowledge);\n    }\n    isLiquid(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isLiquid(limitToPlayerKnowledge);\n    }\n    hasGas(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].hasGas(limitToPlayerKnowledge);\n    }\n    blocksPathing(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].blocksPathing(limitToPlayerKnowledge);\n    }\n    blocksVision(x, y) {\n        return this.cells[x][y].blocksVision();\n    }\n    isMoveableNow(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isMoveableNow(limitToPlayerKnowledge);\n    }\n    isWalkableNow(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isWalkableNow(limitToPlayerKnowledge);\n    }\n    canBeWalked(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].canBeWalked(limitToPlayerKnowledge);\n    }\n    topmostTile(x, y, skipGas = false) {\n        return this.cells[x][y].topmostTile(skipGas);\n    }\n    tileFlavor(x, y) {\n        return this.cells[x][y].tileFlavor();\n    }\n    setTile(x, y, tileId, volume = 0) {\n        return this.cell(x, y).setTile(tileId, volume, this);\n    }\n    nullifyCell(x, y) {\n        this.cell(x, y).nullify();\n    }\n    clearCell(x, y) {\n        this.cell(x, y).clear();\n    }\n    clearCellLayersWithFlags(x, y, tileFlags, tileMechFlags = 0) {\n        const cell = this.cell(x, y);\n        cell.clearLayersWithFlags(tileFlags, tileMechFlags);\n    }\n    // clearCellLayers(\n    //     x: number,\n    //     y: number,\n    //     nullLiquid = true,\n    //     nullSurface = true,\n    //     nullGas = true\n    // ) {\n    //     this.changed = true;\n    //     return this.cell(x, y).clearLayers(nullLiquid, nullSurface, nullGas);\n    // }\n    fill(tileId, boundaryTile) {\n        let i, j;\n        if (boundaryTile === undefined) {\n            boundaryTile = tileId;\n        }\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                if (this.isBoundaryXY(i, j)) {\n                    this.setTile(i, j, boundaryTile);\n                }\n                else {\n                    this.setTile(i, j, tileId);\n                }\n            }\n        }\n    }\n    neighborCount(x, y, matchFn, only4dirs = false) {\n        let count = 0;\n        this.eachNeighbor(x, y, (...args) => {\n            if (matchFn(...args))\n                ++count;\n        }, only4dirs);\n        return count;\n    }\n    walkableArcCount(x, y) {\n        if (!this.hasXY(x, y))\n            return -1;\n        return this.cells.arcCount(x, y, (c) => c.isWalkableNow());\n    }\n    diagonalBlocked(x1, y1, x2, y2, limitToPlayerKnowledge = false) {\n        if (x1 == x2 || y1 == y2) {\n            return false; // If it's not a diagonal, it's not diagonally blocked.\n        }\n        if (this.isObstruction(x1, y2, limitToPlayerKnowledge)) {\n            return true;\n        }\n        if (this.isObstruction(x2, y1, limitToPlayerKnowledge)) {\n            return true;\n        }\n        return false;\n    }\n    fillCostGrid(costGrid, costFn) {\n        costFn =\n            costFn ||\n                ((c) => (c.isWalkableNow() ? 1 : Path.OBSTRUCTION));\n        this.cells.forEach((cell, i, j) => {\n            if (cell.isNull()) {\n                costGrid[i][j] = Path.OBSTRUCTION;\n            }\n            else {\n                costGrid[i][j] = costFn(cell, i, j, this);\n            }\n        });\n    }\n    matchingNeighbor(x, y, matcher, only4dirs = false) {\n        const maxIndex = only4dirs ? 4 : 8;\n        for (let d = 0; d < maxIndex; ++d) {\n            const dir = Utils.DIRS[d];\n            const i = x + dir[0];\n            const j = y + dir[1];\n            if (this.hasXY(i, j)) {\n                if (matcher(this.cells[i][j], i, j, this))\n                    return [i, j];\n            }\n        }\n        return [-1, -1];\n    }\n    matchingLocNear(x, y, ...args) {\n        let i, j, k;\n        let matcher = args[0];\n        let opts = args[1] || {};\n        const arg = args[0];\n        if (typeof arg !== 'function') {\n            opts = arg || args[1];\n            matcher = opts.match || Utils.TRUE;\n        }\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const deterministic = opts.deterministic || false;\n        const candidateLocs = [];\n        // count up the number of candidate locations\n        for (k = 0; k < Math.max(this.width, this.height) && !candidateLocs.length; k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (!this.hasXY(i, j))\n                        continue;\n                    const cell = this.cell(i, j);\n                    // if ((i == x-k || i == x+k || j == y-k || j == y+k)\n                    if (Math.ceil(Utils.distanceBetween(x, y, i, j)) == k &&\n                        (!blockingMap || !blockingMap[i][j]) &&\n                        matcher(cell, i, j, this) &&\n                        (!forbidLiquid || !cell.liquid) &&\n                        (hallwaysAllowed || this.walkableArcCount(i, j) < 2)) {\n                        candidateLocs.push([i, j]);\n                    }\n                }\n            }\n        }\n        if (candidateLocs.length == 0) {\n            return [-1, -1];\n        }\n        // and pick one\n        let randIndex = 0;\n        if (deterministic) {\n            randIndex = Math.floor(candidateLocs.length / 2);\n        }\n        else {\n            randIndex = random.number(candidateLocs.length);\n        }\n        return candidateLocs[randIndex];\n    }\n    randomMatchingLoc(opts = {}) {\n        let x;\n        let y;\n        let cell;\n        if (typeof opts === 'function') {\n            opts = { match: opts };\n        }\n        const sequence = random.sequence(this.width * this.height);\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const matcher = opts.match || Utils.TRUE;\n        const forbidCellFlags = opts.forbidCellFlags || 0;\n        const forbidTileFlags = opts.forbidTileFlags || 0;\n        const forbidTileMechFlags = opts.forbidTileMechFlags || 0;\n        const tile = opts.tile || null;\n        let success = false;\n        let index = 0;\n        while (!success && index < sequence.length) {\n            const v = sequence[index];\n            x = v % this.width;\n            y = Math.floor(v / this.width);\n            cell = this.cell(x, y);\n            if ((!blockingMap || !blockingMap[x][y]) &&\n                (!tile || cell.hasTile(tile)) &&\n                (!forbidLiquid || !cell.liquid) &&\n                (!forbidCellFlags || !(cell.flags & forbidCellFlags)) &&\n                (!forbidTileFlags || !cell.hasTileFlag(forbidTileFlags)) &&\n                (!forbidTileMechFlags ||\n                    !cell.hasTileMechFlag(forbidTileMechFlags)) &&\n                (hallwaysAllowed || this.walkableArcCount(x, y) < 2) &&\n                matcher(cell, x, y, this)) {\n                success = true;\n            }\n            ++index;\n        }\n        if (!success) {\n            // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => FAIL');\n            return [-1, -1];\n        }\n        // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => ', x, y);\n        return [x, y];\n    }\n    // LIGHT\n    hasVisibleLight(x, y) {\n        return this.cell(x, y).hasVisibleLight();\n    }\n    addStaticLight(x, y, light) {\n        const info = { x, y, light, next: this.lights };\n        this.lights = info;\n        this.staticLightChanged = true;\n        return info;\n    }\n    removeStaticLight(x, y, light) {\n        let prev = this.lights;\n        if (!prev)\n            return;\n        function matches(info) {\n            if (info.x != x || info.y != y)\n                return false;\n            return !light || light === info.light;\n        }\n        this.staticLightChanged = true;\n        while (prev && matches(prev)) {\n            prev = this.lights = prev.next;\n        }\n        if (!prev)\n            return;\n        let current = prev.next;\n        while (current) {\n            if (matches(current)) {\n                prev.next = current.next;\n            }\n            else {\n                prev = current;\n            }\n            current = current.next;\n        }\n    }\n    eachStaticLight(fn) {\n        Utils.eachChain(this.lights, (info) => fn(info.light, info.x, info.y));\n        this.eachCell((cell, x, y) => {\n            for (let tile of cell.tiles()) {\n                if (tile.light) {\n                    fn(tile.light, x, y);\n                }\n            }\n        });\n    }\n    eachDynamicLight(fn) {\n        Utils.eachChain(this._actors, (actor) => {\n            if (actor.light)\n                fn(actor.light, actor.x, actor.y);\n        });\n    }\n    // Layers\n    addFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addLayer(anim);\n        anim.x = x;\n        anim.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    moveFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeLayer(anim);\n        this.redrawCell(oldCell);\n        cell.addLayer(anim);\n        this.redrawCell(cell);\n        anim.x = x;\n        anim.y = y;\n        return true;\n    }\n    removeFx(anim) {\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeLayer(anim);\n        this.redrawCell(oldCell);\n        this.flags |= Flags.MAP_CHANGED;\n        return true;\n    }\n    // ACTORS\n    // will return the PLAYER if the PLAYER is at (x, y).\n    actorAt(x, y) {\n        // creature *\n        if (!this.hasXY(x, y))\n            return null;\n        const cell = this.cell(x, y);\n        return cell.actor;\n    }\n    addActor(x, y, theActor) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.actor) {\n            return false;\n        }\n        cell.actor = theActor; // adjusts the layer\n        theActor.next = this._actors;\n        this._actors = theActor;\n        const flag = theActor === DATA.player\n            ? CellFlags.HAS_PLAYER\n            : CellFlags.HAS_ANY_ACTOR;\n        cell.flags |= flag;\n        // if (theActor.flags & Flags.Actor.MK_DETECTED)\n        // {\n        // \tcell.flags |= CellFlags.MONSTER_DETECTED;\n        // }\n        if (theActor.light) {\n            this.anyLightChanged = true;\n        }\n        // If the player moves or an actor that blocks vision and the cell is visible...\n        // -- we need to update the FOV\n        if (theActor.isPlayer() ||\n            (cell.isAnyKindOfVisible() && theActor.blocksVision())) {\n            this.flags |= Flags.MAP_FOV_CHANGED;\n        }\n        theActor.x = x;\n        theActor.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    addActorNear(x, y, theActor) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return !theActor.avoidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the actor.');\n            return false;\n        }\n        return this.addActor(loc[0], loc[1], theActor);\n    }\n    moveActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        this.removeActor(actor);\n        if (!this.addActor(x, y, actor)) {\n            this.addActor(actor.x, actor.y, actor);\n            return false;\n        }\n        if (actor.light) {\n            this.anyLightChanged = true;\n        }\n        return true;\n    }\n    removeActor(actor) {\n        if (!this.hasXY(actor.x, actor.y))\n            return false;\n        const cell = this.cell(actor.x, actor.y);\n        if (cell.actor === actor) {\n            cell.actor = null;\n            Utils.removeFromChain(this, 'actors', actor);\n            if (actor.light) {\n                this.anyLightChanged = true;\n            }\n            // If the player moves or an actor that blocks vision and the cell is visible...\n            // -- we need to update the FOV\n            if (actor.isPlayer() ||\n                (cell.isAnyKindOfVisible() && actor.blocksVision())) {\n                this.flags |= Flags.MAP_FOV_CHANGED;\n            }\n            this.redrawCell(cell);\n            return true;\n        }\n        return false;\n    }\n    deleteActorAt(x, y) {\n        const actor = this.actorAt(x, y);\n        if (!actor)\n            return false;\n        this.removeActor(actor);\n        actor.delete();\n        return true;\n    }\n    // dormantAt(x: number, y: number) {  // creature *\n    // \tif (!(this.cell(x, y).flags & CellFlags.HAS_DORMANT_MONSTER)) {\n    // \t\treturn null;\n    // \t}\n    // \treturn this.dormantActors.find( (m) => m.x == x && m.y == y );\n    // }\n    //\n    // addDormant(x, y, actor) {\n    // \ttheActor.x = x;\n    // \ttheActor.y = y;\n    // \tthis.dormant.add(theActor);\n    // \tcell.flags |= (CellFlags.HAS_DORMANT_MONSTER);\n    // \tthis.flags |= Flags.MAP_CHANGED;\n    // \treturn true;\n    // }\n    //\n    // removeDormant(actor) {\n    // \tconst cell = this.cell(actor.x, actor.y);\n    // \tcell.flags &= ~(CellFlags.HAS_DORMANT_MONSTER);\n    // \tcell.flags |= CellFlags.NEEDS_REDRAW;\n    // \tthis.flags |= Flags.MAP_CHANGED;\n    // \tthis.dormant.remove(actor);\n    // }\n    // ITEMS\n    itemAt(x, y) {\n        const cell = this.cell(x, y);\n        return cell.item;\n    }\n    addItem(x, y, theItem) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.item) {\n            // GW.ui.message(colors.badMessageColor, 'There is already an item there.');\n            return false;\n        }\n        theItem.x = x;\n        theItem.y = y;\n        cell.item = theItem; // adjusts the layers\n        theItem.next = this._items;\n        this._items = theItem;\n        if (theItem.light) {\n            this.anyLightChanged = true;\n        }\n        this.redrawCell(cell);\n        if (theItem.isDetected() || CONFIG.D_ITEM_OMNISCIENCE) {\n            cell.flags |= CellFlags.ITEM_DETECTED;\n        }\n        return true;\n    }\n    addItemNear(x, y, theItem) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return !theItem.forbidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the item.');\n            return false;\n        }\n        return this.addItem(loc[0], loc[1], theItem);\n    }\n    removeItem(theItem) {\n        const x = theItem.x;\n        const y = theItem.y;\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.item !== theItem)\n            return false;\n        cell.item = null;\n        Utils.removeFromChain(this, 'items', theItem);\n        if (theItem.light) {\n            this.anyLightChanged = true;\n        }\n        cell.flags &= ~(CellFlags.HAS_ITEM | CellFlags.ITEM_DETECTED);\n        this.redrawCell(cell);\n        return true;\n    }\n    // // PROMOTE\n    //\n    // async promote(x, y, mechFlag) {\n    // \tif (this.hasTileMechFlag(x, y, mechFlag)) {\n    // \t\tconst cell = this.cell(x, y);\n    // \t\tfor (let tile of cell.tiles()) {\n    // \t\t\tif (tile.mechFlags & mechFlag) {\n    // \t\t\t\tawait tile.promote(this, x, y, false);\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // }\n    gridDisruptsWalkability(blockingGrid, opts = {}) {\n        const walkableGrid = Grid.alloc(this.width, this.height);\n        let disrupts = false;\n        const gridOffsetX = opts.gridOffsetX || 0;\n        const gridOffsetY = opts.gridOffsetY || 0;\n        const bounds = opts.bounds || null; // TODO - Where is this used ???\n        // Get all walkable locations after lake added\n        this.cells.forEach((cell, i, j) => {\n            if (bounds && !bounds.contains(i, j))\n                return; // outside bounds\n            const blockingX = i + gridOffsetX;\n            const blockingY = j + gridOffsetY;\n            if (cell.isNull()) {\n                return; // not walkable\n            }\n            else if (cell.hasTileFlag(TileFlags.T_HAS_STAIRS)) {\n                if (blockingGrid.get(blockingX, blockingY)) {\n                    disrupts = true;\n                }\n                else {\n                    walkableGrid[i][j] = 1;\n                }\n            }\n            else if (cell.canBeWalked()) {\n                if (blockingGrid.get(blockingX, blockingY))\n                    return;\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        Grid.free(walkableGrid);\n        return disrupts;\n    }\n    // FOV\n    // Returns a boolean grid indicating whether each square is in the field of view of (xLoc, yLoc).\n    // forbiddenTileFlags is the set of terrain flags that will block vision (but the blocking cell itself is\n    // illuminated); forbiddenCellFlags is the set of map flags that will block vision.\n    // If cautiousOnWalls is set, we will not illuminate blocking tiles unless the tile one space closer to the origin\n    // is visible to the player; this is to prevent lights from illuminating a wall when the player is on the other\n    // side of the wall.\n    calcFov(grid, x, y, maxRadius, forbiddenCellFlags = 0, forbiddenLayerFlags = LayerFlags.L_BLOCKS_VISION) {\n        maxRadius = maxRadius || this.width + this.height;\n        grid.fill(0);\n        const map = this;\n        const FOV = new Fov.FOV({\n            isBlocked(i, j) {\n                return !!(!grid.hasXY(i, j) ||\n                    map.hasCellFlag(i, j, forbiddenCellFlags) ||\n                    map.hasLayerFlag(i, j, forbiddenLayerFlags));\n            },\n            calcRadius(x, y) {\n                return Math.sqrt(x ** 2 + y ** 2);\n            },\n            setVisible(x, y) {\n                grid[x][y] = 1;\n            },\n            hasXY(x, y) {\n                return grid.hasXY(x, y);\n            },\n        });\n        return FOV.calculate(x, y, maxRadius);\n    }\n    losFromTo(a, b) {\n        if (Utils.equalsXY(a, b))\n            return true;\n        const line = Utils.getLine(a.x, a.y, b.x, b.y);\n        if (!line.length)\n            return false;\n        return !line.some((loc) => {\n            return this.blocksVision(loc[0], loc[1]);\n        });\n    }\n    // MEMORIES\n    storeMemory(x, y) {\n        const cell = this.cell(x, y);\n        cell.storeMemory();\n    }\n    storeMemories() {\n        let x, y;\n        for (x = 0; x < this.width; ++x) {\n            for (y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.flags & CellFlags.ANY_KIND_OF_VISIBLE) {\n                    cell.storeMemory();\n                }\n                // cell.flags &= CellFlags.PERMANENT_CELL_FLAGS;\n                // cell.mechFlags &= CellMechFlags.PERMANENT_MECH_FLAGS;\n            }\n        }\n    }\n    // TICK\n    async activateCell(x, y, event) {\n        const cell = this.cell(x, y);\n        return await cell.activate(event, this, x, y, { cell });\n    }\n    async activateAll(event) {\n        return Effect.fireAll(this, event);\n    }\n    async tick() {\n        await Effect.fireAll(this, 'tick');\n        // Bookkeeping for fire, pressure plates and key-activated tiles.\n        await this.forEachAsync(async (cell, x, y) => {\n            cell.mechFlags &= ~Cell.MechFlags.CAUGHT_FIRE_THIS_TURN;\n            if (!(cell.flags &\n                (CellFlags.HAS_ANY_ACTOR | CellFlags.HAS_ITEM)) &&\n                cell.mechFlags & CellMechFlags.PRESSURE_PLATE_DEPRESSED) {\n                cell.mechFlags &= ~CellMechFlags.PRESSURE_PLATE_DEPRESSED;\n            }\n            if (cell.activatesOn('noKey') && !cell.hasKey()) {\n                await cell.activate('noKey', this, x, y);\n            }\n        });\n        // now spread the fire...\n        await this.forEachAsync(async (cell, x, y) => {\n            if (cell.hasTileFlag(Tile.Flags.T_IS_FIRE) &&\n                !(cell.mechFlags & CellMechFlags.CAUGHT_FIRE_THIS_TURN)) {\n                await this.exposeToFire(x, y, false);\n                await this.eachNeighborAsync(x, y, (_n, i, j) => this.exposeToFire(i, j), true);\n            }\n        });\n        if (!(this.flags & Flags.MAP_NO_LIQUID)) {\n            const newVolume = Grid.alloc(this.width, this.height);\n            const calc = calcBaseVolume(this, TileLayer.LIQUID, newVolume);\n            if (calc === CalcType.CALC) {\n                this.updateLiquid(newVolume);\n            }\n            if (calc != CalcType.NONE) {\n                updateVolume(this, TileLayer.LIQUID, newVolume);\n                this.flags &= ~Flags.MAP_NO_LIQUID;\n            }\n            else {\n                this.flags |= Flags.MAP_NO_LIQUID;\n            }\n            this.changed = true;\n            Grid.free(newVolume);\n        }\n        if (!(this.flags & Flags.MAP_NO_GAS)) {\n            const newVolume = Grid.alloc(this.width, this.height);\n            const calc = calcBaseVolume(this, TileLayer.GAS, newVolume);\n            if (calc === CalcType.CALC) {\n                this.updateGas(newVolume);\n            }\n            if (calc != CalcType.NONE) {\n                updateVolume(this, TileLayer.GAS, newVolume);\n                this.flags &= ~Flags.MAP_NO_GAS;\n            }\n            else {\n                this.flags |= Flags.MAP_NO_GAS;\n            }\n            this.changed = true;\n            Grid.free(newVolume);\n        }\n    }\n    async exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        for (let tile of cell.tiles()) {\n            if (tile.flags.tile & TileFlags.T_EXTINGUISHES_FIRE &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        }\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        for (let tile of cell.tiles()) {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.layer === Entity.Layer.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = EFFECT.from(tile.activates.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        }\n        if (alwaysIgnite ||\n            (ignitionChance && random.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                this.eachNeighbor(x, y, (n) => {\n                    if (n.hasLayerFlag(Entity.Flags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.activatesOn('explode')) {\n                event = 'explode';\n            }\n            for (let tile of cell.tiles()) {\n                if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n                    if (tile.layer === Entity.Layer.GAS) {\n                        cell.gasVolume = 0;\n                    }\n                    else if (tile.layer === Entity.Layer.LIQUID) {\n                        cell.liquidVolume = 0;\n                    }\n                }\n            }\n            await cell.activate(event, this, x, y, {\n                force: true,\n            });\n            this.redrawCell(cell);\n        }\n        return fireIgnited;\n    }\n    updateLiquid(newVolume) {\n        this.randomEach((c, x, y) => {\n            if (c.hasLayerFlag(Entity.Flags.L_BLOCKS_LIQUID))\n                return;\n            let highVol = 0;\n            let highX = -1;\n            let highY = -1;\n            let highTile = c.liquidTile;\n            let myVol = newVolume[x][y];\n            newVolume.eachNeighbor(x, y, (v, i, j) => {\n                if (v <= myVol)\n                    return;\n                if (v <= highVol)\n                    return;\n                highVol = v;\n                highX = i;\n                highY = j;\n                highTile = this.cell(i, j).liquidTile;\n            });\n            if (highVol > 1) {\n                // guaranteed => myVol < highVol\n                this.setTile(x, y, highTile, 0); // place tile with 0 volume - will force liquid to be same as highest volume liquid neighbor\n                const amt = Math.floor((highVol - myVol) / 9) + 1;\n                newVolume[x][y] += amt;\n                newVolume[highX][highY] -= amt;\n            }\n        });\n        // }\n    }\n    updateGas(newVolume) {\n        const dirs = random.sequence(4).map((i) => Utils.DIRS[i]);\n        const grid = Grid.alloc(this.width, this.height);\n        // push out from my square\n        newVolume.forEach((v, x, y) => {\n            if (!v)\n                return;\n            let adj = v;\n            if (v > 1) {\n                let count = 1;\n                newVolume.eachNeighbor(x, y, () => {\n                    ++count;\n                }, true); // only 4 dirs\n                let avg = Math.floor(v / count);\n                let rem = v - avg * count;\n                grid[x][y] += avg;\n                if (rem > 0) {\n                    grid[x][y] += 1;\n                    rem -= 1;\n                }\n                for (let i = 0; i < dirs.length; ++i) {\n                    const dir = dirs[i];\n                    const x2 = x + dir[0];\n                    const y2 = y + dir[1];\n                    if (grid.hasXY(x2, y2)) {\n                        adj = avg;\n                        if (rem > 0) {\n                            --rem;\n                            ++adj;\n                        }\n                        grid[x2][y2] += adj;\n                    }\n                }\n            }\n            else {\n                grid[x][y] += v;\n            }\n        });\n        newVolume.copy(grid);\n        Grid.free(grid);\n        // newVolume.dump();\n    }\n    resetCellEvents() {\n        this.forEach((c) => (c.mechFlags &= ~(CellMechFlags.EVENT_FIRED_THIS_TURN |\n            CellMechFlags.EVENT_PROTECTED)));\n    }\n}\nexport function make(w, h, opts = {}, wall) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n        if (wall) {\n            opts.wall = wall;\n        }\n    }\n    const map = new Map(w, h, opts);\n    let floor = opts.tile || opts.floor || opts.floorTile;\n    if (floor === true) {\n        floor = 'FLOOR';\n    }\n    let boundary = opts.boundary || opts.wall || opts.wallTile;\n    if (boundary === true) {\n        boundary = 'WALL';\n    }\n    if (floor) {\n        map.fill(floor, boundary);\n    }\n    if (opts.visible || opts.revealed) {\n        map.makeVisible();\n        map.revealAll();\n    }\n    if (opts.revealed && !opts.visible) {\n        map.makeVisible(false);\n    }\n    if (!DATA.map) {\n        DATA.map = map;\n    }\n    return map;\n}\nMake.map = make;\nexport function from(prefab, charToTile, opts = {}) {\n    if (!Array.isArray(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    const height = prefab.length;\n    const width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n    const map = make(width, height, opts);\n    prefab.forEach((line, y) => {\n        for (let x = 0; x < width; ++x) {\n            const ch = line[x] || '.';\n            const tile = charToTile[ch] || 'FLOOR';\n            map.setTile(x, y, tile);\n        }\n    });\n    // redo this because we changed the tiles\n    if (opts.visible || opts.revealed) {\n        map.makeVisible();\n        map.revealAll();\n    }\n    if (opts.revealed && !opts.visible) {\n        map.makeVisible(false);\n    }\n    return map;\n}\nif (!COLORS.cursor) {\n    Color.install('cursor', COLORS.yellow);\n}\nif (!COLORS.path) {\n    Color.install('path', COLORS.gold);\n}\nexport function getCellAppearance(map, x, y, dest) {\n    dest.blackOut();\n    if (!map.hasXY(x, y))\n        return;\n    const cell = map.cell(x, y);\n    if (cell.isAnyKindOfVisible() &&\n        cell.flags & (CellFlags.CELL_CHANGED | CellFlags.NEEDS_REDRAW)) {\n        Cell.getAppearance(cell, dest);\n    }\n    else {\n        // if (cell.isRevealed()) {\n        dest.drawSprite(cell.memory.mixer);\n    }\n    if (cell.isVisible()) {\n        // keep here to allow for games that do not use fov to work\n    }\n    else if (!cell.isRevealed()) {\n        if (!cell.isAnyKindOfVisible())\n            dest.blackOut();\n    }\n    else if (!cell.isAnyKindOfVisible()) {\n        dest.bg.mix(COLORS.black, 30);\n        dest.fg.mix(COLORS.black, 30);\n    }\n    let needDistinctness = false;\n    if (cell.flags & (CellFlags.IS_CURSOR | CellFlags.IS_IN_PATH)) {\n        const highlight = cell.flags & CellFlags.IS_CURSOR ? COLORS.cursor : COLORS.path;\n        if (cell.hasLayerFlag(LayerFlags.L_INVERT_WHEN_HIGHLIGHTED)) {\n            Color.swap(dest.fg, dest.bg);\n        }\n        else {\n            // if (!GAME.trueColorMode || !dest.needDistinctness) {\n            // dest.fg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n            // }\n            dest.bg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n        }\n        needDistinctness = true;\n    }\n    if (needDistinctness) {\n        Color.separate(dest.fg, dest.bg);\n    }\n    // dest.bake();\n}\nexport function addText(map, x, y, text, fg, bg, layer) {\n    for (let ch of text) {\n        const sprite = Entity.make({\n            ch,\n            fg,\n            bg,\n            layer: layer || TileLayer.GROUND,\n            priority: 200,\n        }); // on top of ground tiles\n        const cell = map.cell(x++, y);\n        cell.addLayer(sprite);\n    }\n}\nvar CalcType;\n(function (CalcType) {\n    CalcType[CalcType[\"NONE\"] = 0] = \"NONE\";\n    CalcType[CalcType[\"UPDATE\"] = 1] = \"UPDATE\";\n    CalcType[CalcType[\"CALC\"] = 2] = \"CALC\";\n})(CalcType || (CalcType = {}));\nfunction calcBaseVolume(map, depth, newVolume) {\n    let hasVolume = false;\n    let needsAjustment = false;\n    map.forEach((c, x, y) => {\n        let volume = c.volume(depth);\n        const tile = c.tile(depth);\n        if (volume && tile.dissipate) {\n            if (tile.dissipate > 10000) {\n                volume -= Math.floor(tile.dissipate / 10000);\n                if (random.chance(tile.dissipate % 10000, 10000)) {\n                    volume -= 1;\n                }\n            }\n            else if (random.chance(tile.dissipate, 10000)) {\n                volume -= 1;\n            }\n        }\n        if (volume > 0) {\n            newVolume[x][y] = volume;\n            hasVolume = true;\n            if (volume > 1) {\n                needsAjustment = true;\n            }\n        }\n        else if (tile !== Tile.tiles.NULL) {\n            c.clearLayer(depth);\n            map.redrawCell(c);\n        }\n    });\n    if (needsAjustment)\n        return CalcType.CALC;\n    if (hasVolume)\n        return CalcType.UPDATE;\n    return CalcType.NONE;\n}\nfunction updateVolume(map, depth, newVolume) {\n    newVolume.forEach((v, i, j) => {\n        const cell = map.cell(i, j);\n        const current = cell.volume(depth);\n        const tile = cell.tile(depth);\n        if (v > 0) {\n            // hasLiquid = true;\n            if (current !== v || !tile) {\n                let highVol = current;\n                let highTile = tile;\n                map.eachNeighbor(i, j, (n) => {\n                    if (n.volume(depth) > highVol) {\n                        highVol = n.volume(depth);\n                        highTile = n.tile(depth);\n                    }\n                });\n                if (highTile !== tile) {\n                    cell.setTile(highTile, 0, map);\n                }\n                cell.setVolume(depth, v);\n                map.redrawCell(cell);\n            }\n        }\n        else if (current || tile !== Tile.tiles.NULL) {\n            cell.clearLayer(depth);\n            map.redrawCell(cell);\n        }\n    });\n}\n","import * as Tile from './tile';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: [30, 30, 30, 20, 0, 0, 0],\n    bg: [2, 2, 10, 0, 2, 2, 0],\n    priority: 10,\n    article: 'the',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    activates: {\n        enter: { tile: 'DOOR_OPEN' },\n        open: { tile: 'DOOR_OPEN_ALWAYS' },\n    },\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    activates: {\n        tick: {\n            chance: 100 * 100,\n            tile: 'DOOR',\n            flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY',\n        },\n        enter: null,\n        open: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    activates: {\n        tick: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_BLOCKS_EVERYTHING',\n    article: 'a',\n    name: 'stone wall',\n    desc: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: [5, 8, 20, 10, 0, 4, 15, true],\n    bg: [10, 15, 41, 6, 5, 5, 5, true],\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    layer: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    ground: 'LAKE',\n});\n"],"names":["Layer","Fl","Flag","fl","Entity","Activation","Tile","TileMech","Cell","CellMech","Map","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_IS_WALL","DFF_BLOCKED_BY_ITEMS","DFF_BLOCKED_BY_ACTORS","DFF_NULL_SURFACE","DFF_NULL_LIQUID","DFF_NULL_GAS","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","REVEALED","MAGIC_MAPPED","ITEM_DETECTED","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","VISIBLE","CLAIRVOYANT_VISIBLE","TELEPATHIC_VISIBLE","HAS_PLAYER","HAS_ACTOR","WAS_VISIBLE","WAS_CLAIRVOYANT_VISIBLE","WAS_TELEPATHIC_VISIBLE","IN_FOV","NEEDS_REDRAW","CELL_CHANGED","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_TRAP_FREE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","MAP_STABLE_LIGHTS","MAP_STABLE_GLOW_LIGHTS","config","CONFIG","light","INTENSITY_DARK","LIGHT_COMPONENTS","Color","make","Light","[object Object]","color","range","fadeTo","pass","this","passThroughActors","id","from","radius","Range","other","copy","intensity","map","x","y","maintainShadows","isMinersLight","k","lightMultiplier","value","outerRadius","Math","ceil","bake","dispelShadows","fadeToPercent","grid","Grid","alloc","width","height","calcFov","Flags.Cell","HAS_ANY_ACTOR","Flags.Entity","overlappedFieldOfView","forCircle","v","i","j","cell","floor","Utils","distanceBetween","flags","IS_IN_SHADOW","ANY_KIND_OF_VISIBLE","free","max","args","length","cached","lights","split","t","trim","Number","parseInt","Array","isArray","Error","install","source","recordOldLights","eachCell","oldLight","lightChanged","zeroOutLights","ambientLight","_i","_j","recordGlowLights","glowLight","restoreGlowLights","updateLighting","anyLightChanged","staticLightChanged","eachStaticLight","paint","eachDynamicLight","CELL_LIT","CELL_DARK","some","isDark","updateDisplayDetail","PLAYER","DATA","player","PLAYERS_LIGHT","ERROR","JSON","stringify","arg","Object","entries","forEach","name","info","darkColor","priority","layer","sprite","GW.make","Light.make","GW.utils","first","GW.flag","Flags","layerFlags","flag","Layer.Entity","super","Extends","tiles","base","ch","fg","bg","opacity","tile","tileMech","activates","flavor","desc","article","dissipate","defaultGround","assignOmitting","assign","ground","Layer.Flags","MechFlags","mechFlags","key","activation","Effect","T_PATHING_BLOCKER","opts","result","toString","getName","arguments","cursorPathIntensity","CellMemory","mixer","Sprite","Mixer","item","itemQuantity","actor","cellFlags","cellMechFlags","tileFlags","tileMechFlags","nullify","_tiles","layers","_actor","_item","data","CELL_DEFAULT","gasVolume","liquidVolume","machineNumber","memory","copyObject","clear","floorTile","TILES","_a","GROUND","liquid","LIQUID","surface","SURFACE","gas","GAS","groundTile","NULL","liquidTile","surfaceTile","gasTile","changed","IS_WAS_ANY_KIND_OF_VISIBLE","orMapped","hasLayerFlag","LayerFlags","L_LIST_IN_SIDEBAR","needsRedraw","Light.intensity","LIGHT_CHANGED","volume","limitToPlayerKnowledge","isVisible","flagMask","cellFlag","cellMechFlag","isAnyKindOfVisible","skipGas","best","bestPriority","layerFlag","tileFlag","mechFlag","topmostTile","useMemory","TileFlags","T_IS_DEEP_LIQUID","T_BRIDGE","isWalkableNow","L_SECRETLY_PASSABLE","HAS_GAS","isWall","depth","tileId","setTile","FLOOR","oldTile","oldTileId","blocksPathing","staleLoopMap","CAUGHT_FIRE_THIS_TURN","blocksVision","oldBlocksVision","setFlag","MapFlags","MAP_FOV_CHANGED","removeLayer","addLayer","HAS_LIQUID","clearFlag","MAP_NO_LIQUID","MAP_NO_GAS","HAS_SURFACE","current","except","clearLayer","ctx","fired","undefined","ev","effect","effects","force","chance","random","fire","activatesOn","next","prev","quantity","getAppearance","isOrWasAnyKindOfVisible","rememberedInCell","storeMemory","dest","blackOut","needDistinctness","L_VISUALLY_DISTINCT","alpha","clamp","drawSprite","multiply","separate","demoteCellVisibility","WAS_ANY_KIND_OF_VISIBLE","promoteCellVisibility","hasVisibleLight","Flags.CellMech","DARKENED","wasVisible","redrawCell","GW.data","automationActive","theItem","L_INTERRUPT_WHEN_SEEN","GW.message","add","tileWithLayerFlag","markRevealed","_updateCellVisibility","isClairy","wasClairy","_updateCellClairyvoyance","isTele","wasTele","hasTileFlag","Flags.Tile","xpxpThisTurn","_updateCellTelepathy","isMonst","MONSTER_DETECTED","wasMonst","WAS_MONSTER_DETECTED","_updateCellDetect","initMap","Map.Flags","MAP_CALC_FOV","clearFlags","maxRadius","fov","Flags.Map","GW.grid","setCellFlags","GW.effect","async","tileEffect","Tile.tiles","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","isBlocking","E_PERMIT_BLOCKING","E_TREAT_AS_BLOCKING","didSomething","dir","x2","y2","madeChange","startProb","spread","probDec","decrement","spawnMap","fill","count","DIRS","hasXY","cellIsOk","GW.random","computeSpawnMap","gridDisruptsWalkability","E_EVACUATE_CREATURES","blockingMap","monst","loc","matchingLocNear","forbidsCell","hallways","moveActor","evacuateCreatures","E_EVACUATE_ITEMS","removeItem","addItem","evacuateItems","E_CLEAR_CELL","clearCell","clearCells","accomplishedSomething","blockedByOtherLayers","E_BLOCKED_BY_OTHER_LAYERS","superpriority","E_SUPERPRIORITY","isRoot","Cell.MechFlags","EVENT_FIRED_THIS_TURN","Entity.Layer","obstructsLayer","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","spawnTiles","fireAll","event","willFire","promoteChance","eachNeighbor","n","Entity.Flags","forEachAsync","w","activate","isStart","E_BUILD_IN_WALLS","E_MUST_TOUCH_WALLS","ok","c","E_NO_TOUCH_WALLS","blocksEffects","matchTile","hasTile","installType","match","needs","bind","setDefaults","map.deepestLevel","h","locations","_actors","_items","_width","_height","cells","Cell.Cell","tick","MAP_DEFAULT","ambient","ambientLightChanged","updateLiquid","updateGas","Light.updateLighting","Visibility.initMap","fmt","dump","fn","forRect","only4dirs","eachNeighborAsync","randomEach","g","isBoundaryXY","MAP_CHANGED","hasTileMechFlag","canvas","getCellAppearance","glyph","toGlyph","draw","toInt","invalidateCostMap","setFlags","Cell.Flags","isRevealed","mapFlag","tileWithFlag","tileWithMechFlag","isClear","isEmpty","isObstruction","isDoorway","isSecretDoorway","isLiquid","hasGas","isMoveableNow","canBeWalked","tileFlavor","clearLayersWithFlags","boundaryTile","matchFn","arcCount","x1","y1","costGrid","costFn","Path","OBSTRUCTION","isNull","matcher","maxIndex","d","TRUE","hallwaysAllowed","forbidLiquid","liquids","deterministic","candidateLocs","walkableArcCount","push","randIndex","number","sequence","forbidCellFlags","forbidTileFlags","forbidTileMechFlags","success","index","matches","eachChain","anim","oldCell","theActor","CellFlags","isPlayer","avoidsCell","addActor","removeActor","removeFromChain","actorAt","delete","isDetected","D_ITEM_OMNISCIENCE","blockingGrid","walkableGrid","disrupts","gridOffsetX","gridOffsetY","bounds","contains","blockingX","blockingY","get","floodFill","forbiddenCellFlags","forbiddenLayerFlags","Fov","FOV","isBlocked","hasCellFlag","calcRadius","sqrt","calculate","a","b","equalsXY","line","getLine","Effect.fireAll","CellMechFlags","hasKey","Tile.Flags","exposeToFire","_n","newVolume","calc","calcBaseVolume","TileLayer","CalcType","CALC","NONE","updateVolume","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","T_IS_FLAMMABLE","T_EXTINGUISHES_FIRE","EFFECT","TileMechFlags","TM_EXPLOSIVE_PROMOTE","highVol","highX","highY","highTile","myVol","amt","dirs","adj","avg","rem","EVENT_PROTECTED","wall","boundary","wallTile","visible","revealed","makeVisible","revealAll","Cell.getAppearance","mix","COLORS","black","IS_CURSOR","IS_IN_PATH","highlight","cursor","path","L_INVERT_WHEN_HIGHLIGHTED","swap","hasVolume","needsAjustment","UPDATE","setVolume","yellow","gold","prefab","charToTile","reduce","len","text","Entity.make","enter","open","close"],"mappings":"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"}