{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/actor/pain.js","../js/actor/stat.js","../js/actor/status.js","../js/actor/actor.js","../js/effect/effect.js","../js/tile/tile.js","../js/tile/index.js","../js/effect/types/basic.js","../js/effect/types/spread.js","../js/effect/handlers/emit.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/tile.js","../js/effect/handlers/clear.js","../js/effect/handlers/feature.js","../js/effect/handlers/nourish.js","../js/effect/handlers/stat.js","../js/map/cell.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/actorLayer.js","../js/layer/itemLayer.js","../js/layer/gasLayer.js","../js/layer/fireLayer.js","../js/draw/basic.js","../js/map/map.js","../js/memory/memory.js","../js/memory/system.js","../js/actor/kind.js","../js/actor/make.js","../js/item/item.js","../js/item/kind.js","../js/item/make.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/path.js","../js/horde/horde.js","../js/horde/make.js","../js/action/action.js","../js/fx/fx.js","../js/action/moveDir.js","../js/action/pickup.js","../js/player/attribute.js","../js/player/skill.js","../js/player/player.js","../js/player/kind.js","../js/game/game.js","../js/tile/tiles.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_ON_MAP\"] = Fl(17)] = \"L_ON_MAP\";\n    Entity[Entity[\"DEFAULT_ACTOR\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ACTOR\";\n    Entity[Entity[\"DEFAULT_ITEM\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ITEM\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n    Actor[Actor[\"HAS_MEMORY\"] = Fl(1)] = \"HAS_MEMORY\";\n    Actor[Actor[\"USES_FOV\"] = Fl(2)] = \"USES_FOV\";\n    Actor[Actor[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n    Item[Item[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(0)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(1)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"KNOWN_TO_BE_SAFE\"] = Fl(2)] = \"KNOWN_TO_BE_SAFE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to speed checks\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(16)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(17)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(18)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(19)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_FX\"] = Fl(20)] = \"HAS_FX\";\n    Cell[Cell[\"HAS_TICK_EFFECT\"] = Fl(22)] = \"HAS_TICK_EFFECT\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_SAFE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_NEEDS_REDRAW\"] = Fl(1)] = \"MAP_NEEDS_REDRAW\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_IGNORE_FOV\"] = Fl(12)] = \"E_IGNORE_FOV\";\n    // E_SPREAD_CIRCLE = Fl(13), // Spread in a circle around the spot (using FOV), radius calculated using spread+decrement\n    // E_SPREAD_LINE = Fl(14), // Spread in a line in one random direction\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nlet lastId = 0;\nexport class Entity {\n    constructor(kind) {\n        this._map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n        this.id = '' + ++lastId;\n    }\n    get map() {\n        return this._map;\n    }\n    addToMap(map, x, y) {\n        if (this.hasEntityFlag(Flags.Entity.L_ON_MAP)) {\n            throw new Error('Entity is currently on a map!');\n        }\n        this.x = x;\n        this.y = y;\n        this.setEntityFlag(Flags.Entity.L_ON_MAP);\n        if (this._map === map) {\n            return false;\n        }\n        this._map = map;\n        this.kind.addToMap(this, map);\n        return true;\n    }\n    removeFromMap() {\n        this.clearEntityFlag(Flags.Entity.L_ON_MAP);\n        this.kind.removeFromMap(this);\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    isAt(x, y) {\n        return this.x === x && this.y === y;\n    }\n    clone() {\n        const other = new this.constructor(this.kind);\n        other.copy(this);\n        return other;\n    }\n    copy(other) {\n        this.depth = other.depth;\n        this.light = other.light;\n        Object.assign(this.flags, other.flags);\n        this.next = other.next;\n        this.x = other.x;\n        this.y = other.y;\n        this.kind = other.kind;\n        this.id = other.id;\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    setEntityFlag(flag) {\n        this.flags.entity |= flag;\n    }\n    clearEntityFlag(flag) {\n        this.flags.entity &= ~flag;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isKey(x, y) {\n        return this.key && this.key.matches(x, y);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n    drawStatus(buffer, bounds) {\n        return this.kind.drawStatus(this, buffer, bounds);\n    }\n    drawInto(dest, _observer) {\n        dest.drawSprite(this.sprite);\n    }\n    toString() {\n        return `${this.constructor.name}-${this.id} @ ${this.x},${this.y}`;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requiredTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config.sprite ? config.sprite : config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requiredTileTags) {\n            if (typeof config.requiredTileTags === 'string') {\n                this.requiredTileTags = config.requiredTileTags\n                    .split(/[,|]/)\n                    .map((t) => t.trim());\n            }\n            else {\n                this.requiredTileTags = config.requiredTileTags\n                    .slice()\n                    .map((t) => t.trim());\n            }\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    addToMap(_entity, _map) { }\n    removeFromMap(_entity) { }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAllTileTags(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    avoidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAnyTileTag(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n    drawStatus(entity, buffer, bounds) {\n        if (!entity.map)\n            return 0;\n        if (entity.isDestroyed)\n            return 0;\n        const mixer = new GWU.sprite.Mixer();\n        entity.map.getAppearanceAt(entity.x, entity.y, mixer);\n        buffer.drawSprite(bounds.x + 1, bounds.y, mixer);\n        buffer.wrapText(bounds.x + 3, bounds.y, bounds.width - 3, entity.getName(), 'purple');\n        return 1;\n    }\n}\nexport function make(opts, makeOpts = {}) {\n    const kind = new EntityKind(opts);\n    return kind.make(makeOpts);\n}\n","import * as GWU from 'gw-utils';\nexport class PainMessages {\n    constructor(msgs = []) {\n        this._msgs = [];\n        msgs.forEach((m) => this.add(m));\n    }\n    add(msg) {\n        this._msgs.push(msg);\n        return this;\n    }\n    get(pct, singular = true) {\n        const index = GWU.clamp(Math.floor(pct * this._msgs.length), 0, this._msgs.length - 1);\n        const msg = this._msgs[index];\n        return this._format(msg, singular);\n    }\n    _format(msg, singular = true) {\n        return msg.replace(/\\[(\\w+)\\|?(\\w*)\\]/g, singular ? '$1' : '$2');\n    }\n}\nexport const painMessages = {};\nexport function installPain(id, pain) {\n    if (Array.isArray(pain)) {\n        pain = new PainMessages(pain);\n    }\n    painMessages[id] = pain;\n}\nexport function getPain(id) {\n    const m = painMessages[id];\n    if (!m)\n        throw new Error('No such pain message index: ' + id);\n    return m;\n}\n","import * as GWU from 'gw-utils';\nexport class Stats {\n    constructor(opts = {}) {\n        this._max = {};\n        this._rate = {};\n        this._value = {};\n        this.init(opts);\n    }\n    get(name) {\n        return this._value[name];\n    }\n    max(name) {\n        return this._max[name] || 0;\n    }\n    regen(name) {\n        return this._rate[name] || null;\n    }\n    init(opts) {\n        for (let name in opts) {\n            this.set(name, opts[name]);\n        }\n    }\n    set(name, v, max) {\n        if (typeof v !== 'number') {\n            const r = GWU.range.make(v);\n            v = r.value();\n        }\n        this._value[name] = v;\n        this._max[name] = max || v;\n    }\n    gain(name, amount, allowOver = false) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        let v = this._value[name] + amount;\n        if (!allowOver) {\n            v = Math.min(v, this._max[name]);\n        }\n        this._value[name] = v;\n    }\n    drain(name, amount) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._value[name] = Math.max(0, this._value[name] - amount);\n    }\n    raiseMax(name, amount, raiseValue = true) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._max[name] += amount;\n        if (raiseValue) {\n            this.gain(name, amount);\n        }\n    }\n    reduceMax(name, amount, lowerValue = false) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._max[name] = Math.max(0, this._max[name] - amount);\n        if (lowerValue) {\n            this.drain(name, amount);\n        }\n    }\n    setRegen(name, turns, count = 1) {\n        const r = (this._rate[name] = this._rate[name] || { elapsed: 0 });\n        r.turns = turns;\n        r.count = count;\n    }\n    regenAll() {\n        for (let name in this._max) {\n            const r = this._rate[name];\n            r.elapsed += 1;\n            if (r.elapsed >= r.turns) {\n                this.gain(name, r.count);\n                r.elapsed -= r.turns;\n            }\n        }\n    }\n    restore(name, value) {\n        if (value === undefined)\n            value = this._max[name];\n        this._value[name] = value;\n    }\n    adjust(name, type, amount) {\n        amount = GWU.range.from(amount);\n        const v = amount.value();\n        const c = this.get(name);\n        if (type === 'inc') {\n            this.gain(name, amount);\n        }\n        else if (type === 'dec') {\n            this.drain(name, amount);\n        }\n        else if (type === 'set') {\n            this.set(name, amount);\n        }\n        else if (type === 'min') {\n            const v = amount.value();\n            if (this.get(name) < v) {\n                this.set(name, v);\n            }\n        }\n        else if (type === 'max') {\n            if (this.get(name) > v) {\n                this.set(name, v);\n            }\n        }\n        else {\n            throw new Error('Invalid stat adjust type: ' + type);\n        }\n        return c !== this.get(name);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Status {\n    constructor() {\n        this._set = {};\n        this._time = {};\n        this._count = {};\n        this._done = {};\n        this._value = {};\n        this.changed = null;\n    }\n    clear(name) {\n        this.clearTime(name);\n        this.clearCount(name);\n        this.setOff(name);\n        return this._update(name);\n    }\n    get(name) {\n        return this._value[name] || false;\n    }\n    has(name) {\n        return this._value[name] || false;\n    }\n    _addDone(name, done) {\n        if (done) {\n            if (!this._done[name]) {\n                this._done[name] = done;\n            }\n        }\n    }\n    /**\n     * Sets the count for a status variable.\n     * If setting the count turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {number} count The count to set.\n     * @param {function} [done] The function to call whenever the count goes to 0.\n     * @returns {boolean} Whether or not setting the count turned the status on.\n     */\n    setCount(name, count, done) {\n        const status = this;\n        status._count[name] = Math.max(count, status._count[name] || 0);\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Increments the count for the status by the given amount (1=default)\n     * If incrementing the count turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {number} [count=1] The count to incrmeent.\n     * @param {function} [done] The function to call whenever the count goes to 0.\n     * @returns {boolean} Whether or not incrementing the count turned the status on.\n     */\n    increment(name, count = 1, done) {\n        if (typeof count == 'function') {\n            done = count;\n            count = 1;\n        }\n        const status = this;\n        status._count[name] = (status._count[name] || 0) + count;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Decrements the count for the status by the given amount (1=default)\n     * If decrementing the count turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * Also, if the status is turned off, and a done function was set, then it\n     * is called.\n     * @param {string} name The name of the status to adjust.\n     * @param {number} [count=1] The count to decrement.\n     * @returns {boolean} Whether or not decrementing the count turned the status off.\n     */\n    decrement(name, count = 1) {\n        const status = this;\n        status._count[name] = Math.max(0, (status._count[name] || 0) - count);\n        return this._update(name);\n    }\n    /**\n     * Clears all counts from the given status.\n     * If clearing the count turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * Also, if the status is turned off, and a done function was set, then it\n     * is called.\n     * @param {string} name The name of the status to adjust.\n     * @returns {boolean} Whether or not decrementing the count turned the status off.\n     */\n    clearCount(name) {\n        const status = this;\n        status._count[name] = 0;\n        return this._update(name);\n    }\n    /**\n     * Turns on the given status.\n     * @param {string} name The status to adjust.\n     * @param {function} [done] The function to call when the status is turned off.\n     * @returns {boolean} True if this turns on the status. (It could be on because of a time or count).\n     */\n    setOn(name, done) {\n        const status = this;\n        status._set[name] = true;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Turns off the given status.\n     *\n     * @param {string} name The status to adjust.\n     * @returns {boolean} True if this turns off the status. (It could be on because of a time or count).\n     */\n    setOff(name) {\n        const status = this;\n        status._set[name] = false;\n        return this._update(name);\n    }\n    /**\n     * Sets the time for a status variable.\n     * If setting the time turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to set.\n     * @param {function} [done] The function to call whenever the status goes false.\n     * @returns {boolean} Whether or not setting the time turned the status on.\n     */\n    setTime(name, value, done) {\n        const status = this;\n        // if (value === true) {\n        //   return RUT.Status.setOn(source, name, done);\n        // }\n        value = GWU.range.make(value).value();\n        const current = status._time[name] || 0;\n        status._time[name] = Math.max(value, current);\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Adds to the time for a status variable.\n     * If adding to the time turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to add.\n     * @param {function} [done] The function to call whenever the status goes false.\n     * @returns {boolean} Whether or not adding the time turned the status on.\n     */\n    addTime(name, value = 1, done) {\n        if (typeof value == 'function') {\n            done = value;\n            value = 1;\n        }\n        const status = this;\n        // if (value === true) {\n        //   return RUT.Status.setOn(source, name, done);\n        // }\n        value = GWU.range.make(value).value();\n        status._time[name] = (status._time[name] || 0) + value;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Removes time for a status variable.\n     * If removing to the time turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to remove.\n     * @returns {boolean} Whether or not removing the time turned the status off.\n     */\n    removeTime(name, value = 1) {\n        const status = this;\n        value = GWU.range.make(value).value();\n        status._time[name] = Math.max(0, (status._time[name] || 0) - value);\n        return this._update(name);\n    }\n    /**\n     * Removes all time for a status variable.\n     * If removing to the time turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * @param {string} name The name of the status to set.\n     * @returns {boolean} Whether or not removing the time turned the status off.\n     */\n    clearTime(name) {\n        const status = this;\n        status._time[name] = 0;\n        return this._update(name);\n    }\n    /**\n     * Removes time for all status variables that have time.\n     * If removing the time turns off any status (it was on),\n     * then this function returns an object with all of those statuses as keys and false as the values.  Otherwise, false.\n     * @param {Status|object} source The object to set the status on.  If object.status is set then that is where the values are updated.\n     * @param {string} name The name of the status to set.\n     * @returns {boolean|object} false or an object with the names of the statuses that were cleared as keys and false as the values.\n     */\n    decayAllTimes(delta = 1) {\n        const status = this;\n        const cleared = {};\n        let noticed = false;\n        for (let name in status._time) {\n            if (this.removeTime(name, delta)) {\n                noticed = true;\n                cleared[name] = false;\n            }\n        }\n        return noticed ? cleared : false;\n    }\n    /**\n     * Updates the value of the status and returns whether or not this change\n     * turned the status on or off (true = change, false = no change)\n     * @param {string} name The name of the status to update\n     * @returns {boolean} True if the value was turned on or off, False otherwise.\n     */\n    _update(name) {\n        const status = this;\n        const rec = this._value;\n        let was = rec[name];\n        let value = (rec[name] =\n            status._set[name] ||\n                status._time[name] > 0 ||\n                status._count[name] > 0 ||\n                false);\n        const doneFn = this._done[name];\n        if (!value && doneFn) {\n            doneFn(this, name);\n            status._done[name] = null;\n        }\n        if (was && !value) {\n            if (this.changed)\n                this.changed(this, name);\n            // console.log('called changed: false');\n            return true;\n        }\n        else if (!was && value) {\n            if (this.changed)\n                this.changed(this, name);\n            // console.log('called changed: true');\n            return true;\n        }\n        return false;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Status } from './status';\nimport { Stats } from './stat';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.next = null;\n        this.leader = null;\n        this.items = null;\n        this.fov = null;\n        this.memory = null;\n        this.visionDistance = 99;\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n        this.stats = new Stats();\n        this.status = new Status();\n    }\n    copy(other) {\n        super.copy(other);\n        this.leader = other.leader;\n        this.items = other.items;\n        this.fov = other.fov;\n        this.memory = other.memory;\n        this.visionDistance = other.visionDistance;\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    canSee(x, y) {\n        if (x instanceof Entity.Entity) {\n            return this.canSee(x.x, x.y) && this.kind.isAbleToSee(this, x);\n        }\n        if (this.fov) {\n            return this.fov.isDirectlyVisible(x, y);\n        }\n        else if (this.map) {\n            if (GWU.xy.distanceBetween(this.x, this.y, x, y) >\n                this.visionDistance) {\n                return false;\n            }\n            return GWU.xy.forLineBetween(this.x, this.y, x, y, (i, j) => {\n                if (this.map.cell(i, j).blocksVision())\n                    return false;\n            });\n        }\n        else {\n            return false; // need a map or an fov\n        }\n    }\n    canSeeOrSense(x, y) {\n        if (x instanceof Entity.Entity) {\n            return (this.canSeeOrSense(x.x, x.y) &&\n                (this.kind.isAbleToSee(this, x) ||\n                    this.kind.isAbleToSense(this, x)));\n        }\n        if (this.fov) {\n            return this.fov.isAnyKindOfVisible(x, y);\n        }\n        return this.canSee(x, y);\n    }\n    isAbleToSee(entity) {\n        return this.kind.isAbleToSee(this, entity);\n    }\n    isAbleToSense(entity) {\n        return this.kind.isAbleToSense(this, entity);\n    }\n    ////////////////// ACTOR\n    async act() {\n        return true;\n    }\n    ////////////////// INVENTORY\n    avoidsItem(_item) {\n        return false;\n    }\n    canAddItem(_item) {\n        return false;\n    }\n    addItem(_item) { }\n    pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n}\n","export const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id.toLowerCase()] = handler;\n}\nexport const effectTypes = {};\nexport function installType(id, type) {\n    effectTypes[id] = type;\n}\n// export class Effect {\n//     id = '';\n//     chance = 100 * 100; // 100%\n//     type: string; // self | bolt | beam | ball | burst | adjacent | spread\n//     aim: string; // actor | item | cell\n//     bolt: string | GWU.sprite.SpriteData | null = null;\n//     beam = false;\n//     range = 0;\n//     ball: string | GWU.sprite.SpriteData | null = null;\n//     radius = 0;\n//     center = false;\n//     effects: EffectFn[];\n//     good = false;\n//     seen = false;\n//     next: Effect | null = null;\n//     constructor(config: EffectConfig) {\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         this.aim = config.aim || 'actor';\n//         if (typeof config.chance === 'string') {\n//             // '20%' becomes 2000\n//             config.chance = Math.floor(Number.parseFloat(config.chance) * 100);\n//         }\n//         this.chance = config.chance || 100 * 100;\n//         const type = config.type || 'basic';\n//         const parts = type.split(':');\n//         if (type.startsWith('bolt') || type.startsWith('beam')) {\n//             // bolt:range:sprite\n//             this.type = parts[0];\n//             this.range = parts[1] ? Number.parseInt(parts[1]) : 99;\n//             this.bolt = parts[1] || 'missile';\n//             this.beam = type.startsWith('beam');\n//         } else if (\n//             type.startsWith('ball') ||\n//             type.startsWith('burst') ||\n//             type.startsWith('aura')\n//         ) {\n//             this.type = parts[0];\n//             this.radius = parts[1] ? Number.parseInt(parts[1]) : 2;\n//             this.range = parts[2] ? Number.parseInt(parts[2]) : 99;\n//             this.ball = parts[3] || 'explosion';\n//             this.center = !type.startsWith('aura');\n//         } else {\n//             this.type = 'basic';\n//         }\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         if (Array.isArray(config.effects)) {\n//             this.effects = config.effects.map((e) => {\n//                 if (typeof e === 'function') return e;\n//                 return effectFnFromString(e);\n//             });\n//         } else {\n//             this.effects = [];\n//             Object.entries(config.effects).forEach(([key, value]) => {\n//                 const handler = handlers[key.toLowerCase()];\n//                 if (handler) {\n//                     this.effects.push(handler(value));\n//                 } else if (typeof value === 'function') {\n//                     this.effects.push(value);\n//                 } else {\n//                     throw new Error('Unknown effect: ' + key);\n//                 }\n//             });\n//         }\n//         if (this.effects.length === 0) throw new Error('No effects!');\n//     }\n//     clone(): this {\n//         const other = new (this.constructor as new (\n//             config: EffectConfig\n//         ) => this)(this as EffectConfig);\n//         return other;\n//     }\n//     fire(map: Map.MapType, x: number, y: number, ctx: EffectCtx = {}): boolean {\n//         let didSomething = false;\n//         ctx.good = this.good;\n//         ctx.seen = this.seen;\n//         if (!this.chance || map.rng.chance(this.chance, 10000)) {\n//             // fire\n//             for (let effect of this.effects) {\n//                 if (GWU.data.gameHasEnded) break;\n//                 if (effect(map, x, y, ctx)) {\n//                     didSomething = true;\n//                 } else {\n//                     break;\n//                 }\n//             }\n//         }\n//         if (ctx.aware && didSomething) {\n//             this.seen = true;\n//         }\n//         this.good = ctx.good;\n//         return didSomething;\n//     }\n//     reset() {\n//         this.seen = false;\n//     }\n// }\n// export function effectFnFromString(e: string): EffectFn {\n//     const parts = e.split(':');\n//     if (parts.length === 0) throw new Error('Invalid effect string.');\n//     // @ts-ignore\n//     const name = parts.shift().toLowerCase();\n//     const handler = handlers[name] || null;\n//     if (!handler) {\n//         throw new Error('Failed to find effect handler: ' + name);\n//     }\n//     return handler(parts);\n// }\nexport function make(opts) {\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    let config = {};\n    if (typeof opts === 'string') {\n        // Special case\n        if (opts.toLowerCase().startsWith('spread:')) {\n            const endPos = opts.indexOf(':', 8);\n            const tile = opts.substring(8, endPos);\n            config = {\n                type: 'spread:' + opts.substring(endPos),\n                effects: ['tile:' + tile],\n            };\n        }\n        else {\n            config = { type: 'basic', effects: [opts] };\n        }\n    }\n    else if (typeof opts === 'function') {\n        config = { type: 'basic', effects: [opts] };\n    }\n    else if (Array.isArray(opts)) {\n        config = { type: 'basic', effects: opts };\n    }\n    else {\n        // @ts-ignore\n        if (opts.effect) {\n            // @ts-ignore\n            opts.effects = [opts.effect];\n            delete opts.effect;\n        }\n        // object only\n        if (opts.effects) {\n            Object.assign(config, opts);\n            if (typeof config.effects === 'string') {\n                config.effects = [opts.effects];\n            }\n            else if (typeof config.effects === 'function') {\n                config.effects = [opts.effects];\n            }\n        }\n        else {\n            config.effects = {};\n            Object.entries(opts).forEach(([key, value]) => {\n                const handler = handlers[key.toLowerCase()];\n                if (handler !== undefined) {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else if (typeof value === 'function') {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else {\n                    // @ts-ignore\n                    config[key] = value;\n                }\n            });\n        }\n    }\n    config.type = config.type || 'basic';\n    if (typeof config.type !== 'string')\n        throw new Error('Invalid effect type: ' + JSON.stringify(config.type));\n    const typeParts = config.type.split(':').map((t) => t.trim());\n    const typeName = typeParts.shift();\n    const makeFn = effectTypes[typeName.toLowerCase()];\n    if (!makeFn)\n        throw new Error('Invalid effect type: ' + typeName);\n    const effect = makeFn(config);\n    if (Array.isArray(config.effects)) {\n        config.effects.forEach((e) => {\n            if (typeof e === 'function') {\n                effect.effects.push(e);\n            }\n            else {\n                const parts = e.split(':').map((t) => t.trim());\n                if (parts.length === 1) {\n                    const effect = installedEffects[parts[0]];\n                    if (!effect)\n                        throw new Error('Failed to find effect with id: ' + parts[0]);\n                    effect.effects.push(effect.trigger.bind(effect));\n                }\n                else {\n                    const handler = handlers[parts[0].toLowerCase()];\n                    if (!handler)\n                        throw new Error('Unknown effect: ' + parts[0]);\n                    parts.shift();\n                    effect.effects.push(handler(parts));\n                }\n            }\n        });\n    }\n    else {\n        Object.entries(config.effects).forEach(([key, value]) => {\n            const handler = handlers[key.toLowerCase()];\n            if (!handler)\n                throw new Error('Failed to find handler type: ' + key);\n            effect.effects.push(handler(value));\n        });\n    }\n    if (config.next) {\n        effect.next = make(config.next);\n    }\n    return effect;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'object' && 'trigger' in opts) {\n        return opts;\n    }\n    if (typeof opts === 'string') {\n        const effect = installedEffects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\nfunction isEffect(obj) {\n    return typeof obj === 'object' && 'trigger' in obj;\n}\n//////////////////////////////\n// INSTALL\nexport const installedEffects = {};\nexport function install(id, config) {\n    const effect = isEffect(config) ? config.clone() : make(config);\n    installedEffects[id] = effect;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function resetAll() {\n    Object.values(installedEffects).forEach((e) => (e.seen = false));\n}\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/effect';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string' && !value.includes(':')) {\n                effects[key] = value;\n                return;\n            }\n            try {\n                effects[key] = makeEffect(value);\n            }\n            catch (e) {\n                throw new Error(`Failed to add effect to tile => ${key} : ${JSON.stringify(value)} : ` + e.message);\n            }\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\n// import './tiles';\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nimport * as Flags from '../../flags';\nexport class BasicEffect {\n    constructor(config) {\n        this.effects = [];\n        this.chance = 100 * 100; // 100%\n        this.seen = false;\n        this.flags = 0;\n        this.next = null;\n        if (typeof config === 'object' && !Array.isArray(config)) {\n            this.flags = GWU.flag.from(Flags.Effect, config.flags);\n            this.chance = Number.parseInt(config.chance || '10000');\n        }\n    }\n    clone() {\n        const other = new this.constructor();\n        other.effects = this.effects.slice();\n        other.chance = this.chance;\n        other.seen = false;\n        other.flags = this.flags;\n        other.next = this.next;\n        return other;\n    }\n    trigger(loc, ctx = {}) {\n        if (!ctx.force && this.chance) {\n            const rng = ctx.rng || loc.map.rng || GWU.random;\n            if (!rng.chance(this.chance, 10000))\n                return false;\n        }\n        let didSomething = false;\n        for (let eff of this.effects) {\n            if (eff(loc, ctx)) {\n                didSomething = true;\n            }\n        }\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                return this.next.trigger(loc, ctx);\n            }\n        }\n        return didSomething;\n    }\n}\nexport function makeBasicEffect(config) {\n    if (typeof config !== 'object') {\n        return new BasicEffect();\n    }\n    return new BasicEffect(config);\n}\nEffect.installType('basic', makeBasicEffect);\n","import * as GWU from 'gw-utils';\nimport { BasicEffect } from './basic';\nimport { installType } from '../effect';\nimport * as Flags from '../../flags';\nexport function makeSpreadEffect(config) {\n    return new SpreadEffect(config);\n}\ninstallType('spread', makeSpreadEffect);\nexport class SpreadEffect extends BasicEffect {\n    constructor(config) {\n        super(config);\n        this.grow = 0;\n        this.decrement = 0;\n        this.matchTile = '';\n        if (!config) {\n            config = { grow: 0, decrement: 0, flags: 0 };\n        }\n        if (typeof config === 'string') {\n            config = config.split(':').map((t) => t.trim());\n        }\n        if (Array.isArray(config)) {\n            if (config[0].toLowerCase() === 'spread') {\n                config.shift();\n            }\n            config = {\n                grow: config[0] || '0',\n                decrement: config[1] || '100',\n                flags: config[2] || '0',\n            };\n        }\n        else if (typeof config.type === 'string' &&\n            config.type.includes(':')) {\n            const parts = config.type.split(':').map((t) => t.trim());\n            if (parts[0].toLowerCase() === 'spread') {\n                parts.shift();\n            }\n            config.grow = parts[0] || '0';\n            config.decrement = parts[1] || '100';\n            config.flags = config.flags + '|' + parts[2];\n        }\n        this.grow = Number.parseInt(config.grow || 0);\n        this.decrement = Number.parseInt(config.decrement || 100);\n        this.flags = GWU.flag.from(Flags.Effect, config.flags || 0);\n        this.matchTile = config.matchTile || '';\n    }\n    clone() {\n        const other = super.clone();\n        other.grow = this.grow;\n        other.decrement = this.decrement;\n        other.matchTile = this.matchTile;\n        return other;\n    }\n    trigger(xy, ctx = {}) {\n        const abortIfBlocking = !!(this.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        let didSomething = false;\n        const map = xy.map;\n        const spawnMap = GWU.grid.alloc(map.width, map.height);\n        didSomething = computeSpawnMap(this, xy, spawnMap);\n        if (!didSomething) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (abortIfBlocking && mapDisruptedBy(map, spawnMap)) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, spawnMap, this.flags)) {\n                didSomething = true;\n            }\n        }\n        spawnMap.forEach((v, x, y) => {\n            if (!v)\n                return;\n            spawnMap[x][y] = 1; // convert from generations to off/on/success\n            for (let eff of this.effects) {\n                if (eff({ map, x, y }, ctx)) {\n                    didSomething = true;\n                    spawnMap[x][y] = 2;\n                }\n            }\n        });\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                if (this.flags & Flags.Effect.E_NEXT_EVERYWHERE) {\n                    spawnMap.forEach((v, x, y) => {\n                        if (!v)\n                            return;\n                        if (v == 2 || nextAlways) {\n                            this.next.trigger({ map, x, y }, ctx);\n                        }\n                    });\n                }\n                else {\n                    this.next.trigger({ map, x: xy.x, y: xy.y }, ctx);\n                }\n            }\n        }\n        GWU.grid.free(spawnMap);\n        return didSomething;\n    }\n}\nexport function mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(map.width, map.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(map.width, map.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (map.cell(i, j).isStairs()) {\n                disrupts = true;\n            }\n        }\n        else if (!map.cell(i, j).blocksMove()) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGWU.grid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.matchTile && !isStart && !cell.hasTile(effect.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, loc, spawnMap) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const map = loc.map;\n    let startProb = effect.grow || 0;\n    let probDec = effect.decrement || 0;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, loc.x, loc.y, true)) {\n        return false;\n    }\n    spawnMap[loc.x][loc.y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y])\n            return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const c = map.cell(x, y);\n            return !a.forbidsCell(c);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeActor(a);\n            map.addActor(loc[0], loc[1], a);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y])\n            return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const dest = map.cell(x, y);\n            return !i.forbidsCell(dest);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(i);\n            map.addItem(loc[0], loc[1], i);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { installHandler } from '../effect';\n//////////////////////////////////////////////\n// EMIT\nexport function makeEmitHandler(config) {\n    if (Array.isArray(config))\n        config = config[0];\n    if (typeof config !== 'string')\n        throw new Error('Invalid EMIT handler config - ' + config);\n    return emitEffect.bind(undefined, config);\n}\nexport function emitEffect(id, loc, ctx) {\n    return GWU.events.emit(id, loc.x, loc.y, ctx);\n}\ninstallHandler('emit', makeEmitHandler);\n","import * as GWU from 'gw-utils';\nimport { installHandler } from '../effect';\n//////////////////////////////////////////////\n// MESSAGE\nexport function makeMessageHandler(src) {\n    if (Array.isArray(src))\n        src = src[0];\n    if (typeof src !== 'string') {\n        throw new Error('Need message for message effect.');\n    }\n    const info = {\n        msg: src,\n    };\n    return messageEffect.bind(undefined, info);\n}\nexport function messageEffect(info, loc, ctx) {\n    const seen = ctx.seen;\n    const msg = info.msg;\n    if (msg &&\n        msg.length &&\n        ctx.aware &&\n        !seen\n    // && map.isVisible(x, y)\n    ) {\n        GWU.message.addAt(loc.x, loc.y, msg, ctx);\n        return true;\n    }\n    return false;\n}\ninstallHandler('msg', makeMessageHandler);\n","import { installHandler } from '../effect';\n//////////////////////////////////////////////\n// ActivateMachine\nexport function makeActivateMachine() {\n    return activateMachine.bind(undefined);\n}\nexport function activateMachine(loc, ctx) {\n    const cell = loc.map.cell(loc.x, loc.y);\n    const machine = cell.machineId;\n    if (!machine)\n        return false;\n    return loc.map.activateMachine(machine, loc.x, loc.y, ctx);\n}\ninstallHandler('activateMachine', makeActivateMachine);\n","import { installHandler } from '../effect';\nexport function makeTileHandler(src) {\n    if (!src)\n        throw new Error('Tile effect needs configuration.');\n    if (typeof src === 'string') {\n        src = { id: src };\n    }\n    else if (Array.isArray(src)) {\n        src = { id: src[0] };\n    }\n    else if (!src.id) {\n        throw new Error('Tile effect needs configuration with id.');\n    }\n    const opts = src;\n    if (opts.id.includes('!')) {\n        opts.superpriority = true;\n    }\n    if (opts.id.includes('~')) {\n        opts.blockedByActors = true;\n        opts.blockedByItems = true;\n    }\n    opts.id = opts.id.replace(/[!~]*/g, '');\n    return tileEffect.bind(opts);\n}\nexport function tileEffect(loc, ctx) {\n    this.machine = ctx.machine || 0;\n    const didSomething = loc.map.setTile(loc.x, loc.y, this.id, this);\n    return didSomething;\n}\ninstallHandler('tile', makeTileHandler);\n","import * as Flags from '../../flags';\nimport { installHandler } from '../effect';\nexport function makeClearHandler(config) {\n    let layers = 0;\n    if (!config) {\n        layers = Flags.Depth.ALL_LAYERS;\n    }\n    else if (typeof config === 'number') {\n        layers = config;\n    }\n    else if (typeof config === 'string') {\n        const parts = config.split(/[,|]/g);\n        layers = parts.reduce((out, v) => {\n            if (typeof v === 'number')\n                return out | v;\n            const depth = Flags.Depth[v] || 0;\n            return out | depth;\n        }, 0);\n    }\n    else {\n        throw new Error('Invalid config for clear effect: ' + JSON.stringify(config));\n    }\n    return clearEffect.bind(undefined, layers);\n}\nexport function clearEffect(layers, loc, _ctx) {\n    if (!layers)\n        return false;\n    const cell = loc.map.cell(loc.x, loc.y);\n    return cell.clearDepth(layers);\n}\ninstallHandler('clear', makeClearHandler);\n","import * as Effect from '../effect';\nexport function makeFeatureHandler(id) {\n    if (Array.isArray(id))\n        id = id[0];\n    if (id && typeof id !== 'string') {\n        id = id.id;\n    }\n    if (!id || !id.length)\n        throw new Error('Feature effect needs ID');\n    return featureEffect.bind(undefined, id);\n}\nexport function featureEffect(id, loc, ctx) {\n    const feat = Effect.installedEffects[id];\n    if (!feat) {\n        throw new Error('Failed to find feature: ' + id);\n    }\n    return feat.trigger(loc, ctx);\n}\nEffect.installHandler('feature', makeFeatureHandler);\nEffect.installHandler('effect', makeFeatureHandler);\nEffect.installHandler('id', makeFeatureHandler);\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nexport function makeNourishEffect(opts) {\n    if (!opts)\n        throw new Error('Invalid Nourish config.');\n    let info = {};\n    if (typeof opts === 'string') {\n        opts = opts.split(':').map((t) => t.trim());\n    }\n    if (Array.isArray(opts)) {\n        info.type = opts[0] || 'inc';\n        info.amount = GWU.range.make(opts[1] || 1);\n    }\n    else if (opts.type || opts.amount) {\n        info.type = opts.type || 'inc';\n        info.amount = GWU.range.make(opts.amount || 1);\n    }\n    else {\n        throw new Error('Invalid Nourish config: ' + JSON.stringify(opts));\n    }\n    return nourishEffect.bind(undefined, info);\n}\nexport function nourishEffect(config, loc, _ctx) {\n    if (!config.amount)\n        return false;\n    // who am I nourishing?\n    const actor = loc.map.actorAt(loc.x, loc.y);\n    if (!actor) {\n        return false;\n    }\n    const stats = actor.stats;\n    const c = stats.get('food');\n    if (!stats.adjust('food', config.type, config.amount))\n        return false;\n    const n = stats.get('food');\n    if (n < c && n / stats.max('food') < 0.1) {\n        GWU.message.addAt(actor.x, actor.y, nourishEffect.default.pukeMsg, {\n            actor,\n        });\n    }\n    return true;\n}\nnourishEffect.default = {\n    pukeMsg: '%you vomit.',\n};\nEffect.installHandler('nourish', makeNourishEffect);\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nexport function makeStatEffect(opts) {\n    if (!opts)\n        throw new Error('Invalid Stat config.');\n    const info = {};\n    if (typeof opts === 'string') {\n        opts = opts.split(':').map((t) => t.trim());\n    }\n    if (Array.isArray(opts)) {\n        info.stat = opts[0];\n        info.type = opts[1] || 'inc';\n        info.amount = GWU.range.make(opts[2] || 1);\n    }\n    else if (opts.type || opts.amount) {\n        info.stat = opts.stat;\n        info.type = opts.type || 'inc';\n        info.amount = GWU.range.make(info.amount || 1);\n    }\n    else {\n        throw new Error('Invalid stat effect configuration: ' + JSON.stringify(opts));\n    }\n    return statEffect.bind(undefined, info);\n}\nexport function statEffect(config, loc, _ctx) {\n    if (!config.amount)\n        return false;\n    // who am I nourishing?\n    const actor = loc.map.actorAt(loc.x, loc.y);\n    if (!actor) {\n        return false;\n    }\n    // sustain?\n    const stats = actor.stats;\n    if (!stats.adjust('food', config.type, config.amount))\n        return false;\n    return true;\n}\nEffect.installHandler('stat', makeStatEffect);\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nGWU.color.install('cellStatusName', 'light_blue');\n// class CellEntities {\n//     cell: Cell;\n//     constructor(cell: Cell) {\n//         this.cell = cell;\n//     }\n//     eachItem(cb: EachCb<Item>): void {\n//         let object: Item | null = this.cell._item;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     eachActor(cb: EachCb<Actor>): void {\n//         let object: Actor | null = this.cell._actor;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     forEach(cb: EachCb<Entity>): void {\n//         this.eachItem(cb);\n//         this.eachActor(cb);\n//     }\n//     some(cb: MatchCb<Entity>): boolean {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         return false;\n//     }\n//     reduce(cb: ReduceCb<Entity>, start?: any): any {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         return start;\n//     }\n// }\nexport class Cell {\n    // toFire: Partial<Effect.EffectCtx>[] = [];\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.x = -1;\n        this.y = -1;\n        // this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.snapshot = GWU.sprite.makeMixer();\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    get hasStableSnapshot() {\n        return this.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    }\n    get hasStableMemory() {\n        return this.hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        // this._actor = other.actor;\n        // this._item = other.item;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n        other.getSnapshot(this.snapshot);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, checkEntities = false) {\n        var _a, _b;\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        if (!checkEntities)\n            return false;\n        if (this.hasItem()) {\n            if ((_a = this.item) === null || _a === void 0 ? void 0 : _a.hasEntityFlag(flag))\n                return true;\n        }\n        if (this.hasActor()) {\n            if ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.hasEntityFlag(flag))\n                return true;\n        }\n        return false;\n    }\n    hasAllEntityFlags(flags, checkEntities = false) {\n        return (this.entityFlags(checkEntities) & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        var _a, _b;\n        let flag = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            if (this.hasItem()) {\n                flag |= ((_a = this.item) === null || _a === void 0 ? void 0 : _a.flags.entity) || 0;\n            }\n            if (this.hasActor()) {\n                flag |= ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.flags.entity) || 0;\n            }\n        }\n        return flag;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n            this.flags.cell &= ~Flags.Cell.STABLE_SNAPSHOT;\n            this.map.needsRedraw = true;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return this.tiles.some((t) => t && t.blocksVision());\n    }\n    blocksPathing() {\n        return this.tiles.some((t) => t && t.blocksPathing());\n    }\n    blocksMove() {\n        return this.tiles.some((t) => t && t.blocksMove());\n    }\n    blocksEffects() {\n        return this.tiles.some((t) => t && t.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isNull() {\n        return this.tiles.every((t) => !t || t === TILE.tiles.NULL);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    // hasKey(): boolean {\n    //     return this._entities.some(\n    //         (e) => !!e.key && e.key.matches(this.x, this.y)\n    //     );\n    // }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile, opts = {}) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (this.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && this.hasItem())\n            return false;\n        if (opts.blockedByActors && this.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && this.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = this.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === TILE.tiles.NULL) {\n                this.tiles[0] = TILE.get(tile.groundTile);\n            }\n        }\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            this.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            this.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            this.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.needsRedraw = true;\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.snapshot.blackOut();\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    tileWithEffect(name) {\n        return this.tiles.find((t) => t === null || t === void 0 ? void 0 : t.hasEffect(name)) || null;\n    }\n    fireEvent(event, ctx = {}) {\n        // ctx.cell = this;\n        let didSomething = false;\n        // console.log('fire event - %s', event);\n        for (const tile of this.tiles) {\n            if (!tile || !tile.effects)\n                continue;\n            const ev = tile.effects[event];\n            if (ev) {\n                const r = this._activate(ev, ctx);\n                if (r) {\n                    didSomething = true;\n                }\n            }\n        }\n        return didSomething;\n    }\n    _activate(effect, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.installedEffects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = effect.trigger(this, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this.map.itemAt(this.x, this.y);\n    }\n    addItem(item, withEffects = false) {\n        this.setCellFlag(Flags.Cell.HAS_ITEM);\n        item.addToMap(this.map, this.x, this.y);\n        this.map.items.push(item);\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (item.key &&\n                item.key.matches(this.x, this.y) &&\n                this.hasEffect('key')) {\n                this.fireEvent('key', {\n                    key: item,\n                    item,\n                });\n            }\n            else if (this.hasEffect('add_item')) {\n                this.fireEvent('add_item', {\n                    key: item,\n                    item,\n                });\n            }\n        }\n        return true;\n    }\n    removeItem(item, withEffects = false) {\n        let hasItems = false;\n        let foundIndex = -1;\n        this.map.items.forEach((obj, index) => {\n            if (obj === item) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasItems = true;\n            }\n        });\n        if (!hasItems) {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.map.items.splice(foundIndex, 1); // delete the item\n        item.removeFromMap();\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (item.isKey(this.x, this.y) && this.hasEffect('no_key')) {\n                this.fireEvent('no_key', {\n                    key: item,\n                    item,\n                });\n            }\n            else if (this.hasEffect('remove_item')) {\n                this.fireEvent('remove_item', {\n                    key: item,\n                    item,\n                });\n            }\n        }\n        return true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this.map.actorAt(this.x, this.y);\n    }\n    addActor(actor, withEffects = false) {\n        this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        if (actor.isPlayer()) {\n            this.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        actor.addToMap(this.map, this.x, this.y);\n        this.map.actors.push(actor);\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (actor.isKey(this.x, this.y) && this.hasEffect('key')) {\n                this.fireEvent('key', {\n                    key: actor,\n                    actor,\n                });\n            }\n            else if (actor.isPlayer() && this.hasEffect('add_player')) {\n                this.fireEvent('add_player', {\n                    player: actor,\n                    actor,\n                });\n            }\n            else if (this.hasEffect('add_actor')) {\n                this.fireEvent('add_actor', {\n                    actor,\n                });\n            }\n        }\n        return true;\n    }\n    removeActor(actor, withEffects = false) {\n        let hasActor = false;\n        let foundIndex = -1;\n        this.map.actors.forEach((obj, index) => {\n            if (obj === actor) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasActor = true;\n            }\n        });\n        if (!hasActor) {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        if (foundIndex < 0)\n            return false;\n        actor.removeFromMap();\n        this.map.actors.splice(foundIndex, 1); // delete the actor\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (actor.isKey(this.x, this.y) && this.hasEffect('no_key')) {\n                this.fireEvent('no_key', {\n                    key: actor,\n                    actor,\n                });\n            }\n            else if (actor.isPlayer() && this.hasEffect('remove_player')) {\n                this.fireEvent('remove_player', {\n                    actor,\n                    player: actor,\n                });\n            }\n            else if (this.hasEffect('remove_actor')) {\n                this.fireEvent('remove_actor', {\n                    actor,\n                });\n            }\n        }\n        return true;\n    }\n    hasFx() {\n        return !!(this.flags.cell & Flags.Cell.HAS_FX);\n    }\n    get fx() {\n        return this.map.fxAt(this.x, this.y);\n    }\n    _addFx(_fx) {\n        this.setCellFlag(Flags.Cell.HAS_FX);\n        this.needsRedraw = true;\n    }\n    _removeFx(_fx) {\n        if (!this.fx) {\n            this.clearCellFlag(Flags.Cell.HAS_FX);\n        }\n        this.needsRedraw = true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        if (this.hasActor()) {\n            const actor = this.map.actorAt(this.x, this.y);\n            if (actor && actor.sprite.ch)\n                return actor.sprite.ch;\n        }\n        if (this.hasItem()) {\n            const item = this.map.itemAt(this.x, this.y);\n            if (item && item.sprite.ch)\n                return item.sprite.ch;\n        }\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n    drawStatus(buffer, bounds) {\n        const lines = buffer.wrapText(bounds.x + 1, bounds.y, bounds.width - 1, this.getName(), 'cellStatusName');\n        return lines;\n    }\n    toString() {\n        return `Cell @ ${this.x},${this.y}`;\n    }\n}\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile, _opts) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts) {\n        const cell = this.map.cell(x, y);\n        return cell.setTile(tile, opts);\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // // Bookkeeping for fire, pressure plates and key-activated tiles.\n        // for (let x = 0; x < this.map.width; ++x) {\n        //     for (let y = 0; y < this.map.height; ++y) {\n        //         const cell = this.map.cell(x, y);\n        //         if (\n        //             !cell.hasCellFlag(\n        //                 Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM\n        //             ) &&\n        //             cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)\n        //         ) {\n        //             cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n        //         }\n        //     }\n        // }\n        return true;\n    }\n}\n","// import * as GWU from 'gw-utils';\nimport { MapLayer } from './mapLayer';\nexport class ActorLayer extends MapLayer {\n    constructor(map, name = 'actor') {\n        super(map, name);\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class ItemLayer extends MapLayer {\n    constructor(map, name = 'item') {\n        super(map, name);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            cell.fireEvent(event, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nexport class BasicDrawer {\n    isAnyKindOfVisible(_cell) {\n        return true;\n    }\n    drawInto(dest, map, opts = {}) {\n        const buffer = dest instanceof GWU.buffer.Buffer ? dest : dest.buffer;\n        const offsetX = opts.offsetX || 0;\n        const offsetY = opts.offsetY || 0;\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                if (map.hasXY(x + offsetX, y + offsetY)) {\n                    const cell = map.cell(x + offsetX, y + offsetY);\n                    this.drawCell(mixer, cell, opts.fov);\n                    buffer.drawSprite(x, y, mixer);\n                }\n            }\n        }\n    }\n    drawCell(dest, cell, fov) {\n        dest.blackOut();\n        // const isVisible = fov ? fov.isAnyKindOfVisible(cell.x, cell.y) : true;\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (cell.needsRedraw || needSnapshot) {\n            this.getAppearance(dest, cell);\n            cell.putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            cell.getSnapshot(dest);\n        }\n        this.applyLight(dest, cell, fov);\n        if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT |\n            Flags.Entity.L_LIST_IN_SIDEBAR, true)) {\n            [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n        }\n        return true;\n    }\n    // getCellAppearance(cell: CellType, dest: GWU.sprite.Mixer) {\n    //     dest.blackOut();\n    //     const isVisible = true; // this.fov.isAnyKindOfVisible(x, y);\n    //     const isRevealed = true; // this.fov.isRevealed(x, y);\n    //     const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     if (needSnapshot || (cell.needsRedraw && isVisible)) {\n    //         this.layers.forEach((layer) => layer.putAppearance(dest, cell));\n    //         if (dest.dances) {\n    //             cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n    //         } else {\n    //             cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n    //         }\n    //         dest.bake();\n    //         cell.putSnapshot(dest);\n    //         cell.needsRedraw = false;\n    //         cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     } else {\n    //         cell.getSnapshot(dest);\n    //     }\n    //     if (isVisible) {\n    //         const light = this.light.getLight(cell.x, cell.y);\n    //         dest.multiply(light);\n    //     } else if (isRevealed) {\n    //         dest.scale(50);\n    //     } else {\n    //         dest.blackOut();\n    //     }\n    //     if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n    //         [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n    //     }\n    // }\n    getAppearance(dest, cell) {\n        const ground = cell.tiles[Flags.Depth.GROUND];\n        const surface = cell.tiles[Flags.Depth.SURFACE];\n        const liquid = cell.tiles[Flags.Depth.LIQUID];\n        const gas = cell.tiles[Flags.Depth.GAS]; // How to get volume!?!?!?!\n        dest.drawSprite(ground.sprite);\n        if (surface) {\n            dest.drawSprite(surface.sprite);\n        }\n        if (liquid) {\n            dest.drawSprite(liquid.sprite);\n        }\n        if (cell.hasItem()) {\n            const item = cell.map.itemAt(cell.x, cell.y);\n            if (item)\n                item.drawInto(dest);\n        }\n        if (cell.hasActor()) {\n            const actor = cell.map.actorAt(cell.x, cell.y);\n            if (actor)\n                actor.drawInto(dest);\n        }\n        if (gas) {\n            const opacity = GWU.rng.cosmetic.number(50) + 25;\n            dest.drawSprite(gas.sprite, opacity);\n        }\n        if (cell.hasFx()) {\n            const fx = cell.map.fxAt(cell.x, cell.y);\n            if (fx)\n                dest.drawSprite(fx.sprite);\n        }\n        if (dest.dances) {\n            cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        else {\n            cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        dest.bake();\n    }\n    applyLight(dest, cell, fov) {\n        const isVisible = !fov || fov.isAnyKindOfVisible(cell.x, cell.y);\n        const isRevealed = !fov || fov.isRevealed(cell.x, cell.y);\n        const light = cell.map.light.getLight(cell.x, cell.y);\n        dest.multiply(light);\n        // TODO - is Clairy\n        // TODO - is Telepathy\n        if (fov && fov.isCursor(cell.x, cell.y)) {\n            dest.invert();\n        }\n        else if (!isVisible) {\n            if (isRevealed) {\n                dest.scale(50);\n            }\n            else {\n                dest.blackOut();\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\n// import { CellMemory } from './cellMemory';\nimport * as Effect from '../effect';\nimport { BasicDrawer } from '../draw/basic';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        // _memory: GWU.grid.Grid<CellMemory>;\n        this.machineCount = 0;\n        this._seed = 0;\n        this.rng = GWU.rng.random;\n        this.id = 'MAP';\n        this.actors = [];\n        this.items = [];\n        this.fx = [];\n        this._animations = [];\n        this._queuedEvents = [];\n        this.width = width;\n        this.height = height;\n        this.flags = { map: 0 };\n        this.layers = [];\n        if (opts.id) {\n            this.id = opts.id;\n        }\n        this.drawer = opts.drawer || new BasicDrawer();\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        // this._memory = GWU.grid.make(\n        //     width,\n        //     height,\n        //     (x, y) => new CellMemory(this, x, y)\n        // );\n        if (opts.seed) {\n            this._seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        // this.fov = new GWU.fov.FovSystem(this, opts);\n        this.properties = {};\n        this.initLayers();\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(v) {\n        this._seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    // memory(x: number, y: number): CellMemory {\n    //     return this._memory[x][y];\n    // }\n    // knowledge(x: number, y: number): CellInfoType {\n    //     if (this.fov.isAnyKindOfVisible(x, y)) return this.cell(x,y);\n    //     return this._memory[x][y];\n    // }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n        this.addLayer(Flags.Depth.ITEM, new Layer.ItemLayer(this, 'item'));\n        this.addLayer(Flags.Depth.ACTOR, new Layer.ActorLayer(this, 'actor'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // items\n    hasItem(x, y) {\n        return this.cell(x, y).hasItem();\n    }\n    itemAt(x, y) {\n        return this.items.find((i) => i.isAt(x, y)) || null;\n    }\n    eachItem(cb) {\n        this.items.forEach(cb);\n    }\n    addItem(x, y, item, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        return cell.addItem(item, fireEffects);\n    }\n    addItemNear(x, y, item, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this.cell(i, j);\n            if (cell.hasItem())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (item.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        const cell = this.cell(loc[0], loc[1]);\n        return cell.addItem(item, fireEffects);\n    }\n    removeItem(item, fireEffects = false) {\n        const cell = this.cell(item.x, item.y);\n        return cell.removeItem(item, fireEffects);\n    }\n    //  moveItem(item: Item, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = item.x;\n    //     const oldY = item.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[item.depth] as Layer.ItemLayer;\n    //     if (!( layer.removeItem(item))) return false;\n    //     if (!( this.addItem(x, y, item))) {\n    //         layer.forceItem(item.x, item.y, item);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (item.lastSeen) {\n    //     //         this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n    //     //         this.clearCellFlag(\n    //     //             item.lastSeen.x,\n    //     //             item.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         item.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.item = item;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     item.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.actors.find((a) => a.isAt(x, y)) || null;\n    }\n    eachActor(cb) {\n        this.actors.forEach(cb);\n    }\n    addActor(x, y, actor, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        return cell.addActor(actor, fireEffects);\n    }\n    addActorNear(x, y, actor, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this.cell(i, j);\n            if (cell.hasActor())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        const cell = this.cell(loc[0], loc[1]);\n        return cell.addActor(actor, fireEffects);\n    }\n    removeActor(actor, fireEffects = false) {\n        const cell = this.cell(actor.x, actor.y);\n        return cell.removeActor(actor, fireEffects);\n    }\n    //  moveActor(actor: Actor, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = actor.x;\n    //     const oldY = actor.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[actor.depth] as Layer.ActorLayer;\n    //     if (!( layer.removeActor(actor))) return false;\n    //     if (!( layer.addActor(x, y, actor))) {\n    //         layer.forceActor(actor.x, actor.y, actor);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (actor.lastSeen) {\n    //     //         this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(\n    //     //             actor\n    //     //         );\n    //     //         this.clearCellFlag(\n    //     //             actor.lastSeen.x,\n    //     //             actor.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         actor.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.actor = actor;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     actor.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    fxAt(x, y) {\n        return this.fx.find((i) => i.isAt(x, y)) || null;\n    }\n    eachFx(cb) {\n        this.fx.forEach(cb);\n    }\n    addFx(x, y, fx) {\n        const cell = this.get(x, y);\n        if (!cell)\n            return false;\n        fx.x = x;\n        fx.y = y;\n        cell._addFx(fx);\n        this.fx.push(fx);\n        return true;\n    }\n    moveFx(fx, x, y) {\n        const current = this.get(fx.x, fx.y);\n        const updated = this.get(x, y);\n        if (!updated)\n            return false;\n        current._removeFx(fx);\n        fx.x = x;\n        fx.y = y;\n        updated._addFx(fx);\n        return true;\n    }\n    removeFx(fx) {\n        const cell = this.get(fx.x, fx.y);\n        GWU.arrayDelete(this.fx, fx);\n        if (cell) {\n            cell._removeFx(fx);\n        }\n        return true;\n    }\n    // Information\n    // isVisible(x: number, y: number): boolean {\n    //     return this.fov.isAnyKindOfVisible(x, y);\n    // }\n    hasKey(x, y) {\n        const actor = this.actorAt(x, y);\n        if (actor && actor.isKey(x, y))\n            return true;\n        const item = this.itemAt(x, y);\n        if (item && item.isKey(x, y))\n            return true;\n        return false;\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const getCh = (cell) => {\n            return cell.dump();\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    get needsRedraw() {\n        return this.hasMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v)\n            this.setMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n        else\n            this.clearMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    hasEntityFlag(x, y, flag) {\n        return this.cell(x, y).hasEntityFlag(flag);\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        // this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile\n    // useMemory = false\n    ) {\n        return this.cell(x, y).hasTile(tile);\n        // if (!useMemory) return this.cell(x, y).hasTile(tile);\n        // return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            const name = tile;\n            tile = TILE.get(name);\n            if (!tile)\n                throw new Error('Failed to find tile: ' + name);\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clearTiles(tile);\n    }\n    tick(dt) {\n        let didSomething = false;\n        this._animations.forEach((a) => {\n            didSomething = a.tick(dt) || didSomething;\n        });\n        this._animations = this._animations.filter((a) => a.isRunning());\n        didSomething = this.fireAll('tick') || didSomething;\n        for (let layer of this.layers) {\n            if (layer && layer.tick(dt)) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cell(x, y));\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.actors = src.actors.slice();\n        this.items = src.items.slice();\n        this.flags.map = src.flags.map;\n        // this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.machineCount = src.machineCount;\n        this._seed = src._seed;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    queueEvent(x, y, event, ctx) {\n        this._queuedEvents.push({ event, x, y, ctx });\n    }\n    fireQueuedEvents() {\n        for (let i = 0; i < this._queuedEvents.length; ++i) {\n            const info = this._queuedEvents[i];\n            const cell = this.cell(info.x, info.y);\n            cell.fireEvent(info.event, info.ctx);\n        }\n        this._queuedEvents.length = 0;\n    }\n    fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.fireEvent(event, ctx);\n    }\n    fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        willFire.forEach((w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    cell.fireEvent(event, {\n                        force: true,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        cell.fireEvent('machine', ctx) || didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    // DRAW\n    drawInto(dest, opts) {\n        this.drawer.drawInto(dest, this, opts);\n    }\n    getAppearanceAt(x, y, dest) {\n        const cell = this.cell(x, y);\n        return this.drawer.drawCell(dest, cell);\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n    // redrawCell(x: number, y: number): void {\n    //     // if (clearMemory) {\n    //     //     this.clearMemory(x, y);\n    //     // }\n    //     this.cell(x, y).needsRedraw = true;\n    // }\n    // Animator\n    addAnimation(a) {\n        this._animations.push(a);\n    }\n    removeAnimation(a) {\n        GWU.arrayDelete(this._animations, a);\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Map } from '../map/map';\nimport * as Flags from '../flags';\nexport class Memory extends Map {\n    constructor(map) {\n        super(map.width, map.height);\n        // this.actor = actor;\n        this.source = map;\n        this.cells.forEach((c) => c.setCellFlag(Flags.Cell.STABLE_MEMORY));\n    }\n    cell(x, y) {\n        let cell = this.cells[x][y];\n        if (!cell.hasCellFlag(Flags.Cell.STABLE_MEMORY)) {\n            cell = this.source.cell(x, y);\n        }\n        return cell;\n    }\n    memory(x, y) {\n        return this.cells[x][y];\n    }\n    isMemory(x, y) {\n        return this.cells[x][y].hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    setTile() {\n        throw new Error('Cannot set tiles on memory.');\n    }\n    addItem() {\n        throw new Error('Cannot add Items to memory!');\n    }\n    removeItem() {\n        throw new Error('Cannot remove Items from memory!');\n    }\n    //  moveItem(): boolean {\n    //     throw new Error('Cannot move Items on memory!');\n    // }\n    eachItem(cb) {\n        this.source.eachItem((i) => {\n            if (!this.isMemory(i.x, i.y)) {\n                cb(i);\n                const i2 = this.items.find((other) => other.id == i.id);\n                if (i2) {\n                    const mem = this.cell(i2.x, i2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ITEM | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.items, i2);\n                }\n            }\n        });\n        this.items.forEach(cb);\n    }\n    addActor() {\n        throw new Error('Cannot add Actors to memory!');\n    }\n    removeActor() {\n        throw new Error('Cannot remove Actors from memory!');\n    }\n    //  moveActor(): boolean {\n    //     throw new Error('Cannot move Actors on memory!');\n    // }\n    eachActor(cb) {\n        this.source.eachActor((a) => {\n            if (!this.isMemory(a.x, a.y)) {\n                cb(a);\n                const a2 = this.actors.find((other) => other.id == a.id);\n                if (a2) {\n                    const mem = this.cell(a2.x, a2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.actors, a2);\n                }\n            }\n        });\n        this.actors.forEach(cb);\n    }\n    storeMemory(x, y) {\n        const mem = this.cells[x][y];\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        const cell = this.source.cell(x, y);\n        mem.copy(cell);\n        mem.setCellFlag(Flags.Cell.STABLE_MEMORY);\n        mem.map = this; // so that drawing this cell results in using the right map\n        let newList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR);\n        // add any current items+actors\n        if (cell.hasItem()) {\n            const item = this.source.itemAt(x, y);\n            if (item) {\n                const copy = item.clone();\n                copy._map = this; // memory is map\n                this.items.push(copy);\n                if (copy.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (cell.hasActor()) {\n            const actor = this.source.actorAt(x, y);\n            if (actor) {\n                const copy = actor.clone();\n                copy._map = this; // memory is map\n                this.actors.push(copy);\n                if (copy.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        this.light.setLight(x, y, this.source.light.getLight(x, y));\n    }\n    forget(x, y) {\n        const mem = this.memory(x, y);\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        mem.clearCellFlag(Flags.Cell.STABLE_MEMORY);\n        let newList = this.source\n            .cell(x, y)\n            .hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n    }\n    onFovChange(x, y, isVisible) {\n        if (!isVisible) {\n            this.storeMemory(x, y);\n        }\n        else {\n            this.forget(x, y);\n        }\n    }\n}\n","import { Memory } from './memory';\nconst cache = {};\nexport function store(actor, map, memory) {\n    let actorMemory = cache[actor.id];\n    if (!actorMemory) {\n        cache[actor.id] = actorMemory = {};\n    }\n    actorMemory[map.id] = memory;\n}\nexport function get(actor, map) {\n    let actorMemory = cache[actor.id];\n    if (actorMemory) {\n        const memory = actorMemory[map.id];\n        if (memory)\n            return memory;\n    }\n    return new Memory(map);\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Actor } from './actor';\nimport * as Memory from '../memory';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n        this.flags = {\n            actor: Flags.Actor.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.vision = {};\n        if (opts.flags) {\n            this.flags.actor = GWU.flag.from(Flags.Actor, this.flags.actor, opts.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, opts.flags);\n        }\n        if (opts.vision) {\n            this.vision.normal = opts.vision;\n        }\n        this.stats = opts.stats || {};\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n        Object.assign(actor.flags, this.flags);\n        if (options.fov) {\n            actor.fov = options.fov;\n        }\n        if (options.memory) {\n            actor.memory = options.memory;\n        }\n        if (this.vision.normal) {\n            actor.visionDistance = this.vision.normal;\n        }\n        actor.stats.init(this.stats);\n    }\n    addToMap(actor, map) {\n        super.addToMap(actor, map);\n        if (this.hasActorFlag(Flags.Actor.HAS_MEMORY)) {\n            actor.memory = Memory.get(actor, map);\n        }\n        if (this.hasActorFlag(Flags.Actor.USES_FOV)) {\n            actor.fov = new GWU.fov.FovSystem(map);\n            actor.fov.follow = actor;\n            if (actor.memory) {\n                actor.fov.callback = actor.memory;\n            }\n        }\n    }\n    removeFromMap(actor) {\n        super.removeFromMap(actor);\n        if (actor._map && actor.memory) {\n            Memory.store(actor, actor._map, actor.memory);\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    canSeeEntity(_actor, _entity) {\n        return true;\n    }\n    isAbleToSee(_actor, _entity) {\n        return true;\n    }\n    isAbleToSense(_actor, _entity) {\n        return true;\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.quantity = other.quantity;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n    getAction(name) {\n        const action = this.kind.actions[name];\n        return action;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n        this.flags = {\n            item: Flags.Item.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.actions = {};\n        if (config.flags) {\n            this.flags.item = GWU.flag.from(Flags.Item, this.flags.item, config.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, config.flags);\n        }\n        if (config.actions) {\n            Object.entries(config.actions).forEach(([key, value]) => {\n                this.actions[key] = value;\n            });\n        }\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n        Object.assign(item.flags, this.flags);\n        item.quantity = options.quantity || 1;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        // fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        // if (this.map.fov.changed) {\n        //     this.fovVersion = this.version;\n        //     this.map.fov.changed = false;\n        // }\n        // if (snap.version !== this.fovVersion) {\n        //     snap.map.fov.copy(this.map.fov);\n        // }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        // if (snap.version < this.fovVersion || this.map.fov.changed) {\n        //     this.map.fov.copy(snap.map.fov);\n        //     this.fovVersion = snap.version;\n        // }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import * as GWU from 'gw-utils';\nexport function getCellPathCost(map, x, y) {\n    const cell = map.cell(x, y);\n    if (cell.blocksMove())\n        return GWU.path.OBSTRUCTION;\n    if (cell.blocksPathing())\n        return GWU.path.FORBIDDEN;\n    if (cell.hasActor())\n        return 10;\n    return 1;\n}\nexport function fillCostMap(map, costMap) {\n    costMap.update((_v, x, y) => getCellPathCost(map, x, y));\n}\nexport function getPathBetween(map, x0, y0, x1, y1, options = {}) {\n    const distanceMap = GWU.grid.alloc(map.width, map.height);\n    const costMap = GWU.grid.alloc(map.width, map.height);\n    fillCostMap(map, costMap);\n    GWU.path.calculateDistances(distanceMap, x0, y0, costMap, options.eightWays, GWU.xy.straightDistanceBetween(x0, y0, x1, y1) + 1);\n    const path = GWU.path.getPath(distanceMap, x1, y1, (x, y) => map.cell(x, y).blocksMove(), options.eightWays);\n    GWU.grid.free(costMap);\n    GWU.grid.free(distanceMap);\n    return path;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    spawn(map, x = -1, y = -1, opts = {}) {\n        var _a;\n        opts.canSpawn = opts.canSpawn || GWU.TRUE;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_a = opts.machine) !== null && _a !== void 0 ? _a : 0;\n        const leader = this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addLeader(leader, map, x, y, opts)) {\n            return null;\n        }\n        return leader;\n    }\n    _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        entries.forEach(([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                this._spawnMember(kindId, map, leader, opts);\n            }\n        });\n        return count;\n    }\n    _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1, -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addMember(member, map, x, y, leader, opts)) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canSpawn(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n","export const actions = {};\nexport function install(name, fn) {\n    actions[name] = fn;\n}\nexport function get(name) {\n    return actions[name];\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\n// export class SpriteFX extends FX {\n//     sprite: GWU.sprite.SpriteConfig;\n//     stepCount: number;\n//     x: number;\n//     y: number;\n//     constructor(\n//         map: MapType,\n//         sprite: string | GWU.sprite.SpriteConfig,\n//         x: number,\n//         y: number,\n//         opts: SpriteFxOptions = {}\n//     ) {\n//         const count = opts.blink || 1;\n//         const duration = opts.duration || 1000;\n//         opts.speed = opts.speed || duration / (2 * count - 1);\n//         super(map, opts);\n//         if (typeof sprite === 'string') {\n//             const name = sprite;\n//             sprite = GWU.sprite.sprites[sprite];\n//             if (!sprite) throw new Error('Cannot find sprite! ' + name);\n//         }\n//         this.sprite = sprite;\n//         this.x = x || 0;\n//         this.y = y || 0;\n//         this.stepCount = 2 * count - 1;\n//     }\n//     start() {\n//         this.map.addFx(this.x, this.y, this.sprite);\n//         return super.start();\n//     }\n//     step() {\n//         --this.stepCount;\n//         if (this.stepCount <= 0) return this.stop();\n//         if (this.stepCount % 2 == 0) {\n//             this.map.removeFx(this);\n//         } else {\n//             this.map.addFx(this.x, this.y, this);\n//         }\n//     }\n//     stop(result?: any) {\n//         this.map.removeFx(this);\n//         return super.stop(result);\n//     }\n//     moveDir(dx: number, dy: number) {\n//         return this.moveTo(this.x + dx, this.y + dy);\n//     }\n//     moveTo(x: number, y: number) {\n//         this.map.moveFx(x, y, this);\n//         return true;\n//     }\n// }\nexport async function flashSprite(map, x, y, sprite, duration = 100, count = 1, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ visible: true })\n        .to({ visible: false })\n        .repeat(count)\n        .repeatDelay(duration)\n        .duration(duration)\n        .onUpdate((obj) => {\n        if (obj.visible) {\n            map.addFx(x, y, entity);\n        }\n        else {\n            map.removeFx(entity);\n        }\n    });\n    // realTime\n    animator = animator || GWU.io.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nGWU.sprite.install('bump', 'white', 50);\nexport async function hit(map, target, sprite, duration, animator) {\n    sprite = sprite || 'hit';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('hit', 'red', 50);\nexport async function miss(map, target, sprite, duration, animator) {\n    sprite = sprite || 'miss';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('miss', 'green', 50);\nexport async function fadeInOut(map, x, y, sprite, duration = 100, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite).clone();\n    }\n    else {\n        sprite = GWU.sprite.make(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ opacity: 0 })\n        .to({ opacity: 100 })\n        .repeat(2)\n        .yoyo(true)\n        .duration(Math.floor(duration / 2))\n        .onUpdate((obj) => {\n        entity.sprite.opacity = obj.opacity;\n        map.cell(x, y).needsRedraw = true; // we changed the sprite so redraw\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n    });\n    // realTime\n    animator = animator || GWU.io.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport async function moveSprite(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    const from = { x: GWU.xy.x(source), y: GWU.xy.y(source) };\n    map.addFx(from.x, from.y, entity);\n    let duration = opts.duration ||\n        Math.ceil(16 * (GWU.xy.maxAxisFromTo(source, target) / (opts.speed || 8)));\n    if (GWU.xy.isLoc(target)) {\n        target = { x: target[0], y: target[1] };\n    }\n    const tween = GWU.tween\n        .make(from)\n        .to(target)\n        .duration(duration)\n        .onUpdate((vals) => {\n        // tweens dont update every step, so...\n        // draw line from current pos to vals pos\n        // check each step for blocking...\n        // end at either vals or last blocking spot\n        const dest = { x: entity.x, y: entity.y };\n        const ok = GWU.xy.forLineBetween(dest.x, dest.y, vals.x, vals.y, (x, y) => {\n            if (opts.stepFn) {\n                if (opts.stepFn(x, y)) {\n                    if (!opts.stopBeforeWalls) {\n                        dest.x = x;\n                        dest.y = y;\n                    }\n                    return false;\n                }\n            }\n            else if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (!opts.stopBeforeWalls) {\n                    dest.x = x;\n                    dest.y = y;\n                }\n                return false;\n            }\n            dest.x = x;\n            dest.y = y;\n        });\n        map.moveFx(entity, dest.x, dest.y);\n        if (!ok) {\n            tween.stop();\n        }\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n        return entity;\n    });\n    const animator = opts.animator || map;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport function bolt(map, source, target, sprite, opts = {}) {\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport async function projectile(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    if (sprite.ch && sprite.ch.length == 4) {\n        const dir = GWU.xy.dirFromTo(source, target);\n        let index = 0;\n        if (dir[0] && dir[1]) {\n            index = 2;\n            if (dir[0] != dir[1]) {\n                // remember up is -y\n                index = 3;\n            }\n        }\n        else if (dir[0]) {\n            index = 1;\n        }\n        const ch = sprite.ch[index];\n        sprite = GWU.sprite.make(ch, sprite.fg, sprite.bg);\n    }\n    else if (sprite.ch && sprite.ch.length !== 1) {\n        throw new Error('projectile requires 4 chars - vert,horiz,diag-left,diag-right (e.g: \"|-\\\\/\")');\n    }\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport function beam(map, from, to, sprite, opts = {}) {\n    opts.fade = opts.fade || 100;\n    if (opts.stopAtWalls === undefined)\n        opts.stopAtWalls = true;\n    const line = [];\n    GWU.xy.forLineFromTo(from, to, (x, y) => {\n        if (!map.hasXY(x, y))\n            return false;\n        if (opts.stepFn && opts.stepFn(x, y))\n            return false;\n        if (opts.stopAtWalls || opts.stopBeforeWalls) {\n            if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (opts.stopBeforeWalls)\n                    return false;\n                line.push([x, y]);\n                return false;\n            }\n        }\n        line.push([x, y]);\n        return true;\n    });\n    const duration = opts.duration || Math.ceil(16 * (line.length / (opts.speed || 8)));\n    const animator = opts.animator || map;\n    const promises = [];\n    let lastIndex = -1;\n    const tween = GWU.tween\n        .make({ index: 0 })\n        .to({ index: line.length - 1 })\n        .duration(duration)\n        .onUpdate((vals) => {\n        while (lastIndex < vals.index) {\n            ++lastIndex;\n            const loc = line[lastIndex] || [-1, -1];\n            promises.push(fadeInOut(map, loc[0], loc[1], sprite, opts.fade, animator));\n        }\n    })\n        .onFinish(async () => {\n        await Promise.all(promises);\n        const loc = line[line.length - 1];\n        return { x: loc[0], y: loc[1] };\n    });\n    animator.addAnimation(tween);\n    return tween.start();\n}\nfunction isInShape(shape, cx, cy, allowCenter, x, y) {\n    const sx = Math.abs(x - cx);\n    const sy = Math.abs(y - cy);\n    if (sx == 0 && sy == 0 && !allowCenter)\n        return false;\n    switch (shape) {\n        case '+':\n            return sx == 0 || sy == 0;\n        case 'x':\n        case 'X':\n            return sx == sy;\n        case '*':\n            return sx == 0 || sy == 0 || sx == sy;\n        default:\n            return true;\n    }\n}\nfunction checkExplosionOpts(opts) {\n    opts.speed = opts.speed || 2;\n    opts.fade = opts.fade || 100;\n    opts.shape = opts.shape || 'o';\n    if (opts.center === undefined) {\n        opts.center = true;\n    }\n}\nexport function explosion(map, x, y, radius, sprite, opts = {}) {\n    checkExplosionOpts(opts);\n    opts.animator = opts.animator || map;\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const grid = GWU.grid.alloc(map.width, map.height);\n    const fov = new GWU.fov.FOV({\n        isBlocked(x, y) {\n            return map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE);\n        },\n        hasXY(x, y) {\n            return map.hasXY(x, y);\n        },\n    });\n    fov.calculate(x, y, radius, (x1, y1) => {\n        grid[x1][y1] = 1;\n    });\n    const duration = opts.duration || 32 * (radius / opts.speed);\n    const promises = [];\n    const tween = GWU.tween\n        .make({ r: 0 })\n        .to({ r: radius })\n        .duration(duration)\n        .onUpdate((vals) => {\n        const minX = Math.max(0, x - vals.r);\n        const minY = Math.max(0, y - vals.r);\n        const maxX = Math.min(map.width - 1, x + vals.r);\n        const maxY = Math.min(map.height - 1, y + vals.r);\n        for (let x1 = minX; x1 <= maxX; ++x1) {\n            for (let y1 = minY; y1 <= maxY; ++y1) {\n                if (grid[x1][y1] &&\n                    GWU.xy.distanceBetween(x, y, x1, y1) <= vals.r) {\n                    grid[x1][y1] = 0;\n                    if (isInShape(opts.shape, x, y, opts.center, x1, y1)) {\n                        promises.push(fadeInOut(map, x1, y1, sprite, opts.fade, opts.animator));\n                    }\n                }\n            }\n        }\n    })\n        .onFinish(async (_obj, success) => {\n        GWU.grid.free(grid);\n        await Promise.all(promises);\n        return success;\n    });\n    opts.animator.addAnimation(tween);\n    return tween.start();\n}\n/*\nexport function explosionFor(\n    map: MapType,\n    grid: GWU.grid.NumGrid,\n    x: number,\n    y: number,\n    radius: number,\n    sprite: string | GWU.sprite.SpriteConfig,\n    opts: ExplosionOptions = {}\n) {\n    checkExplosionOpts(opts);\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    const animation = new ExplosionFX(\n        map,\n        grid,\n        x,\n        y,\n        radius,\n        sprite,\n        opts.speed,\n        opts.fade,\n        opts.shape,\n        opts.center,\n        opts.stepFn\n    );\n    return opts.playFn!(animation);\n}\n*/\n","import * as GWU from 'gw-utils';\nimport { install } from './action';\nimport * as FX from '../fx';\n// COMMANDS\n// this === GAME\nexport async function moveDir(actor, e) {\n    const dir = e.dir;\n    if (!actor.map || !dir)\n        return false;\n    const newPos = GWU.xy.add(actor, dir);\n    const cell = actor.map.cell(newPos.x, newPos.y);\n    if (!cell)\n        return false;\n    if (actor.avoidsCell(cell)) {\n        FX.hit(actor.map, newPos, 'hit', 100, this.layer);\n        // todo - should this cost a turn?  Or part of one?\n        return false;\n    }\n    actor.map.removeActor(actor);\n    actor.map.addActor(newPos.x, newPos.y, actor);\n    return true;\n}\ninstall('moveDir', moveDir);\n","import * as GWU from 'gw-utils';\nimport { install } from './action';\nexport async function pickup(actor, _ev) {\n    if (!actor.map)\n        return false;\n    const item = actor.map.itemAt(actor.x, actor.y);\n    if (!item) {\n        GWU.message.addAt(actor.x, actor.y, 'Nothing to pickup.');\n        return false;\n    }\n    const myItem = item;\n    if (actor.avoidsItem(myItem))\n        return false;\n    let action = myItem.getAction('pickup');\n    if (action === false) {\n        GWU.message.addAt(actor.x, actor.y, 'You cannot pickup %{the.item}.', {\n            item,\n        });\n        return false;\n    }\n    else if (typeof action === 'function') {\n        // You have to do everything\n        return action.call(this, actor, { item: myItem });\n    }\n    // logs error messages\n    if (!actor.canAddItem(myItem)) {\n        return false;\n    }\n    if (!actor.map.removeItem(myItem)) {\n        return false;\n    }\n    actor.addItem(myItem);\n    return true;\n}\ninstall('pickup', pickup);\n","/*\n    Attributes\n    ========================\n\n    To configure attributes, set the defaults:\n\n    Attribute.install(')\n\n    const attr = new Attributes(10);\n\n    attr.set('str', 10);\n    attr.set('dex', 10);\n    ...\n    attr.set('chr', 10);\n\n    // to get the current value\n    attr.get('str');\n\n    // To raise an attribute permanently\n    attr.gain('chr', 1);\n\n    // To raise an attribute temporarily\n    attr.gain('chr', 1, false);\n\n    // To lower an attribute permanently\n    attr.drain('chr', 1, true);\n\n    // to lower an attribute temporarily\n    attr.drain('chr', 1);\n\n    // to restore (remove) all temporary changes\n    attr.restore();\n\n    // to add a temporary change that can be removed by itself\n    attr.addBonus('str', 1);\n\n    // to remove the bonus\n    attr.clearBonus('str', 1);\n\n    // adjustments (bonuses) are also possible via:\n    attr.adjust('str', { bonus: 1 });\n\n    // But adjustments can also set the\n    attr.adjust('str', { fixed: 14 });      // temporarily sets base\n    attr.adjust('str', { base: 21 });       // resets the base\n    attr.adjust('str', { restore: true });  // removes all bonuses/penalties\n    attr.adjust('str', { min: 10 });        // limits value\n    attr.adjust('str', { max: 30 });        // limits value\n    attr.adjust('str', { sustain: true });  // turns off lowering values\n*/\nexport class Attributes {\n    constructor(baseValues) {\n        this._base = {};\n        this._max = {};\n        this._bonus = {};\n        this._sustain = {};\n        this._value = {};\n        this.changed = null;\n        this.init(baseValues);\n    }\n    init(baseValues) {\n        for (let k in attributes) {\n            const v = typeof baseValues === 'number' ? baseValues : attributes[k];\n            this.set(k, v);\n        }\n        if (typeof baseValues !== 'number') {\n            for (let k in baseValues) {\n                this.set(k, baseValues[k]);\n            }\n        }\n    }\n    forEach(fn) {\n        Object.keys(attributes).forEach((k) => fn(this.get(k)));\n    }\n    // modifier(name: string) {\n    //     return Math.floor((this.get(name) - 10) / 2);\n    // }\n    get(name) {\n        return this._value[name] || 0;\n    }\n    set(name, value = 0) {\n        this._value[name] = value;\n        this._base[name] = value;\n        this._max[name] = value;\n        this._bonus[name] = [];\n        return value;\n    }\n    base(name) {\n        return this._base[name] || 0;\n    }\n    max(name) {\n        return this._max[name] || 0;\n    }\n    sustain(name) {\n        return this._sustain[name] || false;\n    }\n    gain(name, delta, raiseMax = true) {\n        if (delta < 0 && this._sustain[name])\n            return 0;\n        this._base[name] += delta;\n        if (raiseMax && this._base[name] > this._max[name]) {\n            this._max[name] = this._base[name];\n        }\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    drain(name, loss, lowerMax = false) {\n        if (loss < 0)\n            loss = -loss;\n        const changed = this.gain(name, -loss, false);\n        if (changed && lowerMax) {\n            this._max[name] = this._base[name];\n        }\n        return changed;\n    }\n    restore(name) {\n        this._base[name] = this._max[name];\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    addBonus(name, bonus) {\n        return this._addBonus(name, { bonus });\n    }\n    _addBonus(name, bonus) {\n        if (typeof bonus === 'number')\n            bonus = { bonus };\n        if (this._value[name] === undefined) {\n            this.set(name, 0);\n        }\n        this._bonus[name].push(bonus);\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    clearBonus(name, bonus) {\n        return this._clearBonus(name, { bonus });\n    }\n    _clearBonus(name, bonus) {\n        if (typeof bonus === 'number')\n            bonus = { bonus };\n        let arr = this._bonus[name] || [];\n        let key = JSON.stringify(bonus);\n        let index = arr.findIndex((o) => {\n            return JSON.stringify(o) == key;\n        });\n        if (index > -1) {\n            arr.splice(index, 1);\n            let old = this.get(name);\n            return this._calcValue(name) - old;\n        }\n        return 0;\n    }\n    _calcValue(name) {\n        let allAdjustments = {};\n        this._bonus[name].forEach((adj) => this._applyAdjustment(allAdjustments, adj));\n        this._sustain[name] = allAdjustments.sustain || false;\n        let value = this._base[name] || 0;\n        if (allAdjustments.fixed !== undefined) {\n            value = allAdjustments.fixed;\n        }\n        else {\n            value += allAdjustments.bonus || 0;\n            if (allAdjustments.min !== undefined) {\n                value = Math.max(allAdjustments.min, value);\n            }\n            if (allAdjustments.max !== undefined) {\n                value = Math.min(allAdjustments.max, value);\n            }\n        }\n        return (this._value[name] = value);\n    }\n    adjust(name, adj) {\n        let delta = undefined;\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        if (adj.base) {\n            delta = this.gain(name, adj.base);\n        }\n        else if (adj.restore) {\n            delta = this.restore(name);\n            if (delta == 0)\n                delta = undefined;\n        }\n        else {\n            delta = this._addBonus(name, adj);\n        }\n        if (this.changed && delta !== undefined)\n            this.changed(this, name);\n        return delta;\n    }\n    clearAdjustment(name, adj) {\n        let delta = undefined;\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        if (adj.base) {\n            delta = this.drain(name, adj.base, true);\n        }\n        else if (adj.restore) {\n            // do nothing...\n        }\n        else {\n            delta = this._clearBonus(name, adj);\n        }\n        if (this.changed && delta !== undefined)\n            this.changed(this, name);\n        return delta;\n    }\n    _applyAdjustment(total, opts) {\n        if (opts.bonus) {\n            total.bonus = (total.bonus || 0) + opts.bonus;\n        }\n        if (opts.fixed !== undefined) {\n            total.fixed = Math.max(total.fixed || 0, opts.fixed);\n        }\n        if (opts.min !== undefined) {\n            total.min = Math.max(total.min || 0, opts.min);\n        }\n        if (opts.max !== undefined) {\n            total.max = Math.max(total.max || 0, opts.max);\n        }\n        if (opts.sustain !== undefined) {\n            total.sustain = opts.sustain;\n        }\n    }\n}\nexport const attributes = {};\nexport function installAttribute(attr) {\n    if (typeof attr === 'string') {\n        attributes[attr] = 0;\n        return;\n    }\n    // clear existing\n    Object.keys(attributes).forEach((k) => {\n        delete attributes[k];\n    });\n    Object.assign(attributes, attr);\n}\nexport function makeAttributes(defaults) {\n    return new Attributes(defaults);\n}\n/*\nfunction adjust(being, ...args) {\n    let adj;\n    if (args.length == 1 && typeof args[0] == 'number') {\n        adj = RUT.Attributes.map((key) => {\n            return { name: key, bonus: args[0] };\n        });\n    } else {\n        adj = normalize_adjustment(args);\n    }\n\n    let results = adj.reduce((out, a) => {\n        let delta = undefined;\n        if (a.base) {\n            delta = being.attributes.addBase(a.name, a.base);\n        } else if (a.restore) {\n            delta = being.attributes.restoreBase(a.name);\n            if (delta == 0) delta = undefined;\n        } else {\n            delta = being.attributes.addBonus(a.name, a);\n        }\n        if (delta !== undefined) {\n            out[a.name] = delta;\n        }\n        return out;\n    }, {});\n    being.changed({ attributes: results });\n\n    return results;\n};\n\n function clearAdjustment(being, ...args) {\n    let adj;\n    if (args.length == 1 && typeof args[0] == 'number') {\n        adj = RUT.Attributes.map((key) => {\n            return { name: key, bonus: args[0] };\n        });\n    } else {\n        adj = normalize_adjustment(args);\n    }\n\n    let results = adj.reduce((out, a) => {\n        let delta = 0;\n        delta += being.attributes.clearBonus(a.name, a);\n\n        out[a.name] = delta;\n        return out;\n    }, {});\n    being.changed({ attributes: results });\n    return results;\n};\n\nRUT.Attribute.rollAttributes = function (opts = {}) {\n    let dice = [];\n    let total = 0;\n\n    if (RUT.Calc.isValue(opts)) opts = { value: opts };\n    Object.defaults(opts, RUT.Config.Attribute.rollAttributes);\n\n    let attributes = RUT.Config.Attributes;\n\n    let min_average = Math.max(opts.min_average - 5, 0);\n    let max_average = Math.min(opts.max_average - 5, RUT.Config.ATTRIBUTE_MAX);\n\n    let min_total = min_average * attributes.length;\n    let max_total = max_average * attributes.length;\n\n    do {\n        total = 0;\n        dice = [];\n        for (let i = 0; i < 18; ++i) {\n            dice.push(RUT.RNG.rollDie(3 + (i % 3)));\n            total += dice[i];\n        }\n    } while (total <= min_total || total > max_total);\n\n    let values = attributes.reduce((out, name, i) => {\n        let index = 3 * i;\n        let value = 5 + dice[index] + dice[index + 1] + dice[index + 2];\n        if (opts.value) {\n            value = RUT.Calc.calc(opts.value);\n        } else if (opts[name]) {\n            value = RUT.Calc.calc(opts[name]);\n        }\n        out[name] = value;\n        return out;\n    }, {});\n    return values;\n};\nRUT.Config.Attribute.rollAttributes = { min_average: 11, max_average: 14 };\n*/\n/*\nexport function normalize_adjustment(args: ) {\n    if (args.length == 3) {\n        let opts = args[2];\n        if (RUT.Calc.isValue(opts)) {\n            opts = { bonus: opts };\n        }\n        let name = `${args[0]}.${args[1]}`;\n        return [Object.assign({ name }, opts)];\n    }\n    if (args.length == 2) {\n        let opts = args[1];\n        if (opts === true || opts === false) {\n            opts = { has: opts };\n        } else if (RUT.Calc.isValue(opts)) {\n            opts = { bonus: opts };\n        }\n        return [Object.assign({ name: args[0] }, opts)];\n    }\n\n    let opts = args[0];\n    if (opts.name) {\n        return [opts];\n    }\n    if (opts.attribute) {\n        opts.name = opts.attribute;\n        return [opts];\n    }\n    if (opts.restore) {\n        if (opts.restore == 'all') {\n            return RUT.Attributes.map((a) => {\n                return { name: a, restore: true };\n            });\n        }\n        return [{ name: opts.restore, restore: true }];\n    }\n    if (opts.skill) {\n        opts.name = opts.skill;\n        return [opts];\n    }\n    if (opts.stat) {\n        opts.name = opts.stat;\n        return [opts];\n    }\n    if (opts.save) {\n        opts.name = opts.save;\n        return [opts];\n    }\n    // if (opts.saves) {\n    //   opts.name = opts.saves;\n    //   return [opts];\n    // }\n    if (opts.ability) {\n        opts.name = opts.ability;\n        return [opts];\n    }\n\n    // now we assume that each key is for a separate skill...\n    return Object.keys(opts).reduce((out, key) => {\n        let opt = opts[key];\n        if (key == 'reset' || key == 'restore') {\n            if (typeof opt == 'string') opt = [opt];\n            opt.forEach((a) => {\n                out.push({ name: a, restore: true });\n            });\n        } else {\n            if (typeof opt == 'number' || Array.isArray(opt)) {\n                opt = { bonus: opt };\n            } else if (opt === true || opt === false) {\n                opt = { has: opt };\n            } else if (opt == 'reset' || opt == 'restore') {\n                opt = { restore: true };\n            } else if (opt == 'sustain') {\n                opt = { sustain: true };\n            }\n            out.push(Object.assign({ name: key }, opt));\n        }\n        return out;\n    }, []);\n}\n*/\n","/*\nSkills\n\nSkills generally fall into 2 categories - binary and progressive.\n\n\n// Create a skills object\nconst skills = new Skills();\n\n// set skills\nskills.set('diving', true); // = { has: true, level: 0 }\nskills.set('diving', 10); // = { has: true, level: 10 }\n\nskills.remove('diving'); // {}\n\n// adjustments\nskills.adjust('diving', { bonus: 1 });\nskills.adjust('diving', { disadvantage: true });\nskills.adjust('diving', { advantage: 3 });\nskills.adjust('diving', { fixed: 10 });\nskills.adjust('diving', { critical: 5 });\n\n\n\n\n\n*/\nclass Skill {\n    constructor(name) {\n        this.name = name;\n    }\n    get has() {\n        return this._bool('_has');\n    }\n    get level() {\n        return this._int('_level');\n    }\n    get disadvantage() {\n        return this._bool('_disadvantage');\n    }\n    get advantage() {\n        return this._bool('_advantage');\n    }\n    get fixed() {\n        return this._int('_fixed');\n    }\n    get bonus() {\n        const b = this._int('_bonus') || 0;\n        if (!this._parent)\n            return b;\n        return b + this._parent.bonus;\n    }\n    get succeed() {\n        return this._bool('_succeed');\n    }\n    get fail() {\n        return this._bool('_fail');\n    }\n    set(value) {\n        if (value === false) {\n            this._has = false;\n            this._level = 0;\n        }\n        else {\n            this._has = true;\n            this._level = value === true ? 0 : value;\n        }\n    }\n    _value(name) {\n        if (this[name] !== undefined) {\n            // @ts-ignore\n            return this[name];\n        }\n        if (this._parent) {\n            // @ts-ignore\n            return this._parent._value(name);\n        }\n        return undefined;\n    }\n    _bool(name) {\n        return !!this._value(name);\n    }\n    _int(name) {\n        return this._value(name);\n    }\n    adjust(adj) {\n        Object.entries(adj).forEach(([key, value]) => {\n            key = '_' + key;\n            if (value === undefined)\n                return;\n            if (key === '_fixed') {\n                if (typeof value !== 'number') {\n                    throw new Error('fixed skill adjustment must be a number.');\n                }\n                value = Math.max(value, this._fixed || 0);\n            }\n            else if (key === '_bonus') {\n                if (typeof value !== 'number') {\n                    throw new Error('fixed skill adjustment must be a number.');\n                }\n                value = value + (this._bonus || 0);\n            }\n            // @ts-ignore\n            this[key] = value;\n        });\n    }\n    clear(adj) {\n        Object.keys(adj).forEach((key) => {\n            key = '_' + key;\n            // @ts-ignore\n            if (this[key] !== undefined) {\n                // @ts-ignore\n                this[key] = undefined;\n            }\n        });\n    }\n}\nexport class Skills {\n    constructor(vals = {}) {\n        this._skills = {};\n        Object.entries(vals).forEach(([key, value]) => {\n            this.set(key, value);\n        });\n    }\n    set(name, value) {\n        const s = this.get(name);\n        s.set(value);\n        return s;\n    }\n    get(name) {\n        let s = this._skills[name];\n        if (s)\n            return s;\n        s = this._skills[name] = new Skill(name);\n        const index = name.lastIndexOf('.');\n        if (index > 0) {\n            s._parent = this.get(name.substring(0, index));\n        }\n        else {\n            s.set(false);\n        }\n        return s;\n    }\n    adjust(name, adj) {\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        let s = this.get(name);\n        s.adjust(adj);\n        return s;\n    }\n}\n","// import * as GWM from 'gw-map';\nimport { Actor } from '../actor';\nimport { PlayerKind } from './kind';\nexport class Player extends Actor {\n    constructor(kind) {\n        super(kind);\n    }\n}\nPlayer.default = {\n    ch: '@',\n    fg: 'white',\n    name: 'You',\n};\nexport function make(options = {}) {\n    const kind = new PlayerKind(options);\n    return new Player(kind);\n}\n","import * as Actor from '../actor';\nimport * as Skills from './skill';\nimport * as Attributes from './attribute';\nimport { Player } from './player';\nimport * as Flags from '../flags';\nexport class PlayerKind extends Actor.ActorKind {\n    constructor(opts = {}) {\n        super((() => {\n            if (!opts.sprite) {\n                opts.ch = opts.ch || Player.default.ch;\n                opts.fg = opts.fg || Player.default.fg;\n            }\n            if (!opts.name) {\n                opts.name = Player.default.name;\n            }\n            return opts;\n        })());\n        this.flags.actor |= Flags.Actor.IS_PLAYER;\n        this.attributes = new Attributes.Attributes(opts.attributes || {});\n        this.skills = new Skills.Skills(opts.skills || {});\n    }\n    make(options) {\n        const actor = new Player(this);\n        this.init(actor, options);\n        return actor;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Action from '../action';\nexport class Game {\n    constructor(opts) {\n        this.running = false;\n        this.keymap = {};\n        this.ui = new GWU.ui.UI(opts);\n        this.makeMap = opts.makeMap;\n        this.makePlayer = opts.makePlayer;\n        this.startMap = opts.startMap;\n        if (opts.keymap) {\n            Object.assign(this.keymap, opts.keymap);\n        }\n        this.layer = new GWU.ui.Layer(this.ui);\n        this.buffer = this.layer.buffer;\n        this.io = this.layer.io;\n    }\n    async start() {\n        this.player = this.makePlayer();\n        this.map = this.makeMap(0);\n        this.startMap(this.map, this.player);\n        this.running = true;\n        while (this.running) {\n            await this.runTurn();\n        }\n    }\n    draw() {\n        if (this.map && this.map.needsRedraw) {\n            this.map.drawInto(this.buffer);\n            this.buffer.render();\n        }\n    }\n    finish() {\n        this.running = false;\n        this.layer.finish();\n    }\n    async runTurn() {\n        const actors = this.map.actors.slice();\n        for (let actor of actors) {\n            this.draw();\n            if (actor === this.player) {\n                await this.playerTurn(this.player);\n            }\n            else {\n                await actor.act();\n            }\n            await this.animate();\n        }\n        this.map.tick(50); // turn time\n    }\n    async animate() {\n        if (!this.layer.io._tweens.length)\n            return;\n        const timer = setInterval(() => {\n            const tick = GWU.io.makeTickEvent(16);\n            this.layer.io.enqueue(tick);\n        }, 16);\n        while (this.layer.io._tweens.length) {\n            const ev = await this.layer.io.nextTick();\n            if (ev && ev.dt) {\n                this.layer.io._tweens.forEach((a) => a && a.tick(ev.dt));\n                this.layer.io._tweens = this.layer.io._tweens.filter((a) => a && a.isRunning());\n            }\n            this.draw();\n        }\n        clearInterval(timer);\n    }\n    async playerTurn(player) {\n        let done = false;\n        const timer = setInterval(() => {\n            const tick = GWU.io.makeTickEvent(16);\n            this.layer.io.enqueue(tick);\n        }, 16);\n        while (!done) {\n            const ev = await this.layer.io.nextEvent(-1);\n            if (ev) {\n                if (ev.type === GWU.io.KEYPRESS) {\n                    const handler = GWU.io.handlerFor(ev, this.keymap);\n                    if (handler) {\n                        if (typeof handler === 'string') {\n                            const action = Action.get(handler);\n                            if (action) {\n                                await action.call(this, player, ev);\n                                done = true;\n                            }\n                        }\n                        else if (typeof handler === 'function') {\n                            await handler.call(this, player, ev);\n                            done = true;\n                        }\n                    }\n                }\n                else if (ev.type === GWU.io.TICK) {\n                    this.layer.tick(ev); // timeouts\n                }\n            }\n        }\n        clearInterval(timer);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Tile from './tile';\nimport '../effect/handlers';\nimport '../effect/types';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([30, 30, 30]).rand(20, 0, 0, 0),\n    bg: GWU.color.from([2, 2, 10]).rand(0, 2, 2, 0),\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: 'TILE:DOOR_OPEN',\n        open: 'TILE:DOOR_OPEN_ALWAYS',\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            effects: 'TILE:DOOR~!',\n        },\n        enter: null,\n        open: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: 'EMIT:UP_STAIRS',\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: 'EMIT:DOWN_STAIRS',\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: GWU.color.from([5, 8, 20]).dance(10, 0, 4, 15),\n    bg: GWU.color.from([10, 15, 41]).dance(6, 5, 5, 5),\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([5, 8, 10]).dance(10, 0, 4, 15),\n    bg: GWU.color.from([10, 30, 30]).dance(6, 0, 10, 10),\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    depth: 'SURFACE',\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_LIST_IN_SIDEBAR","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_SAFE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","lastId","kind","_map","key","machineHome","depth","light","flags","entity","next","id","map","hasEntityFlag","Flags.Entity","L_ON_MAP","Error","setEntityFlag","addToMap","clearEntityFlag","removeFromMap","sprite","isDestroyed","L_DESTROYED","other","constructor","copy","Object","assign","canBeSeen","tag","tags","includes","matches","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","buffer","bounds","drawStatus","dest","_observer","drawSprite","name","EntityKind","config","requiredTileTags","flavor","description","make","split","t","trim","slice","init","_entity","length","hasAllTileTags","hasAnyTileTag","_opts","mixer","Mixer","getAppearanceAt","wrapText","width","makeOpts","PainMessages","msgs","_msgs","forEach","m","add","msg","push","pct","singular","index","clamp","Math","floor","_format","replace","painMessages","Stats","_max","_rate","_value","set","v","max","range","value","amount","allowOver","min","raiseValue","gain","lowerValue","drain","turns","count","r","elapsed","undefined","type","from","c","get","Status","_set","_time","_count","_done","changed","clearTime","clearCount","setOff","_update","done","_addDone","current","delta","status","cleared","noticed","removeTime","rec","was","doneFn","Entity.Entity","super","leader","items","fov","memory","visionDistance","actor","Flags.Depth","ACTOR","stats","hasActorFlag","Flags.Actor","IS_PLAYER","canSee","isAbleToSee","isDirectlyVisible","xy","distanceBetween","forLineBetween","i","j","blocksVision","canSeeOrSense","isAbleToSense","isAnyKindOfVisible","_item","item","pickupItem","dropItem","handlers","installHandler","handler","toLowerCase","effectTypes","installType","startsWith","endPos","indexOf","tile","substring","effects","Array","isArray","effect","entries","JSON","stringify","typeName","shift","makeFn","e","parts","installedEffects","trigger","bind","install","obj","clone","_a","_b","_c","_d","dissipate","priority","groundTile","article","tileMech","hasEffect","Flags.Tile","T_IS_FLAMMABLE","arraysIntersect","every","blocksMove","hasTileFlag","T_PATHING_BLOCKER","arg","color","result","fg","toString","options","_e","_f","base","extends","tiles","text","search","Number","parseInt","makeEffect","message","Flags.TileMech","ch","bg","opacity","all","args","BasicEffect","chance","seen","Flags.Effect","loc","ctx","force","rng","random","didSomething","eff","nextAlways","E_NEXT_ALWAYS","makeBasicEffect","makeSpreadEffect","SpreadEffect","grow","decrement","matchTile","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","spawnMap","grid","alloc","height","computeSpawnMap","free","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","E_NEXT_EVERYWHERE","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","cellIsOk","isStart","hasXY","hasCellFlag","Flags.Cell","EVENT_PROTECTED","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","hasTile","dir","x2","y2","madeChange","startProb","probDec","fill","DIRS","clearAll","clear","clearDepth","GAS","LIQUID","SURFACE","GROUND","blockingMap","eachActor","a","matchingLocNear","removeActor","addActor","eachItem","removeItem","addItem","makeEmitHandler","emitEffect","events","emit","makeMessageHandler","src","info","messageEffect","aware","addAt","makeActivateMachine","activateMachine","machine","machineId","makeTileHandler","superpriority","blockedByActors","blockedByItems","tileEffect","setTile","makeClearHandler","layers","reduce","out","ALL_LAYERS","clearEffect","_ctx","makeFeatureHandler","featureEffect","feat","Effect.installedEffects","makeNourishEffect","nourishEffect","actorAt","adjust","n","default","pukeMsg","makeStatEffect","stat","statEffect","values","chokeCount","TILE.tiles","NULL","snapshot","makeMixer","TILE.get","hasStableSnapshot","STABLE_SNAPSHOT","hasStableMemory","getSnapshot","checkEntities","some","hasItem","hasActor","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","withEntities","needsRedraw","CHANGED","TILE.Tile","highestPriorityTile","cb","find","blocksPathing","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","blocksLayer","blockedByOtherLayers","highestPriority","ground","depthTile","glowLightChanged","setMapFlag","Flags.Map","MAP_SIDEBAR_TILES_CHANGED","setCellFlag","CAUGHT_FIRE_THIS_TURN","blackOut","tileFlag","tileMechFlag","hasTileMechFlag","event","ev","_activate","itemAt","withEffects","fireEvent","hasItems","foundIndex","clearCellFlag","splice","isKey","isPlayer","actors","player","HAS_FX","fx","fxAt","_fx","MapLayer","properties","_other","_x","_y","_tile","_actor","_dt","TileLayer","ActorLayer","ItemLayer","GasLayer","volume","startingVolume","spread","update","d","clearTile","total","highestVolume","startingTile","highestTile","updateCellVolume","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","fire","TM_EXPLOSIVE_PROMOTE","x0","y0","BasicDrawer","_cell","Buffer","offsetX","offsetY","drawCell","needSnapshot","getAppearance","putSnapshot","applyLight","L_VISUALLY_DISTINCT","separate","surface","liquid","gas","drawInto","cosmetic","number","hasFx","dances","COLORS_DANCE","bake","isVisible","isRevealed","getLight","multiply","isCursor","invert","scale","machineCount","_seed","_animations","_queuedEvents","drawer","cells","seed","LightSystem","initLayers","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","ITEM","Layer.ItemLayer","Layer.ActorLayer","layer","isAt","fireEffects","hasPlayer","_addFx","updated","_removeFx","arrayDelete","fmt","log","console","dump","hasMapFlag","MAP_NEEDS_REDRAW","clearMapFlag","l","boundary","isBoundaryXY","clearTiles","dt","tick","filter","isRunning","fireAll","willFire","EVENT_FIRED_THIS_TURN","promoteChance","w","originX","originY","eachGlowLight","_cb","isDark","h","Memory","source","isMemory","i2","a2","mem","currentList","newList","setLight","forget","storeMemory","cache","store","actorMemory","ActorKind","Entity.EntityKind","DEFAULT","DEFAULT_ACTOR","vision","normal","HAS_MEMORY","Memory.get","USES_FOV","FovSystem","follow","callback","Memory.store","action","list","remove","makeOptions","kinds","makeKind","randomKind","match","forbidTags","k","pain","made","quantity","actions","ItemKind","Flags.Item","updateChokepoints","updateCounts","passMap","passableArcCount","oldX","CLOCK_DIRS","oldY","newX","newY","cellCount","floodFillCount","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","eachCell","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","prefab","charToTile","isStringArray","len","line","updateChokeCounts","layerVersion","lightVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","getCellPathCost","path","OBSTRUCTION","FORBIDDEN","fillCostMap","costMap","_v","x1","y1","distanceMap","calculateDistances","eightWays","straightDistanceBetween","getPath","members","horde","frequency","Flags","canSpawn","TRUE","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","matchingLoc","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted","fn","async","flashSprite","duration","animator","Entity.make","addFx","tween","visible","to","repeat","repeatDelay","onUpdate","removeFx","io","loop","addAnimation","start","hit","target","fadeInOut","yoyo","onFinish","moveSprite","ceil","maxAxisFromTo","speed","isLoc","vals","stepFn","stopBeforeWalls","moveFx","stop","isInShape","shape","cx","cy","allowCenter","sx","abs","sy","dirFromTo","fade","stopAtWalls","forLineFromTo","promises","lastIndex","Promise","radius","center","checkExplosionOpts","FOV","isBlocked","calculate","minX","minY","maxX","maxY","_obj","success","moveDir","newPos","FX.hit","pickup","_ev","myItem","avoidsItem","getAction","call","canAddItem","Attributes","baseValues","_base","_bonus","_sustain","attributes","keys","raiseMax","old","_calcValue","loss","lowerMax","bonus","_addBonus","_clearBonus","arr","findIndex","o","allAdjustments","adj","_applyAdjustment","sustain","fixed","restore","Skill","has","_bool","level","_int","disadvantage","advantage","b","_parent","succeed","fail","_has","_level","_fixed","Skills","_skills","s","lastIndexOf","Player","PlayerKind","Actor.ActorKind","Attributes.Attributes","skills","Skills.Skills","attr","defaults","running","keymap","ui","UI","makeMap","makePlayer","startMap","Layer","runTurn","render","finish","draw","playerTurn","act","animate","_tweens","timer","setInterval","makeTickEvent","enqueue","nextTick","clearInterval","nextEvent","KEYPRESS","handlerFor","Action.get","TICK","rand","enter","open","close","dance"],"mappings":"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"}