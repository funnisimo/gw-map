{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/effect/handler.js","../js/effect/make.js","../js/tile/tile.js","../js/tile/tiles.js","../js/tile/index.js","../js/effect/fire.js","../js/effect/handlers/emit.js","../js/effect/handlers/fn.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/effect.js","../js/effect/handlers/tile.js","../js/map/cell.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/actorLayer.js","../js/layer/itemLayer.js","../js/layer/gasLayer.js","../js/layer/fireLayer.js","../js/draw/basic.js","../js/map/map.js","../js/memory/memory.js","../js/memory/system.js","../js/actor/actor.js","../js/actor/kind.js","../js/actor/make.js","../js/item/item.js","../js/item/kind.js","../js/item/make.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/path.js","../js/horde/horde.js","../js/horde/make.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_ON_MAP\"] = Fl(17)] = \"L_ON_MAP\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n    Actor[Actor[\"HAS_MEMORY\"] = Fl(1)] = \"HAS_MEMORY\";\n    Actor[Actor[\"USES_FOV\"] = Fl(2)] = \"USES_FOV\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(0)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(1)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"KNOWN_TO_BE_SAFE\"] = Fl(2)] = \"KNOWN_TO_BE_SAFE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to speed checks\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(16)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(27)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(18)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(19)] = \"HAS_ITEM\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(20)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(21)] = \"IS_CURSOR\";\n    Cell[Cell[\"HAS_TICK_EFFECT\"] = Fl(22)] = \"HAS_TICK_EFFECT\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_SAFE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_SPREAD_CIRCLE\"] = Fl(13)] = \"E_SPREAD_CIRCLE\";\n    Effect[Effect[\"E_SPREAD_LINE\"] = Fl(14)] = \"E_SPREAD_LINE\";\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nlet lastId = 0;\nexport class Entity {\n    constructor(kind) {\n        this._map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n        this.id = '' + ++lastId;\n    }\n    get map() {\n        return this._map;\n    }\n    addToMap(map, x, y) {\n        if (this.hasEntityFlag(Flags.Entity.L_ON_MAP)) {\n            throw new Error('Entity is currently on a map!');\n        }\n        this.x = x;\n        this.y = y;\n        this.setEntityFlag(Flags.Entity.L_ON_MAP);\n        if (this._map === map) {\n            return false;\n        }\n        this._map = map;\n        return true;\n    }\n    removeFromMap() {\n        this.clearEntityFlag(Flags.Entity.L_ON_MAP);\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    isAt(x, y) {\n        return this.x === x && this.y === y;\n    }\n    clone() {\n        const other = new this.constructor(this.kind);\n        other.copy(this);\n        return other;\n    }\n    copy(other) {\n        this.depth = other.depth;\n        this.light = other.light;\n        Object.assign(this.flags, other.flags);\n        this.next = other.next;\n        this.x = other.x;\n        this.y = other.y;\n        this.kind = other.kind;\n        this.id = other.id;\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    setEntityFlag(flag) {\n        this.flags.entity |= flag;\n    }\n    clearEntityFlag(flag) {\n        this.flags.entity &= ~flag;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isKey(x, y) {\n        return this.key && this.key.matches(x, y);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n    drawStatus(sidebar) {\n        this.kind.drawStatus(this, sidebar);\n    }\n    drawInto(dest, _observer) {\n        dest.drawSprite(this.sprite);\n    }\n    toString() {\n        return `${this.constructor.name}-${this.id} @ ${this.x},${this.y}`;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requiredTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requiredTileTags) {\n            if (typeof config.requiredTileTags === 'string') {\n                this.requiredTileTags = config.requiredTileTags\n                    .split(/[,|]/)\n                    .map((t) => t.trim());\n            }\n            else {\n                this.requiredTileTags = config.requiredTileTags\n                    .slice()\n                    .map((t) => t.trim());\n            }\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAllTileTags(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    avoidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAnyTileTag(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n    drawStatus(entity, sidebar) {\n        if (!entity.map)\n            return;\n        if (entity.isDestroyed)\n            return;\n        entity.map.getAppearanceAt(entity.x, entity.y, sidebar.mixer);\n        sidebar.drawTitle(sidebar.mixer, entity.getName());\n    }\n}\n","// @ts-nocheck\nexport class Handler {\n    make(src, dest) {\n        return true;\n    }\n    fire(config, map, x, y, ctx) {\n        return false;\n    }\n}\nexport const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id] = handler;\n}\n","import * as GWU from 'gw-utils';\nimport { handlers } from './handler';\nimport { Effect as Flags } from '../flags';\nexport function make(opts) {\n    var _a;\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    if (typeof opts === 'string') {\n        throw new Error('Cannot make effect from string: ' + opts);\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    // now make base effect stuff\n    const info = {\n        flags: GWU.flag.from(Flags, opts.flags),\n        chance: (_a = opts.chance) !== null && _a !== void 0 ? _a : 0,\n        next: null,\n        id: opts.id || 'n/a',\n    };\n    if (opts.next) {\n        if (typeof opts.next === 'string') {\n            info.next = opts.next;\n        }\n        else {\n            info.next = make(opts.next);\n        }\n    }\n    // and all the handlers\n    Object.values(handlers).forEach((v) => v.make(opts, info));\n    return info;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'string') {\n        const effect = effects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\n// resetMessageDisplayed\nexport function reset(effect) {\n    effect.flags &= ~Flags.E_FIRED;\n}\nexport function resetAll() {\n    Object.values(effects).forEach((e) => reset(e));\n}\nexport const effects = {};\nexport function install(id, config) {\n    const effect = make(config);\n    effects[id] = effect;\n    effect.id = id;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/make';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string') {\n                effects[key] = value;\n                return;\n            }\n            effects[key] = makeEffect(value);\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as Tile from './tile';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: [30, 30, 30, 20, 0, 0, 0],\n    bg: [2, 2, 10, 0, 2, 2, 0],\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: { tile: 'DOOR_OPEN' },\n        open: { tile: 'DOOR_OPEN_ALWAYS' },\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            tile: 'DOOR',\n            flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY',\n        },\n        enter: null,\n        open: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: { emit: 'UP_STAIRS' },\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: { emit: 'DOWN_STAIRS' },\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: [5, 8, 20, 10, 0, 4, 15, true],\n    bg: [10, 15, 41, 6, 5, 5, 5, true],\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: [5, 8, 10, 10, 0, 4, 15, true],\n    bg: [10, 30, 30, 6, 0, 10, 10, true],\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    depth: 'SURFACE',\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\nimport './tiles';\n","import * as GWU from 'gw-utils';\nimport { Effect as Flags } from '../flags';\nimport { from } from './make';\nimport { handlers } from './handler';\nexport async function fire(effect, map, x, y, ctx_ = {}) {\n    if (!effect)\n        return false;\n    if (typeof effect === 'string') {\n        const name = effect;\n        effect = from(name);\n        if (!effect)\n            throw new Error('Failed to find effect: ' + name);\n    }\n    const ctx = ctx_;\n    if (!ctx.force && effect.chance && !map.rng.chance(effect.chance, 10000))\n        return false;\n    const grid = (ctx.grid = GWU.grid.alloc(map.width, map.height));\n    let didSomething = false;\n    const allHandlers = Object.values(handlers);\n    for (let h of allHandlers) {\n        if (await h.fire(effect, map, x, y, ctx)) {\n            didSomething = true;\n        }\n    }\n    // do the next effect - if applicable\n    if (effect.next &&\n        (didSomething || effect.flags & Flags.E_NEXT_ALWAYS) &&\n        !GWU.data.gameHasEnded) {\n        const nextInfo = typeof effect.next === 'string' ? from(effect.next) : effect.next;\n        if (effect.flags & Flags.E_NEXT_EVERYWHERE) {\n            await grid.forEachAsync(async (v, i, j) => {\n                if (!v)\n                    return;\n                didSomething =\n                    (await fire(nextInfo, map, i, j, ctx)) || didSomething;\n            });\n        }\n        else {\n            didSomething =\n                (await fire(nextInfo, map, x, y, ctx)) || didSomething;\n        }\n    }\n    // bookkeeping\n    if (didSomething &&\n        // map.isVisible(x, y) &&\n        !(effect.flags & Flags.E_NO_MARK_FIRED)) {\n        effect.flags |= Flags.E_FIRED;\n    }\n    GWU.grid.free(grid);\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// EMIT\nexport class EmitEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.emit)\n            return true;\n        if (typeof src.emit !== 'string') {\n            throw new Error('emit effects must be string name to emit: { emit: \"EVENT\" }');\n        }\n        dest.emit = src.emit;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (config.emit) {\n            await GWU.events.emit(config.emit, x, y, ctx);\n            return true;\n        }\n        return false;\n    }\n}\ninstallHandler('emit', new EmitEffect());\n","import { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// FN\nexport class FnEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.fn)\n            return true;\n        if (typeof src.fn !== 'function') {\n            throw new Error('fn effects must be functions.');\n        }\n        dest.fn = src.fn;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.fn) {\n            return await config.fn(config, map, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('fn', new FnEffect());\n","import * as GWU from 'gw-utils';\nimport { Handler, installHandler } from '../handler';\nimport { Effect as Flags } from '../../flags';\n//////////////////////////////////////////////\n// MESSAGE\nexport class MessageEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.message)\n            return true;\n        if (typeof src.message !== 'string') {\n            throw new Error('Emit must be configured with name of event to emit');\n        }\n        dest.message = src.message;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (!config.message)\n            return false;\n        const fired = !!(config.flags & Flags.E_FIRED);\n        if (config.message &&\n            config.message.length &&\n            !fired\n        // && map.isVisible(x, y)\n        ) {\n            GWU.message.addAt(x, y, config.message, ctx);\n            return true;\n        }\n        return false;\n    }\n}\ninstallHandler('message', new MessageEffect());\n","import { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// ActivateMachine\nexport class ActivateMachineEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.activateMachine)\n            return true;\n        dest.activateMachine = true;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.activateMachine) {\n            const cell = map.cell(x, y);\n            const machine = cell.machineId;\n            if (!machine)\n                return false;\n            return await map.activateMachine(machine, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('activateMachine', new ActivateMachineEffect());\n","import { Handler, installHandler } from '../handler';\nimport * as FIRE from '../fire';\n//////////////////////////////////////////////\n// EMIT\nexport class EffectEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.effect)\n            return true;\n        dest.effect = src.effect;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.effect) {\n            return await FIRE.fire(config.effect, map, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('effect', new EffectEffect());\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../../flags';\nimport * as Tile from '../../tile';\nimport { Handler, installHandler } from '../handler';\nexport class SpawnEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!src.tile)\n            return true; // no error\n        let config = src.tile;\n        if (typeof config === 'string') {\n            const parts = config.split(/[,|]/).map((p) => p.trim());\n            config = {\n                tile: parts[0],\n                grow: Number.parseInt(parts[1] || '0'),\n                decrement: Number.parseInt(parts[2] || '0'),\n            };\n        }\n        const info = {\n            grow: (_b = (_a = config.grow) !== null && _a !== void 0 ? _a : config.spread) !== null && _b !== void 0 ? _b : 0,\n            decrement: (_c = config.decrement) !== null && _c !== void 0 ? _c : 0,\n            flags: GWU.flag.from(Flags.Effect, config.flags),\n            volume: (_d = config.volume) !== null && _d !== void 0 ? _d : 0,\n            next: (_e = config.next) !== null && _e !== void 0 ? _e : null,\n        };\n        const id = (_f = config.tile) !== null && _f !== void 0 ? _f : config.id;\n        if (typeof id === 'string') {\n            info.tile = id;\n        }\n        else {\n            throw new Error('Invalid tile spawn config: ' + id);\n        }\n        if (!info.tile) {\n            throw new Error('Must have tile.');\n        }\n        const match = (_g = config.matchTile) !== null && _g !== void 0 ? _g : config.match;\n        if (typeof match === 'string') {\n            info.matchTile = match;\n        }\n        else if (match) {\n            throw new Error('Invalid tile spawn match tile: ' + config.matchTile);\n        }\n        dest.tile = info;\n        return true;\n    }\n    fire(effect, map, x, y, ctx) {\n        if (!effect.tile)\n            return false; // did nothing\n        const id = effect.tile.tile;\n        const tile = Tile.tiles[id] || null;\n        if (!tile) {\n            throw new Error('Failed to find tile for effect: ' + id);\n        }\n        const abortIfBlocking = !!(effect.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        const isBlocking = !!(abortIfBlocking &&\n            !(effect.flags & Flags.Effect.E_PERMIT_BLOCKING) &&\n            (tile.blocksPathing() ||\n                effect.flags & Flags.Effect.E_TREAT_AS_BLOCKING));\n        let didSomething = false;\n        didSomething = computeSpawnMap(effect, map, x, y, ctx);\n        if (!didSomething) {\n            return false;\n        }\n        if (abortIfBlocking &&\n            isBlocking &&\n            this.mapDisruptedBy(map, ctx.grid)) {\n            // GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (effect.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, ctx.grid, effect.flags)) {\n                didSomething = true;\n            }\n        }\n        const spawned = spawnTiles(effect.flags, ctx.grid, map, tile, effect.tile.volume, ctx.machine);\n        return spawned;\n    }\n    mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(map.width, map.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(map.width, map.height, (i, j) => {\n            const lakeX = i + blockingToMapX;\n            const lakeY = j + blockingToMapY;\n            if (blockingGrid.get(lakeX, lakeY)) {\n                if (map.cell(i, j).isStairs()) {\n                    disrupts = true;\n                }\n            }\n            else if (!map.cell(i, j).blocksMove()) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGWU.grid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\ninstallHandler('tile', new SpawnEffect());\n// tick\n// Spawn\nexport function spawnTiles(flags, spawnMap, map, tile, volume = 0, machine) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = !!(flags & Flags.Effect.E_BLOCKED_BY_OTHER_LAYERS);\n    const superpriority = !!(flags & Flags.Effect.E_SUPERPRIORITY);\n    const blockedByActors = !!(flags & Flags.Effect.E_BLOCKED_BY_ACTORS);\n    const blockedByItems = !!(flags & Flags.Effect.E_BLOCKED_BY_ITEMS);\n    // const applyEffects = ctx.refreshCell;\n    volume = volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            // const isRoot = spawnMap[i][j] === 1;\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.hasTile(tile)) {\n                // If the new cell already contains the fill terrain,\n                // if (tile.depth == Flags.Depth.GAS) {\n                //     spawnMap[i][j] = 1;\n                //     cell.gasVolume += volume;\n                // } else if (tile.depth == Flags.Depth.LIQUID) {\n                //     spawnMap[i][j] = 1;\n                //     cell.liquidVolume += volume;\n                // }\n            }\n            else if (map.setTile(i, j, tile, {\n                volume,\n                superpriority,\n                blockedByOtherLayers,\n                blockedByActors,\n                blockedByItems,\n                machine,\n            })) {\n                // if the fill won't violate the priority of the most important terrain in this cell:\n                spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                // map.redrawCell(cell);\n                // if (volume && cell.gas) {\n                //     cell.volume += (feat.volume || 0);\n                // }\n                cell.flags.cell |= Flags.Cell.EVENT_FIRED_THIS_TURN;\n                if (flags & Flags.Effect.E_PROTECTED) {\n                    cell.flags.cell |= Flags.Cell.EVENT_PROTECTED;\n                }\n                accomplishedSomething = true;\n                // debug('- tile', i, j, 'tile=', tile.id);\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.setMapFlag(Flags.Map.MAP_CHANGED);\n    }\n    return accomplishedSomething;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.tile.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.tile.matchTile &&\n        !isStart &&\n        !cell.hasTile(effect.tile.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, map, x, y, ctx) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const config = effect.tile;\n    let startProb = config.grow || 0;\n    let probDec = config.decrement || 0;\n    const spawnMap = ctx.grid;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\n// export function spreadCircle(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     let radius = 0;\n//     startProb = startProb || 100;\n//     if (startProb >= 100) {\n//         probDec = probDec || 100;\n//     }\n//     while (map.rng.chance(startProb)) {\n//         startProb -= probDec;\n//         ++radius;\n//     }\n//     // startProb = 100;\n//     // probDec = 0;\n//     spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n//         if (!cellIsOk(this, i, j, ctx)) return 0;\n//         // const dist = Math.floor(GWU.utils.distanceBetween(x, y, i, j));\n//         // const prob = startProb - dist * probDec;\n//         // if (!map.rng.chance(prob)) return 0;\n//         return 1;\n//     });\n//     // spawnMap[x][y] = 1;\n//     // if (!isOk(flags, x, y, ctx)) {\n//     //     spawnMap[x][y] = 0;\n//     // }\n//     return true;\n// }\n// export function spreadLine(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     let x2, y2;\n//     let madeChange;\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     if (startProb) {\n//         madeChange = true;\n//         if (startProb >= 100) {\n//             probDec = probDec || 100;\n//         }\n//         x2 = x;\n//         y2 = y;\n//         const dir = GWU.xy.DIRS[map.rng.number(4)];\n//         while (madeChange) {\n//             madeChange = false;\n//             x2 = x2 + dir[0];\n//             y2 = y2 + dir[1];\n//             if (\n//                 spawnMap.hasXY(x2, y2) &&\n//                 !spawnMap[x2][y2] &&\n//                 cellIsOk(this, x2, y2, ctx) &&\n//                 map.rng.chance(startProb)\n//             ) {\n//                 spawnMap[x2][y2] = 1;\n//                 madeChange = true;\n//                 startProb -= probDec;\n//             }\n//         }\n//     }\n//     if (!cellIsOk(this, x, y, ctx)) {\n//         spawnMap[x][y] = 0;\n//     }\n//     return true;\n// }\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y])\n            return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const c = map.cell(x, y);\n            return !a.forbidsCell(c);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeActor(a);\n            map.addActor(loc[0], loc[1], a);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y])\n            return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const dest = map.cell(x, y);\n            return !i.forbidsCell(dest);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(i);\n            map.addItem(loc[0], loc[1], i);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nclass ClearTileEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.clear)\n            return true;\n        let config = src.clear;\n        let layers = 0;\n        if (typeof config === 'string') {\n            config = config.split(/[,|]/).map((t) => t.trim());\n        }\n        if (config === true) {\n            layers = Flags.Depth.ALL_LAYERS;\n        }\n        else if (typeof config === 'number') {\n            layers = config;\n        }\n        else if (Array.isArray(config)) {\n            layers = config.reduce((out, v) => {\n                if (typeof v === 'number')\n                    return out | v;\n                const depth = Flags.Depth[v] || 0;\n                return out | depth;\n            }, 0);\n        }\n        else {\n            throw new Error('clear effect must have number or string config.');\n        }\n        dest.clear = layers;\n        return layers > 0;\n    }\n    async fire(config, map, x, y, ctx) {\n        return this.fireSync(config, map, x, y, ctx);\n    }\n    fireSync(config, map, x, y, _ctx) {\n        if (!config.clear)\n            return false;\n        if (!map)\n            return false;\n        const cell = map.cell(x, y);\n        return cell.clearDepth(config.clear);\n    }\n}\ninstallHandler('clear', new ClearTileEffect());\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\n// class CellEntities {\n//     cell: Cell;\n//     constructor(cell: Cell) {\n//         this.cell = cell;\n//     }\n//     eachItem(cb: EachCb<Item>): void {\n//         let object: Item | null = this.cell._item;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     eachActor(cb: EachCb<Actor>): void {\n//         let object: Actor | null = this.cell._actor;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     forEach(cb: EachCb<Entity>): void {\n//         this.eachItem(cb);\n//         this.eachActor(cb);\n//     }\n//     some(cb: MatchCb<Entity>): boolean {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         return false;\n//     }\n//     reduce(cb: ReduceCb<Entity>, start?: any): any {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         return start;\n//     }\n// }\nexport class Cell {\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.x = -1;\n        this.y = -1;\n        this.toFire = [];\n        // this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.snapshot = GWU.sprite.makeMixer();\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    get hasStableSnapshot() {\n        return this.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    }\n    get hasStableMemory() {\n        return this.hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        // this._actor = other.actor;\n        // this._item = other.item;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n        other.getSnapshot(this.snapshot);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, checkEntities = false) {\n        var _a, _b;\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        if (!checkEntities)\n            return false;\n        if (this.hasItem()) {\n            if ((_a = this.item) === null || _a === void 0 ? void 0 : _a.hasEntityFlag(flag))\n                return true;\n        }\n        if (this.hasActor()) {\n            if ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.hasEntityFlag(flag))\n                return true;\n        }\n        return false;\n    }\n    hasAllEntityFlags(flags, checkEntities = false) {\n        return (this.entityFlags(checkEntities) & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        var _a, _b;\n        let flag = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            if (this.hasItem()) {\n                flag |= ((_a = this.item) === null || _a === void 0 ? void 0 : _a.flags.entity) || 0;\n            }\n            if (this.hasActor()) {\n                flag |= ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.flags.entity) || 0;\n            }\n        }\n        return flag;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return this.tiles.some((t) => t && t.blocksVision());\n    }\n    blocksPathing() {\n        return this.tiles.some((t) => t && t.blocksPathing());\n    }\n    blocksMove() {\n        return this.tiles.some((t) => t && t.blocksMove());\n    }\n    blocksEffects() {\n        return this.tiles.some((t) => t && t.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isNull() {\n        return this.tiles.every((t) => !t || t === TILE.tiles.NULL);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    // hasKey(): boolean {\n    //     return this._entities.some(\n    //         (e) => !!e.key && e.key.matches(this.x, this.y)\n    //     );\n    // }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile, opts = {}) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (this.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && this.hasItem())\n            return false;\n        if (opts.blockedByActors && this.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && this.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = this.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === TILE.tiles.NULL) {\n                this.tiles[0] = TILE.get(tile.groundTile);\n            }\n        }\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            this.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            this.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            this.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.needsRedraw = true;\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.snapshot.blackOut();\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    needsToFire() {\n        return this.toFire.length > 0;\n    }\n    willFire(event) {\n        return !!this.toFire.find((ctx) => ctx.event === event);\n    }\n    clearEvents() {\n        this.toFire.length = 0;\n    }\n    tileWithEffect(name) {\n        return this.tiles.find((t) => t === null || t === void 0 ? void 0 : t.hasEffect(name)) || null;\n    }\n    async fireAll() {\n        let ctx;\n        let didSomething = false;\n        for (ctx of this.toFire) {\n            didSomething =\n                (await this.fireEvent(ctx.event, ctx)) || didSomething;\n        }\n        this.toFire.length = 0; // clear\n        return didSomething;\n    }\n    async fireEvent(event, ctx = {}) {\n        ctx.cell = this;\n        let didSomething = false;\n        // console.log('fire event - %s', event);\n        for (ctx.tile of this.tiles) {\n            if (!ctx.tile || !ctx.tile.effects)\n                continue;\n            const ev = ctx.tile.effects[event];\n            if (ev && (await this._activate(ev, ctx))) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    async _activate(effect, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.effects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = await Effect.fire(effect, this.map, this.x, this.y, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this.map.itemAt(this.x, this.y);\n    }\n    addItem(item, withEffects = false) {\n        this.setCellFlag(Flags.Cell.HAS_ITEM);\n        item.addToMap(this.map, this.x, this.y);\n        this.map.items.push(item);\n        this.needsRedraw = true;\n        this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (item.key &&\n                item.key.matches(this.x, this.y) &&\n                this.hasEffect('key')) {\n                const tile = this.tileWithEffect('key');\n                this.toFire.push({\n                    event: 'key',\n                    key: item,\n                    item,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('add_item')) {\n                const tile = this.tileWithEffect('add_item');\n                this.toFire.push({ event: 'add_item', item, tile, cell: this });\n            }\n        }\n    }\n    removeItem(item, withEffects = false) {\n        let hasItems = false;\n        let foundIndex = -1;\n        this.map.items.forEach((obj, index) => {\n            if (obj === item) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasItems = true;\n            }\n        });\n        if (!hasItems) {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.map.items.splice(foundIndex, 1); // delete the item\n        item.removeFromMap();\n        this.needsRedraw = true;\n        this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (item.isKey(this.x, this.y) && this.hasEffect('no_key')) {\n                const tile = this.tileWithEffect('no_key');\n                this.toFire.push({\n                    event: 'no_key',\n                    key: item,\n                    item,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('remove_item')) {\n                const tile = this.tileWithEffect('remove_item');\n                this.toFire.push({\n                    event: 'remove_item',\n                    item,\n                    tile,\n                    cell: this,\n                });\n            }\n        }\n        return true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this.map.actorAt(this.x, this.y);\n    }\n    addActor(actor, withEffects = false) {\n        this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        if (actor.isPlayer()) {\n            this.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        actor.addToMap(this.map, this.x, this.y);\n        this.map.actors.push(actor);\n        this.needsRedraw = true;\n        this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (actor.isKey(this.x, this.y) && this.hasEffect('key')) {\n                const tile = this.tileWithEffect('key');\n                this.toFire.push({\n                    event: 'key',\n                    key: actor,\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (actor.isPlayer() && this.hasEffect('add_player')) {\n                const tile = this.tileWithEffect('add_player');\n                this.toFire.push({\n                    event: 'add_player',\n                    actor,\n                    player: actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('add_actor')) {\n                const tile = this.tileWithEffect('add_actor');\n                this.toFire.push({\n                    event: 'add_actor',\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n        }\n    }\n    removeActor(actor, withEffects = false) {\n        let hasActor = false;\n        let foundIndex = -1;\n        this.map.actors.forEach((obj, index) => {\n            if (obj === actor) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasActor = true;\n            }\n        });\n        if (!hasActor) {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        if (foundIndex < 0)\n            return false;\n        actor.removeFromMap();\n        this.map.actors.splice(foundIndex, 1); // delete the actor\n        this.needsRedraw = true;\n        this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (actor.isKey(this.x, this.y) && this.hasEffect('no_key')) {\n                const tile = this.tileWithEffect('no_key');\n                this.toFire.push({\n                    event: 'no_key',\n                    key: actor,\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (actor.isPlayer() && this.hasEffect('remove_player')) {\n                const tile = this.tileWithEffect('remove_player');\n                this.toFire.push({\n                    event: 'remove_player',\n                    actor,\n                    player: actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('remove_actor')) {\n                const tile = this.tileWithEffect('remove_actor');\n                this.toFire.push({\n                    event: 'remove_actor',\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n        }\n        return true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        if (this.hasActor()) {\n            const actor = this.map.actorAt(this.x, this.y);\n            if (actor && actor.sprite.ch)\n                return actor.sprite.ch;\n        }\n        if (this.hasItem()) {\n            const item = this.map.itemAt(this.x, this.y);\n            if (item && item.sprite.ch)\n                return item.sprite.ch;\n        }\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n    drawStatus(sidebar) {\n        if (!this.map)\n            return;\n        this.map.getAppearanceAt(this.x, this.y, sidebar.mixer);\n        sidebar.drawTitle(sidebar.mixer, this.getName());\n    }\n    toString() {\n        return `Cell @ ${this.x},${this.y}`;\n    }\n}\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile, _opts) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts) {\n        const cell = this.map.cell(x, y);\n        return cell.setTile(tile, opts);\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // // Bookkeeping for fire, pressure plates and key-activated tiles.\n        // for (let x = 0; x < this.map.width; ++x) {\n        //     for (let y = 0; y < this.map.height; ++y) {\n        //         const cell = this.map.cell(x, y);\n        //         if (\n        //             !cell.hasCellFlag(\n        //                 Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM\n        //             ) &&\n        //             cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)\n        //         ) {\n        //             cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n        //         }\n        //     }\n        // }\n        return true;\n    }\n}\n","// import * as GWU from 'gw-utils';\nimport { MapLayer } from './mapLayer';\nexport class ActorLayer extends MapLayer {\n    constructor(map, name = 'actor') {\n        super(map, name);\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class ItemLayer extends MapLayer {\n    constructor(map, name = 'item') {\n        super(map, name);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    async tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    await this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        await this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    async exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            await cell.fireEvent(event, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nexport class BasicDrawer {\n    isAnyKindOfVisible(_cell) {\n        return true;\n    }\n    drawInto(dest, map, opts = {}) {\n        const buffer = dest instanceof GWU.canvas.DataBuffer ? dest : dest.buffer;\n        const offsetX = opts.offsetX || 0;\n        const offsetY = opts.offsetY || 0;\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                if (map.hasXY(x + offsetX, y + offsetY)) {\n                    const cell = map.cell(x + offsetX, y + offsetY);\n                    this.drawCell(mixer, cell, opts.fov);\n                    buffer.drawSprite(x, y, mixer);\n                }\n            }\n        }\n    }\n    drawCell(dest, cell, fov) {\n        dest.blackOut();\n        const isVisible = fov ? fov.isAnyKindOfVisible(cell.x, cell.y) : true;\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (needSnapshot || (cell.needsRedraw && isVisible)) {\n            this.getAppearance(dest, cell);\n            cell.putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            cell.getSnapshot(dest);\n        }\n        this.applyLight(dest, cell, fov);\n        if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n            GWU.color.separate(dest.fg, dest.bg);\n        }\n        return true;\n    }\n    // getCellAppearance(cell: CellType, dest: GWU.sprite.Mixer) {\n    //     dest.blackOut();\n    //     const isVisible = true; // this.fov.isAnyKindOfVisible(x, y);\n    //     const isRevealed = true; // this.fov.isRevealed(x, y);\n    //     const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     if (needSnapshot || (cell.needsRedraw && isVisible)) {\n    //         this.layers.forEach((layer) => layer.putAppearance(dest, cell));\n    //         if (dest.dances) {\n    //             cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n    //         } else {\n    //             cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n    //         }\n    //         dest.bake();\n    //         cell.putSnapshot(dest);\n    //         cell.needsRedraw = false;\n    //         cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     } else {\n    //         cell.getSnapshot(dest);\n    //     }\n    //     if (isVisible) {\n    //         const light = this.light.getLight(cell.x, cell.y);\n    //         dest.multiply(light);\n    //     } else if (isRevealed) {\n    //         dest.scale(50);\n    //     } else {\n    //         dest.blackOut();\n    //     }\n    //     if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n    //         GWU.color.separate(dest.fg, dest.bg);\n    //     }\n    // }\n    getAppearance(dest, cell) {\n        const ground = cell.tiles[Flags.Depth.GROUND];\n        const surface = cell.tiles[Flags.Depth.SURFACE];\n        const liquid = cell.tiles[Flags.Depth.LIQUID];\n        const gas = cell.tiles[Flags.Depth.GAS]; // How to get volume!?!?!?!\n        const actor = cell.hasActor() ? cell.map.actorAt(cell.x, cell.y) : null;\n        const item = cell.hasItem() ? cell.map.itemAt(cell.x, cell.y) : null;\n        dest.drawSprite(ground.sprite);\n        if (surface) {\n            dest.drawSprite(surface.sprite);\n        }\n        if (liquid) {\n            dest.drawSprite(liquid.sprite);\n        }\n        if (item) {\n            item.drawInto(dest);\n        }\n        if (actor) {\n            actor.drawInto(dest);\n        }\n        if (gas) {\n            const opacity = GWU.rng.cosmetic.number(50) + 25;\n            dest.drawSprite(gas.sprite, opacity);\n        }\n        if (dest.dances) {\n            cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        else {\n            cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        dest.bake();\n    }\n    applyLight(dest, cell, fov) {\n        const isVisible = !fov || fov.isAnyKindOfVisible(cell.x, cell.y);\n        const isRevealed = !fov || fov.isRevealed(cell.x, cell.y);\n        if (isVisible) {\n            const light = cell.map.light.getLight(cell.x, cell.y);\n            dest.multiply(light);\n            // TODO - is Clairy\n            // TODO - is Telepathy\n        }\n        else if (isRevealed) {\n            dest.scale(50);\n        }\n        else {\n            dest.blackOut();\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\n// import { CellMemory } from './cellMemory';\nimport * as Effect from '../effect';\nimport { BasicDrawer } from '../draw/basic';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        // _memory: GWU.grid.Grid<CellMemory>;\n        this.machineCount = 0;\n        this._seed = 0;\n        this.rng = GWU.rng.random;\n        this.id = 'MAP';\n        this.actors = [];\n        this.items = [];\n        this.width = width;\n        this.height = height;\n        this.flags = { map: 0 };\n        this.layers = [];\n        if (opts.id) {\n            this.id = opts.id;\n        }\n        this.drawer = opts.drawer || new BasicDrawer();\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        // this._memory = GWU.grid.make(\n        //     width,\n        //     height,\n        //     (x, y) => new CellMemory(this, x, y)\n        // );\n        if (opts.seed) {\n            this._seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        // this.fov = new GWU.fov.FovSystem(this, opts);\n        this.properties = {};\n        this.initLayers();\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(v) {\n        this._seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    // memory(x: number, y: number): CellMemory {\n    //     return this._memory[x][y];\n    // }\n    // knowledge(x: number, y: number): CellInfoType {\n    //     if (this.fov.isAnyKindOfVisible(x, y)) return this.cell(x,y);\n    //     return this._memory[x][y];\n    // }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n        this.addLayer(Flags.Depth.ITEM, new Layer.ItemLayer(this, 'item'));\n        this.addLayer(Flags.Depth.ACTOR, new Layer.ActorLayer(this, 'actor'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // items\n    hasItem(x, y) {\n        return this.cell(x, y).hasItem();\n    }\n    itemAt(x, y) {\n        return this.items.find((i) => i.isAt(x, y)) || null;\n    }\n    eachItem(cb) {\n        this.items.forEach(cb);\n    }\n    addItem(x, y, item, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addItem(item, fireEffects);\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    removeItem(item, fireEffects = false) {\n        const cell = this.cell(item.x, item.y);\n        if (!cell.removeItem(item, fireEffects))\n            return false;\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    // async moveItem(item: Item, dir: GWU.xy.Loc | number): Promise<boolean> {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = item.x;\n    //     const oldY = item.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[item.depth] as Layer.ItemLayer;\n    //     if (!(await layer.removeItem(item))) return false;\n    //     if (!(await this.addItem(x, y, item))) {\n    //         layer.forceItem(item.x, item.y, item);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (item.lastSeen) {\n    //     //         this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n    //     //         this.clearCellFlag(\n    //     //             item.lastSeen.x,\n    //     //             item.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         item.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.item = item;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     item.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.actors.find((a) => a.isAt(x, y)) || null;\n    }\n    eachActor(cb) {\n        this.actors.forEach(cb);\n    }\n    addActor(x, y, actor, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addActor(actor, fireEffects);\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    removeActor(actor, fireEffects = false) {\n        const cell = this.cell(actor.x, actor.y);\n        if (!cell.removeActor(actor, fireEffects))\n            return false;\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    // async moveActor(actor: Actor, dir: GWU.xy.Loc | number): Promise<boolean> {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = actor.x;\n    //     const oldY = actor.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[actor.depth] as Layer.ActorLayer;\n    //     if (!(await layer.removeActor(actor))) return false;\n    //     if (!(await layer.addActor(x, y, actor))) {\n    //         layer.forceActor(actor.x, actor.y, actor);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (actor.lastSeen) {\n    //     //         this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(\n    //     //             actor\n    //     //         );\n    //     //         this.clearCellFlag(\n    //     //             actor.lastSeen.x,\n    //     //             actor.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         actor.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.actor = actor;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     actor.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Information\n    // isVisible(x: number, y: number): boolean {\n    //     return this.fov.isAnyKindOfVisible(x, y);\n    // }\n    hasKey(x, y) {\n        const actor = this.actorAt(x, y);\n        if (actor && actor.isKey(x, y))\n            return true;\n        const item = this.itemAt(x, y);\n        if (item && item.isKey(x, y))\n            return true;\n        return false;\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const getCh = (cell) => {\n            return cell.dump();\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        // this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile\n    // useMemory = false\n    ) {\n        return this.cell(x, y).hasTile(tile);\n        // if (!useMemory) return this.cell(x, y).hasTile(tile);\n        // return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clearTiles(tile);\n    }\n    async tick(dt) {\n        let didSomething = await this.fireAll('tick');\n        for (let layer of this.layers) {\n            if (layer && (await layer.tick(dt))) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cell(x, y));\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.actors = src.actors.slice();\n        this.items = src.items.slice();\n        this.flags.map = src.flags.map;\n        // this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.machineCount = src.machineCount;\n        this._seed = src._seed;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    async fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.fireEvent(event, ctx);\n    }\n    async fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        await willFire.forEachAsync(async (w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    await cell.fireEvent(event, {\n                        force: true,\n                        depth,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    async activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        (await cell.fireEvent('machine', ctx)) || didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    // DRAW\n    drawInto(dest, opts) {\n        this.drawer.drawInto(dest, this, opts);\n    }\n    getAppearanceAt(x, y, dest) {\n        const cell = this.cell(x, y);\n        return this.drawer.drawCell(dest, cell);\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Map } from '../map/map';\nimport * as Flags from '../flags';\nexport class Memory extends Map {\n    constructor(map) {\n        super(map.width, map.height);\n        // this.actor = actor;\n        this.source = map;\n        this.cells.forEach((c) => c.setCellFlag(Flags.Cell.STABLE_MEMORY));\n    }\n    cell(x, y) {\n        let cell = this.cells[x][y];\n        if (!cell.hasCellFlag(Flags.Cell.STABLE_MEMORY)) {\n            cell = this.source.cell(x, y);\n        }\n        return cell;\n    }\n    memory(x, y) {\n        return this.cells[x][y];\n    }\n    isMemory(x, y) {\n        return this.cells[x][y].hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    setTile() {\n        throw new Error('Cannot set tiles on memory.');\n    }\n    addItem() {\n        throw new Error('Cannot add Items to memory!');\n    }\n    removeItem() {\n        throw new Error('Cannot remove Items from memory!');\n    }\n    // async moveItem(): Promise<boolean> {\n    //     throw new Error('Cannot move Items on memory!');\n    // }\n    eachItem(cb) {\n        this.source.eachItem((i) => {\n            if (!this.isMemory(i.x, i.y)) {\n                cb(i);\n                const i2 = this.items.find((other) => other.id == i.id);\n                if (i2) {\n                    const mem = this.cell(i2.x, i2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ITEM | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.items, i2);\n                }\n            }\n        });\n        this.items.forEach(cb);\n    }\n    addActor() {\n        throw new Error('Cannot add Actors to memory!');\n    }\n    removeActor() {\n        throw new Error('Cannot remove Actors from memory!');\n    }\n    // async moveActor(): Promise<boolean> {\n    //     throw new Error('Cannot move Actors on memory!');\n    // }\n    eachActor(cb) {\n        this.source.eachActor((a) => {\n            if (!this.isMemory(a.x, a.y)) {\n                cb(a);\n                const a2 = this.actors.find((other) => other.id == a.id);\n                if (a2) {\n                    const mem = this.cell(a2.x, a2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.actors, a2);\n                }\n            }\n        });\n        this.actors.forEach(cb);\n    }\n    storeMemory(x, y) {\n        const mem = this.memory(x, y);\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        const cell = this.source.cell(x, y);\n        mem.copy(cell);\n        mem.setCellFlag(Flags.Cell.STABLE_MEMORY);\n        let newList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR);\n        // add any current items+actors\n        if (cell.hasItem()) {\n            const item = this.source.itemAt(x, y);\n            if (item) {\n                this.items.push(item.clone());\n                if (item.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (cell.hasActor()) {\n            const actor = this.source.actorAt(x, y);\n            if (actor) {\n                this.actors.push(actor.clone());\n                if (actor.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        this.light.setLight(x, y, this.source.light.getLight(x, y));\n    }\n    forget(x, y) {\n        const mem = this.memory(x, y);\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        mem.clearCellFlag(Flags.Cell.STABLE_MEMORY);\n        let newList = this.source\n            .cell(x, y)\n            .hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n    }\n    onFovChange(x, y, isVisible) {\n        if (!isVisible) {\n            this.storeMemory(x, y);\n        }\n        else {\n            this.forget(x, y);\n        }\n    }\n}\n","import { Memory } from './memory';\nconst cache = {};\nexport function store(actor, map, memory) {\n    let actorMemory = cache[actor.id];\n    if (!actorMemory) {\n        cache[actor.id] = actorMemory = {};\n    }\n    actorMemory[map.id] = memory;\n}\nexport function get(actor, map) {\n    let actorMemory = cache[actor.id];\n    if (actorMemory) {\n        const memory = actorMemory[map.id];\n        if (memory)\n            return memory;\n    }\n    return new Memory(map);\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport * as Memory from '../memory';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.next = null;\n        this.leader = null;\n        this.items = null;\n        this.fov = null;\n        this.memory = null;\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    addToMap(map, x, y) {\n        if (!super.addToMap(map, x, y))\n            return false;\n        if (this.kind.hasActorFlag(Flags.Actor.HAS_MEMORY)) {\n            this.memory = Memory.get(this, map);\n        }\n        if (this.kind.hasActorFlag(Flags.Actor.USES_FOV)) {\n            this.fov = new GWU.fov.FovSystem(map);\n            if (this.memory) {\n                this.fov.onFovChange = this.memory;\n            }\n        }\n        return true;\n    }\n    removeFromMap() {\n        if (this._map && this.memory) {\n            Memory.store(this, this._map, this.memory);\n        }\n        super.removeFromMap();\n    }\n    canSee(x, y) {\n        if (x instanceof Entity.Entity) {\n            return this.canSee(x.x, x.y) && this.kind.isAbleToSee(this, x);\n        }\n        if (this.fov) {\n            return this.fov.isDirectlyVisible(x, y);\n        }\n        else if (this.map) {\n            return GWU.xy.forLineBetween(this.x, this.y, x, y, (i, j) => !this.map.cell(i, j).blocksVision());\n        }\n        else {\n            return false; // need a map or an fov\n        }\n    }\n    canSeeOrSense(x, y) {\n        if (x instanceof Entity.Entity) {\n            return (this.canSeeOrSense(x.x, x.y) &&\n                (this.kind.isAbleToSee(this, x) ||\n                    this.kind.isAbleToSense(this, x)));\n        }\n        if (this.fov) {\n            return this.fov.isAnyKindOfVisible(x, y);\n        }\n        return this.canSee(x, y);\n    }\n    isAbleToSee(entity) {\n        return this.kind.isAbleToSee(this, entity);\n    }\n    isAbleToSense(entity) {\n        return this.kind.isAbleToSense(this, entity);\n    }\n    ////////////////// INVENTORY\n    async pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    async dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Actor } from './actor';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n        this.flags = { actor: 0 };\n        if (opts.flags) {\n            this.flags.actor = GWU.flag.from(Flags.Actor, opts.flags);\n        }\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n        if (options.fov) {\n            actor.fov = options.fov;\n        }\n        if (options.memory) {\n            actor.memory = options.memory;\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    canSeeEntity(_actor, _entity) {\n        return true;\n    }\n    isAbleToSee(_actor, _entity) {\n        return true;\n    }\n    isAbleToSense(_actor, _entity) {\n        return true;\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    async pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    async dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.quantity = other.quantity;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n}\n","// import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n        item.quantity = options.quantity || 1;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        // fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        // if (this.map.fov.changed) {\n        //     this.fovVersion = this.version;\n        //     this.map.fov.changed = false;\n        // }\n        // if (snap.version !== this.fovVersion) {\n        //     snap.map.fov.copy(this.map.fov);\n        // }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        // if (snap.version < this.fovVersion || this.map.fov.changed) {\n        //     this.map.fov.copy(snap.map.fov);\n        //     this.fovVersion = snap.version;\n        // }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import * as GWU from 'gw-utils';\nexport function getCellPathCost(map, x, y) {\n    const cell = map.cell(x, y);\n    if (cell.blocksMove())\n        return GWU.path.OBSTRUCTION;\n    if (cell.blocksPathing())\n        return GWU.path.FORBIDDEN;\n    if (cell.hasActor())\n        return 10;\n    return 1;\n}\nexport function fillCostMap(map, costMap) {\n    costMap.update((_v, x, y) => getCellPathCost(map, x, y));\n}\nexport function getPathBetween(map, x0, y0, x1, y1, options = {}) {\n    const distanceMap = GWU.grid.alloc(map.width, map.height);\n    const costMap = GWU.grid.alloc(map.width, map.height);\n    fillCostMap(map, costMap);\n    GWU.path.calculateDistances(distanceMap, x0, y0, costMap, options.eightWays, GWU.xy.straightDistanceBetween(x0, y0, x1, y1) + 1);\n    const path = GWU.path.getPath(distanceMap, x1, y1, (x, y) => map.cell(x, y).blocksMove(), options.eightWays);\n    GWU.grid.free(costMap);\n    GWU.grid.free(distanceMap);\n    return path;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    async spawn(map, x = -1, y = -1, opts = {}) {\n        var _a;\n        opts.canSpawn = opts.canSpawn || GWU.TRUE;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_a = opts.machine) !== null && _a !== void 0 ? _a : 0;\n        const leader = await this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        await this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    async _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!(await this._addLeader(leader, map, x, y, opts))) {\n            return null;\n        }\n        return leader;\n    }\n    async _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    async _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    async _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        await Promise.all(entries.map(async ([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                await this._spawnMember(kindId, map, leader, opts);\n            }\n        }));\n        return count;\n    }\n    async _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1,\n            -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!(await this._addMember(member, map, x, y, leader, opts))) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canSpawn(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_SAFE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","lastId","kind","_map","key","machineHome","depth","light","flags","entity","next","id","map","hasEntityFlag","Flags.Entity","L_ON_MAP","Error","setEntityFlag","clearEntityFlag","sprite","isDestroyed","L_DESTROYED","other","constructor","copy","Object","assign","canBeSeen","tag","tags","includes","matches","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","sidebar","drawStatus","dest","_observer","drawSprite","name","EntityKind","config","requiredTileTags","flavor","description","make","split","t","trim","slice","init","_entity","length","hasAllTileTags","hasAnyTileTag","_opts","getAppearanceAt","mixer","drawTitle","Handler","src","ctx","handlers","installHandler","handler","_a","fn","info","from","Flags","chance","values","forEach","v","effect","effects","reset","E_FIRED","install","_b","_c","_d","index","dissipate","priority","groundTile","article","tile","tileMech","hasEffect","Flags.Tile","T_IS_FLAMMABLE","push","arraysIntersect","every","blocksMove","hasTileFlag","T_PATHING_BLOCKER","arg","color","result","fg","toString","options","_e","_f","base","extends","tiles","text","replace","search","Number","parseInt","substring","delta","undefined","entries","value","makeEffect","Flags.TileMech","Flags.Depth","ch","bg","opacity","all","get","args","enter","open","tick","close","player","emit","async","fire","ctx_","force","rng","grid","alloc","width","height","didSomething","allHandlers","h","E_NEXT_ALWAYS","data","gameHasEnded","nextInfo","E_NEXT_EVERYWHERE","forEachAsync","i","j","E_NO_MARK_FIRED","free","EmitEffect","super","events","FnEffect","MessageEffect","message","fired","addAt","ActivateMachineEffect","activateMachine","machine","machineId","EffectEffect","FIRE.fire","SpawnEffect","_g","parts","p","grow","decrement","spread","Flags.Effect","volume","match","matchTile","Tile.tiles","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","isBlocking","E_PERMIT_BLOCKING","blocksPathing","E_TREAT_AS_BLOCKING","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","spawnTiles","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","xy","forRect","lakeX","lakeY","isStairs","first","floodFill","spawnMap","accomplishedSomething","blockedByOtherLayers","E_BLOCKED_BY_OTHER_LAYERS","superpriority","E_SUPERPRIORITY","blockedByActors","blockedByItems","hasTile","setTile","Flags.Cell","EVENT_FIRED_THIS_TURN","E_PROTECTED","EVENT_PROTECTED","setMapFlag","Flags.Map","MAP_CHANGED","cellIsOk","isStart","hasXY","hasCellFlag","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","dir","x2","y2","madeChange","startProb","probDec","fill","count","DIRS","clearAll","clear","clearDepth","GAS","LIQUID","SURFACE","GROUND","blockingMap","eachActor","a","loc","matchingLocNear","c","removeActor","addActor","eachItem","removeItem","addItem","layers","ALL_LAYERS","Array","isArray","reduce","out","fireSync","_ctx","e","chokeCount","toFire","TILE.tiles","NULL","snapshot","makeMixer","TILE.get","hasStableSnapshot","STABLE_SNAPSHOT","hasStableMemory","getSnapshot","checkEntities","some","hasItem","item","hasActor","actor","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","withEntities","needsRedraw","changed","CHANGED","Math","max","TILE.Tile","highestPriorityTile","cb","find","blocksVision","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","current","blocksLayer","highestPriority","ground","depthTile","glowLightChanged","L_LIST_IN_SIDEBAR","MAP_SIDEBAR_TILES_CHANGED","setCellFlag","CAUGHT_FIRE_THIS_TURN","blackOut","tileFlag","tileMechFlag","hasTileMechFlag","event","fireEvent","ev","_activate","Effect.effects","Effect.fire","itemAt","withEffects","addToMap","items","clearCellFlag","tileWithEffect","hasItems","foundIndex","obj","splice","removeFromMap","isKey","actorAt","isPlayer","actors","MapLayer","properties","_other","_x","_y","_tile","_actor","_item","_dt","TileLayer","ActorLayer","ItemLayer","GasLayer","startingVolume","update","d","clearTile","floor","min","total","highestVolume","startingTile","highestTile","updateCellVolume","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","TM_EXPLOSIVE_PROMOTE","x0","y0","n","BasicDrawer","_cell","buffer","canvas","DataBuffer","offsetX","offsetY","Mixer","drawCell","fov","isVisible","isAnyKindOfVisible","getAppearance","putSnapshot","applyLight","L_VISUALLY_DISTINCT","separate","surface","liquid","gas","drawInto","cosmetic","number","dances","COLORS_DANCE","bake","isRevealed","getLight","multiply","scale","machineCount","_seed","random","drawer","cells","seed","LightSystem","initLayers","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","ITEM","Layer.ItemLayer","ACTOR","Layer.ActorLayer","layer","isAt","fireEffects","fireAll","then","hasPlayer","fmt","log","console","dump","l","boundary","isBoundaryXY","clearTiles","dt","willFire","promoteChance","w","originX","originY","eachGlowLight","_cb","isDark","Memory","source","isMemory","i2","arrayDelete","a2","mem","memory","currentList","filter","newList","clone","setLight","forget","storeMemory","cache","store","actorMemory","Entity.Entity","leader","hasActorFlag","Flags.Actor","IS_PLAYER","HAS_MEMORY","Memory.get","USES_FOV","FovSystem","onFovChange","Memory.store","canSee","isAbleToSee","isDirectlyVisible","forLineBetween","canSeeOrSense","isAbleToSense","pickupItem","dropItem","ActorKind","Entity.EntityKind","action","list","remove","makeOptions","kinds","makeKind","randomKind","forbidTags","startsWith","k","JSON","stringify","made","quantity","ItemKind","updateChokepoints","updateCounts","passMap","passableArcCount","oldX","CLOCK_DIRS","oldY","newX","newY","cellCount","floodFillCount","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","eachCell","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","prefab","charToTile","isStringArray","len","line","updateChokeCounts","layerVersion","lightVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","getCellPathCost","path","OBSTRUCTION","FORBIDDEN","fillCostMap","costMap","_v","x1","y1","distanceMap","calculateDistances","eightWays","straightDistanceBetween","getPath","members","horde","range","frequency","canSpawn","TRUE","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","Promise","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","matchingLoc","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted"],"mappings":"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"}