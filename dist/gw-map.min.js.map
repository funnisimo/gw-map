{"version":3,"file":"gw-map.min.js","sources":["../js/flags.js","../js/light.js","../js/tile.js"],"sourcesContent":["import { flag as Flag } from \"gw-utils\";\nexport var Layer;\n(function (Layer) {\n    Layer[Layer[\"GROUND\"] = 0] = \"GROUND\";\n    Layer[Layer[\"SURFACE\"] = 1] = \"SURFACE\";\n    Layer[Layer[\"LIQUID\"] = 2] = \"LIQUID\";\n    Layer[Layer[\"GAS\"] = 3] = \"GAS\";\n    Layer[Layer[\"ITEM\"] = 4] = \"ITEM\";\n    Layer[Layer[\"ACTOR\"] = 5] = \"ACTOR\";\n    Layer[Layer[\"PLAYER\"] = 6] = \"PLAYER\";\n    Layer[Layer[\"FX\"] = 7] = \"FX\";\n    Layer[Layer[\"UI\"] = 8] = \"UI\";\n})(Layer || (Layer = {}));\nconst Fl = Flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Activation;\n(function (Activation) {\n    Activation[Activation[\"DFF_SUBSEQ_ALWAYS\"] = Fl(0)] = \"DFF_SUBSEQ_ALWAYS\";\n    Activation[Activation[\"DFF_SUBSEQ_EVERYWHERE\"] = Fl(1)] = \"DFF_SUBSEQ_EVERYWHERE\";\n    Activation[Activation[\"DFF_TREAT_AS_BLOCKING\"] = Fl(2)] = \"DFF_TREAT_AS_BLOCKING\";\n    Activation[Activation[\"DFF_PERMIT_BLOCKING\"] = Fl(3)] = \"DFF_PERMIT_BLOCKING\";\n    Activation[Activation[\"DFF_ACTIVATE_DORMANT_MONSTER\"] = Fl(4)] = \"DFF_ACTIVATE_DORMANT_MONSTER\";\n    Activation[Activation[\"DFF_BLOCKED_BY_OTHER_LAYERS\"] = Fl(6)] = \"DFF_BLOCKED_BY_OTHER_LAYERS\";\n    Activation[Activation[\"DFF_SUPERPRIORITY\"] = Fl(7)] = \"DFF_SUPERPRIORITY\";\n    Activation[Activation[\"DFF_AGGRAVATES_MONSTERS\"] = Fl(8)] = \"DFF_AGGRAVATES_MONSTERS\";\n    Activation[Activation[\"DFF_RESURRECT_ALLY\"] = Fl(9)] = \"DFF_RESURRECT_ALLY\";\n    Activation[Activation[\"DFF_EMIT_EVENT\"] = Fl(10)] = \"DFF_EMIT_EVENT\";\n    Activation[Activation[\"DFF_NO_REDRAW_CELL\"] = Fl(11)] = \"DFF_NO_REDRAW_CELL\";\n    Activation[Activation[\"DFF_ABORT_IF_BLOCKS_MAP\"] = Fl(12)] = \"DFF_ABORT_IF_BLOCKS_MAP\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ITEMS\"] = Fl(13)] = \"DFF_BLOCKED_BY_ITEMS\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ACTORS\"] = Fl(14)] = \"DFF_BLOCKED_BY_ACTORS\";\n    Activation[Activation[\"DFF_ALWAYS_FIRE\"] = Fl(15)] = \"DFF_ALWAYS_FIRE\";\n    Activation[Activation[\"DFF_NO_MARK_FIRED\"] = Fl(16)] = \"DFF_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Activation[Activation[\"DFF_PROTECTED\"] = Fl(19)] = \"DFF_PROTECTED\";\n    Activation[Activation[\"DFF_SPREAD_CIRCLE\"] = Fl(20)] = \"DFF_SPREAD_CIRCLE\";\n    Activation[Activation[\"DFF_SPREAD_LINE\"] = Fl(21)] = \"DFF_SPREAD_LINE\";\n    Activation[Activation[\"DFF_NULL_SURFACE\"] = Fl(22)] = \"DFF_NULL_SURFACE\";\n    Activation[Activation[\"DFF_NULL_LIQUID\"] = Fl(23)] = \"DFF_NULL_LIQUID\";\n    Activation[Activation[\"DFF_NULL_GAS\"] = Fl(24)] = \"DFF_NULL_GAS\";\n    Activation[Activation[\"DFF_EVACUATE_CREATURES\"] = Fl(25)] = \"DFF_EVACUATE_CREATURES\";\n    Activation[Activation[\"DFF_EVACUATE_ITEMS\"] = Fl(26)] = \"DFF_EVACUATE_ITEMS\";\n    Activation[Activation[\"DFF_BUILD_IN_WALLS\"] = Fl(27)] = \"DFF_BUILD_IN_WALLS\";\n    Activation[Activation[\"DFF_MUST_TOUCH_WALLS\"] = Fl(28)] = \"DFF_MUST_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_NO_TOUCH_WALLS\"] = Fl(29)] = \"DFF_NO_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_ONLY_IF_EMPTY\"] = Activation.DFF_BLOCKED_BY_ITEMS | Activation.DFF_BLOCKED_BY_ACTORS] = \"DFF_ONLY_IF_EMPTY\";\n    Activation[Activation[\"DFF_NULLIFY_CELL\"] = Activation.DFF_NULL_SURFACE | Activation.DFF_NULL_LIQUID | Activation.DFF_NULL_GAS] = \"DFF_NULLIFY_CELL\";\n})(Activation || (Activation = {}));\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_OBSTRUCTS_PASSABILITY\"] = Fl(0)] = \"T_OBSTRUCTS_PASSABILITY\";\n    Tile[Tile[\"T_OBSTRUCTS_VISION\"] = Fl(1)] = \"T_OBSTRUCTS_VISION\";\n    Tile[Tile[\"T_OBSTRUCTS_ITEMS\"] = Fl(2)] = \"T_OBSTRUCTS_ITEMS\";\n    Tile[Tile[\"T_OBSTRUCTS_SURFACE\"] = Fl(3)] = \"T_OBSTRUCTS_SURFACE\";\n    Tile[Tile[\"T_OBSTRUCTS_GAS\"] = Fl(4)] = \"T_OBSTRUCTS_GAS\";\n    Tile[Tile[\"T_OBSTRUCTS_LIQUID\"] = Fl(5)] = \"T_OBSTRUCTS_LIQUID\";\n    Tile[Tile[\"T_OBSTRUCTS_TILE_EFFECTS\"] = Fl(6)] = \"T_OBSTRUCTS_TILE_EFFECTS\";\n    Tile[Tile[\"T_OBSTRUCTS_DIAGONAL_MOVEMENT\"] = Fl(7)] = \"T_OBSTRUCTS_DIAGONAL_MOVEMENT\";\n    Tile[Tile[\"T_GAS\"] = Fl(9)] = \"T_GAS\";\n    Tile[Tile[\"T_BRIDGE\"] = Fl(10)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(11)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(12)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(13)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(14)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(15)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(16)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_CAUSES_POISON\"] = Fl(18)] = \"T_CAUSES_POISON\";\n    Tile[Tile[\"T_CAUSES_DAMAGE\"] = Fl(19)] = \"T_CAUSES_DAMAGE\";\n    Tile[Tile[\"T_CAUSES_NAUSEA\"] = Fl(20)] = \"T_CAUSES_NAUSEA\";\n    Tile[Tile[\"T_CAUSES_PARALYSIS\"] = Fl(21)] = \"T_CAUSES_PARALYSIS\";\n    Tile[Tile[\"T_CAUSES_CONFUSION\"] = Fl(22)] = \"T_CAUSES_CONFUSION\";\n    Tile[Tile[\"T_CAUSES_HEALING\"] = Fl(23)] = \"T_CAUSES_HEALING\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(24)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_CAUSES_EXPLOSIVE_DAMAGE\"] = Fl(25)] = \"T_CAUSES_EXPLOSIVE_DAMAGE\";\n    Tile[Tile[\"T_SACRED\"] = Fl(26)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(27)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(28)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(29)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(30)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_OBSTRUCTS_VISION |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    Tile[Tile[\"T_OBSTRUCTS_EVERYTHING\"] = Tile.T_OBSTRUCTS_PASSABILITY |\n        Tile.T_OBSTRUCTS_VISION |\n        Tile.T_OBSTRUCTS_ITEMS |\n        Tile.T_OBSTRUCTS_GAS |\n        Tile.T_OBSTRUCTS_SURFACE |\n        Tile.T_OBSTRUCTS_LIQUID |\n        Tile.T_OBSTRUCTS_DIAGONAL_MOVEMENT] = \"T_OBSTRUCTS_EVERYTHING\";\n    Tile[Tile[\"T_HARMFUL_TERRAIN\"] = Tile.T_CAUSES_POISON |\n        Tile.T_IS_FIRE |\n        Tile.T_CAUSES_DAMAGE |\n        Tile.T_CAUSES_PARALYSIS |\n        Tile.T_CAUSES_CONFUSION |\n        Tile.T_CAUSES_EXPLOSIVE_DAMAGE] = \"T_HARMFUL_TERRAIN\";\n    Tile[Tile[\"T_RESPIRATION_IMMUNITIES\"] = Tile.T_CAUSES_DAMAGE |\n        Tile.T_CAUSES_CONFUSION |\n        Tile.T_CAUSES_PARALYSIS |\n        Tile.T_CAUSES_NAUSEA] = \"T_RESPIRATION_IMMUNITIES\";\n    Tile[Tile[\"T_IS_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_LIQUID\";\n    Tile[Tile[\"T_STAIR_BLOCKERS\"] = Tile.T_OBSTRUCTS_ITEMS |\n        Tile.T_OBSTRUCTS_SURFACE |\n        Tile.T_OBSTRUCTS_GAS |\n        Tile.T_OBSTRUCTS_LIQUID |\n        Tile.T_OBSTRUCTS_TILE_EFFECTS] = \"T_STAIR_BLOCKERS\";\n})(Tile || (Tile = {}));\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    TileMech[TileMech[\"TM_IS_SECRET\"] = Fl(0)] = \"TM_IS_SECRET\";\n    TileMech[TileMech[\"TM_PROMOTES_WITH_KEY\"] = Fl(1)] = \"TM_PROMOTES_WITH_KEY\";\n    TileMech[TileMech[\"TM_PROMOTES_WITHOUT_KEY\"] = Fl(2)] = \"TM_PROMOTES_WITHOUT_KEY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_STEP\"] = Fl(3)] = \"TM_PROMOTES_ON_STEP\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_ITEM_REMOVE\"] = Fl(4)] = \"TM_PROMOTES_ON_ITEM_REMOVE\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_PLAYER_ENTRY\"] = Fl(5)] = \"TM_PROMOTES_ON_PLAYER_ENTRY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_SACRIFICE_ENTRY\"] = Fl(6)] = \"TM_PROMOTES_ON_SACRIFICE_ENTRY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_ELECTRICITY\"] = Fl(7)] = \"TM_PROMOTES_ON_ELECTRICITY\";\n    TileMech[TileMech[\"TM_ALLOWS_SUBMERGING\"] = Fl(8)] = \"TM_ALLOWS_SUBMERGING\";\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_EXTINGUISHES_FIRE\"] = Fl(14)] = \"TM_EXTINGUISHES_FIRE\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_REFLECTS_BOLTS\"] = Fl(16)] = \"TM_REFLECTS_BOLTS\";\n    TileMech[TileMech[\"TM_STAND_IN_TILE\"] = Fl(17)] = \"TM_STAND_IN_TILE\";\n    TileMech[TileMech[\"TM_LIST_IN_SIDEBAR\"] = Fl(18)] = \"TM_LIST_IN_SIDEBAR\";\n    TileMech[TileMech[\"TM_VISUALLY_DISTINCT\"] = Fl(19)] = \"TM_VISUALLY_DISTINCT\";\n    TileMech[TileMech[\"TM_BRIGHT_MEMORY\"] = Fl(20)] = \"TM_BRIGHT_MEMORY\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_CONNECTS_LEVEL\"] = Fl(22)] = \"TM_CONNECTS_LEVEL\";\n    TileMech[TileMech[\"TM_INTERRUPT_EXPLORATION_WHEN_SEEN\"] = Fl(23)] = \"TM_INTERRUPT_EXPLORATION_WHEN_SEEN\";\n    TileMech[TileMech[\"TM_INVERT_WHEN_HIGHLIGHTED\"] = Fl(24)] = \"TM_INVERT_WHEN_HIGHLIGHTED\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    TileMech[TileMech[\"TM_PROMOTES\"] = TileMech.TM_PROMOTES_WITH_KEY |\n        TileMech.TM_PROMOTES_WITHOUT_KEY |\n        TileMech.TM_PROMOTES_ON_STEP |\n        TileMech.TM_PROMOTES_ON_ITEM_REMOVE |\n        TileMech.TM_PROMOTES_ON_SACRIFICE_ENTRY |\n        TileMech.TM_PROMOTES_ON_ELECTRICITY |\n        TileMech.TM_PROMOTES_ON_PLAYER_ENTRY] = \"TM_PROMOTES\";\n})(TileMech || (TileMech = {}));\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"REVEALED\"] = Fl(0)] = \"REVEALED\";\n    Cell[Cell[\"VISIBLE\"] = Fl(1)] = \"VISIBLE\";\n    Cell[Cell[\"WAS_VISIBLE\"] = Fl(2)] = \"WAS_VISIBLE\";\n    Cell[Cell[\"IN_FOV\"] = Fl(3)] = \"IN_FOV\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(4)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_MONSTER\"] = Fl(5)] = \"HAS_MONSTER\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(6)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(7)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_STAIRS\"] = Fl(8)] = \"HAS_STAIRS\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(9)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"CELL_CHANGED\"] = Fl(10)] = \"CELL_CHANGED\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(12)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(13)] = \"IS_CURSOR\";\n    Cell[Cell[\"MAGIC_MAPPED\"] = Fl(14)] = \"MAGIC_MAPPED\";\n    Cell[Cell[\"ITEM_DETECTED\"] = Fl(15)] = \"ITEM_DETECTED\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(16)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"CLAIRVOYANT_VISIBLE\"] = Fl(17)] = \"CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"WAS_CLAIRVOYANT_VISIBLE\"] = Fl(18)] = \"WAS_CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"CLAIRVOYANT_DARKENED\"] = Fl(19)] = \"CLAIRVOYANT_DARKENED\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(20)] = \"IMPREGNABLE\";\n    Cell[Cell[\"TELEPATHIC_VISIBLE\"] = Fl(22)] = \"TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"WAS_TELEPATHIC_VISIBLE\"] = Fl(23)] = \"WAS_TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"MONSTER_DETECTED\"] = Fl(24)] = \"MONSTER_DETECTED\";\n    Cell[Cell[\"WAS_MONSTER_DETECTED\"] = Fl(25)] = \"WAS_MONSTER_DETECTED\";\n    Cell[Cell[\"LIGHT_CHANGED\"] = Fl(27)] = \"LIGHT_CHANGED\";\n    Cell[Cell[\"CELL_LIT\"] = Fl(28)] = \"CELL_LIT\";\n    Cell[Cell[\"IS_IN_SHADOW\"] = Fl(29)] = \"IS_IN_SHADOW\";\n    Cell[Cell[\"CELL_DARK\"] = Fl(30)] = \"CELL_DARK\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.REVEALED |\n        Cell.MAGIC_MAPPED |\n        Cell.ITEM_DETECTED |\n        Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.HAS_STAIRS |\n        Cell.STABLE_MEMORY |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE | Cell.CLAIRVOYANT_VISIBLE | Cell.TELEPATHIC_VISIBLE] = \"ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"HAS_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_MONSTER] = \"HAS_ACTOR\";\n    Cell[Cell[\"IS_WAS_ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE |\n        Cell.WAS_VISIBLE |\n        Cell.CLAIRVOYANT_VISIBLE |\n        Cell.WAS_CLAIRVOYANT_VISIBLE |\n        Cell.TELEPATHIC_VISIBLE |\n        Cell.WAS_TELEPATHIC_VISIBLE] = \"IS_WAS_ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.VISIBLE | Cell.IN_FOV | Cell.NEEDS_REDRAW | Cell.CELL_CHANGED | Cell.IS_IN_SHADOW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n///////////////////////////////////////////////////////\n// CELL MECH\nexport var CellMech;\n(function (CellMech) {\n    CellMech[CellMech[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    CellMech[CellMech[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    CellMech[CellMech[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    CellMech[CellMech[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(4)] = \"CAUGHT_FIRE_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_FIRED_THIS_TURN\"] = Fl(5)] = \"EVENT_FIRED_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_PROTECTED\"] = Fl(6)] = \"EVENT_PROTECTED\";\n    CellMech[CellMech[\"IS_IN_LOOP\"] = Fl(10)] = \"IS_IN_LOOP\";\n    CellMech[CellMech[\"IS_CHOKEPOINT\"] = Fl(11)] = \"IS_CHOKEPOINT\";\n    CellMech[CellMech[\"IS_GATE_SITE\"] = Fl(12)] = \"IS_GATE_SITE\";\n    CellMech[CellMech[\"IS_IN_ROOM_MACHINE\"] = Fl(13)] = \"IS_IN_ROOM_MACHINE\";\n    CellMech[CellMech[\"IS_IN_AREA_MACHINE\"] = Fl(14)] = \"IS_IN_AREA_MACHINE\";\n    CellMech[CellMech[\"IS_POWERED\"] = Fl(15)] = \"IS_POWERED\";\n    CellMech[CellMech[\"IS_IN_MACHINE\"] = CellMech.IS_IN_ROOM_MACHINE | CellMech.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    CellMech[CellMech[\"PERMANENT_MECH_FLAGS\"] = CellMech.SEARCHED_FROM_HERE |\n        CellMech.PRESSURE_PLATE_DEPRESSED |\n        CellMech.KNOWN_TO_BE_TRAP_FREE |\n        CellMech.IS_IN_LOOP |\n        CellMech.IS_CHOKEPOINT |\n        CellMech.IS_GATE_SITE |\n        CellMech.IS_IN_MACHINE] = \"PERMANENT_MECH_FLAGS\";\n})(CellMech || (CellMech = {}));\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_STABLE_GLOW_LIGHTS\"] = Fl(1)] = \"MAP_STABLE_GLOW_LIGHTS\";\n    Map[Map[\"MAP_STABLE_LIGHTS\"] = Fl(2)] = \"MAP_STABLE_LIGHTS\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(7)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = Map.MAP_STABLE_LIGHTS | Map.MAP_STABLE_GLOW_LIGHTS | Map.MAP_FOV_CHANGED] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import { utils as Utils, range as Range, grid as Grid, color as Color, data as DATA, config as CONFIG, } from \"gw-utils\";\nimport * as Flags from \"./flags\";\n// const LIGHT_SMOOTHING_THRESHOLD = 150;       // light components higher than this magnitude will be toned down a little\nexport const config = (CONFIG.light = { INTENSITY_DARK: 20 }); // less than 20% for highest color in rgb\nconst LIGHT_COMPONENTS = Color.make();\nexport class Light {\n    constructor(color, range, fadeTo, pass = false) {\n        this.fadeTo = 0;\n        this.passThroughActors = false;\n        this.id = null;\n        this.color = Color.from(color) || null; /* color */\n        this.radius = Range.make(range || 1);\n        this.fadeTo = fadeTo || 0;\n        this.passThroughActors = pass; // generally no, but miner light does (TODO - string parameter?  'false' or 'true')\n    }\n    copy(other) {\n        this.color = other.color;\n        this.radius.copy(other.radius);\n        this.fadeTo = other.fadeTo;\n        this.passThroughActors = other.passThroughActors;\n    }\n    get intensity() {\n        return intensity(this.color);\n    }\n    // Returns true if any part of the light hit cells that are in the player's field of view.\n    paint(map, x, y, maintainShadows = false, isMinersLight = false) {\n        if (!map)\n            return;\n        let k;\n        // let colorComponents = [0,0,0];\n        let lightMultiplier;\n        let radius = this.radius.value();\n        let outerRadius = Math.ceil(radius);\n        // calcLightComponents(colorComponents, this);\n        LIGHT_COMPONENTS.copy(this.color).bake();\n        // console.log('paint', LIGHT_COMPONENTS.toString(true), x, y, outerRadius);\n        // the miner's light does not dispel IS_IN_SHADOW,\n        // so the player can be in shadow despite casting his own light.\n        const dispelShadows = !isMinersLight &&\n            !maintainShadows &&\n            intensity(LIGHT_COMPONENTS) > config.INTENSITY_DARK;\n        const fadeToPercent = this.fadeTo;\n        const grid = Grid.alloc(map.width, map.height, 0);\n        map.calcFov(grid, x, y, outerRadius, this.passThroughActors ? 0 : Flags.Cell.HAS_ACTOR, Flags.Tile.T_OBSTRUCTS_VISION);\n        let overlappedFieldOfView = false;\n        grid.forCircle(x, y, outerRadius, (v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            lightMultiplier = Math.floor(100 -\n                (100 - fadeToPercent) * (Utils.distanceBetween(x, y, i, j) / radius));\n            for (k = 0; k < 3; k++) {\n                cell.light[k] += Math.floor((LIGHT_COMPONENTS[k] * lightMultiplier) / 100);\n            }\n            if (dispelShadows) {\n                cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n            }\n            if (cell.flags & (Flags.Cell.IN_FOV | Flags.Cell.ANY_KIND_OF_VISIBLE)) {\n                overlappedFieldOfView = true;\n            }\n            // console.log(i, j, lightMultiplier, cell.light);\n        });\n        if (dispelShadows) {\n            const cell = map.cell(x, y);\n            cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n        }\n        Grid.free(grid);\n        return overlappedFieldOfView;\n    }\n}\nexport function intensity(color) {\n    return Math.max(color[0], color[1], color[2]);\n}\nexport function make(...args) {\n    if (args.length == 1) {\n        const config = args[0];\n        if (typeof config === \"string\") {\n            const cached = lights[config];\n            if (cached)\n                return cached;\n            const [color, radius, fadeTo, pass] = config\n                .split(/[,|]/)\n                .map((t) => t.trim());\n            return new Light(Color.from(color), Range.from(radius || 1), Number.parseInt(fadeTo || \"0\"), !!pass && pass !== \"false\");\n        }\n        else if (Array.isArray(config)) {\n            const [color, radius, fadeTo, pass] = config;\n            return new Light(color, radius, fadeTo, pass);\n        }\n        else if (config && config.color) {\n            return new Light(Color.from(config.color), Range.from(config.range), Number.parseInt(config.fadeTo || \"0\"), config.pass);\n        }\n        else {\n            throw new Error(\"Unknown Light config - \" + config);\n        }\n    }\n    else {\n        const [color, radius, fadeTo, pass] = args;\n        return new Light(color, radius, fadeTo, pass);\n    }\n}\nexport const lights = {};\nexport function install(id, ...args) {\n    let source;\n    if (args.length == 1) {\n        source = make(args[0]);\n    }\n    else {\n        source = make(args[0], args[1], args[2], args[3]);\n    }\n    lights[id] = source;\n    if (source)\n        source.id = id;\n    return source;\n}\nexport function installAll(config = {}) {\n    const entries = Object.entries(config);\n    entries.forEach(([name, info]) => {\n        install(name, info);\n    });\n}\n// export function calcLightComponents(colorComponents, theLight) {\n// \tconst randComponent = cosmetic.range(0, theLight.color.rand);\n// \tcolorComponents[0] = randComponent + theLight.color.red + cosmetic.range(0, theLight.color.redRand);\n// \tcolorComponents[1] = randComponent + theLight.color.green + cosmetic.range(0, theLight.color.greenRand);\n// \tcolorComponents[2] = randComponent + theLight.color.blue + cosmetic.range(0, theLight.color.blueRand);\n// }\nfunction updateDisplayDetail(map) {\n    map.eachCell((cell, _i, _j) => {\n        // clear light flags\n        cell.flags &= ~(Flags.Cell.CELL_LIT | Flags.Cell.CELL_DARK);\n        if (cell.light.some((v, i) => v !== cell.oldLight[i])) {\n            cell.flags |= Flags.Cell.LIGHT_CHANGED;\n        }\n        if (cell.isDark()) {\n            cell.flags |= Flags.Cell.CELL_DARK;\n        }\n        else if (!(cell.flags & Flags.Cell.IS_IN_SHADOW)) {\n            cell.flags |= Flags.Cell.CELL_LIT;\n        }\n    });\n}\nexport function backUpLighting(map, lights) {\n    let k;\n    map.eachCell((cell, i, j) => {\n        for (k = 0; k < 3; k++) {\n            lights[i][j][k] = cell.light[k];\n        }\n    });\n}\nexport function restoreLighting(map, lights) {\n    let k;\n    map.eachCell((cell, i, j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = lights[i][j][k];\n        }\n    });\n}\nexport function recordOldLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.oldLight[k] = cell.light[k];\n            cell.flags &= ~Flags.Cell.LIGHT_CHANGED;\n        }\n    });\n}\nexport function zeroOutLights(map) {\n    let k;\n    const light = map.ambientLight ? map.ambientLight : [0, 0, 0];\n    map.eachCell((cell, _i, _j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = light[k];\n        }\n        cell.flags |= Flags.Cell.IS_IN_SHADOW;\n    });\n}\nexport function recordGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.glowLight[k] = cell.light[k];\n        }\n    });\n}\nexport function restoreGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = cell.glowLight[k];\n        }\n    });\n}\nexport function updateLighting(map) {\n    // Copy Light over oldLight\n    recordOldLights(map);\n    if (map.flags & Flags.Map.MAP_STABLE_LIGHTS)\n        return false;\n    // and then zero out Light.\n    zeroOutLights(map);\n    if (map.flags & Flags.Map.MAP_STABLE_GLOW_LIGHTS) {\n        restoreGlowLights(map);\n    }\n    else {\n        // GW.debug.log('painting glow lights.');\n        // Paint all glowing tiles.\n        map.eachGlowLight((light, x, y) => {\n            //   const light = lights[id];\n            if (light) {\n                light.paint(map, x, y);\n            }\n        });\n        recordGlowLights(map);\n        map.setFlag(Flags.Map.MAP_STABLE_GLOW_LIGHTS);\n    }\n    // Cycle through monsters and paint their lights:\n    map.eachDynamicLight((light, x, y) => {\n        light.paint(map, x, y);\n        // if (monst.mutationIndex >= 0 && mutationCatalog[monst.mutationIndex].light != lights['NO_LIGHT']) {\n        //     paint(map, mutationCatalog[monst.mutationIndex].light, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isBurning()) { // monst.status.burning && !(actor.kind.flags & Flags.Actor.AF_FIERY)) {\n        // \tpaint(map, lights.BURNING_CREATURE, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isTelepathicallyRevealed()) {\n        // \tpaint(map, lights['TELEPATHY_LIGHT'], actor.x, actor.y, false, true);\n        // }\n    });\n    // Also paint telepathy lights for dormant monsters.\n    // for (monst of map.dormantMonsters) {\n    //     if (monsterTelepathicallyRevealed(monst)) {\n    //         paint(map, lights['TELEPATHY_LIGHT'], monst.xLoc, monst.yLoc, false, true);\n    //     }\n    // }\n    updateDisplayDetail(map);\n    // Miner's light:\n    const PLAYER = DATA.player;\n    if (PLAYER) {\n        const MINERS_LIGHT = lights.MINERS_LIGHT;\n        if (MINERS_LIGHT && MINERS_LIGHT.radius) {\n            MINERS_LIGHT.paint(map, PLAYER.x, PLAYER.y, true, true);\n        }\n    }\n    map.setFlag(Flags.Map.MAP_STABLE_LIGHTS);\n    // if (PLAYER.status.invisible) {\n    //     PLAYER.info.foreColor = playerInvisibleColor;\n    // } else if (playerInDarkness()) {\n    // \tPLAYER.info.foreColor = playerInDarknessColor;\n    // } else if (pmap[PLAYER.xLoc][PLAYER.yLoc].flags & IS_IN_SHADOW) {\n    // \tPLAYER.info.foreColor = playerInShadowColor;\n    // } else {\n    // \tPLAYER.info.foreColor = playerInLightColor;\n    // }\n    return true;\n}\n// TODO - Move and make more generic\nexport function playerInDarkness(map, PLAYER, darkColor) {\n    const cell = map.cell(PLAYER.x, PLAYER.y);\n    return (cell.light[0] + 10 < darkColor.r &&\n        cell.light[1] + 10 < darkColor.g &&\n        cell.light[2] + 10 < darkColor.b);\n}\n","import { flag as Flag, utils as Utils, color as Color, canvas as Canvas, } from \"gw-utils\";\nimport { Tile as Flags, TileMech as MechFlags, Layer } from \"./flags\";\nimport { lights } from \"./light\";\nexport { Flags, MechFlags, Layer };\n/** Tile Class */\nexport class Tile {\n    /**\n     * Creates a new Tile object.\n     * @param {Object} [config={}] - The configuration of the Tile\n     * @param {String|Number|String[]} [config.flags=0] - Flags and MechFlags for the tile\n     * @param {String} [config.layer=GROUND] - Name of the layer for this tile\n     * @param {String} [config.ch] - The sprite character\n     * @param {String} [config.fg] - The sprite foreground color\n     * @param {String} [config.bg] - The sprite background color\n     */\n    constructor(config, base) {\n        this.flags = 0;\n        this.mechFlags = 0;\n        this.layer = Layer.GROUND;\n        this.priority = -1;\n        this.sprite = {};\n        this.activates = {};\n        this.light = null; // TODO - Light\n        this.flavor = null;\n        this.desc = null;\n        this.article = null;\n        this.dissipate = 2000; // 20 * 100 = 20%\n        if (base !== undefined) {\n            Utils.assignOmitting([\"activates\"], this, base);\n        }\n        Utils.assignOmitting([\n            \"Extends\",\n            \"extends\",\n            \"flags\",\n            \"mechFlags\",\n            \"sprite\",\n            \"activates\",\n            \"ch\",\n            \"fg\",\n            \"bg\",\n            \"light\",\n        ], this, config);\n        this.name = config.name || (base ? base.name : \"tile\");\n        this.id = config.id;\n        if (this.priority < 0) {\n            this.priority = 50;\n        }\n        if (this.layer !== undefined) {\n            if (typeof this.layer === \"string\") {\n                this.layer = Layer[this.layer];\n            }\n        }\n        this.flags = Flag.from(Flags, this.flags, config.flags);\n        this.mechFlags = Flag.from(MechFlags, this.mechFlags, config.mechFlags || config.flags);\n        if (config.light) {\n            if (typeof config.light === \"string\") {\n                this.light = lights[config.light] || null;\n            }\n            else {\n                this.light = config.light;\n            }\n        }\n        if (config.sprite) {\n            this.sprite = Canvas.makeSprite(config.sprite);\n        }\n        else if (config.ch || config.fg || config.bg) {\n            this.sprite = Canvas.makeSprite(config.ch || null, config.fg || null, config.bg || null, config.opacity);\n        }\n        if (base && base.activates) {\n            Object.assign(this.activates, base.activates);\n        }\n        if (config.activates) {\n            Object.entries(config.activates).forEach(([key, info]) => {\n                if (info) {\n                    this.activates[key] = info;\n                }\n                else {\n                    delete this.activates[key];\n                }\n            });\n        }\n    }\n    /**\n     * Returns the flags for the tile after the given event is fired.\n     * @param {string} id - Name of the event to fire.\n     * @returns {number} The flags from the Tile after the event.\n     */\n    successorFlags(id) {\n        const e = this.activates[id];\n        if (!e)\n            return 0;\n        const tileId = e.tile;\n        if (!tileId)\n            return 0;\n        const tile = tiles[tileId];\n        if (!tile)\n            return 0;\n        return tile.flags;\n    }\n    /**\n     * Returns whether or not this tile as the given flag.\n     * Will return true if any bit in the flag is true, so testing with\n     * multiple flags will return true if any of them is set.\n     * @param {number} flag - The flag to check\n     * @returns {boolean} Whether or not the flag is set\n     */\n    hasFlag(flag) {\n        return (this.flags & flag) > 0;\n    }\n    hasFlags(flags, mechFlags) {\n        return ((!flags || this.flags & flags) &&\n            (!mechFlags || this.mechFlags & mechFlags));\n    }\n    hasMechFlag(flag) {\n        return (this.mechFlags & flag) > 0;\n    }\n    hasEvent(name) {\n        return !!this.activates[name];\n    }\n    getName(opts = {}) {\n        if (opts === true) {\n            opts = { article: true };\n        }\n        if (opts === false) {\n            opts = {};\n        }\n        if (typeof opts === \"string\") {\n            opts = { article: opts };\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = this.sprite.fg;\n            if (typeof color !== \"string\") {\n                color = Color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article && this.article) {\n            let article = opts.article === true ? this.article : opts.article;\n            result = article + \" \" + result;\n        }\n        return result;\n    }\n}\n// Types.Tile = Tile;\nexport const tiles = {};\nexport function install(...args) {\n    let id = args[0];\n    let base = args[1];\n    let config = args[2];\n    if (arguments.length == 1) {\n        config = args[0];\n        base = config.Extends || config.extends || {};\n        id = config.id || config.name;\n    }\n    else if (arguments.length == 2) {\n        config = base;\n        base = config.Extends || config.extends || {};\n    }\n    if (typeof base === \"string\") {\n        base = tiles[base] || Utils.ERROR(\"Unknown base tile: \" + base);\n    }\n    config.name = config.name || id.toLowerCase();\n    config.id = id;\n    const tile = new Tile(config, base);\n    tiles[id] = tile;\n    return tile;\n}\n/**\n * Adds multiple tiles to the GW.tiles collection.\n * It extracts all the id:opts pairs from the config object and uses\n * them to call addTileKind.\n * @param {Object} config - The tiles to add in [id, config] pairs\n * @returns {void} Nothing\n * @see addTileKind\n */\nexport function installAll(config) {\n    Object.entries(config).forEach(([id, opts]) => {\n        install(id, opts);\n    });\n}\n"],"names":["Layer","Fl","Flag","fl","Activation","Tile","TileMech","Cell","CellMech","Map","DFF_BLOCKED_BY_ITEMS","DFF_BLOCKED_BY_ACTORS","DFF_NULL_SURFACE","DFF_NULL_LIQUID","DFF_NULL_GAS","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_OBSTRUCTS_PASSABILITY","T_OBSTRUCTS_VISION","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","T_OBSTRUCTS_ITEMS","T_OBSTRUCTS_GAS","T_OBSTRUCTS_SURFACE","T_OBSTRUCTS_LIQUID","T_OBSTRUCTS_DIAGONAL_MOVEMENT","T_CAUSES_POISON","T_CAUSES_DAMAGE","T_CAUSES_PARALYSIS","T_CAUSES_CONFUSION","T_CAUSES_EXPLOSIVE_DAMAGE","T_CAUSES_NAUSEA","T_OBSTRUCTS_TILE_EFFECTS","TM_PROMOTES_WITH_KEY","TM_PROMOTES_WITHOUT_KEY","TM_PROMOTES_ON_STEP","TM_PROMOTES_ON_ITEM_REMOVE","TM_PROMOTES_ON_SACRIFICE_ENTRY","TM_PROMOTES_ON_ELECTRICITY","TM_PROMOTES_ON_PLAYER_ENTRY","REVEALED","MAGIC_MAPPED","ITEM_DETECTED","HAS_ITEM","HAS_DORMANT_MONSTER","HAS_STAIRS","STABLE_MEMORY","IMPREGNABLE","VISIBLE","CLAIRVOYANT_VISIBLE","TELEPATHIC_VISIBLE","HAS_PLAYER","HAS_MONSTER","WAS_VISIBLE","WAS_CLAIRVOYANT_VISIBLE","WAS_TELEPATHIC_VISIBLE","IN_FOV","NEEDS_REDRAW","CELL_CHANGED","IS_IN_SHADOW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_TRAP_FREE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","MAP_STABLE_LIGHTS","MAP_STABLE_GLOW_LIGHTS","MAP_FOV_CHANGED","CONFIG","light","INTENSITY_DARK","Color","make","lights","[object Object]","config","base","this","flags","mechFlags","layer","GROUND","priority","sprite","activates","flavor","desc","article","dissipate","undefined","Utils","assignOmitting","name","id","from","Flags","MechFlags","Canvas","makeSprite","ch","fg","bg","opacity","Object","assign","entries","forEach","key","info","e","tileId","tile","tiles","flag","opts","color","result","toString","install","args","arguments","length","Extends","extends","ERROR","toLowerCase"],"mappings":"sRACO,IAAIA,GACX,SAAWA,GACPA,EAAMA,EAAc,OAAI,GAAK,SAC7BA,EAAMA,EAAe,QAAI,GAAK,UAC9BA,EAAMA,EAAc,OAAI,GAAK,SAC7BA,EAAMA,EAAW,IAAI,GAAK,MAC1BA,EAAMA,EAAY,KAAI,GAAK,OAC3BA,EAAMA,EAAa,MAAI,GAAK,QAC5BA,EAAMA,EAAc,OAAI,GAAK,SAC7BA,EAAMA,EAAU,GAAI,GAAK,KACzBA,EAAMA,EAAU,GAAI,GAAK,KAT7B,CAUGA,IAAUA,EAAQ,KACrB,MAAMC,EAAKC,OAAKC,GAGT,IAAIC,EAoCAC,EA2FAC,EAmCAC,EAkDAC,EAyBAC,GA5OX,SAAWL,GACPA,EAAWA,EAA8B,kBAAIH,EAAG,IAAM,oBACtDG,EAAWA,EAAkC,sBAAIH,EAAG,IAAM,wBAC1DG,EAAWA,EAAkC,sBAAIH,EAAG,IAAM,wBAC1DG,EAAWA,EAAgC,oBAAIH,EAAG,IAAM,sBACxDG,EAAWA,EAAyC,6BAAIH,EAAG,IAAM,+BACjEG,EAAWA,EAAwC,4BAAIH,EAAG,IAAM,8BAChEG,EAAWA,EAA8B,kBAAIH,EAAG,IAAM,oBACtDG,EAAWA,EAAoC,wBAAIH,EAAG,IAAM,0BAC5DG,EAAWA,EAA+B,mBAAIH,EAAG,IAAM,qBACvDG,EAAWA,EAA2B,eAAIH,EAAG,KAAO,iBACpDG,EAAWA,EAA+B,mBAAIH,EAAG,KAAO,qBACxDG,EAAWA,EAAoC,wBAAIH,EAAG,KAAO,0BAC7DG,EAAWA,EAAiC,qBAAIH,EAAG,KAAO,uBAC1DG,EAAWA,EAAkC,sBAAIH,EAAG,KAAO,wBAC3DG,EAAWA,EAA4B,gBAAIH,EAAG,KAAO,kBACrDG,EAAWA,EAA8B,kBAAIH,EAAG,KAAO,oBAGvDG,EAAWA,EAA0B,cAAIH,EAAG,KAAO,gBACnDG,EAAWA,EAA8B,kBAAIH,EAAG,KAAO,oBACvDG,EAAWA,EAA4B,gBAAIH,EAAG,KAAO,kBACrDG,EAAWA,EAA6B,iBAAIH,EAAG,KAAO,mBACtDG,EAAWA,EAA4B,gBAAIH,EAAG,KAAO,kBACrDG,EAAWA,EAAyB,aAAIH,EAAG,KAAO,eAClDG,EAAWA,EAAmC,uBAAIH,EAAG,KAAO,yBAC5DG,EAAWA,EAA+B,mBAAIH,EAAG,KAAO,qBACxDG,EAAWA,EAA+B,mBAAIH,EAAG,KAAO,qBACxDG,EAAWA,EAAiC,qBAAIH,EAAG,KAAO,uBAC1DG,EAAWA,EAA+B,mBAAIH,EAAG,KAAO,qBACxDG,EAAWA,EAA8B,kBAAIA,EAAWM,qBAAuBN,EAAWO,uBAAyB,oBACnHP,EAAWA,EAA6B,iBAAIA,EAAWQ,iBAAmBR,EAAWS,gBAAkBT,EAAWU,cAAgB,mBA/BtI,CAgCGV,IAAeA,EAAa,KAI/B,SAAWC,GACPA,EAAKA,EAA8B,wBAAIJ,EAAG,IAAM,0BAChDI,EAAKA,EAAyB,mBAAIJ,EAAG,IAAM,qBAC3CI,EAAKA,EAAwB,kBAAIJ,EAAG,IAAM,oBAC1CI,EAAKA,EAA0B,oBAAIJ,EAAG,IAAM,sBAC5CI,EAAKA,EAAsB,gBAAIJ,EAAG,IAAM,kBACxCI,EAAKA,EAAyB,mBAAIJ,EAAG,IAAM,qBAC3CI,EAAKA,EAA+B,yBAAIJ,EAAG,IAAM,2BACjDI,EAAKA,EAAoC,8BAAIJ,EAAG,IAAM,gCACtDI,EAAKA,EAAY,MAAIJ,EAAG,IAAM,QAC9BI,EAAKA,EAAe,SAAIJ,EAAG,KAAO,WAClCI,EAAKA,EAAqB,eAAIJ,EAAG,KAAO,iBACxCI,EAAKA,EAAa,OAAIJ,EAAG,KAAO,SAChCI,EAAKA,EAAmB,aAAIJ,EAAG,KAAO,eACtCI,EAAKA,EAA8B,wBAAIJ,EAAG,KAAO,0BACjDI,EAAKA,EAAqB,eAAIJ,EAAG,KAAO,iBACxCI,EAAKA,EAAgB,UAAIJ,EAAG,KAAO,YACnCI,EAAKA,EAAkB,YAAIJ,EAAG,KAAO,cACrCI,EAAKA,EAAsB,gBAAIJ,EAAG,KAAO,kBACzCI,EAAKA,EAAsB,gBAAIJ,EAAG,KAAO,kBACzCI,EAAKA,EAAsB,gBAAIJ,EAAG,KAAO,kBACzCI,EAAKA,EAAyB,mBAAIJ,EAAG,KAAO,qBAC5CI,EAAKA,EAAyB,mBAAIJ,EAAG,KAAO,qBAC5CI,EAAKA,EAAuB,iBAAIJ,EAAG,KAAO,mBAC1CI,EAAKA,EAAgB,UAAIJ,EAAG,KAAO,YACnCI,EAAKA,EAAgC,0BAAIJ,EAAG,KAAO,4BACnDI,EAAKA,EAAe,SAAIJ,EAAG,KAAO,WAClCI,EAAKA,EAAkB,YAAIJ,EAAG,KAAO,cACrCI,EAAKA,EAAoB,cAAIJ,EAAG,KAAO,gBACvCI,EAAKA,EAAe,SAAIJ,EAAG,KAAO,WAClCI,EAAKA,EAAgB,UAAIJ,EAAG,KAAO,YACnCI,EAAKA,EAAmB,aAAIA,EAAKU,YAAcV,EAAKW,cAAgBX,EAAKY,UAAY,eACrFZ,EAAKA,EAAwB,kBAAIA,EAAKa,wBAClCb,EAAKc,mBACLd,EAAKe,eACLf,EAAKgB,OACLhB,EAAKiB,aACLjB,EAAKkB,wBACLlB,EAAKmB,cAAgB,oBACzBnB,EAAKA,EAAwB,kBAAIA,EAAKa,wBAClCb,EAAKe,eACLf,EAAKoB,UACLpB,EAAKgB,OACLhB,EAAKiB,aACLjB,EAAKqB,UACLrB,EAAKkB,wBACLlB,EAAKsB,aAAe,oBACxBtB,EAAKA,EAAsB,gBAAIA,EAAKa,wBAChCb,EAAKe,eACLf,EAAKoB,UACLpB,EAAKgB,OACLhB,EAAKiB,cAAgB,kBACzBjB,EAAKA,EAA6B,uBAAIA,EAAKe,eACvCf,EAAKgB,OACLhB,EAAKiB,aACLjB,EAAKkB,yBAA2B,yBACpClB,EAAKA,EAAyB,mBAAIA,EAAKa,wBACnCb,EAAKe,eACLf,EAAKoB,UACLpB,EAAKgB,OACLhB,EAAKiB,aACLjB,EAAKkB,yBAA2B,qBACpClB,EAAKA,EAAoB,cAAIA,EAAKiB,aAAejB,EAAKgB,QAAU,gBAChEhB,EAAKA,EAAuB,iBAAIA,EAAKe,eAAiBf,EAAKgB,OAAShB,EAAKiB,cAAgB,mBACzFjB,EAAKA,EAA6B,uBAAIA,EAAKa,wBACvCb,EAAKc,mBACLd,EAAKuB,kBACLvB,EAAKwB,gBACLxB,EAAKyB,oBACLzB,EAAK0B,mBACL1B,EAAK2B,+BAAiC,yBAC1C3B,EAAKA,EAAwB,kBAAIA,EAAK4B,gBAClC5B,EAAKqB,UACLrB,EAAK6B,gBACL7B,EAAK8B,mBACL9B,EAAK+B,mBACL/B,EAAKgC,2BAA6B,oBACtChC,EAAKA,EAA+B,yBAAIA,EAAK6B,gBACzC7B,EAAK+B,mBACL/B,EAAK8B,mBACL9B,EAAKiC,iBAAmB,2BAC5BjC,EAAKA,EAAkB,YAAIA,EAAKgB,OAAShB,EAAKe,eAAiBf,EAAKiB,cAAgB,cACpFjB,EAAKA,EAAuB,iBAAIA,EAAKuB,kBACjCvB,EAAKyB,oBACLzB,EAAKwB,gBACLxB,EAAK0B,mBACL1B,EAAKkC,0BAA4B,mBAtFzC,CAuFGlC,IAASA,EAAO,KAInB,SAAWC,GACPA,EAASA,EAAuB,aAAIL,EAAG,IAAM,eAC7CK,EAASA,EAA+B,qBAAIL,EAAG,IAAM,uBACrDK,EAASA,EAAkC,wBAAIL,EAAG,IAAM,0BACxDK,EAASA,EAA8B,oBAAIL,EAAG,IAAM,sBACpDK,EAASA,EAAqC,2BAAIL,EAAG,IAAM,6BAC3DK,EAASA,EAAsC,4BAAIL,EAAG,IAAM,8BAC5DK,EAASA,EAAyC,+BAAIL,EAAG,IAAM,iCAC/DK,EAASA,EAAqC,2BAAIL,EAAG,IAAM,6BAC3DK,EAASA,EAA+B,qBAAIL,EAAG,IAAM,uBACrDK,EAASA,EAAsB,YAAIL,EAAG,IAAM,cAC5CK,EAASA,EAAgC,sBAAIL,EAAG,KAAO,wBACvDK,EAASA,EAA+B,qBAAIL,EAAG,KAAO,uBACtDK,EAASA,EAAqC,2BAAIL,EAAG,KAAO,6BAC5DK,EAASA,EAA4B,kBAAIL,EAAG,KAAO,oBACnDK,EAASA,EAA2B,iBAAIL,EAAG,KAAO,mBAClDK,EAASA,EAA6B,mBAAIL,EAAG,KAAO,qBACpDK,EAASA,EAA+B,qBAAIL,EAAG,KAAO,uBACtDK,EAASA,EAA2B,iBAAIL,EAAG,KAAO,mBAClDK,EAASA,EAA+B,qBAAIL,EAAG,KAAO,uBACtDK,EAASA,EAA4B,kBAAIL,EAAG,KAAO,oBACnDK,EAASA,EAA6C,mCAAIL,EAAG,KAAO,qCACpEK,EAASA,EAAqC,2BAAIL,EAAG,KAAO,6BAC5DK,EAASA,EAAsC,4BAAIL,EAAG,KAAO,8BAC7DK,EAASA,EAAsB,YAAIA,EAASkC,qBACxClC,EAASmC,wBACTnC,EAASoC,oBACTpC,EAASqC,2BACTrC,EAASsC,+BACTtC,EAASuC,2BACTvC,EAASwC,6BAA+B,cA9BhD,CA+BGxC,IAAaA,EAAW,KAI3B,SAAWC,GACPA,EAAKA,EAAe,SAAIN,EAAG,IAAM,WACjCM,EAAKA,EAAc,QAAIN,EAAG,IAAM,UAChCM,EAAKA,EAAkB,YAAIN,EAAG,IAAM,cACpCM,EAAKA,EAAa,OAAIN,EAAG,IAAM,SAC/BM,EAAKA,EAAiB,WAAIN,EAAG,IAAM,aACnCM,EAAKA,EAAkB,YAAIN,EAAG,IAAM,cACpCM,EAAKA,EAA0B,oBAAIN,EAAG,IAAM,sBAC5CM,EAAKA,EAAe,SAAIN,EAAG,IAAM,WACjCM,EAAKA,EAAiB,WAAIN,EAAG,IAAM,aACnCM,EAAKA,EAAmB,aAAIN,EAAG,IAAM,eACrCM,EAAKA,EAAmB,aAAIN,EAAG,KAAO,eACtCM,EAAKA,EAAiB,WAAIN,EAAG,KAAO,aACpCM,EAAKA,EAAgB,UAAIN,EAAG,KAAO,YACnCM,EAAKA,EAAmB,aAAIN,EAAG,KAAO,eACtCM,EAAKA,EAAoB,cAAIN,EAAG,KAAO,gBACvCM,EAAKA,EAAoB,cAAIN,EAAG,KAAO,gBACvCM,EAAKA,EAA0B,oBAAIN,EAAG,KAAO,sBAC7CM,EAAKA,EAA8B,wBAAIN,EAAG,KAAO,0BACjDM,EAAKA,EAA2B,qBAAIN,EAAG,KAAO,uBAC9CM,EAAKA,EAAkB,YAAIN,EAAG,KAAO,cACrCM,EAAKA,EAAyB,mBAAIN,EAAG,KAAO,qBAC5CM,EAAKA,EAA6B,uBAAIN,EAAG,KAAO,yBAChDM,EAAKA,EAAuB,iBAAIN,EAAG,KAAO,mBAC1CM,EAAKA,EAA2B,qBAAIN,EAAG,KAAO,uBAC9CM,EAAKA,EAAoB,cAAIN,EAAG,KAAO,gBACvCM,EAAKA,EAAe,SAAIN,EAAG,KAAO,WAClCM,EAAKA,EAAmB,aAAIN,EAAG,KAAO,eACtCM,EAAKA,EAAgB,UAAIN,EAAG,KAAO,YACnCM,EAAKA,EAA2B,qBAAIA,EAAKwC,SACrCxC,EAAKyC,aACLzC,EAAK0C,cACL1C,EAAK2C,SACL3C,EAAK4C,oBACL5C,EAAK6C,WACL7C,EAAK8C,cACL9C,EAAK+C,aAAe,uBACxB/C,EAAKA,EAA0B,oBAAIA,EAAKgD,QAAUhD,EAAKiD,oBAAsBjD,EAAKkD,oBAAsB,sBACxGlD,EAAKA,EAAgB,UAAIA,EAAKmD,WAAanD,EAAKoD,aAAe,YAC/DpD,EAAKA,EAAiC,2BAAIA,EAAKgD,QAC3ChD,EAAKqD,YACLrD,EAAKiD,oBACLjD,EAAKsD,wBACLtD,EAAKkD,mBACLlD,EAAKuD,wBAA0B,6BACnCvD,EAAKA,EAAmB,aAAIA,EAAKgD,QAAUhD,EAAKwD,OAASxD,EAAKyD,aAAezD,EAAK0D,aAAe1D,EAAK2D,cAAgB,eA7C1H,CA8CG3D,IAASA,EAAO,KAInB,SAAWC,GACPA,EAASA,EAA6B,mBAAIP,EAAG,IAAM,qBACnDO,EAASA,EAAmC,yBAAIP,EAAG,IAAM,2BACzDO,EAASA,EAAgC,sBAAIP,EAAG,IAAM,wBACtDO,EAASA,EAAgC,sBAAIP,EAAG,IAAM,wBACtDO,EAASA,EAAgC,sBAAIP,EAAG,IAAM,wBACtDO,EAASA,EAA0B,gBAAIP,EAAG,IAAM,kBAChDO,EAASA,EAAqB,WAAIP,EAAG,KAAO,aAC5CO,EAASA,EAAwB,cAAIP,EAAG,KAAO,gBAC/CO,EAASA,EAAuB,aAAIP,EAAG,KAAO,eAC9CO,EAASA,EAA6B,mBAAIP,EAAG,KAAO,qBACpDO,EAASA,EAA6B,mBAAIP,EAAG,KAAO,qBACpDO,EAASA,EAAqB,WAAIP,EAAG,KAAO,aAC5CO,EAASA,EAAwB,cAAIA,EAAS2D,mBAAqB3D,EAAS4D,oBAAsB,gBAClG5D,EAASA,EAA+B,qBAAIA,EAAS6D,mBACjD7D,EAAS8D,yBACT9D,EAAS+D,sBACT/D,EAASgE,WACThE,EAASiE,cACTjE,EAASkE,aACTlE,EAASmE,eAAiB,uBApBlC,CAqBGnE,IAAaA,EAAW,KAI3B,SAAWC,GACPA,EAAIA,EAAiB,YAAIR,EAAG,IAAM,cAClCQ,EAAIA,EAA4B,uBAAIR,EAAG,IAAM,yBAC7CQ,EAAIA,EAAuB,kBAAIR,EAAG,IAAM,oBACxCQ,EAAIA,EAAoB,eAAIR,EAAG,IAAM,iBACrCQ,EAAIA,EAAqB,gBAAIR,EAAG,IAAM,kBACtCQ,EAAIA,EAAmB,cAAIR,EAAG,IAAM,gBACpCQ,EAAIA,EAAgB,WAAIR,EAAG,IAAM,aACjCQ,EAAIA,EAAqB,gBAAIR,EAAG,IAAM,kBACtCQ,EAAIA,EAAiB,YAAIA,EAAImE,kBAAoBnE,EAAIoE,uBAAyBpE,EAAIqE,iBAAmB,cATzG,CAUGrE,IAAQA,EAAM,KCrQMsE,SAAOC,MAAQ,CAAEC,eAAgB,IAC/BC,QAAMC,OADxB,MAkGMC,EAAS,GChGf,MAAM/E,EAUTgF,YAAYC,EAAQC,GAChBC,KAAKC,MAAQ,EACbD,KAAKE,UAAY,EACjBF,KAAKG,MAAQ3F,EAAM4F,OACnBJ,KAAKK,UAAY,EACjBL,KAAKM,OAAS,GACdN,KAAKO,UAAY,GACjBP,KAAKR,MAAQ,KACbQ,KAAKQ,OAAS,KACdR,KAAKS,KAAO,KACZT,KAAKU,QAAU,KACfV,KAAKW,UAAY,SACJC,IAATb,GACAc,QAAMC,eAAe,CAAC,aAAcd,KAAMD,GAE9Cc,QAAMC,eAAe,CACjB,UACA,UACA,QACA,YACA,SACA,YACA,KACA,KACA,KACA,SACDd,KAAMF,GACTE,KAAKe,KAAOjB,EAAOiB,OAAShB,EAAOA,EAAKgB,KAAO,QAC/Cf,KAAKgB,GAAKlB,EAAOkB,GACbhB,KAAKK,SAAW,IAChBL,KAAKK,SAAW,SAEDO,IAAfZ,KAAKG,OACqB,iBAAfH,KAAKG,QACZH,KAAKG,MAAQ3F,EAAMwF,KAAKG,QAGhCH,KAAKC,MAAQvF,OAAKuG,KAAKC,EAAOlB,KAAKC,MAAOH,EAAOG,OACjDD,KAAKE,UAAYxF,OAAKuG,KAAKE,EAAWnB,KAAKE,UAAWJ,EAAOI,WAAaJ,EAAOG,OAC7EH,EAAON,QACqB,iBAAjBM,EAAON,MACdQ,KAAKR,MAAQI,EAAOE,EAAON,QAAU,KAGrCQ,KAAKR,MAAQM,EAAON,OAGxBM,EAAOQ,OACPN,KAAKM,OAASc,SAAOC,WAAWvB,EAAOQ,SAElCR,EAAOwB,IAAMxB,EAAOyB,IAAMzB,EAAO0B,MACtCxB,KAAKM,OAASc,SAAOC,WAAWvB,EAAOwB,IAAM,KAAMxB,EAAOyB,IAAM,KAAMzB,EAAO0B,IAAM,KAAM1B,EAAO2B,UAEhG1B,GAAQA,EAAKQ,WACbmB,OAAOC,OAAO3B,KAAKO,UAAWR,EAAKQ,WAEnCT,EAAOS,WACPmB,OAAOE,QAAQ9B,EAAOS,WAAWsB,SAAQ,EAAEC,EAAKC,MACxCA,EACA/B,KAAKO,UAAUuB,GAAOC,SAGf/B,KAAKO,UAAUuB,MAUtCjC,eAAemB,GACX,MAAMgB,EAAIhC,KAAKO,UAAUS,GACzB,IAAKgB,EACD,OAAO,EACX,MAAMC,EAASD,EAAEE,KACjB,IAAKD,EACD,OAAO,EACX,MAAMC,EAAOC,EAAMF,GACnB,OAAKC,EAEEA,EAAKjC,MADD,EAUfJ,QAAQuC,GACJ,OAAQpC,KAAKC,MAAQmC,GAAQ,EAEjCvC,SAASI,EAAOC,GACZ,QAAUD,GAASD,KAAKC,MAAQA,MAC1BC,GAAaF,KAAKE,UAAYA,GAExCL,YAAYuC,GACR,OAAQpC,KAAKE,UAAYkC,GAAQ,EAErCvC,SAASkB,GACL,QAASf,KAAKO,UAAUQ,GAE5BlB,QAAQwC,EAAO,IAUX,IATa,IAATA,IACAA,EAAO,CAAE3B,SAAS,KAET,IAAT2B,IACAA,EAAO,IAES,iBAATA,IACPA,EAAO,CAAE3B,QAAS2B,KAEjBA,EAAK3B,UAAY2B,EAAKC,MACvB,OAAOtC,KAAKe,KAChB,IAAIwB,EAASvC,KAAKe,KAClB,GAAIsB,EAAKC,MAAO,CACZ,IAAIA,EAAQtC,KAAKM,OAAOiB,GACH,iBAAVe,IACPA,EAAQ5C,QAAMuB,KAAKqB,GAAOE,YAE9BD,EAAS,IAAID,KAAStC,KAAKe,QAE/B,GAAIsB,EAAK3B,SAAWV,KAAKU,QAAS,CAE9B6B,IAD+B,IAAjBF,EAAK3B,QAAmBV,KAAKU,QAAU2B,EAAK3B,SACvC,IAAM6B,EAE7B,OAAOA,GAIR,MAAMJ,EAAQ,GACd,SAASM,KAAWC,GACvB,IAAI1B,EAAK0B,EAAK,GACV3C,EAAO2C,EAAK,GACZ5C,EAAS4C,EAAK,GACM,GAApBC,UAAUC,QACV9C,EAAS4C,EAAK,GACd3C,EAAOD,EAAO+C,SAAW/C,EAAOgD,SAAW,GAC3C9B,EAAKlB,EAAOkB,IAAMlB,EAAOiB,MAEA,GAApB4B,UAAUC,SACf9C,EAASC,EACTA,EAAOD,EAAO+C,SAAW/C,EAAOgD,SAAW,IAE3B,iBAAT/C,IACPA,EAAOoC,EAAMpC,IAASc,QAAMkC,MAAM,sBAAwBhD,IAE9DD,EAAOiB,KAAOjB,EAAOiB,MAAQC,EAAGgC,cAChClD,EAAOkB,GAAKA,EACZ,MAAMkB,EAAO,IAAIrH,EAAKiF,EAAQC,GAE9B,OADAoC,EAAMnB,GAAMkB,EACLA,kIAUJ,SAAoBpC,GACvB4B,OAAOE,QAAQ9B,GAAQ+B,SAAQ,EAAEb,EAAIqB,MACjCI,EAAQzB,EAAIqB"}