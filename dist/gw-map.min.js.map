{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/actor/actor.js","../js/actor/kind.js","../js/actor/make.js","../js/item/item.js","../js/item/kind.js","../js/item/make.js","../js/effect/handler.js","../js/effect/make.js","../js/tile/tile.js","../js/tile/tiles.js","../js/tile/index.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/actorLayer.js","../js/layer/itemLayer.js","../js/layer/gasLayer.js","../js/effect/fire.js","../js/effect/handlers/emit.js","../js/effect/handlers/fn.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/effect.js","../js/effect/handlers/tile.js","../js/layer/fireLayer.js","../js/map/cell.js","../js/map/cellMemory.js","../js/map/map.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/path.js","../js/horde/horde.js","../js/horde/make.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to help memory\n    Cell[Cell[\"HAS_SURFACE\"] = Fl(16)] = \"HAS_SURFACE\";\n    Cell[Cell[\"HAS_LIQUID\"] = Fl(17)] = \"HAS_LIQUID\";\n    Cell[Cell[\"HAS_GAS\"] = Fl(18)] = \"HAS_GAS\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(19)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(20)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(21)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(22)] = \"HAS_ITEM\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(23)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(24)] = \"IS_CURSOR\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_TRAP_FREE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_SPREAD_CIRCLE\"] = Fl(13)] = \"E_SPREAD_CIRCLE\";\n    Effect[Effect[\"E_SPREAD_LINE\"] = Fl(14)] = \"E_SPREAD_LINE\";\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nexport class Entity {\n    constructor(kind) {\n        this.map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.lastSeen = null;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requiredTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requiredTileTags) {\n            if (typeof config.requiredTileTags === 'string') {\n                this.requiredTileTags = config.requiredTileTags\n                    .split(/[,|]/)\n                    .map((t) => t.trim());\n            }\n            else {\n                this.requiredTileTags = config.requiredTileTags\n                    .slice()\n                    .map((t) => t.trim());\n            }\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAllTileTags(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    avoidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAnyTileTag(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n}\n","import * as Entity from '../entity';\nimport * as Flags from '../flags';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.next = null;\n        this.leader = null;\n        this.items = null;\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    async pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    async dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport { Actor } from './actor';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    async pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    async dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n}\n","// import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","// @ts-nocheck\nexport class Handler {\n    make(src, dest) {\n        return true;\n    }\n    fire(config, map, x, y, ctx) {\n        return false;\n    }\n}\nexport const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id] = handler;\n}\n","import * as GWU from 'gw-utils';\nimport { handlers } from './handler';\nimport { Effect as Flags } from '../flags';\nexport function make(opts) {\n    var _a;\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    if (typeof opts === 'string') {\n        throw new Error('Cannot make effect from string: ' + opts);\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    // now make base effect stuff\n    const info = {\n        flags: GWU.flag.from(Flags, opts.flags),\n        chance: (_a = opts.chance) !== null && _a !== void 0 ? _a : 0,\n        next: null,\n        id: opts.id || 'n/a',\n    };\n    if (opts.next) {\n        if (typeof opts.next === 'string') {\n            info.next = opts.next;\n        }\n        else {\n            info.next = make(opts.next);\n        }\n    }\n    // and all the handlers\n    Object.values(handlers).forEach((v) => v.make(opts, info));\n    return info;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'string') {\n        const effect = effects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\n// resetMessageDisplayed\nexport function reset(effect) {\n    effect.flags &= ~Flags.E_FIRED;\n}\nexport function resetAll() {\n    Object.values(effects).forEach((e) => reset(e));\n}\nexport const effects = {};\nexport function install(id, config) {\n    const effect = make(config);\n    effects[id] = effect;\n    effect.id = id;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/make';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string') {\n                effects[key] = value;\n                return;\n            }\n            effects[key] = makeEffect(value);\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as Tile from './tile';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: [30, 30, 30, 20, 0, 0, 0],\n    bg: [2, 2, 10, 0, 2, 2, 0],\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: { tile: 'DOOR_OPEN' },\n        open: { tile: 'DOOR_OPEN_ALWAYS' },\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            tile: 'DOOR',\n            flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY',\n        },\n        enter: null,\n        open: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: { emit: 'UP_STAIRS' },\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: { emit: 'DOWN_STAIRS' },\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: [5, 8, 20, 10, 0, 4, 15, true],\n    bg: [10, 15, 41, 6, 5, 5, 5, true],\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: [5, 8, 10, 10, 0, 4, 15, true],\n    bg: [10, 30, 30, 6, 0, 10, 10, true],\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    depth: 'SURFACE',\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\nimport './tiles';\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import * as Tile from '../tile';\nimport * as Flags from '../flags';\nimport { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts = {}) {\n        const cell = this.map.cell(x, y);\n        const current = cell.depthTile(tile.depth) || Tile.tiles.NULL;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (cell.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && cell.hasItem())\n            return false;\n        if (opts.blockedByActors && cell.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && cell.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = cell.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === Tile.tiles.NULL) {\n                this.setTile(x, y, Tile.get(tile.groundTile));\n            }\n        }\n        // if nothing changed... return false\n        if (!cell.setTile(tile))\n            return false;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            cell.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            cell.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        if (this.map.fov.isAnyKindOfVisible(x, y)) {\n            cell.clearCellFlag(Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT);\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            cell.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire, pressure plates and key-activated tiles.\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (!cell.hasCellFlag(Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM) &&\n                    cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)) {\n                    cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n                }\n                if (cell.hasEffect('noKey') && !this.map.hasKey(x, y)) {\n                    await cell.fire('noKey', this.map, x, y);\n                }\n            }\n        }\n        return true;\n    }\n    putAppearance(dest, x, y) {\n        const cell = this.map.cell(x, y);\n        const tile = cell.depthTile(this.depth);\n        if (tile) {\n            dest.drawSprite(tile.sprite);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { MapLayer } from './mapLayer';\nexport class ActorLayer extends MapLayer {\n    constructor(map, name = 'actor') {\n        super(map, name);\n    }\n    async addActor(x, y, obj, _opts) {\n        const actor = obj;\n        if (actor.isDestroyed)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (actor.forbidsCell(cell))\n            return false;\n        if (!GWU.list.push(cell, 'actor', obj))\n            return false;\n        if (obj.isPlayer()) {\n            cell.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        obj.x = x;\n        obj.y = y;\n        obj.map = this.map;\n        if (obj.key && obj.key.matches(x, y) && cell.hasEffect('key')) {\n            await cell.fire('key', this.map, x, y);\n        }\n        cell.needsRedraw = true;\n        if (this.map.fov.isAnyKindOfVisible(x, y)) {\n            cell.clearCellFlag(Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT);\n        }\n        return true;\n    }\n    forceActor(x, y, actor, _opts) {\n        if (actor.isDestroyed)\n            return false;\n        if (this.map.hasXY(actor.x, actor.y)) {\n            const oldCell = this.map.cell(actor.x, actor.y);\n            oldCell.removeActor(actor);\n        }\n        const cell = this.map.cell(x, y);\n        if (!GWU.list.push(cell, 'actor', actor))\n            return false;\n        if (actor.isPlayer()) {\n            cell.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        actor.x = x;\n        actor.y = y;\n        actor.map = this.map;\n        cell.needsRedraw = true;\n        if (this.map.fov.isAnyKindOfVisible(x, y)) {\n            cell.clearCellFlag(Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT);\n        }\n        return true;\n    }\n    async removeActor(actor) {\n        const x = actor.x;\n        const y = actor.y;\n        const cell = this.map.cell(x, y);\n        if (!GWU.list.remove(cell, 'actor', actor))\n            return false;\n        if (actor.isPlayer()) {\n            cell.clearCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        if (actor.key && actor.key.matches(x, y) && cell.hasEffect('nokey')) {\n            await cell.fire('nokey', this.map, x, y);\n        }\n        cell.needsRedraw = true;\n        if (this.map.fov.isAnyKindOfVisible(x, y)) {\n            cell.clearCellFlag(Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT);\n        }\n        return true;\n    }\n    putAppearance(dest, x, y) {\n        const cell = this.map.cell(x, y);\n        if (!cell.actor)\n            return;\n        dest.drawSprite(cell.actor.sprite);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { MapLayer } from './mapLayer';\nimport * as Flags from '../flags';\nexport class ItemLayer extends MapLayer {\n    constructor(map, name = 'item') {\n        super(map, name);\n    }\n    async addItem(x, y, obj, _opts) {\n        const item = obj;\n        if (item.isDestroyed)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (item.forbidsCell(cell))\n            return false;\n        if (obj.key && obj.key.matches(x, y) && cell.hasEffect('key')) {\n            await cell.fire('key', this.map, x, y);\n            if (obj.key.disposable) {\n                obj.destroy();\n                return true; // ??? didSomething?\n            }\n        }\n        if (!GWU.list.push(cell, 'item', obj))\n            return false;\n        obj.x = x;\n        obj.y = y;\n        obj.depth = this.depth;\n        obj.map = this.map;\n        if (cell.hasEffect('addItem')) {\n            await cell.fire('addItem', this.map, x, y, { item });\n        }\n        cell.needsRedraw = true;\n        if (this.map.fov.isAnyKindOfVisible(x, y)) {\n            cell.clearCellFlag(Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT);\n        }\n        return true;\n    }\n    forceItem(x, y, obj, _opts) {\n        if (!this.map.hasXY(x, y))\n            return false;\n        if (this.map.hasXY(obj.x, obj.y)) {\n            const oldCell = this.map.cell(obj.x, obj.y);\n            GWU.list.remove(oldCell, 'item', obj);\n            obj.x = -1;\n            obj.y = -1;\n        }\n        const cell = this.map.cell(x, y);\n        if (!GWU.list.push(cell, 'item', obj))\n            return false;\n        obj.x = x;\n        obj.y = y;\n        obj.depth = this.depth;\n        obj.map = this.map;\n        cell.needsRedraw = true;\n        if (this.map.fov.isAnyKindOfVisible(x, y)) {\n            cell.clearCellFlag(Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT);\n        }\n        return true;\n    }\n    async removeItem(obj) {\n        const x = obj.x;\n        const y = obj.y;\n        const cell = this.map.cell(x, y);\n        if (!GWU.list.remove(cell, 'item', obj))\n            return false;\n        if (obj.key && obj.key.matches(x, y) && cell.hasEffect('nokey')) {\n            await cell.fire('nokey', this.map, x, y);\n        }\n        else if (cell.hasEffect('removeItem')) {\n            await cell.fire('removeItem', this.map, x, y);\n        }\n        cell.needsRedraw = true;\n        if (this.map.fov.isAnyKindOfVisible(x, y)) {\n            cell.clearCellFlag(Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT);\n        }\n        return true;\n    }\n    putAppearance(dest, x, y) {\n        const cell = this.map.cell(x, y);\n        if (!cell.item)\n            return;\n        dest.drawSprite(cell.item.sprite);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    async tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n    putAppearance(dest, x, y) {\n        const volume = this.volume[x][y];\n        if (!volume)\n            return;\n        const cell = this.map.cell(x, y);\n        const tile = cell.depthTile(this.depth);\n        if (tile) {\n            const opacity = this.calcOpacity(volume);\n            dest.drawSprite(tile.sprite, opacity);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Effect as Flags } from '../flags';\nimport { from } from './make';\nimport { handlers } from './handler';\nexport async function fire(effect, map, x, y, ctx_ = {}) {\n    if (!effect)\n        return false;\n    if (typeof effect === 'string') {\n        const name = effect;\n        effect = from(name);\n        if (!effect)\n            throw new Error('Failed to find effect: ' + name);\n    }\n    const ctx = ctx_;\n    if (!ctx.force && effect.chance && !map.rng.chance(effect.chance, 10000))\n        return false;\n    const grid = (ctx.grid = GWU.grid.alloc(map.width, map.height));\n    let didSomething = false;\n    const allHandlers = Object.values(handlers);\n    for (let h of allHandlers) {\n        if (await h.fire(effect, map, x, y, ctx)) {\n            didSomething = true;\n        }\n    }\n    // do the next effect - if applicable\n    if (effect.next &&\n        (didSomething || effect.flags & Flags.E_NEXT_ALWAYS) &&\n        !GWU.data.gameHasEnded) {\n        const nextInfo = typeof effect.next === 'string' ? from(effect.next) : effect.next;\n        if (effect.flags & Flags.E_NEXT_EVERYWHERE) {\n            await grid.forEachAsync(async (v, i, j) => {\n                if (!v)\n                    return;\n                didSomething =\n                    (await fire(nextInfo, map, i, j, ctx)) || didSomething;\n            });\n        }\n        else {\n            didSomething =\n                (await fire(nextInfo, map, x, y, ctx)) || didSomething;\n        }\n    }\n    // bookkeeping\n    if (didSomething &&\n        map.isVisible(x, y) &&\n        !(effect.flags & Flags.E_NO_MARK_FIRED)) {\n        effect.flags |= Flags.E_FIRED;\n    }\n    GWU.grid.free(grid);\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// EMIT\nexport class EmitEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.emit)\n            return true;\n        if (typeof src.emit !== 'string') {\n            throw new Error('emit effects must be string name to emit: { emit: \"EVENT\" }');\n        }\n        dest.emit = src.emit;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (config.emit) {\n            await GWU.events.emit(config.emit, x, y, ctx);\n            return true;\n        }\n        return false;\n    }\n}\ninstallHandler('emit', new EmitEffect());\n","import { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// FN\nexport class FnEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.fn)\n            return true;\n        if (typeof src.fn !== 'function') {\n            throw new Error('fn effects must be functions.');\n        }\n        dest.fn = src.fn;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.fn) {\n            return await config.fn(config, map, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('fn', new FnEffect());\n","import * as GWU from 'gw-utils';\nimport { Handler, installHandler } from '../handler';\nimport { Effect as Flags } from '../../flags';\n//////////////////////////////////////////////\n// MESSAGE\nexport class MessageEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.message)\n            return true;\n        if (typeof src.message !== 'string') {\n            throw new Error('Emit must be configured with name of event to emit');\n        }\n        dest.message = src.message;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (!config.message)\n            return false;\n        const fired = !!(config.flags & Flags.E_FIRED);\n        if (config.message &&\n            config.message.length &&\n            !fired &&\n            map.isVisible(x, y)) {\n            GWU.message.addAt(x, y, config.message, ctx);\n            return true;\n        }\n        return false;\n    }\n}\ninstallHandler('message', new MessageEffect());\n","import { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// ActivateMachine\nexport class ActivateMachineEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.activateMachine)\n            return true;\n        dest.activateMachine = true;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.activateMachine) {\n            const cell = map.cell(x, y);\n            const machine = cell.machineId;\n            if (!machine)\n                return false;\n            return await map.activateMachine(machine, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('activateMachine', new ActivateMachineEffect());\n","import { Handler, installHandler } from '../handler';\nimport * as FIRE from '../fire';\n//////////////////////////////////////////////\n// EMIT\nexport class EffectEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.effect)\n            return true;\n        dest.effect = src.effect;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.effect) {\n            return await FIRE.fire(config.effect, map, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('effect', new EffectEffect());\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../../flags';\nimport * as Tile from '../../tile';\nimport { Handler, installHandler } from '../handler';\nimport { Actor } from '../../actor';\nimport { Item } from '../../item';\nexport class SpawnEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!src.tile)\n            return true; // no error\n        let config = src.tile;\n        if (typeof config === 'string') {\n            const parts = config.split(/[,|]/).map((p) => p.trim());\n            config = {\n                tile: parts[0],\n                grow: Number.parseInt(parts[1] || '0'),\n                decrement: Number.parseInt(parts[2] || '0'),\n            };\n        }\n        const info = {\n            grow: (_b = (_a = config.grow) !== null && _a !== void 0 ? _a : config.spread) !== null && _b !== void 0 ? _b : 0,\n            decrement: (_c = config.decrement) !== null && _c !== void 0 ? _c : 0,\n            flags: GWU.flag.from(Flags.Effect, config.flags),\n            volume: (_d = config.volume) !== null && _d !== void 0 ? _d : 0,\n            next: (_e = config.next) !== null && _e !== void 0 ? _e : null,\n        };\n        const id = (_f = config.tile) !== null && _f !== void 0 ? _f : config.id;\n        if (typeof id === 'string') {\n            info.tile = id;\n        }\n        else {\n            throw new Error('Invalid tile spawn config: ' + id);\n        }\n        if (!info.tile) {\n            throw new Error('Must have tile.');\n        }\n        const match = (_g = config.matchTile) !== null && _g !== void 0 ? _g : config.match;\n        if (typeof match === 'string') {\n            info.matchTile = match;\n        }\n        else if (match) {\n            throw new Error('Invalid tile spawn match tile: ' + config.matchTile);\n        }\n        dest.tile = info;\n        return true;\n    }\n    fire(effect, map, x, y, ctx) {\n        if (!effect.tile)\n            return false; // did nothing\n        const id = effect.tile.tile;\n        const tile = Tile.tiles[id] || null;\n        if (!tile) {\n            throw new Error('Failed to find tile for effect: ' + id);\n        }\n        const abortIfBlocking = !!(effect.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        const isBlocking = !!(abortIfBlocking &&\n            !(effect.flags & Flags.Effect.E_PERMIT_BLOCKING) &&\n            (tile.blocksPathing() ||\n                effect.flags & Flags.Effect.E_TREAT_AS_BLOCKING));\n        let didSomething = false;\n        didSomething = computeSpawnMap(effect, map, x, y, ctx);\n        if (!didSomething) {\n            return false;\n        }\n        if (abortIfBlocking &&\n            isBlocking &&\n            this.mapDisruptedBy(map, ctx.grid)) {\n            // GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (effect.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, ctx.grid, effect.flags)) {\n                didSomething = true;\n            }\n        }\n        const spawned = spawnTiles(effect.flags, ctx.grid, map, tile, effect.tile.volume, ctx.machine);\n        return spawned;\n    }\n    mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(map.width, map.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(map.width, map.height, (i, j) => {\n            const lakeX = i + blockingToMapX;\n            const lakeY = j + blockingToMapY;\n            if (blockingGrid.get(lakeX, lakeY)) {\n                if (map.cell(i, j).isStairs()) {\n                    disrupts = true;\n                }\n            }\n            else if (!map.cell(i, j).blocksMove()) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGWU.grid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\ninstallHandler('tile', new SpawnEffect());\n// tick\n// Spawn\nexport function spawnTiles(flags, spawnMap, map, tile, volume = 0, machine) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = !!(flags & Flags.Effect.E_BLOCKED_BY_OTHER_LAYERS);\n    const superpriority = !!(flags & Flags.Effect.E_SUPERPRIORITY);\n    const blockedByActors = !!(flags & Flags.Effect.E_BLOCKED_BY_ACTORS);\n    const blockedByItems = !!(flags & Flags.Effect.E_BLOCKED_BY_ITEMS);\n    // const applyEffects = ctx.refreshCell;\n    volume = volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            // const isRoot = spawnMap[i][j] === 1;\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.hasTile(tile)) {\n                // If the new cell already contains the fill terrain,\n                // if (tile.depth == Flags.Depth.GAS) {\n                //     spawnMap[i][j] = 1;\n                //     cell.gasVolume += volume;\n                // } else if (tile.depth == Flags.Depth.LIQUID) {\n                //     spawnMap[i][j] = 1;\n                //     cell.liquidVolume += volume;\n                // }\n            }\n            else if (map.setTile(i, j, tile, {\n                volume,\n                superpriority,\n                blockedByOtherLayers,\n                blockedByActors,\n                blockedByItems,\n                machine,\n            })) {\n                // if the fill won't violate the priority of the most important terrain in this cell:\n                spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                // map.redrawCell(cell);\n                // if (volume && cell.gas) {\n                //     cell.volume += (feat.volume || 0);\n                // }\n                cell.flags.cell |= Flags.Cell.EVENT_FIRED_THIS_TURN;\n                if (flags & Flags.Effect.E_PROTECTED) {\n                    cell.flags.cell |= Flags.Cell.EVENT_PROTECTED;\n                }\n                accomplishedSomething = true;\n                // debug('- tile', i, j, 'tile=', tile.id);\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.setMapFlag(Flags.Map.MAP_CHANGED);\n    }\n    return accomplishedSomething;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.tile.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.tile.matchTile &&\n        !isStart &&\n        !cell.hasTile(effect.tile.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, map, x, y, ctx) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const config = effect.tile;\n    let startProb = config.grow || 0;\n    let probDec = config.decrement || 0;\n    const spawnMap = ctx.grid;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\n// export function spreadCircle(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     let radius = 0;\n//     startProb = startProb || 100;\n//     if (startProb >= 100) {\n//         probDec = probDec || 100;\n//     }\n//     while (map.rng.chance(startProb)) {\n//         startProb -= probDec;\n//         ++radius;\n//     }\n//     // startProb = 100;\n//     // probDec = 0;\n//     spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n//         if (!cellIsOk(this, i, j, ctx)) return 0;\n//         // const dist = Math.floor(GWU.utils.distanceBetween(x, y, i, j));\n//         // const prob = startProb - dist * probDec;\n//         // if (!map.rng.chance(prob)) return 0;\n//         return 1;\n//     });\n//     // spawnMap[x][y] = 1;\n//     // if (!isOk(flags, x, y, ctx)) {\n//     //     spawnMap[x][y] = 0;\n//     // }\n//     return true;\n// }\n// export function spreadLine(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     let x2, y2;\n//     let madeChange;\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     if (startProb) {\n//         madeChange = true;\n//         if (startProb >= 100) {\n//             probDec = probDec || 100;\n//         }\n//         x2 = x;\n//         y2 = y;\n//         const dir = GWU.xy.DIRS[map.rng.number(4)];\n//         while (madeChange) {\n//             madeChange = false;\n//             x2 = x2 + dir[0];\n//             y2 = y2 + dir[1];\n//             if (\n//                 spawnMap.hasXY(x2, y2) &&\n//                 !spawnMap[x2][y2] &&\n//                 cellIsOk(this, x2, y2, ctx) &&\n//                 map.rng.chance(startProb)\n//             ) {\n//                 spawnMap[x2][y2] = 1;\n//                 madeChange = true;\n//                 startProb -= probDec;\n//             }\n//         }\n//     }\n//     if (!cellIsOk(this, x, y, ctx)) {\n//         spawnMap[x][y] = 0;\n//     }\n//     return true;\n// }\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let i = 0, j = 0;\n    let didSomething = false;\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            if (!blockingMap[i][j])\n                continue;\n            const cell = map.cell(i, j);\n            if (!cell.hasActor())\n                continue;\n            GWU.list.forEach(cell.actor, (obj) => {\n                if (!(obj instanceof Actor))\n                    return;\n                const monst = obj;\n                const loc = map.rng.matchingLocNear(i, j, (x, y) => {\n                    if (!map.hasXY(x, y))\n                        return false;\n                    if (blockingMap[x][y])\n                        return false;\n                    const c = map.cell(x, y);\n                    return !monst.forbidsCell(c);\n                });\n                if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                    map.forceActor(loc[0], loc[1], monst);\n                    // map.redrawXY(loc[0], loc[1]);\n                    didSomething = true;\n                }\n            });\n        }\n    }\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    blockingMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (!cell.hasItem())\n            return;\n        GWU.list.forEach(cell.item, (obj) => {\n            if (!(obj instanceof Item))\n                return;\n            const item = obj;\n            const loc = map.rng.matchingLocNear(i, j, (x, y) => {\n                if (!map.hasXY(x, y))\n                    return false;\n                if (blockingMap[x][y])\n                    return false;\n                const dest = map.cell(x, y);\n                return !item.forbidsCell(dest);\n            });\n            if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                map.forceItem(loc[0], loc[1], item);\n                // map.redrawXY(loc[0], loc[1]);\n                didSomething = true;\n            }\n        });\n    });\n    return didSomething;\n}\nclass ClearTileEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.clear)\n            return true;\n        let config = src.clear;\n        let layers = 0;\n        if (typeof config === 'string') {\n            config = config.split(/[,|]/).map((t) => t.trim());\n        }\n        if (config === true) {\n            layers = Flags.Depth.ALL_LAYERS;\n        }\n        else if (typeof config === 'number') {\n            layers = config;\n        }\n        else if (Array.isArray(config)) {\n            layers = config.reduce((out, v) => {\n                if (typeof v === 'number')\n                    return out | v;\n                const depth = Flags.Depth[v] || 0;\n                return out | depth;\n            }, 0);\n        }\n        else {\n            throw new Error('clear effect must have number or string config.');\n        }\n        dest.clear = layers;\n        return layers > 0;\n    }\n    async fire(config, map, x, y, ctx) {\n        return this.fireSync(config, map, x, y, ctx);\n    }\n    fireSync(config, map, x, y, _ctx) {\n        if (!config.clear)\n            return false;\n        if (!map)\n            return false;\n        const cell = map.cell(x, y);\n        return cell.clearDepth(config.clear);\n    }\n}\ninstallHandler('clear', new ClearTileEffect());\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    await this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        await this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    async exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            await cell.fire(event, this.map, x, y, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nclass CellEntities {\n    constructor(cell) {\n        this.cell = cell;\n    }\n    eachItem(cb) {\n        let object = this.cell._item;\n        while (object) {\n            cb(object);\n            object = object.next;\n        }\n    }\n    eachActor(cb) {\n        let object = this.cell._actor;\n        while (object) {\n            cb(object);\n            object = object.next;\n        }\n    }\n    forEach(cb) {\n        this.eachItem(cb);\n        this.eachActor(cb);\n    }\n    some(cb) {\n        let object = this.cell._item;\n        while (object) {\n            if (cb(object))\n                return true;\n            object = object.next;\n        }\n        object = this.cell._actor;\n        while (object) {\n            if (cb(object))\n                return true;\n            object = object.next;\n        }\n        return false;\n    }\n    reduce(cb, start) {\n        let object = this.cell._item;\n        while (object) {\n            if (start === undefined) {\n                start = object;\n            }\n            else {\n                start = cb(start, object);\n            }\n            object = object.next;\n        }\n        object = this.cell._actor;\n        while (object) {\n            if (start === undefined) {\n                start = object;\n            }\n            else {\n                start = cb(start, object);\n            }\n            object = object.next;\n        }\n        return start;\n    }\n}\nexport class Cell {\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this._actor = null;\n        this._item = null;\n        this.x = -1;\n        this.y = -1;\n        this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        this._actor = other._actor;\n        this._item = other._item;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, withEntities = false) {\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        return (withEntities &&\n            this._entities.some((o) => !!(o.flags.entity & flag)));\n    }\n    hasAllEntityFlags(flags) {\n        return (this.entityFlags() & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        let flags = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            flags |= this._entities.reduce((out, o) => out | o.flags.entity, 0);\n        }\n        return flags;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    itemFlags() {\n        let flags = 0;\n        this._entities.eachItem((i) => {\n            flags |= i.flags.item;\n        });\n        return flags;\n    }\n    actorFlags() {\n        let flags = 0;\n        this._entities.eachActor((a) => {\n            flags |= a.flags.actor;\n        });\n        return flags;\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision(withEntities = false) {\n        if (this.tiles.some((t) => t && t.blocksVision()))\n            return true;\n        return withEntities && this._entities.some((o) => o.blocksVision());\n    }\n    blocksPathing(withEntities = false) {\n        if (this.tiles.some((t) => t && t.blocksPathing()))\n            return true;\n        return withEntities && this._entities.some((o) => o.blocksPathing());\n    }\n    blocksMove(withEntities = false) {\n        if (this.tiles.some((t) => t && t.blocksMove()))\n            return true;\n        return withEntities && this._entities.some((o) => o.blocksMove());\n    }\n    blocksEffects(withEntities = false) {\n        if (this.tiles.some((t) => t && t.blocksEffects()))\n            return true;\n        return withEntities && this._entities.some((o) => o.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isEmpty() {\n        return (this.tiles.every((t) => !t || t === TILE.tiles.NULL) &&\n            this._actor == null &&\n            this._item == null);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        // if (current.light !== tile.light) {\n        //     this.setCellFlag(Flags.Cell.LIGHT_CHANGED);\n        // }\n        // if (current.blocksVision() !== tile.blocksVision()) {\n        //     this.setCellFlag(Flags.Cell.FOV_CHANGED);\n        // }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this._actor = null;\n        this._item = null;\n        if (tile) {\n            this.setTile(tile);\n        }\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    async fire(event, map, x, y, ctx = {}) {\n        ctx.cell = this;\n        let didSomething = false;\n        if (ctx.depth !== undefined) {\n            const tile = (ctx.tile = this.depthTile(ctx.depth));\n            if (tile && tile.effects) {\n                const ev = tile.effects[event];\n                didSomething = await this._activate(ev, map, x, y, ctx);\n            }\n        }\n        else {\n            // console.log('fire event - %s', event);\n            for (ctx.tile of this.tiles) {\n                if (!ctx.tile || !ctx.tile.effects)\n                    continue;\n                const ev = ctx.tile.effects[event];\n                // console.log(' - ', ev);\n                if (await this._activate(ev, map, x, y, ctx)) {\n                    didSomething = true;\n                    break;\n                }\n                // }\n            }\n        }\n        return didSomething;\n    }\n    async _activate(effect, map, x, y, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.effects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = await Effect.fire(effect, map, x, y, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this._item;\n    }\n    set item(val) {\n        this._item = val;\n        if (val) {\n            this.setCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        else {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        this.needsRedraw = true;\n    }\n    removeItem(item) {\n        return GWU.list.remove(this, 'item', item);\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this._actor;\n    }\n    set actor(val) {\n        this._actor = val;\n        if (val) {\n            this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        }\n        else {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        this.needsRedraw = true;\n    }\n    removeActor(actor) {\n        return GWU.list.remove(this, 'actor', actor);\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        var _a, _b, _c, _d;\n        if ((_b = (_a = this._actor) === null || _a === void 0 ? void 0 : _a.sprite) === null || _b === void 0 ? void 0 : _b.ch)\n            return this._actor.sprite.ch;\n        if ((_d = (_c = this._item) === null || _c === void 0 ? void 0 : _c.sprite) === null || _d === void 0 ? void 0 : _d.ch)\n            return this._item.sprite.ch;\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Cell } from './cell';\nimport * as Tile from '../tile';\nexport class CellMemory extends Cell {\n    constructor(map, x, y) {\n        super(map, x, y);\n        this.snapshot = new GWU.sprite.Mixer();\n        this.snapshot.copy(Tile.tiles.NULL.sprite);\n    }\n    clear() {\n        super.clear();\n        this.snapshot.blackOut();\n    }\n    store(cell) {\n        this.copy(cell);\n        if (cell.actor) {\n            cell.actor.lastSeen = cell;\n        }\n        if (cell.item) {\n            cell.item.lastSeen = cell;\n        }\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\nimport { CellMemory } from './cellMemory';\nimport * as Effect from '../effect';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        this.machineCount = 0;\n        this._seed = 0;\n        this.rng = GWU.rng.random;\n        this.width = width;\n        this.height = height;\n        this.flags = { map: 0 };\n        this.layers = [];\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        this._memory = GWU.grid.make(width, height, (x, y) => new CellMemory(this, x, y));\n        if (opts.seed) {\n            this._seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        this.fov = new GWU.fov.FovSystem(this, opts);\n        this.properties = {};\n        this.initLayers();\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(v) {\n        this._seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    memory(x, y) {\n        return this._memory[x][y];\n    }\n    knowledge(x, y) {\n        if (this.fov.isAnyKindOfVisible(x, y))\n            return this.cells[x][y];\n        return this._memory[x][y];\n    }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n        this.addLayer(Flags.Depth.ITEM, new Layer.ItemLayer(this, 'item'));\n        this.addLayer(Flags.Depth.ACTOR, new Layer.ActorLayer(this, 'actor'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // DRAW\n    drawInto(dest, opts = {}) {\n        const buffer = dest instanceof GWU.canvas.Canvas ? dest.buffer : dest;\n        if (typeof opts === 'boolean')\n            opts = { force: opts };\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                this.getAppearanceAt(x, y, mixer);\n                buffer.drawSprite(x, y, mixer);\n            }\n        }\n    }\n    // items\n    hasItem(x, y) {\n        return this.cells[x][y].hasItem();\n    }\n    itemAt(x, y) {\n        return this.cell(x, y).item;\n    }\n    eachItem(cb) {\n        this.cells.forEach((cell) => {\n            GWU.list.forEach(cell.item, cb);\n        });\n    }\n    async addItem(x, y, item) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && (await layer.addItem(x, y, item))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    forceItem(x, y, item) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && layer.forceItem(x, y, item)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async removeItem(item) {\n        const layer = this.layers[item.depth];\n        return layer.removeItem(item);\n    }\n    async moveItem(item, dir) {\n        if (typeof dir === 'number') {\n            dir = GWU.xy.DIRS[dir];\n        }\n        const oldX = item.x;\n        const oldY = item.y;\n        const x = oldX + dir[0];\n        const y = oldY + dir[1];\n        if (!this.hasXY(x, y))\n            return false;\n        const layer = this.layers[item.depth];\n        if (!(await layer.removeItem(item)))\n            return false;\n        if (!(await this.addItem(x, y, item))) {\n            layer.forceItem(item.x, item.y, item);\n            return false;\n        }\n        const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n        const isVisible = this.fov.isAnyKindOfVisible(x, y);\n        if (isVisible && !wasVisible) {\n            if (item.lastSeen) {\n                this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n                this.clearCellFlag(item.lastSeen.x, item.lastSeen.y, Flags.Cell.STABLE_SNAPSHOT);\n                item.lastSeen = null;\n            }\n        }\n        else if (wasVisible && !isVisible) {\n            const mem = this._memory[x][y];\n            mem.item = item;\n            this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n            item.lastSeen = this.cell(x, y);\n        }\n        return true;\n    }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.cell(x, y).actor;\n    }\n    eachActor(cb) {\n        this.cells.forEach((cell) => {\n            GWU.list.forEach(cell.actor, cb);\n        });\n    }\n    async addActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && (await layer.addActor(x, y, actor))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    forceActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && layer.forceActor(x, y, actor)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async removeActor(actor) {\n        const layer = this.layers[actor.depth];\n        return layer.removeActor(actor);\n    }\n    async moveActor(actor, dir) {\n        if (typeof dir === 'number') {\n            dir = GWU.xy.DIRS[dir];\n        }\n        const oldX = actor.x;\n        const oldY = actor.y;\n        const x = oldX + dir[0];\n        const y = oldY + dir[1];\n        if (!this.hasXY(x, y))\n            return false;\n        const layer = this.layers[actor.depth];\n        if (!(await layer.removeActor(actor)))\n            return false;\n        if (!(await layer.addActor(x, y, actor))) {\n            layer.forceActor(actor.x, actor.y, actor);\n            return false;\n        }\n        const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n        const isVisible = this.fov.isAnyKindOfVisible(x, y);\n        if (isVisible && !wasVisible) {\n            if (actor.lastSeen) {\n                this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(actor);\n                this.clearCellFlag(actor.lastSeen.x, actor.lastSeen.y, Flags.Cell.STABLE_SNAPSHOT);\n                actor.lastSeen = null;\n            }\n        }\n        else if (wasVisible && !isVisible) {\n            const mem = this._memory[x][y];\n            mem.actor = actor;\n            this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n            actor.lastSeen = this.cell(x, y);\n        }\n        return true;\n    }\n    // Information\n    isVisible(x, y) {\n        return this.fov.isAnyKindOfVisible(x, y);\n    }\n    hasKey(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cells[x][y];\n        return cell._entities.some((e) => !!e.key && e.key.matches(x, y));\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const mixer = new GWU.sprite.Mixer();\n        const getCh = (_cell, x, y) => {\n            this.getAppearanceAt(x, y, mixer);\n            if (mixer.ch < 0)\n                return ' ';\n            return mixer.ch;\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    setCellFlag(x, y, flag) {\n        this.cells[x][y].setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cells[x][y].clearCellFlag(flag);\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cells[x][y];\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile, useMemory = false) {\n        if (!useMemory)\n            return this.cell(x, y).hasTile(tile);\n        return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cells[x][y];\n        cell.clearTiles(tile);\n    }\n    async tick(dt) {\n        let didSomething = await this.fireAll('tick');\n        for (let layer of this.layers) {\n            if (layer && (await layer.tick(dt))) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cells[x][y]);\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.flags.map = src.flags.map;\n        this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.machineCount = src.machineCount;\n        this._seed = src._seed;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    async fire(event, x, y, ctx = {}) {\n        const cell = this.cells[x][y];\n        return cell.fire(event, this, x, y, ctx);\n    }\n    async fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        await willFire.forEachAsync(async (w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cells[x][y];\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    await cell.fire(event, this, x, y, {\n                        force: true,\n                        depth,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    async activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cells[x][y];\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        (await cell.fire('machine', this, x, y, ctx)) ||\n                            didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    getAppearanceAt(x, y, dest) {\n        dest.blackOut();\n        const cell = this.cells[x][y];\n        const isVisible = this.fov.isAnyKindOfVisible(x, y);\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (needSnapshot || (cell.needsRedraw && isVisible)) {\n            this.layers.forEach((layer) => layer.putAppearance(dest, x, y));\n            if (dest.dances) {\n                cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n            }\n            else {\n                cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n            }\n            dest.bake();\n            this._memory[x][y].putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            this._memory[x][y].getSnapshot(dest);\n        }\n        if (isVisible) {\n            const light = this.light.getLight(x, y);\n            dest.multiply(light);\n        }\n        else if (this.fov.isRevealed(x, y)) {\n            dest.scale(50);\n        }\n        else {\n            dest.blackOut();\n        }\n        if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n            GWU.color.separate(dest.fg, dest.bg);\n        }\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cells[x][y].hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cells[x][y].blocksVision();\n    }\n    onCellRevealed(_x, _y) {\n        // if (DATA.automationActive) {\n        // if (cell.item) {\n        //     const theItem: GW.types.ItemType = cell.item;\n        //     if (\n        //         theItem.hasObjectFlag(ObjectFlags.L_INTERRUPT_WHEN_SEEN)\n        //     ) {\n        //         GW.message.add(\n        //             '§you§ §see§ ΩitemMessageColorΩ§item§∆.',\n        //             {\n        //                 item: theItem,\n        //                 actor: DATA.player,\n        //             }\n        //         );\n        //     }\n        // }\n        // if (\n        //     !(this.fov.isMagicMapped(x, y)) &&\n        //     this.site.hasObjectFlag(\n        //         x,\n        //         y,\n        //         ObjectFlags.L_INTERRUPT_WHEN_SEEN\n        //     )\n        // ) {\n        //     const tile = cell.tileWithLayerFlag(\n        //         ObjectFlags.L_INTERRUPT_WHEN_SEEN\n        //     );\n        //     if (tile) {\n        //         GW.message.add(\n        //             '§you§ §see§ ΩbackgroundMessageColorΩ§item§∆.',\n        //             {\n        //                 actor: DATA.player,\n        //                 item: tile.name,\n        //             }\n        //         );\n        //     }\n        // }\n    }\n    redrawCell(x, y, clearMemory) {\n        if (clearMemory) {\n            this.clearMemory(x, y);\n        }\n        this.cells[x][y].needsRedraw = true;\n    }\n    clearMemory(x, y) {\n        this._memory[x][y].clear();\n    }\n    storeMemory(x, y, updateSnapshot = false) {\n        const cell = this.cells[x][y];\n        const memory = this._memory[x][y];\n        memory.store(cell);\n        cell.setCellFlag(Flags.Cell.STABLE_MEMORY);\n        if (updateSnapshot || !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT)) {\n            const dest = memory.snapshot;\n            dest.blackOut();\n            this.layers.forEach((layer) => layer.putAppearance(dest, x, y));\n            dest.bake();\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        this.fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        if (this.map.fov.changed) {\n            this.fovVersion = this.version;\n            this.map.fov.changed = false;\n        }\n        if (snap.version !== this.fovVersion) {\n            snap.map.fov.copy(this.map.fov);\n        }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        if (snap.version < this.fovVersion || this.map.fov.changed) {\n            this.map.fov.copy(snap.map.fov);\n            this.fovVersion = snap.version;\n        }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import * as GWU from 'gw-utils';\nexport function getCellPathCost(map, x, y) {\n    const cell = map.cell(x, y);\n    if (cell.blocksMove())\n        return GWU.path.OBSTRUCTION;\n    if (cell.blocksPathing())\n        return GWU.path.FORBIDDEN;\n    if (cell.hasActor())\n        return 10;\n    return 1;\n}\nexport function fillCostMap(map, costMap) {\n    costMap.update((_v, x, y) => getCellPathCost(map, x, y));\n}\nexport function getPathBetween(map, x0, y0, x1, y1, options = {}) {\n    const distanceMap = GWU.grid.alloc(map.width, map.height);\n    const costMap = GWU.grid.alloc(map.width, map.height);\n    fillCostMap(map, costMap);\n    GWU.path.calculateDistances(distanceMap, x0, y0, costMap, options.eightWays, GWU.xy.straightDistanceBetween(x0, y0, x1, y1) + 1);\n    const path = GWU.path.getPath(distanceMap, x1, y1, (x, y) => map.cell(x, y).blocksMove(), options.eightWays);\n    GWU.grid.free(costMap);\n    GWU.grid.free(distanceMap);\n    return path;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    async spawn(map, x = -1, y = -1, opts = {}) {\n        var _a, _b;\n        if (typeof opts === 'boolean') {\n            opts = { canBeVisible: opts };\n        }\n        opts.canBeVisible = (_a = opts.canBeVisible) !== null && _a !== void 0 ? _a : !map.fov.isEnabled;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_b = opts.machine) !== null && _b !== void 0 ? _b : 0;\n        const leader = await this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        await this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    async _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!(await this._addLeader(leader, map, x, y, opts))) {\n            return null;\n        }\n        return leader;\n    }\n    async _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    async _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    async _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        await Promise.all(entries.map(async ([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                await this._spawnMember(kindId, map, leader, opts);\n            }\n        }));\n        return count;\n    }\n    async _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1,\n            -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!(await this._addMember(member, map, x, y, leader, opts))) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canBeVisible && map.fov.isAnyKindOfVisible(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_TRAP_FREE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","kind","map","key","machineHome","lastSeen","depth","light","flags","entity","next","sprite","isDestroyed","hasEntityFlag","Flags.Entity","L_DESTROYED","canBeSeen","tag","tags","includes","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","EntityKind","config","requiredTileTags","id","name","flavor","description","make","split","t","trim","slice","init","_entity","length","hasAllTileTags","hasAnyTileTag","_opts","Entity.Entity","super","leader","items","actor","Flags.Depth","ACTOR","hasActorFlag","Flags.Actor","IS_PLAYER","item","pickupItem","dropItem","ActorKind","Entity.EntityKind","options","blocksMove","blocksPathing","isPlayer","action","list","push","remove","makeOptions","get","Error","kinds","makeKind","info","Object","assign","randomKind","match","forbidTags","forEach","startsWith","substring","Array","isArray","matches","values","filter","k","arraysIntersect","rng","random","JSON","stringify","made","quantity","ITEM","ItemKind","Handler","src","dest","ctx","handlers","installHandler","handler","_a","fn","from","Flags","chance","v","effect","effects","reset","E_FIRED","install","_b","_c","_d","index","dissipate","priority","groundTile","article","tile","tileMech","hasEffect","Flags.Tile","T_IS_FLAMMABLE","every","hasTileFlag","T_PATHING_BLOCKER","arg","color","result","fg","toString","_e","_f","base","extends","tiles","text","replace","search","Number","parseInt","delta","undefined","entries","value","makeEffect","Flags.TileMech","ch","bg","opacity","all","args","enter","open","tick","close","player","emit","MapLayer","changed","properties","_other","_x","_y","_tile","_actor","_item","_dt","TileLayer","current","depthTile","Tile.tiles","NULL","superpriority","blocksLayer","blockedByItems","hasItem","blockedByActors","hasActor","blockedByOtherLayers","highestPriority","GROUND","ground","setTile","Tile.get","clearDepth","SURFACE","machine","machineId","glowLightChanged","L_LIST_IN_SIDEBAR","setMapFlag","Flags.Map","MAP_SIDEBAR_TILES_CHANGED","fov","isAnyKindOfVisible","clearCellFlag","Flags.Cell","STABLE_SNAPSHOT","setCellFlag","CAUGHT_FIRE_THIS_TURN","width","height","hasCellFlag","hasKey","fire","drawSprite","ActorLayer","obj","needsRedraw","hasXY","removeActor","ItemLayer","destroy","oldCell","GasLayer","volume","grid","alloc","fill","other","copy","startingVolume","spread","free","update","d","Math","max","clearTile","floor","min","total","count","highestVolume","startingTile","highestTile","i","j","updateCellVolume","calcOpacity","async","ctx_","force","didSomething","allHandlers","h","E_NEXT_ALWAYS","data","gameHasEnded","nextInfo","E_NEXT_EVERYWHERE","forEachAsync","isVisible","E_NO_MARK_FIRED","EmitEffect","_map","events","FnEffect","MessageEffect","message","fired","addAt","ActivateMachineEffect","activateMachine","EffectEffect","FIRE.fire","SpawnEffect","_g","parts","p","grow","decrement","Flags.Effect","matchTile","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","isBlocking","E_PERMIT_BLOCKING","E_TREAT_AS_BLOCKING","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","spawnTiles","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","xy","forRect","lakeX","lakeY","isStairs","first","floodFill","spawnMap","accomplishedSomething","E_BLOCKED_BY_OTHER_LAYERS","E_SUPERPRIORITY","hasTile","EVENT_FIRED_THIS_TURN","E_PROTECTED","EVENT_PROTECTED","MAP_CHANGED","cellIsOk","isStart","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","dir","x2","y2","madeChange","startProb","probDec","DIRS","clearAll","clear","GAS","LIQUID","blockingMap","monst","loc","matchingLocNear","c","forceActor","forceItem","layers","ALL_LAYERS","reduce","out","fireSync","_ctx","e","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","hasTileMechFlag","TM_EXPLOSIVE_PROMOTE","x0","y0","n","event","CellEntities","cb","object","eachItem","eachActor","start","chokeCount","_entities","TILE.tiles","TILE.get","withEntities","some","o","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","a","CHANGED","TILE.Tile","highestPriorityTile","find","blocksVision","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","tileFlag","tileMechFlag","ev","_activate","Effect.effects","Effect.fire","val","CellMemory","snapshot","Mixer","blackOut","machineCount","_seed","cells","_memory","seed","LightSystem","FovSystem","initLayers","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","Layer.ItemLayer","Layer.ActorLayer","layer","buffer","canvas","Canvas","mixer","getAppearanceAt","addItem","removeItem","oldX","oldY","wasVisible","hasPlayer","addActor","fmt","log","console","dump","_cell","needsUpdate","l","boundary","isBoundaryXY","useMemory","memory","clearTiles","dt","fireAll","constructor","willFire","promoteChance","w","originX","originY","putAppearance","dances","COLORS_DANCE","bake","putSnapshot","getSnapshot","getLight","multiply","isRevealed","scale","L_VISUALLY_DISTINCT","separate","eachGlowLight","_cb","isDark","clearMemory","updateSnapshot","store","updateChokepoints","updateCounts","passMap","passableArcCount","CLOCK_DIRS","newX","newY","cellCount","floodFillCount","i2","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","eachCell","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","prefab","charToTile","isStringArray","len","line","updateChokeCounts","layerVersion","lightVersion","fovVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","getCellPathCost","path","OBSTRUCTION","FORBIDDEN","fillCostMap","costMap","_v","x1","y1","distanceMap","calculateDistances","eightWays","straightDistanceBetween","getPath","members","horde","range","frequency","canBeVisible","isEnabled","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","Promise","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","matchingLoc","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted"],"mappings":"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"}