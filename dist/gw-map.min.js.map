{"version":3,"file":"gw-map.min.js","sources":["../js/flags/entity.js","../js/entity/entity.js","../js/flags/depth.js","../js/flags/actor.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/actor/actor.js","../js/item/kind.js","../js/item/item.js","../js/effect/flags.js","../js/effect/make.js","../js/effect/effect.js","../js/effect/fire.js","../js/effect/message.js","../js/effect/emit.js","../js/effect/fn.js","../js/effect/activateMachine.js","../js/tile/tile.js","../js/tile/tiles.js","../js/tile/index.js","../js/map/cell.js","../js/map/layers.js","../js/map/cellMemory.js","../js/map/fireLayer.js","../js/map/gasLayer.js","../js/map/map.js","../js/map/analyze.js","../js/map/effect.js"],"sourcesContent":["import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_SUPERPRIORITY\"] = Fl(1)] = \"L_SUPERPRIORITY\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags/entity';\nexport class Entity {\n    constructor() {\n        this.sprite = new GWU.sprite.Sprite();\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n    }\n    hasObjectFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllObjectFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    blocksMove() {\n        return this.hasObjectFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasObjectFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasObjectFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasObjectFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n}\n","export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n})(Actor || (Actor = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(11)] = \"IS_POWERED\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(12)] = \"IMPREGNABLE\";\n    // DARKENED = Fl(13), // magical blindness?\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(14)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"CELL_CHANGED\"] = Fl(15)] = \"CELL_CHANGED\";\n    // These are to help memory\n    Cell[Cell[\"HAS_SURFACE\"] = Fl(16)] = \"HAS_SURFACE\";\n    Cell[Cell[\"HAS_LIQUID\"] = Fl(17)] = \"HAS_LIQUID\";\n    Cell[Cell[\"HAS_GAS\"] = Fl(18)] = \"HAS_GAS\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(19)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(20)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(21)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(22)] = \"HAS_ITEM\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(23)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(24)] = \"IS_CURSOR\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(25)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_TRAP_FREE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW | Cell.CELL_CHANGED] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import { Entity } from '../entity';\nimport * as Flags from '../flags';\nexport class Actor extends Entity {\n    constructor() {\n        super();\n        this.next = null;\n        // @ts-ignore\n        this.flags = this.flags || {};\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    isVisible() {\n        return true;\n    }\n    forbidsCell(_cell) {\n        return false;\n    }\n    getName() {\n        return '';\n    }\n    getDescription() {\n        return '';\n    }\n    getFlavor() {\n        return '';\n    }\n}\n","export class ItemKind {\n}\nexport const kinds = {};\nexport function install(_id, _kind) {\n    return new ItemKind();\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(_info) {\n    return new ItemKind();\n}\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nimport * as Kind from './kind';\nexport class Item extends Entity {\n    constructor(kind) {\n        super();\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore\n        this.flags = this.flags || {};\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n    forbidsCell(_cell) {\n        return false;\n    }\n    getName() {\n        return '';\n    }\n    getDescription() {\n        return '';\n    }\n    getFlavor() {\n        return '';\n    }\n}\nexport function make(id) {\n    const kind = Kind.get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return new Item(kind);\n}\nexport function from(info) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = Kind.get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof Kind.ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = Kind.makeKind(info);\n    }\n    return new Item(kind);\n}\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_SPREAD_CIRCLE\"] = Fl(13)] = \"E_SPREAD_CIRCLE\";\n    Effect[Effect[\"E_SPREAD_LINE\"] = Fl(14)] = \"E_SPREAD_LINE\";\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nimport { Effect as Flags } from './flags';\nimport { handlers, effects } from './effect';\nexport function make(opts) {\n    var _a;\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    if (typeof opts === 'string') {\n        throw new Error('Cannot make effect from string: ' + opts);\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    // now make base effect stuff\n    const info = {\n        flags: GWU.flag.from(Flags, opts.flags),\n        chance: (_a = opts.chance) !== null && _a !== void 0 ? _a : 0,\n        next: null,\n        id: opts.id || 'n/a',\n    };\n    if (opts.next) {\n        if (typeof opts.next === 'string') {\n            info.next = opts.next;\n        }\n        else {\n            info.next = make(opts.next);\n        }\n    }\n    // and all the handlers\n    Object.values(handlers).forEach((v) => v.make(opts, info));\n    return info;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'string') {\n        const effect = effects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\n","import { Effect as Flags } from './flags';\nimport { make } from './make';\n// resetMessageDisplayed\nexport function reset(effect) {\n    effect.flags &= ~Flags.E_FIRED;\n}\nexport function resetAll() {\n    Object.values(effects).forEach((e) => reset(e));\n}\nexport const effects = {};\nexport function install(id, config) {\n    const effect = make(config);\n    effects[id] = effect;\n    effect.id = id;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id] = handler;\n}\n","import * as GWU from 'gw-utils';\nimport { Effect as Flags } from './flags';\nimport { handlers } from './effect';\nimport { from } from './make';\nexport async function fire(effect, map, x, y, ctx_ = {}) {\n    if (!effect)\n        return false;\n    if (typeof effect === 'string') {\n        const name = effect;\n        effect = from(name);\n        if (!effect)\n            throw new Error('Failed to find effect: ' + name);\n    }\n    const ctx = ctx_;\n    if (!ctx.force && effect.chance && !GWU.random.chance(effect.chance, 10000))\n        return false;\n    const grid = (ctx.grid = GWU.grid.alloc(map.width, map.height));\n    let didSomething = true;\n    const allHandlers = Object.values(handlers);\n    for (let h of allHandlers) {\n        if (await h.fire(effect, map, x, y, ctx)) {\n            didSomething = true;\n        }\n    }\n    // bookkeeping\n    if (didSomething &&\n        map.isVisible(x, y) &&\n        !(effect.flags & Flags.E_NO_MARK_FIRED)) {\n        effect.flags |= Flags.E_FIRED;\n    }\n    // do the next effect - if applicable\n    if (effect.next &&\n        (didSomething || effect.flags & Flags.E_NEXT_ALWAYS) &&\n        !GWU.data.gameHasEnded) {\n        const nextInfo = typeof effect.next === 'string' ? from(effect.next) : effect.next;\n        if (effect.flags & Flags.E_NEXT_EVERYWHERE) {\n            await grid.forEachAsync(async (v, i, j) => {\n                if (!v)\n                    return;\n                // @ts-ignore\n                await fire(nextInfo, map, i, j, ctx);\n            });\n        }\n        else {\n            await fire(nextInfo, map, x, y, ctx);\n        }\n    }\n    GWU.grid.free(grid);\n    return didSomething;\n}\nexport function fireSync(effect, map, x, y, ctx_ = {}) {\n    if (!effect)\n        return false;\n    if (typeof effect === 'string') {\n        const name = effect;\n        effect = from(name);\n        if (!effect)\n            throw new Error('Failed to find effect: ' + name);\n    }\n    const ctx = ctx_;\n    if (!ctx.force && effect.chance && !GWU.random.chance(effect.chance, 10000))\n        return false;\n    const grid = (ctx.grid = GWU.grid.alloc(map.width, map.height));\n    let didSomething = true;\n    const allHandlers = Object.values(handlers);\n    for (let h of allHandlers) {\n        if (h.fireSync(effect, map, x, y, ctx)) {\n            didSomething = true;\n        }\n    }\n    // bookkeeping\n    if (didSomething &&\n        map.isVisible(x, y) &&\n        !(effect.flags & Flags.E_NO_MARK_FIRED)) {\n        effect.flags |= Flags.E_FIRED;\n    }\n    // do the next effect - if applicable\n    if (effect.next &&\n        (didSomething || effect.flags & Flags.E_NEXT_ALWAYS) &&\n        !GWU.data.gameHasEnded) {\n        const nextInfo = typeof effect.next === 'string' ? from(effect.next) : effect.next;\n        if (effect.flags & Flags.E_NEXT_EVERYWHERE) {\n            grid.forEach(async (v, i, j) => {\n                if (!v)\n                    return;\n                fireSync(nextInfo, map, i, j, ctx);\n            });\n        }\n        else {\n            fireSync(nextInfo, map, x, y, ctx);\n        }\n    }\n    GWU.grid.free(grid);\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport * as EFFECT from './effect';\nimport { Effect as Flags } from './flags';\n//////////////////////////////////////////////\n// MESSAGE\nexport class MessageEffect {\n    make(src, dest) {\n        if (!src.message)\n            return true;\n        if (typeof src.message !== 'string') {\n            throw new Error('Emit must be configured with name of event to emit');\n        }\n        dest.message = src.message;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (!config.message)\n            return false;\n        const fired = !!(config.flags & Flags.E_FIRED);\n        if (config.message &&\n            config.message.length &&\n            !fired &&\n            map.isVisible(x, y)) {\n            GWU.message.addAt(x, y, config.message, ctx);\n            return true;\n        }\n        return false;\n    }\n    fireSync(config, _map, _x, _y, _ctx) {\n        if (!config.message)\n            return false;\n        throw new Error('Cannot use \"message\" effects in build steps.');\n    }\n}\nEFFECT.installHandler('message', new MessageEffect());\n","import * as GWU from 'gw-utils';\nimport * as EFFECT from './effect';\n//////////////////////////////////////////////\n// EMIT\nexport class EmitEffect {\n    make(src, dest) {\n        if (!src.emit)\n            return true;\n        if (typeof src.emit !== 'string') {\n            throw new Error('emit effects must be string name to emit: { emit: \"EVENT\" }');\n        }\n        dest.emit = src.emit;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (config.emit) {\n            return await GWU.events.emit(config.emit, x, y, ctx);\n        }\n        return false;\n    }\n    fireSync(config, _map, _x, _y, _ctx) {\n        if (!config.emit)\n            return false;\n        throw new Error('Cannot use \"emit\" effects in build steps.');\n    }\n}\nEFFECT.installHandler('emit', new EmitEffect());\n","import * as EFFECT from './effect';\n//////////////////////////////////////////////\n// FN\nexport class FnEffect {\n    make(src, dest) {\n        if (!src.fn)\n            return true;\n        if (typeof src.fn !== 'function') {\n            throw new Error('fn effects must be functions.');\n        }\n        dest.fn = src.fn;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.fn) {\n            return await config.fn(config, map, x, y, ctx);\n        }\n        return false;\n    }\n    fireSync(config, map, x, y, ctx) {\n        if (config.fn) {\n            const result = config.fn(config, map, x, y, ctx);\n            if (result === true || result === false) {\n                return result;\n            }\n            throw new Error('Cannot use async function effects in build steps.');\n        }\n        return false;\n    }\n}\nEFFECT.installHandler('fn', new FnEffect());\n","import * as EFFECT from './effect';\n//////////////////////////////////////////////\n// ActivateMachine\nexport class ActivateMachineEffect {\n    make(src, dest) {\n        if (!src.activateMachine)\n            return true;\n        dest.activateMachine = true;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.activateMachine) {\n            const cell = map.cell(x, y);\n            const machine = cell.machineId;\n            if (!machine)\n                return false;\n            return await map.activateMachine(machine, x, y, ctx);\n        }\n        return false;\n    }\n    fireSync(config, map, x, y, ctx) {\n        if (config.activateMachine) {\n            const cell = map.cell(x, y);\n            const machine = cell.machineId;\n            if (!machine)\n                return false;\n            return map.activateMachineSync(machine, x, y, ctx);\n        }\n        return false;\n    }\n}\nEFFECT.installHandler('activateMachine', new ActivateMachineEffect());\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n    }\n    hasObjectFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllObjectFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (arg === true || arg === false) {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription() {\n        return this.description || this.getName();\n    }\n    getFlavor() {\n        return this.flavor || this.getName();\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = -1;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string') {\n                effects[key] = value;\n                return;\n            }\n            effects[key] = Effect.make(value);\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority: priority != -1 ? priority : undefined,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as Tile from './tile';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: [30, 30, 30, 20, 0, 0, 0],\n    bg: [2, 2, 10, 0, 2, 2, 0],\n    priority: 10,\n    article: 'the',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: { tile: 'DOOR_OPEN' },\n        open: { tile: 'DOOR_OPEN_ALWAYS' },\n    },\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            tile: 'DOOR',\n            flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY',\n        },\n        enter: null,\n        open: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: { emit: 'UP_STAIRS' },\n    },\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: { emit: 'DOWN_STAIRS' },\n    },\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'an impregnable wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: [5, 8, 20, 10, 0, 4, 15, true],\n    bg: [10, 15, 41, 6, 5, 5, 5, true],\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: [5, 8, 10, 10, 0, 4, 15, true],\n    bg: [10, 30, 30, 6, 0, 10, 10, true],\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    depth: 'SURFACE', // 'LIQUID'?\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n});\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\nimport './tiles';\n","import * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nclass CellObjects {\n    constructor(cell) {\n        this.cell = cell;\n    }\n    eachItem(cb) {\n        let object = this.cell._item;\n        while (object) {\n            cb(object);\n            object = object.next;\n        }\n    }\n    eachActor(cb) {\n        let object = this.cell._actor;\n        while (object) {\n            cb(object);\n            object = object.next;\n        }\n    }\n    forEach(cb) {\n        this.eachItem(cb);\n        this.eachActor(cb);\n    }\n    some(cb) {\n        let object = this.cell._item;\n        while (object) {\n            if (cb(object))\n                return true;\n            object = object.next;\n        }\n        object = this.cell._actor;\n        while (object) {\n            if (cb(object))\n                return true;\n            object = object.next;\n        }\n        return false;\n    }\n    reduce(cb, start) {\n        let object = this.cell._item;\n        while (object) {\n            if (start === undefined) {\n                start = object;\n            }\n            else {\n                start = cb(start, object);\n            }\n            object = object.next;\n        }\n        object = this.cell._actor;\n        while (object) {\n            if (start === undefined) {\n                start = object;\n            }\n            else {\n                start = cb(start, object);\n            }\n            object = object.next;\n        }\n        return start;\n    }\n}\nexport class Cell {\n    constructor(groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        // gasVolume: number = 0;\n        // liquidVolume: number = 0;\n        this._actor = null;\n        this._item = null;\n        this._objects = new CellObjects(this);\n        this.flags = { cell: 0 };\n        this.tiles = [TILE.tiles.NULL];\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles = other.tiles.slice();\n        this._actor = other._actor;\n        this._item = other._item;\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasObjectFlag(flag) {\n        return (this.tiles.some((t) => t && t.flags.entity & flag) ||\n            this._objects.some((o) => !!(o.flags.entity & flag)));\n    }\n    hasAllObjectFlags(flags) {\n        return (this.objectFlags() & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    objectFlags() {\n        return (this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0) |\n            this._objects.reduce((out, o) => out | o.flags.entity, 0));\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    itemFlags() {\n        let flags = 0;\n        this._objects.eachItem((i) => {\n            flags |= i.flags.item;\n        });\n        return flags;\n    }\n    actorFlags() {\n        let flags = 0;\n        this._objects.eachActor((a) => {\n            flags |= a.flags.actor;\n        });\n        return flags;\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return (this.tiles.some((t) => t && t.blocksVision()) ||\n            this._objects.some((o) => o.blocksVision()));\n    }\n    blocksPathing() {\n        return (this.tiles.some((t) => t && t.blocksPathing()) ||\n            this._objects.some((o) => o.blocksPathing()));\n    }\n    blocksMove() {\n        return (this.tiles.some((t) => t && t.blocksMove()) ||\n            this._objects.some((o) => o.blocksMove()));\n    }\n    blocksEffects() {\n        return (this.tiles.some((t) => t && t.blocksEffects()) ||\n            this._objects.some((o) => o.blocksEffects()));\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isEmpty() {\n        return (this.tiles.every((t) => !t || t === TILE.tiles.NULL) &&\n            this._actor == null &&\n            this._item == null);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllObjectFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    hasKey() {\n        return false;\n    }\n    // @returns - whether or not the change results in a change to the cell lighting.\n    setTile(tile) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        // const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        // if (current !== tile) {\n        //     this.gasVolume = 0;\n        //     this.liquidVolume = 0;\n        // }\n        // Check priority, etc...\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clear() {\n        this.tiles = [TILE.tiles.NULL];\n        this.needsRedraw = true;\n        this.flags.cell = 0;\n        this.chokeCount = 0;\n        this._actor = null;\n        this._item = null;\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    async activate(event, map, x, y, ctx = {}) {\n        ctx.cell = this;\n        let didSomething = false;\n        if (ctx.depth !== undefined) {\n            const tile = (ctx.tile = this.depthTile(ctx.depth));\n            if (tile && tile.effects) {\n                const ev = tile.effects[event];\n                didSomething = await this._fire(ev, map, x, y, ctx);\n            }\n        }\n        else {\n            // console.log('fire event - %s', event);\n            for (ctx.tile of this.tiles) {\n                if (!ctx.tile || !ctx.tile.effects)\n                    continue;\n                const ev = ctx.tile.effects[event];\n                // console.log(' - ', ev);\n                if (await this._fire(ev, map, x, y, ctx)) {\n                    didSomething = true;\n                    break;\n                }\n                // }\n            }\n        }\n        return didSomething;\n    }\n    activateSync(event, map, x, y, ctx = {}) {\n        ctx.cell = this;\n        let didSomething = false;\n        if (ctx.depth !== undefined) {\n            const tile = (ctx.tile = this.depthTile(ctx.depth));\n            if (tile && tile.effects) {\n                const ev = tile.effects[event];\n                didSomething = this._fireSync(ev, map, x, y, ctx);\n            }\n        }\n        else {\n            // console.log('fire event - %s', event);\n            for (ctx.tile of this.tiles) {\n                if (!ctx.tile || !ctx.tile.effects)\n                    continue;\n                const ev = ctx.tile.effects[event];\n                // console.log(' - ', ev);\n                if (this._fireSync(ev, map, x, y, ctx)) {\n                    didSomething = true;\n                    break;\n                }\n                // }\n            }\n        }\n        return didSomething;\n    }\n    async _fire(effect, map, x, y, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.effects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = await Effect.fire(effect, map, x, y, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    _fireSync(effect, map, x, y, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.effects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = Effect.fireSync(effect, map, x, y, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this._item;\n    }\n    set item(val) {\n        this._item = val;\n        if (val) {\n            this.setCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        else {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        this.needsRedraw = true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this._actor;\n    }\n    set actor(val) {\n        this._actor = val;\n        if (val) {\n            this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        }\n        else {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR);\n        }\n        this.needsRedraw = true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        var _a, _b, _c, _d;\n        if ((_b = (_a = this._actor) === null || _a === void 0 ? void 0 : _a.sprite) === null || _b === void 0 ? void 0 : _b.ch)\n            return this._actor.sprite.ch;\n        if ((_d = (_c = this._item) === null || _c === void 0 ? void 0 : _c.sprite) === null || _d === void 0 ? void 0 : _d.ch)\n            return this._item.sprite.ch;\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Tile from '../tile';\nimport * as Flags from '../flags';\nexport class MapLayer {\n    constructor(map, name = 'layer') {\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    async tick(_dt) {\n        return false;\n    }\n}\nexport class ActorLayer extends MapLayer {\n    constructor(map, name = 'actor') {\n        super(map, name);\n    }\n    add(x, y, obj, _opts) {\n        const cell = this.map.cell(x, y);\n        const actor = obj;\n        if (actor.forbidsCell(cell))\n            return false;\n        if (!GWU.utils.addToChain(cell, 'actor', obj))\n            return false;\n        if (obj.isPlayer()) {\n            cell.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        obj.x = x;\n        obj.y = y;\n        return true;\n    }\n    remove(obj) {\n        const cell = this.map.cell(obj.x, obj.y);\n        if (!GWU.utils.removeFromChain(cell, 'actor', obj))\n            return false;\n        if (obj.isPlayer()) {\n            cell.clearCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        return true;\n    }\n    putAppearance(dest, x, y) {\n        const cell = this.map.cell(x, y);\n        if (!cell.actor)\n            return;\n        dest.drawSprite(cell.actor.sprite);\n    }\n}\nexport class ItemLayer extends MapLayer {\n    constructor(map, name = 'item') {\n        super(map, name);\n    }\n    add(x, y, obj, _opts) {\n        const cell = this.map.cell(x, y);\n        const item = obj;\n        if (item.forbidsCell(cell))\n            return false;\n        if (!GWU.utils.addToChain(cell, 'item', obj))\n            return false;\n        obj.x = x;\n        obj.y = y;\n        return true;\n    }\n    remove(obj) {\n        const cell = this.map.cell(obj.x, obj.y);\n        if (!GWU.utils.removeFromChain(cell, 'item', obj))\n            return false;\n        return true;\n    }\n    putAppearance(dest, x, y) {\n        const cell = this.map.cell(x, y);\n        if (!cell.item)\n            return;\n        dest.drawSprite(cell.item.sprite);\n    }\n}\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    set(x, y, tile, opts = {}) {\n        const cell = this.map.cell(x, y);\n        const current = cell.depthTile(tile.depth) || Tile.tiles.NULL;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (cell.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && cell.hasItem())\n            return false;\n        if (opts.blockedByActors && cell.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && cell.highestPriority() > tile.priority)\n            return false;\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = cell.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === Tile.tiles.NULL) {\n                this.set(x, y, Tile.get(tile.groundTile));\n            }\n        }\n        if (!cell.setTile(tile))\n            return false;\n        if (opts.machine) {\n            cell.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            cell.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clear(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire, pressure plates and key-activated tiles.\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (!cell.hasCellFlag(Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM) &&\n                    cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)) {\n                    cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n                }\n                if (cell.hasEffect('noKey') && !cell.hasKey()) {\n                    await cell.activate('noKey', this.map, x, y);\n                }\n            }\n        }\n        return true;\n    }\n    putAppearance(dest, x, y) {\n        const cell = this.map.cell(x, y);\n        const tile = cell.depthTile(this.depth);\n        if (tile && tile !== Tile.tiles.NULL) {\n            dest.drawSprite(tile.sprite);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nexport class CellMemory {\n    constructor() {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.flags = {\n            cell: 0,\n            item: 0,\n            actor: 0,\n            tile: 0,\n            tileMech: 0,\n            object: 0,\n        };\n        this.blocks = {\n            vision: false,\n            effects: false,\n            move: false,\n            pathing: false,\n        };\n        this._tile = TILE.tiles.NULL;\n        this._item = null;\n        this._actor = null;\n        this._hasKey = false;\n        this.snapshot = new GWU.sprite.Mixer();\n    }\n    clear() {\n        this.snapshot.blackOut();\n        this._item = null;\n        this._actor = null;\n        this._tile = TILE.tiles.NULL;\n        this.flags.cell = 0;\n        this.flags.object = 0;\n        this.flags.tile = 0;\n        this.flags.tileMech = 0;\n        this.blocks.effects = false;\n        this.blocks.move = false;\n        this.blocks.pathing = false;\n        this.blocks.vision = false;\n        this._hasKey = false;\n        this.machineId = 0;\n        this.chokeCount = 0;\n    }\n    store(cell) {\n        this._item = null;\n        if (cell.hasItem()) {\n            this._item = cell.item;\n        }\n        this._actor = null;\n        if (cell.hasActor()) {\n            this._actor = cell.actor;\n        }\n        this._tile = cell.tile;\n        this.flags.cell = cell.cellFlags();\n        this.flags.tile = cell.tileFlags();\n        this.flags.tileMech = cell.tileMechFlags();\n        this.flags.object = cell.objectFlags();\n        this.flags.item = cell.itemFlags();\n        this.flags.actor = cell.actorFlags();\n        this.blocks.effects = cell.blocksEffects();\n        this.blocks.move = cell.blocksMove();\n        this.blocks.pathing = cell.blocksPathing();\n        this.blocks.vision = cell.blocksVision();\n        this._hasKey = cell.hasKey();\n        this.chokeCount = cell.chokeCount;\n        this.machineId = cell.machineId;\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.flags.tile & flags) == flags;\n    }\n    hasObjectFlag(flag) {\n        return !!(this.flags.object & flag);\n    }\n    hasAllObjectFlags(flags) {\n        return (this.flags.object & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    objectFlags() {\n        return this.flags.object;\n    }\n    tileFlags() {\n        return this.flags.tile;\n    }\n    tileMechFlags() {\n        return this.flags.tileMech;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    blocksVision() {\n        return this.blocks.vision;\n    }\n    blocksPathing() {\n        return this.blocks.pathing;\n    }\n    blocksMove() {\n        return this.blocks.move;\n    }\n    blocksEffects() {\n        return this.blocks.effects;\n    }\n    isWall() {\n        return this.blocksVision() && this.blocksMove();\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    hasKey() {\n        return this._hasKey;\n    }\n    get tile() {\n        return this._tile;\n    }\n    hasTile(tile) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this._tile === tile;\n    }\n    hasItem() {\n        return !!this._item;\n    }\n    get item() {\n        return this._item;\n    }\n    hasActor() {\n        return !!this._actor;\n    }\n    hasPlayer() {\n        return !!(this.flags.cell & Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this._actor;\n    }\n    getDescription() {\n        throw new Error('Method not implemented.');\n    }\n    getFlavor() {\n        throw new Error('Method not implemented.');\n    }\n    getName(_opts) {\n        throw new Error('Method not implemented.');\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './layers';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    await this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.utils.DIRS[d];\n                        await this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    async exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && GWU.random.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.utils.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasObjectFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            await cell.activate(event, this.map, x, y, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './layers';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.needsUpdate = false;\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    set(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.set(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.needsUpdate = true;\n        return true;\n    }\n    clear(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n    }\n    async tick(_dt) {\n        if (!this.needsUpdate)\n            return false;\n        this.needsUpdate = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.needsUpdate = true;\n            }\n            else {\n                this.clear(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasObjectFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clear(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasObjectFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n    putAppearance(dest, x, y) {\n        const volume = this.volume[x][y];\n        if (!volume)\n            return;\n        const cell = this.map.cell(x, y);\n        const tile = cell.depthTile(this.depth);\n        if (tile) {\n            const opacity = this.calcOpacity(volume);\n            dest.drawSprite(tile.sprite, opacity);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport { TileLayer, ActorLayer, ItemLayer } from './layers';\nimport { CellMemory } from './cellMemory';\nimport { FireLayer } from './fireLayer';\nimport { GasLayer } from './gasLayer';\nimport * as Effect from '../effect';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        this.width = width;\n        this.height = height;\n        this.flags = { map: 0 };\n        this.layers = [];\n        this.cells = GWU.grid.make(width, height, () => new Cell());\n        this.memory = GWU.grid.make(width, height, () => new CellMemory());\n        this.light = new GWU.light.LightSystem(this, opts);\n        this.fov = new GWU.fov.FovSystem(this, opts);\n        this.properties = {};\n        this.initLayers();\n    }\n    cellInfo(x, y, useMemory = false) {\n        if (useMemory)\n            return this.memory[x][y];\n        return this.cell(x, y);\n    }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new GasLayer(this, 'gas'));\n        this.addLayer(Flags.Depth.ITEM, new ItemLayer(this, 'item'));\n        this.addLayer(Flags.Depth.ACTOR, new ActorLayer(this, 'actor'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // DRAW\n    drawInto(dest, opts = {}) {\n        const buffer = dest instanceof GWU.canvas.Canvas ? dest.buffer : dest;\n        if (typeof opts === 'boolean')\n            opts = { force: opts };\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                this.getAppearanceAt(x, y, mixer);\n                buffer.drawSprite(x, y, mixer);\n            }\n        }\n    }\n    // items\n    itemAt(x, y) {\n        return this.cell(x, y).item;\n    }\n    eachItem(cb) {\n        this.cells.forEach((cell) => {\n            GWU.utils.eachChain(cell.item, cb);\n        });\n    }\n    addItem(x, y, item) {\n        const layer = this.layers[item.depth];\n        return layer.add(x, y, item);\n    }\n    removeItem(item) {\n        const layer = this.layers[item.depth];\n        return layer.remove(item);\n    }\n    moveItem(item, x, y) {\n        const layer = this.layers[item.depth];\n        if (!layer.remove(item))\n            return false;\n        return layer.add(x, y, item);\n    }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.cell(x, y).actor;\n    }\n    eachActor(cb) {\n        this.cells.forEach((cell) => {\n            GWU.utils.eachChain(cell.actor, cb);\n        });\n    }\n    addActor(x, y, item) {\n        const layer = this.layers[item.depth];\n        return layer.add(x, y, item);\n    }\n    removeActor(item) {\n        const layer = this.layers[item.depth];\n        return layer.remove(item);\n    }\n    moveActor(item, x, y) {\n        const layer = this.layers[item.depth];\n        if (!layer.remove(item))\n            return false;\n        return layer.add(x, y, item);\n    }\n    // Information\n    isVisible(x, y) {\n        return this.fov.isAnyKindOfVisible(x, y);\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        this.cells.dump(fmt || ((c) => c.dump()), log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cell(i, j);\n                cell.clear();\n                cell.setTile(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile, useMemory = false) {\n        return this.cellInfo(x, y, useMemory).hasTile(tile);\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof TileLayer))\n            return false;\n        return layer.set(x, y, tile, opts);\n    }\n    async tick(dt) {\n        let didSomething = await this.fireAll('tick');\n        for (let layer of this.layers) {\n            if (layer && (await layer.tick(dt))) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cells[x][y]);\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.flags.map = src.flags.map;\n        this.light.setAmbient(src.light.getAmbient());\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    async fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.activate(event, this, x, y, ctx);\n    }\n    fireSync(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.activateSync(event, this, x, y, ctx);\n    }\n    async fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.utils.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasObjectFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    GWU.random.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        await willFire.forEachAsync(async (w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    await cell.activate(event, this, x, y, {\n                        force: true,\n                        depth,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    fireAllSync(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.utils.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasObjectFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    GWU.random.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        willFire.forEach((w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    cell.activate(event, this, x, y, {\n                        force: true,\n                        depth,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    async activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cells[x][y];\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        (await cell.activate('machine', this, x, y, ctx)) ||\n                            didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    activateMachineSync(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cells[x][y];\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        cell.activateSync('machine', this, x, y, ctx) ||\n                            didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    getAppearanceAt(x, y, dest) {\n        dest.blackOut();\n        const cell = this.cell(x, y);\n        const isVisible = this.fov.isAnyKindOfVisible(x, y);\n        if (cell.needsRedraw && isVisible) {\n            this.layers.forEach((layer) => layer.putAppearance(dest, x, y));\n            if (dest.dances) {\n                cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n            }\n            else {\n                cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n            }\n            dest.bake();\n            this.memory[x][y].putSnapshot(dest);\n            cell.needsRedraw = false;\n        }\n        else {\n            this.memory[x][y].getSnapshot(dest);\n        }\n        if (isVisible) {\n            const light = this.light.getLight(x, y);\n            dest.multiply(light);\n        }\n        else if (this.fov.isRevealed(x, y)) {\n            dest.scale(50);\n        }\n        else {\n            dest.blackOut();\n        }\n        if (cell.hasObjectFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n            GWU.color.separate(dest.fg, dest.bg);\n        }\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n    onCellRevealed(_x, _y) {\n        // if (DATA.automationActive) {\n        // if (cell.item) {\n        //     const theItem: GW.types.ItemType = cell.item;\n        //     if (\n        //         theItem.hasObjectFlag(ObjectFlags.L_INTERRUPT_WHEN_SEEN)\n        //     ) {\n        //         GW.message.add(\n        //             '§you§ §see§ ΩitemMessageColorΩ§item§∆.',\n        //             {\n        //                 item: theItem,\n        //                 actor: DATA.player,\n        //             }\n        //         );\n        //     }\n        // }\n        // if (\n        //     !(this.fov.isMagicMapped(x, y)) &&\n        //     this.site.hasObjectFlag(\n        //         x,\n        //         y,\n        //         ObjectFlags.L_INTERRUPT_WHEN_SEEN\n        //     )\n        // ) {\n        //     const tile = cell.tileWithLayerFlag(\n        //         ObjectFlags.L_INTERRUPT_WHEN_SEEN\n        //     );\n        //     if (tile) {\n        //         GW.message.add(\n        //             '§you§ §see§ ΩbackgroundMessageColorΩ§item§∆.',\n        //             {\n        //                 actor: DATA.player,\n        //                 item: tile.name,\n        //             }\n        //         );\n        //     }\n        // }\n    }\n    redrawCell(x, y, clearMemory) {\n        if (clearMemory) {\n            this.clearMemory(x, y);\n        }\n        this.cells[x][y].needsRedraw = true;\n    }\n    clearMemory(x, y) {\n        this.memory[x][y].clear();\n    }\n    storeMemory(x, y) {\n        const cell = this.cell(x, y);\n        this.memory[x][y].store(cell);\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n    }\n    map.light.update();\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasObjectFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.utils.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.utils.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.utils.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.utils.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.utils.DIRS[dir][0];\n                        const newY = j + GWU.utils.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    let count = passMap[startX][startY] == 2 ? 5000 : 1;\n    if (map.cell(startX, startY).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n        count = 10000;\n    }\n    results[startX][startY] = 1;\n    for (let dir = 0; dir < 4; dir++) {\n        const newX = startX + GWU.utils.DIRS[dir][0];\n        const newY = startY + GWU.utils.DIRS[dir][1];\n        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n            passMap[newX][newY] &&\n            !results[newX][newY]) {\n            count += floodFillCount(map, results, passMap, newX, newY);\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    map.eachCell(checkLoopiness);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasObjectFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(cell, x, y, map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    if (!cell || !(cell.flags.cell & Flags.Cell.IS_IN_LOOP)) {\n        return false;\n    }\n    // find an unloopy neighbor to start on\n    for (sdir = 0; sdir < 8; sdir++) {\n        newX = x + GWU.utils.CLOCK_DIRS[sdir][0];\n        newY = y + GWU.utils.CLOCK_DIRS[sdir][1];\n        if (!map.hasXY(newX, newY))\n            continue;\n        const cell = map.get(newX, newY);\n        if (!cell || !(cell.flags.cell & Flags.Cell.IS_IN_LOOP)) {\n            break;\n        }\n    }\n    if (sdir == 8) {\n        // no unloopy neighbors\n        return false; // leave cell loopy\n    }\n    // starting on this unloopy neighbor,\n    // work clockwise and count up:\n    // (a) the number of strings of loopy neighbors, and\n    // (b) the length of the longest such string.\n    numStrings = maxStringLength = currentStringLength = 0;\n    inString = false;\n    for (dir = sdir; dir < sdir + 8; dir++) {\n        newX = x + GWU.utils.CLOCK_DIRS[dir % 8][0];\n        newY = y + GWU.utils.CLOCK_DIRS[dir % 8][1];\n        if (!map.hasXY(newX, newY))\n            continue;\n        const newCell = map.get(newX, newY);\n        if (newCell && newCell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n            currentStringLength++;\n            if (!inString) {\n                if (numStrings > 0) {\n                    return false; // more than one string here; leave loopy\n                }\n                numStrings++;\n                inString = true;\n            }\n        }\n        else if (inString) {\n            if (currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            currentStringLength = 0;\n            inString = false;\n        }\n    }\n    if (inString && currentStringLength > maxStringLength) {\n        maxStringLength = currentStringLength;\n    }\n    if (numStrings == 1 && maxStringLength <= 4) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        for (dir = 0; dir < 8; dir++) {\n            const newX = x + GWU.utils.CLOCK_DIRS[dir][0];\n            const newY = y + GWU.utils.CLOCK_DIRS[dir][1];\n            if (map.hasXY(newX, newY)) {\n                const newCell = map.cell(newX, newY);\n                checkLoopiness(newCell, newX, newY, map);\n            }\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.utils.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.utils.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as Tile from '../tile';\nimport * as Effect from '../effect';\nimport { Actor } from '../actor';\nimport { Item } from '../item';\nexport class SpawnEffect {\n    make(src, dest) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!src.tile)\n            return true; // no error\n        let config = src.tile;\n        if (typeof config === 'string') {\n            const parts = config.split(/[,|]/).map((p) => p.trim());\n            config = {\n                tile: parts[0],\n                grow: Number.parseInt(parts[1] || '0'),\n                decrement: Number.parseInt(parts[2] || '0'),\n            };\n        }\n        const info = {\n            grow: (_b = (_a = config.grow) !== null && _a !== void 0 ? _a : config.spread) !== null && _b !== void 0 ? _b : 0,\n            decrement: (_c = config.decrement) !== null && _c !== void 0 ? _c : 0,\n            flags: GWU.flag.from(Effect.Flags, config.flags),\n            volume: (_d = config.volume) !== null && _d !== void 0 ? _d : 0,\n            next: (_e = config.next) !== null && _e !== void 0 ? _e : null,\n        };\n        const id = (_f = config.tile) !== null && _f !== void 0 ? _f : config.id;\n        if (typeof id === 'string') {\n            info.tile = id;\n        }\n        else {\n            throw new Error('Invalid tile spawn config: ' + id);\n        }\n        if (!info.tile) {\n            throw new Error('Must have tile.');\n        }\n        const match = (_g = config.matchTile) !== null && _g !== void 0 ? _g : config.match;\n        if (typeof match === 'string') {\n            info.matchTile = match;\n        }\n        else if (match) {\n            throw new Error('Invalid tile spawn match tile: ' + config.matchTile);\n        }\n        dest.tile = info;\n        return true;\n    }\n    async fire(effect, map, x, y, ctx) {\n        let didSomething = false;\n        const spawned = this.fireSync(effect, map, x, y, ctx);\n        if (spawned) {\n            didSomething = true;\n            // await spawnMap.forEachAsync( (v, x, y) => {\n            //     if (!v) return;\n            //     await map.applyInstantEffects(x, y);\n            // });\n            // if (applyEffects) {\n            // if (PLAYER.xLoc == i && PLAYER.yLoc == j && !PLAYER.status.levitating && refresh) {\n            // \tflavorMessage(tileFlavor(PLAYER.xLoc, PLAYER.yLoc));\n            // }\n            // if (cell.actor || cell.item) {\n            // \tfor(let t of cell.tiles()) {\n            // \t\tawait t.applyInstantEffects(map, i, j, cell);\n            // \t\tif (Data.gameHasEnded) {\n            // \t\t\treturn true;\n            // \t\t}\n            // \t}\n            // }\n            // if (tile.flags & TileFlags.T_IS_FIRE) {\n            // \tif (cell.flags & CellFlags.HAS_ITEM) {\n            // \t\ttheItem = map.itemAt(i, j);\n            // \t\tif (theItem.flags & Flags.Item.ITEM_FLAMMABLE) {\n            // \t\t\tawait burnItem(theItem);\n            // \t\t}\n            // \t}\n            // }\n            // }\n        }\n        // GWU.grid.free(spawnMap);\n        return didSomething;\n    }\n    fireSync(effect, map, x, y, ctx) {\n        if (!effect.tile)\n            return false; // did nothing\n        const id = effect.tile.tile;\n        const tile = Tile.tiles[id] || null;\n        if (!tile) {\n            throw new Error('Failed to find tile for effect: ' + id);\n        }\n        const abortIfBlocking = !!(effect.flags & Effect.Flags.E_ABORT_IF_BLOCKS_MAP);\n        const isBlocking = !!(abortIfBlocking &&\n            !(effect.flags & Effect.Flags.E_PERMIT_BLOCKING) &&\n            (tile.blocksPathing() ||\n                effect.flags & Effect.Flags.E_TREAT_AS_BLOCKING));\n        let didSomething = false;\n        didSomething = computeSpawnMap(effect, map, x, y, ctx);\n        if (!didSomething) {\n            return false;\n        }\n        if (abortIfBlocking &&\n            isBlocking &&\n            this.mapDisruptedBy(map, effect.grid)) {\n            // GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (effect.flags & Effect.Flags.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Effect.Flags.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Effect.Flags.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, ctx.grid, effect.flags)) {\n                didSomething = true;\n            }\n        }\n        const spawned = spawnTiles(effect.flags, ctx.grid, map, tile, effect.tile.volume, ctx.machine);\n        return spawned;\n    }\n    mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(map.width, map.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.utils.forRect(map.width, map.height, (i, j) => {\n            const lakeX = i + blockingToMapX;\n            const lakeY = j + blockingToMapY;\n            if (blockingGrid.get(lakeX, lakeY)) {\n                if (map.cellInfo(i, j).isStairs()) {\n                    disrupts = true;\n                }\n            }\n            else if (!map.cellInfo(i, j).blocksMove()) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGWU.grid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\nEffect.installHandler('tile', new SpawnEffect());\n// tick\n// Spawn\nexport function spawnTiles(flags, spawnMap, map, tile, volume = 0, machine) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = !!(flags & Effect.Flags.E_BLOCKED_BY_OTHER_LAYERS);\n    const superpriority = !!(flags & Effect.Flags.E_SUPERPRIORITY);\n    const blockedByActors = !!(flags & Effect.Flags.E_BLOCKED_BY_ACTORS);\n    const blockedByItems = !!(flags & Effect.Flags.E_BLOCKED_BY_ITEMS);\n    // const applyEffects = ctx.refreshCell;\n    volume = volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            // const isRoot = spawnMap[i][j] === 1;\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.hasTile(tile)) {\n                // If the new cell already contains the fill terrain,\n                // if (tile.depth == Flags.Depth.GAS) {\n                //     spawnMap[i][j] = 1;\n                //     cell.gasVolume += volume;\n                // } else if (tile.depth == Flags.Depth.LIQUID) {\n                //     spawnMap[i][j] = 1;\n                //     cell.liquidVolume += volume;\n                // }\n            }\n            else if (map.setTile(i, j, tile, {\n                volume,\n                superpriority,\n                blockedByOtherLayers,\n                blockedByActors,\n                blockedByItems,\n                machine,\n            })) {\n                // if the fill won't violate the priority of the most important terrain in this cell:\n                spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                // map.redrawCell(cell);\n                // if (volume && cell.gas) {\n                //     cell.volume += (feat.volume || 0);\n                // }\n                cell.flags.cell |= Flags.Cell.EVENT_FIRED_THIS_TURN;\n                if (flags & Effect.Flags.E_PROTECTED) {\n                    cell.flags.cell |= Flags.Cell.EVENT_PROTECTED;\n                }\n                accomplishedSomething = true;\n                // debug('- tile', i, j, 'tile=', tile.id);\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.setMapFlag(Flags.Map.MAP_CHANGED);\n    }\n    return accomplishedSomething;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.tile.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Effect.Flags.E_BUILD_IN_WALLS) {\n        if (!map.cellInfo(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Effect.Flags.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.utils.eachNeighbor(x, y, (i, j) => {\n            if (map.cellInfo(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Effect.Flags.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cellInfo(x, y).isWall())\n            return false; // or on wall\n        GWU.utils.eachNeighbor(x, y, (i, j) => {\n            if (map.cellInfo(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.tile.matchTile &&\n        !isStart &&\n        !cell.hasTile(effect.tile.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, map, x, y, ctx) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const config = effect.tile;\n    let startProb = config.grow || 0;\n    let probDec = config.decrement || 0;\n    const spawnMap = ctx.grid;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.utils.DIRS[dir][0];\n                            y2 = j + GWU.utils.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                GWU.random.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\n// export function spreadCircle(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     let radius = 0;\n//     startProb = startProb || 100;\n//     if (startProb >= 100) {\n//         probDec = probDec || 100;\n//     }\n//     while (GW.random.chance(startProb)) {\n//         startProb -= probDec;\n//         ++radius;\n//     }\n//     // startProb = 100;\n//     // probDec = 0;\n//     spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n//         if (!cellIsOk(this, i, j, ctx)) return 0;\n//         // const dist = Math.floor(GWU.utils.distanceBetween(x, y, i, j));\n//         // const prob = startProb - dist * probDec;\n//         // if (!random.chance(prob)) return 0;\n//         return 1;\n//     });\n//     // spawnMap[x][y] = 1;\n//     // if (!isOk(flags, x, y, ctx)) {\n//     //     spawnMap[x][y] = 0;\n//     // }\n//     return true;\n// }\n// export function spreadLine(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     let x2, y2;\n//     let madeChange;\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     if (startProb) {\n//         madeChange = true;\n//         if (startProb >= 100) {\n//             probDec = probDec || 100;\n//         }\n//         x2 = x;\n//         y2 = y;\n//         const dir = GWU.utils.DIRS[GW.random.number(4)];\n//         while (madeChange) {\n//             madeChange = false;\n//             x2 = x2 + dir[0];\n//             y2 = y2 + dir[1];\n//             if (\n//                 spawnMap.hasXY(x2, y2) &&\n//                 !spawnMap[x2][y2] &&\n//                 cellIsOk(this, x2, y2, ctx) &&\n//                 GW.random.chance(startProb)\n//             ) {\n//                 spawnMap[x2][y2] = 1;\n//                 madeChange = true;\n//                 startProb -= probDec;\n//             }\n//         }\n//     }\n//     if (!cellIsOk(this, x, y, ctx)) {\n//         spawnMap[x][y] = 0;\n//     }\n//     return true;\n// }\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Effect.Flags.E_CLEAR_CELL) === Effect.Flags.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Effect.Flags.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Effect.Flags.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Effect.Flags.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Effect.Flags.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let i = 0, j = 0;\n    let didSomething = false;\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            if (!blockingMap[i][j])\n                continue;\n            const cell = map.cell(i, j);\n            if (!cell.hasActor())\n                continue;\n            GWU.utils.eachChain(cell.actor, (obj) => {\n                if (!(obj instanceof Actor))\n                    return;\n                const monst = obj;\n                const loc = GWU.random.matchingLocNear(i, j, (x, y) => {\n                    if (!map.hasXY(x, y))\n                        return false;\n                    if (blockingMap[x][y])\n                        return false;\n                    const c = map.cell(x, y);\n                    return !monst.forbidsCell(c);\n                });\n                if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                    map.moveActor(monst, loc[0], loc[1]);\n                    // map.redrawXY(loc[0], loc[1]);\n                    didSomething = true;\n                }\n            });\n        }\n    }\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    blockingMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (!cell.hasItem())\n            return;\n        GWU.utils.eachChain(cell.item, (obj) => {\n            if (!(obj instanceof Item))\n                return;\n            const item = obj;\n            const loc = GWU.random.matchingLocNear(i, j, (x, y) => {\n                if (!map.hasXY(x, y))\n                    return false;\n                if (blockingMap[x][y])\n                    return false;\n                const dest = map.cell(x, y);\n                return !item.forbidsCell(dest);\n            });\n            if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                map.moveItem(item, loc[0], loc[1]);\n                // map.redrawXY(loc[0], loc[1]);\n                didSomething = true;\n            }\n        });\n    });\n    return didSomething;\n}\nclass ClearTileEffect {\n    make(src, dest) {\n        if (!src.clear)\n            return true;\n        let config = src.clear;\n        let layers = 0;\n        if (typeof config === 'string') {\n            config = config.split(/[,|]/).map((t) => t.trim());\n        }\n        if (config === true) {\n            layers = Flags.Depth.ALL_LAYERS;\n        }\n        else if (typeof config === 'number') {\n            layers = config;\n        }\n        else if (Array.isArray(config)) {\n            layers = config.reduce((out, v) => {\n                if (typeof v === 'number')\n                    return out | v;\n                const depth = Flags.Depth[v] || 0;\n                return out | depth;\n            }, 0);\n        }\n        else {\n            throw new Error('clear effect must have number or string config.');\n        }\n        dest.clear = layers;\n        return layers > 0;\n    }\n    fire(config, map, x, y, ctx) {\n        return this.fireSync(config, map, x, y, ctx);\n    }\n    fireSync(config, map, x, y, _ctx) {\n        if (!config.clear)\n            return false;\n        if (!map)\n            return false;\n        const cell = map.cell(x, y);\n        return cell.clearDepth(config.clear);\n    }\n}\nEffect.installHandler('clear', new ClearTileEffect());\n"],"names":["Fl","GWU","flag","fl","Entity","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","[object Object]","this","sprite","Sprite","depth","light","flags","entity","next","x","y","hasObjectFlag","Flags.Entity","Depth","Actor","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","TileMech","Cell","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_TRAP_FREE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","NEEDS_REDRAW","CELL_CHANGED","Map","super","actor","Flags.Depth","ACTOR","hasActorFlag","Flags.Actor","IS_PLAYER","_cell","ItemKind","kinds","get","id","makeKind","_info","Item","kind","quantity","item","ITEM","_id","_kind","Kind.get","Error","info","Kind.ItemKind","Kind.makeKind","Effect","make","opts","_a","fn","from","Flags","chance","Object","values","handlers","forEach","v","effect","effects","reset","E_FIRED","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","install","config","installHandler","handler","async","fire","map","ctx_","name","ctx","force","random","grid","alloc","width","height","didSomething","allHandlers","h","isVisible","E_NO_MARK_FIRED","E_NEXT_ALWAYS","data","gameHasEnded","nextInfo","E_NEXT_EVERYWHERE","forEachAsync","i","j","free","fireSync","MessageEffect","src","dest","message","fired","length","addAt","_map","_x","_y","_ctx","EmitEffect","emit","events","FnEffect","result","ActivateMachineEffect","activateMachine","machine","cell","machineId","activateMachineSync","e","entries","_b","_c","_d","index","dissipate","priority","groundTile","description","flavor","article","tile","tileMech","assign","hasEffect","Flags.Tile","T_IS_FLAMMABLE","blocksMove","hasTileFlag","T_PATHING_BLOCKER","arg","color","fg","toString","getName","options","_e","_f","base","extends","tiles","text","replace","search","Number","parseInt","substring","delta","undefined","key","value","Effect.make","Flags.TileMech","ch","bg","opacity","all","args","push","enter","open","tick","close","player","CellObjects","cb","object","_item","_actor","eachItem","eachActor","start","chokeCount","_objects","TILE.tiles","NULL","TILE.get","setTile","other","slice","some","t","o","objectFlags","tileFlags","tileMechFlags","reduce","out","a","needsRedraw","Flags.Cell","Math","max","TILE.Tile","includes","highestPriorityTile","find","blocksVision","blocksPathing","blocksEffects","TILE.flags","T_BLOCKS_OTHER_LAYERS","every","hasAllObjectFlags","tileFlag","tileMechFlag","hasTileMechFlag","clearDepth","event","depthTile","ev","_fire","_fireSync","Effect.effects","Effect.fire","Effect.fireSync","hasCellFlag","val","setCellFlag","clearCellFlag","MapLayer","properties","_other","_dt","ActorLayer","obj","_opts","forbidsCell","utils","addToChain","isPlayer","removeFromChain","drawSprite","ItemLayer","TileLayer","current","Tile.tiles","superpriority","blocksLayer","blockedByItems","hasItem","blockedByActors","hasActor","blockedByOtherLayers","highestPriority","GROUND","ground","set","Tile.get","glowLightChanged","CAUGHT_FIRE_THIS_TURN","hasKey","activate","CellMemory","blocks","vision","move","pathing","_tile","_hasKey","snapshot","Mixer","blackOut","cellFlags","itemFlags","actorFlags","copy","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","d","dir","DIRS","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","GAS","Effect.from","TM_EXPLOSIVE_PROMOTE","eachNeighbor","x0","y0","n","GasLayer","needsUpdate","volume","startingVolume","spread","update","clear","floor","min","total","count","highestVolume","startingTile","highestTile","updateCellVolume","calcOpacity","layers","cells","memory","LightSystem","fov","FovSystem","initLayers","useMemory","addLayer","SURFACE","layer","hasXY","buffer","canvas","Canvas","mixer","getAppearanceAt","eachChain","add","remove","hasPlayer","isAnyKindOfVisible","fmt","log","console","dump","c","boundary","isBoundaryXY","cellInfo","hasTile","dt","fireAll","constructor","l","setAmbient","getAmbient","activateSync","willFire","EVENT_FIRED_THIS_TURN","EVENT_PROTECTED","promoteChance","w","originX","originY","putAppearance","dances","COLORS_DANCE","bake","putSnapshot","getSnapshot","getLight","multiply","isRevealed","scale","L_VISUALLY_DISTINCT","separate","eachGlowLight","_cb","changed","isDark","clearMemory","store","fill","updateChokepoints","updateCounts","passMap","L_SECRETLY_PASSABLE","passableArcCount","oldX","CLOCK_DIRS","oldY","newX","newY","cellCount","floodFillCount","i2","j2","results","startX","startY","updateLoopiness","eachCell","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","newCell","fillInnerLoopGrid","up","left","designationSurvives","SpawnEffect","_g","parts","split","p","trim","grow","decrement","Effect.Flags","match","matchTile","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","isBlocking","E_PERMIT_BLOCKING","E_TREAT_AS_BLOCKING","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","spawnTiles","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","spawnMap","accomplishedSomething","E_BLOCKED_BY_OTHER_LAYERS","E_SUPERPRIORITY","E_PROTECTED","setMapFlag","Flags.Map","MAP_CHANGED","cellIsOk","isStart","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","E_NO_TOUCH_WALLS","x2","y2","madeChange","startProb","probDec","clearAll","LIQUID","blockingMap","monst","loc","matchingLocNear","moveActor","moveItem","ALL_LAYERS","Array","isArray","prefab","charToTile","isStringArray","len","line","updateChokeCounts"],"mappings":"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"}