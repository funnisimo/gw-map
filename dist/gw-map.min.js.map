{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/actor/actor.js","../js/effect/handler.js","../js/effect/make.js","../js/tile/tile.js","../js/tile/tiles.js","../js/tile/index.js","../js/effect/fire.js","../js/effect/handlers/emit.js","../js/effect/handlers/fn.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/effect.js","../js/effect/handlers/tile.js","../js/map/cell.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/actorLayer.js","../js/layer/itemLayer.js","../js/layer/gasLayer.js","../js/layer/fireLayer.js","../js/draw/basic.js","../js/map/map.js","../js/memory/memory.js","../js/memory/system.js","../js/actor/kind.js","../js/actor/make.js","../js/item/item.js","../js/item/kind.js","../js/item/make.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/path.js","../js/horde/horde.js","../js/horde/make.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_ON_MAP\"] = Fl(17)] = \"L_ON_MAP\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n    Actor[Actor[\"HAS_MEMORY\"] = Fl(1)] = \"HAS_MEMORY\";\n    Actor[Actor[\"USES_FOV\"] = Fl(2)] = \"USES_FOV\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(0)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(1)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"KNOWN_TO_BE_SAFE\"] = Fl(2)] = \"KNOWN_TO_BE_SAFE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to speed checks\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(16)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(27)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(18)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(19)] = \"HAS_ITEM\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(20)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(21)] = \"IS_CURSOR\";\n    Cell[Cell[\"HAS_TICK_EFFECT\"] = Fl(22)] = \"HAS_TICK_EFFECT\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_SAFE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_SPREAD_CIRCLE\"] = Fl(13)] = \"E_SPREAD_CIRCLE\";\n    Effect[Effect[\"E_SPREAD_LINE\"] = Fl(14)] = \"E_SPREAD_LINE\";\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nlet lastId = 0;\nexport class Entity {\n    constructor(kind) {\n        this._map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n        this.id = '' + ++lastId;\n    }\n    get map() {\n        return this._map;\n    }\n    addToMap(map, x, y) {\n        if (this.hasEntityFlag(Flags.Entity.L_ON_MAP)) {\n            throw new Error('Entity is currently on a map!');\n        }\n        this.x = x;\n        this.y = y;\n        this.setEntityFlag(Flags.Entity.L_ON_MAP);\n        if (this._map === map) {\n            return false;\n        }\n        this._map = map;\n        this.kind.addToMap(this, map);\n        return true;\n    }\n    removeFromMap() {\n        this.clearEntityFlag(Flags.Entity.L_ON_MAP);\n        this.kind.removeFromMap(this);\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    isAt(x, y) {\n        return this.x === x && this.y === y;\n    }\n    clone() {\n        const other = new this.constructor(this.kind);\n        other.copy(this);\n        return other;\n    }\n    copy(other) {\n        this.depth = other.depth;\n        this.light = other.light;\n        Object.assign(this.flags, other.flags);\n        this.next = other.next;\n        this.x = other.x;\n        this.y = other.y;\n        this.kind = other.kind;\n        this.id = other.id;\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    setEntityFlag(flag) {\n        this.flags.entity |= flag;\n    }\n    clearEntityFlag(flag) {\n        this.flags.entity &= ~flag;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isKey(x, y) {\n        return this.key && this.key.matches(x, y);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n    drawStatus(sidebar) {\n        this.kind.drawStatus(this, sidebar);\n    }\n    drawInto(dest, _observer) {\n        dest.drawSprite(this.sprite);\n    }\n    toString() {\n        return `${this.constructor.name}-${this.id} @ ${this.x},${this.y}`;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requiredTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requiredTileTags) {\n            if (typeof config.requiredTileTags === 'string') {\n                this.requiredTileTags = config.requiredTileTags\n                    .split(/[,|]/)\n                    .map((t) => t.trim());\n            }\n            else {\n                this.requiredTileTags = config.requiredTileTags\n                    .slice()\n                    .map((t) => t.trim());\n            }\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    addToMap(_entity, _map) { }\n    removeFromMap(_entity) { }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAllTileTags(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    avoidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAnyTileTag(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n    drawStatus(entity, sidebar) {\n        if (!entity.map)\n            return;\n        if (entity.isDestroyed)\n            return;\n        entity.map.getAppearanceAt(entity.x, entity.y, sidebar.mixer);\n        sidebar.drawTitle(sidebar.mixer, entity.getName());\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.next = null;\n        this.leader = null;\n        this.items = null;\n        this.fov = null;\n        this.memory = null;\n        this.visionDistance = 99;\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.leader = other.leader;\n        this.items = other.items;\n        this.fov = other.fov;\n        this.memory = other.memory;\n        this.visionDistance = other.visionDistance;\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    canSee(x, y) {\n        if (x instanceof Entity.Entity) {\n            return this.canSee(x.x, x.y) && this.kind.isAbleToSee(this, x);\n        }\n        if (this.fov) {\n            return this.fov.isDirectlyVisible(x, y);\n        }\n        else if (this.map) {\n            return GWU.xy.forLineBetween(this.x, this.y, x, y, (i, j) => GWU.xy.distanceBetween(this.x, this.y, i, j) <=\n                this.visionDistance &&\n                !this.map.cell(i, j).blocksVision());\n        }\n        else {\n            return false; // need a map or an fov\n        }\n    }\n    canSeeOrSense(x, y) {\n        if (x instanceof Entity.Entity) {\n            return (this.canSeeOrSense(x.x, x.y) &&\n                (this.kind.isAbleToSee(this, x) ||\n                    this.kind.isAbleToSense(this, x)));\n        }\n        if (this.fov) {\n            return this.fov.isAnyKindOfVisible(x, y);\n        }\n        return this.canSee(x, y);\n    }\n    isAbleToSee(entity) {\n        return this.kind.isAbleToSee(this, entity);\n    }\n    isAbleToSense(entity) {\n        return this.kind.isAbleToSense(this, entity);\n    }\n    ////////////////// INVENTORY\n    async pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    async dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n}\n","// @ts-nocheck\nexport class Handler {\n    make(src, dest) {\n        return true;\n    }\n    fire(config, map, x, y, ctx) {\n        return false;\n    }\n}\nexport const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id] = handler;\n}\n","import * as GWU from 'gw-utils';\nimport { handlers } from './handler';\nimport { Effect as Flags } from '../flags';\nexport function make(opts) {\n    var _a;\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    if (typeof opts === 'string') {\n        throw new Error('Cannot make effect from string: ' + opts);\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    // now make base effect stuff\n    const info = {\n        flags: GWU.flag.from(Flags, opts.flags),\n        chance: (_a = opts.chance) !== null && _a !== void 0 ? _a : 0,\n        next: null,\n        id: opts.id || 'n/a',\n    };\n    if (opts.next) {\n        if (typeof opts.next === 'string') {\n            info.next = opts.next;\n        }\n        else {\n            info.next = make(opts.next);\n        }\n    }\n    // and all the handlers\n    Object.values(handlers).forEach((v) => v.make(opts, info));\n    return info;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'string') {\n        const effect = effects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\n// resetMessageDisplayed\nexport function reset(effect) {\n    effect.flags &= ~Flags.E_FIRED;\n}\nexport function resetAll() {\n    Object.values(effects).forEach((e) => reset(e));\n}\nexport const effects = {};\nexport function install(id, config) {\n    const effect = make(config);\n    effects[id] = effect;\n    effect.id = id;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/make';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string') {\n                effects[key] = value;\n                return;\n            }\n            effects[key] = makeEffect(value);\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as Tile from './tile';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: [30, 30, 30, 20, 0, 0, 0],\n    bg: [2, 2, 10, 0, 2, 2, 0],\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: { tile: 'DOOR_OPEN' },\n        open: { tile: 'DOOR_OPEN_ALWAYS' },\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            tile: 'DOOR',\n            flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY',\n        },\n        enter: null,\n        open: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: { emit: 'UP_STAIRS' },\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: { emit: 'DOWN_STAIRS' },\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: [5, 8, 20, 10, 0, 4, 15, true],\n    bg: [10, 15, 41, 6, 5, 5, 5, true],\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: [5, 8, 10, 10, 0, 4, 15, true],\n    bg: [10, 30, 30, 6, 0, 10, 10, true],\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    depth: 'SURFACE',\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\nimport './tiles';\n","import * as GWU from 'gw-utils';\nimport { Effect as Flags } from '../flags';\nimport { from } from './make';\nimport { handlers } from './handler';\nexport async function fire(effect, map, x, y, ctx_ = {}) {\n    if (!effect)\n        return false;\n    if (typeof effect === 'string') {\n        const name = effect;\n        effect = from(name);\n        if (!effect)\n            throw new Error('Failed to find effect: ' + name);\n    }\n    const ctx = ctx_;\n    if (!ctx.force && effect.chance && !map.rng.chance(effect.chance, 10000))\n        return false;\n    const grid = (ctx.grid = GWU.grid.alloc(map.width, map.height));\n    let didSomething = false;\n    const allHandlers = Object.values(handlers);\n    for (let h of allHandlers) {\n        if (await h.fire(effect, map, x, y, ctx)) {\n            didSomething = true;\n        }\n    }\n    // do the next effect - if applicable\n    if (effect.next &&\n        (didSomething || effect.flags & Flags.E_NEXT_ALWAYS) &&\n        !GWU.data.gameHasEnded) {\n        const nextInfo = typeof effect.next === 'string' ? from(effect.next) : effect.next;\n        if (effect.flags & Flags.E_NEXT_EVERYWHERE) {\n            await grid.forEachAsync(async (v, i, j) => {\n                if (!v)\n                    return;\n                didSomething =\n                    (await fire(nextInfo, map, i, j, ctx)) || didSomething;\n            });\n        }\n        else {\n            didSomething =\n                (await fire(nextInfo, map, x, y, ctx)) || didSomething;\n        }\n    }\n    // bookkeeping\n    if (didSomething &&\n        // map.isVisible(x, y) &&\n        !(effect.flags & Flags.E_NO_MARK_FIRED)) {\n        effect.flags |= Flags.E_FIRED;\n    }\n    GWU.grid.free(grid);\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// EMIT\nexport class EmitEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.emit)\n            return true;\n        if (typeof src.emit !== 'string') {\n            throw new Error('emit effects must be string name to emit: { emit: \"EVENT\" }');\n        }\n        dest.emit = src.emit;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (config.emit) {\n            await GWU.events.emit(config.emit, x, y, ctx);\n            return true;\n        }\n        return false;\n    }\n}\ninstallHandler('emit', new EmitEffect());\n","import { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// FN\nexport class FnEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.fn)\n            return true;\n        if (typeof src.fn !== 'function') {\n            throw new Error('fn effects must be functions.');\n        }\n        dest.fn = src.fn;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.fn) {\n            return await config.fn(config, map, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('fn', new FnEffect());\n","import * as GWU from 'gw-utils';\nimport { Handler, installHandler } from '../handler';\nimport { Effect as Flags } from '../../flags';\n//////////////////////////////////////////////\n// MESSAGE\nexport class MessageEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.message)\n            return true;\n        if (typeof src.message !== 'string') {\n            throw new Error('Emit must be configured with name of event to emit');\n        }\n        dest.message = src.message;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (!config.message)\n            return false;\n        const fired = !!(config.flags & Flags.E_FIRED);\n        if (config.message &&\n            config.message.length &&\n            !fired\n        // && map.isVisible(x, y)\n        ) {\n            GWU.message.addAt(x, y, config.message, ctx);\n            return true;\n        }\n        return false;\n    }\n}\ninstallHandler('message', new MessageEffect());\n","import { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// ActivateMachine\nexport class ActivateMachineEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.activateMachine)\n            return true;\n        dest.activateMachine = true;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.activateMachine) {\n            const cell = map.cell(x, y);\n            const machine = cell.machineId;\n            if (!machine)\n                return false;\n            return await map.activateMachine(machine, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('activateMachine', new ActivateMachineEffect());\n","import { Handler, installHandler } from '../handler';\nimport * as FIRE from '../fire';\n//////////////////////////////////////////////\n// EMIT\nexport class EffectEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.effect)\n            return true;\n        dest.effect = src.effect;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.effect) {\n            return await FIRE.fire(config.effect, map, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('effect', new EffectEffect());\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../../flags';\nimport * as Tile from '../../tile';\nimport { Handler, installHandler } from '../handler';\nexport class SpawnEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!src.tile)\n            return true; // no error\n        let config = src.tile;\n        if (typeof config === 'string') {\n            const parts = config.split(/[,|]/).map((p) => p.trim());\n            config = {\n                tile: parts[0],\n                grow: Number.parseInt(parts[1] || '0'),\n                decrement: Number.parseInt(parts[2] || '0'),\n            };\n        }\n        const info = {\n            grow: (_b = (_a = config.grow) !== null && _a !== void 0 ? _a : config.spread) !== null && _b !== void 0 ? _b : 0,\n            decrement: (_c = config.decrement) !== null && _c !== void 0 ? _c : 0,\n            flags: GWU.flag.from(Flags.Effect, config.flags),\n            volume: (_d = config.volume) !== null && _d !== void 0 ? _d : 0,\n            next: (_e = config.next) !== null && _e !== void 0 ? _e : null,\n        };\n        const id = (_f = config.tile) !== null && _f !== void 0 ? _f : config.id;\n        if (typeof id === 'string') {\n            info.tile = id;\n        }\n        else {\n            throw new Error('Invalid tile spawn config: ' + id);\n        }\n        if (!info.tile) {\n            throw new Error('Must have tile.');\n        }\n        const match = (_g = config.matchTile) !== null && _g !== void 0 ? _g : config.match;\n        if (typeof match === 'string') {\n            info.matchTile = match;\n        }\n        else if (match) {\n            throw new Error('Invalid tile spawn match tile: ' + config.matchTile);\n        }\n        dest.tile = info;\n        return true;\n    }\n    fire(effect, map, x, y, ctx) {\n        if (!effect.tile)\n            return false; // did nothing\n        const id = effect.tile.tile;\n        const tile = Tile.tiles[id] || null;\n        if (!tile) {\n            throw new Error('Failed to find tile for effect: ' + id);\n        }\n        const abortIfBlocking = !!(effect.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        const isBlocking = !!(abortIfBlocking &&\n            !(effect.flags & Flags.Effect.E_PERMIT_BLOCKING) &&\n            (tile.blocksPathing() ||\n                effect.flags & Flags.Effect.E_TREAT_AS_BLOCKING));\n        let didSomething = false;\n        didSomething = computeSpawnMap(effect, map, x, y, ctx);\n        if (!didSomething) {\n            return false;\n        }\n        if (abortIfBlocking &&\n            isBlocking &&\n            this.mapDisruptedBy(map, ctx.grid)) {\n            // GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (effect.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, ctx.grid, effect.flags)) {\n                didSomething = true;\n            }\n        }\n        const spawned = spawnTiles(effect.flags, ctx.grid, map, tile, effect.tile.volume, ctx.machine);\n        return spawned;\n    }\n    mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(map.width, map.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(map.width, map.height, (i, j) => {\n            const lakeX = i + blockingToMapX;\n            const lakeY = j + blockingToMapY;\n            if (blockingGrid.get(lakeX, lakeY)) {\n                if (map.cell(i, j).isStairs()) {\n                    disrupts = true;\n                }\n            }\n            else if (!map.cell(i, j).blocksMove()) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGWU.grid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\ninstallHandler('tile', new SpawnEffect());\n// tick\n// Spawn\nexport function spawnTiles(flags, spawnMap, map, tile, volume = 0, machine) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = !!(flags & Flags.Effect.E_BLOCKED_BY_OTHER_LAYERS);\n    const superpriority = !!(flags & Flags.Effect.E_SUPERPRIORITY);\n    const blockedByActors = !!(flags & Flags.Effect.E_BLOCKED_BY_ACTORS);\n    const blockedByItems = !!(flags & Flags.Effect.E_BLOCKED_BY_ITEMS);\n    // const applyEffects = ctx.refreshCell;\n    volume = volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            // const isRoot = spawnMap[i][j] === 1;\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.hasTile(tile)) {\n                // If the new cell already contains the fill terrain,\n                // if (tile.depth == Flags.Depth.GAS) {\n                //     spawnMap[i][j] = 1;\n                //     cell.gasVolume += volume;\n                // } else if (tile.depth == Flags.Depth.LIQUID) {\n                //     spawnMap[i][j] = 1;\n                //     cell.liquidVolume += volume;\n                // }\n            }\n            else if (map.setTile(i, j, tile, {\n                volume,\n                superpriority,\n                blockedByOtherLayers,\n                blockedByActors,\n                blockedByItems,\n                machine,\n            })) {\n                // if the fill won't violate the priority of the most important terrain in this cell:\n                spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                // map.redrawCell(cell);\n                // if (volume && cell.gas) {\n                //     cell.volume += (feat.volume || 0);\n                // }\n                cell.flags.cell |= Flags.Cell.EVENT_FIRED_THIS_TURN;\n                if (flags & Flags.Effect.E_PROTECTED) {\n                    cell.flags.cell |= Flags.Cell.EVENT_PROTECTED;\n                }\n                accomplishedSomething = true;\n                // debug('- tile', i, j, 'tile=', tile.id);\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.setMapFlag(Flags.Map.MAP_CHANGED);\n    }\n    return accomplishedSomething;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.tile.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.tile.matchTile &&\n        !isStart &&\n        !cell.hasTile(effect.tile.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, map, x, y, ctx) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const config = effect.tile;\n    let startProb = config.grow || 0;\n    let probDec = config.decrement || 0;\n    const spawnMap = ctx.grid;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\n// export function spreadCircle(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     let radius = 0;\n//     startProb = startProb || 100;\n//     if (startProb >= 100) {\n//         probDec = probDec || 100;\n//     }\n//     while (map.rng.chance(startProb)) {\n//         startProb -= probDec;\n//         ++radius;\n//     }\n//     // startProb = 100;\n//     // probDec = 0;\n//     spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n//         if (!cellIsOk(this, i, j, ctx)) return 0;\n//         // const dist = Math.floor(GWU.utils.distanceBetween(x, y, i, j));\n//         // const prob = startProb - dist * probDec;\n//         // if (!map.rng.chance(prob)) return 0;\n//         return 1;\n//     });\n//     // spawnMap[x][y] = 1;\n//     // if (!isOk(flags, x, y, ctx)) {\n//     //     spawnMap[x][y] = 0;\n//     // }\n//     return true;\n// }\n// export function spreadLine(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     let x2, y2;\n//     let madeChange;\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     if (startProb) {\n//         madeChange = true;\n//         if (startProb >= 100) {\n//             probDec = probDec || 100;\n//         }\n//         x2 = x;\n//         y2 = y;\n//         const dir = GWU.xy.DIRS[map.rng.number(4)];\n//         while (madeChange) {\n//             madeChange = false;\n//             x2 = x2 + dir[0];\n//             y2 = y2 + dir[1];\n//             if (\n//                 spawnMap.hasXY(x2, y2) &&\n//                 !spawnMap[x2][y2] &&\n//                 cellIsOk(this, x2, y2, ctx) &&\n//                 map.rng.chance(startProb)\n//             ) {\n//                 spawnMap[x2][y2] = 1;\n//                 madeChange = true;\n//                 startProb -= probDec;\n//             }\n//         }\n//     }\n//     if (!cellIsOk(this, x, y, ctx)) {\n//         spawnMap[x][y] = 0;\n//     }\n//     return true;\n// }\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y])\n            return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const c = map.cell(x, y);\n            return !a.forbidsCell(c);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeActor(a);\n            map.addActor(loc[0], loc[1], a);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y])\n            return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const dest = map.cell(x, y);\n            return !i.forbidsCell(dest);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(i);\n            map.addItem(loc[0], loc[1], i);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nclass ClearTileEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.clear)\n            return true;\n        let config = src.clear;\n        let layers = 0;\n        if (typeof config === 'string') {\n            config = config.split(/[,|]/).map((t) => t.trim());\n        }\n        if (config === true) {\n            layers = Flags.Depth.ALL_LAYERS;\n        }\n        else if (typeof config === 'number') {\n            layers = config;\n        }\n        else if (Array.isArray(config)) {\n            layers = config.reduce((out, v) => {\n                if (typeof v === 'number')\n                    return out | v;\n                const depth = Flags.Depth[v] || 0;\n                return out | depth;\n            }, 0);\n        }\n        else {\n            throw new Error('clear effect must have number or string config.');\n        }\n        dest.clear = layers;\n        return layers > 0;\n    }\n    async fire(config, map, x, y, ctx) {\n        return this.fireSync(config, map, x, y, ctx);\n    }\n    fireSync(config, map, x, y, _ctx) {\n        if (!config.clear)\n            return false;\n        if (!map)\n            return false;\n        const cell = map.cell(x, y);\n        return cell.clearDepth(config.clear);\n    }\n}\ninstallHandler('clear', new ClearTileEffect());\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\n// class CellEntities {\n//     cell: Cell;\n//     constructor(cell: Cell) {\n//         this.cell = cell;\n//     }\n//     eachItem(cb: EachCb<Item>): void {\n//         let object: Item | null = this.cell._item;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     eachActor(cb: EachCb<Actor>): void {\n//         let object: Actor | null = this.cell._actor;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     forEach(cb: EachCb<Entity>): void {\n//         this.eachItem(cb);\n//         this.eachActor(cb);\n//     }\n//     some(cb: MatchCb<Entity>): boolean {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         return false;\n//     }\n//     reduce(cb: ReduceCb<Entity>, start?: any): any {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         return start;\n//     }\n// }\nexport class Cell {\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.x = -1;\n        this.y = -1;\n        this.toFire = [];\n        // this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.snapshot = GWU.sprite.makeMixer();\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    get hasStableSnapshot() {\n        return this.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    }\n    get hasStableMemory() {\n        return this.hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        // this._actor = other.actor;\n        // this._item = other.item;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n        other.getSnapshot(this.snapshot);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, checkEntities = false) {\n        var _a, _b;\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        if (!checkEntities)\n            return false;\n        if (this.hasItem()) {\n            if ((_a = this.item) === null || _a === void 0 ? void 0 : _a.hasEntityFlag(flag))\n                return true;\n        }\n        if (this.hasActor()) {\n            if ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.hasEntityFlag(flag))\n                return true;\n        }\n        return false;\n    }\n    hasAllEntityFlags(flags, checkEntities = false) {\n        return (this.entityFlags(checkEntities) & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        var _a, _b;\n        let flag = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            if (this.hasItem()) {\n                flag |= ((_a = this.item) === null || _a === void 0 ? void 0 : _a.flags.entity) || 0;\n            }\n            if (this.hasActor()) {\n                flag |= ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.flags.entity) || 0;\n            }\n        }\n        return flag;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return this.tiles.some((t) => t && t.blocksVision());\n    }\n    blocksPathing() {\n        return this.tiles.some((t) => t && t.blocksPathing());\n    }\n    blocksMove() {\n        return this.tiles.some((t) => t && t.blocksMove());\n    }\n    blocksEffects() {\n        return this.tiles.some((t) => t && t.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isNull() {\n        return this.tiles.every((t) => !t || t === TILE.tiles.NULL);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    // hasKey(): boolean {\n    //     return this._entities.some(\n    //         (e) => !!e.key && e.key.matches(this.x, this.y)\n    //     );\n    // }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile, opts = {}) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (this.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && this.hasItem())\n            return false;\n        if (opts.blockedByActors && this.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && this.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = this.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === TILE.tiles.NULL) {\n                this.tiles[0] = TILE.get(tile.groundTile);\n            }\n        }\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            this.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            this.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            this.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.needsRedraw = true;\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.snapshot.blackOut();\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    needsToFire() {\n        return this.toFire.length > 0;\n    }\n    willFire(event) {\n        return !!this.toFire.find((ctx) => ctx.event === event);\n    }\n    clearEvents() {\n        this.toFire.length = 0;\n    }\n    tileWithEffect(name) {\n        return this.tiles.find((t) => t === null || t === void 0 ? void 0 : t.hasEffect(name)) || null;\n    }\n    async fireAll() {\n        let ctx;\n        let didSomething = false;\n        for (ctx of this.toFire) {\n            didSomething =\n                (await this.fireEvent(ctx.event, ctx)) || didSomething;\n        }\n        this.toFire.length = 0; // clear\n        return didSomething;\n    }\n    async fireEvent(event, ctx = {}) {\n        ctx.cell = this;\n        let didSomething = false;\n        // console.log('fire event - %s', event);\n        for (ctx.tile of this.tiles) {\n            if (!ctx.tile || !ctx.tile.effects)\n                continue;\n            const ev = ctx.tile.effects[event];\n            if (ev && (await this._activate(ev, ctx))) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    async _activate(effect, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.effects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = await Effect.fire(effect, this.map, this.x, this.y, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this.map.itemAt(this.x, this.y);\n    }\n    addItem(item, withEffects = false) {\n        this.setCellFlag(Flags.Cell.HAS_ITEM);\n        item.addToMap(this.map, this.x, this.y);\n        this.map.items.push(item);\n        this.needsRedraw = true;\n        this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (item.key &&\n                item.key.matches(this.x, this.y) &&\n                this.hasEffect('key')) {\n                const tile = this.tileWithEffect('key');\n                this.toFire.push({\n                    event: 'key',\n                    key: item,\n                    item,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('add_item')) {\n                const tile = this.tileWithEffect('add_item');\n                this.toFire.push({ event: 'add_item', item, tile, cell: this });\n            }\n        }\n    }\n    removeItem(item, withEffects = false) {\n        let hasItems = false;\n        let foundIndex = -1;\n        this.map.items.forEach((obj, index) => {\n            if (obj === item) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasItems = true;\n            }\n        });\n        if (!hasItems) {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.map.items.splice(foundIndex, 1); // delete the item\n        item.removeFromMap();\n        this.needsRedraw = true;\n        this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (item.isKey(this.x, this.y) && this.hasEffect('no_key')) {\n                const tile = this.tileWithEffect('no_key');\n                this.toFire.push({\n                    event: 'no_key',\n                    key: item,\n                    item,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('remove_item')) {\n                const tile = this.tileWithEffect('remove_item');\n                this.toFire.push({\n                    event: 'remove_item',\n                    item,\n                    tile,\n                    cell: this,\n                });\n            }\n        }\n        return true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this.map.actorAt(this.x, this.y);\n    }\n    addActor(actor, withEffects = false) {\n        this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        if (actor.isPlayer()) {\n            this.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        actor.addToMap(this.map, this.x, this.y);\n        this.map.actors.push(actor);\n        this.needsRedraw = true;\n        this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (actor.isKey(this.x, this.y) && this.hasEffect('key')) {\n                const tile = this.tileWithEffect('key');\n                this.toFire.push({\n                    event: 'key',\n                    key: actor,\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (actor.isPlayer() && this.hasEffect('add_player')) {\n                const tile = this.tileWithEffect('add_player');\n                this.toFire.push({\n                    event: 'add_player',\n                    actor,\n                    player: actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('add_actor')) {\n                const tile = this.tileWithEffect('add_actor');\n                this.toFire.push({\n                    event: 'add_actor',\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n        }\n    }\n    removeActor(actor, withEffects = false) {\n        let hasActor = false;\n        let foundIndex = -1;\n        this.map.actors.forEach((obj, index) => {\n            if (obj === actor) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasActor = true;\n            }\n        });\n        if (!hasActor) {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        if (foundIndex < 0)\n            return false;\n        actor.removeFromMap();\n        this.map.actors.splice(foundIndex, 1); // delete the actor\n        this.needsRedraw = true;\n        this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (actor.isKey(this.x, this.y) && this.hasEffect('no_key')) {\n                const tile = this.tileWithEffect('no_key');\n                this.toFire.push({\n                    event: 'no_key',\n                    key: actor,\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (actor.isPlayer() && this.hasEffect('remove_player')) {\n                const tile = this.tileWithEffect('remove_player');\n                this.toFire.push({\n                    event: 'remove_player',\n                    actor,\n                    player: actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('remove_actor')) {\n                const tile = this.tileWithEffect('remove_actor');\n                this.toFire.push({\n                    event: 'remove_actor',\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n        }\n        return true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        if (this.hasActor()) {\n            const actor = this.map.actorAt(this.x, this.y);\n            if (actor && actor.sprite.ch)\n                return actor.sprite.ch;\n        }\n        if (this.hasItem()) {\n            const item = this.map.itemAt(this.x, this.y);\n            if (item && item.sprite.ch)\n                return item.sprite.ch;\n        }\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n    drawStatus(sidebar) {\n        if (!this.map)\n            return;\n        this.map.getAppearanceAt(this.x, this.y, sidebar.mixer);\n        sidebar.drawTitle(sidebar.mixer, this.getName());\n    }\n    toString() {\n        return `Cell @ ${this.x},${this.y}`;\n    }\n}\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile, _opts) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts) {\n        const cell = this.map.cell(x, y);\n        return cell.setTile(tile, opts);\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // // Bookkeeping for fire, pressure plates and key-activated tiles.\n        // for (let x = 0; x < this.map.width; ++x) {\n        //     for (let y = 0; y < this.map.height; ++y) {\n        //         const cell = this.map.cell(x, y);\n        //         if (\n        //             !cell.hasCellFlag(\n        //                 Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM\n        //             ) &&\n        //             cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)\n        //         ) {\n        //             cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n        //         }\n        //     }\n        // }\n        return true;\n    }\n}\n","// import * as GWU from 'gw-utils';\nimport { MapLayer } from './mapLayer';\nexport class ActorLayer extends MapLayer {\n    constructor(map, name = 'actor') {\n        super(map, name);\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class ItemLayer extends MapLayer {\n    constructor(map, name = 'item') {\n        super(map, name);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    async tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    await this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        await this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    async exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            await cell.fireEvent(event, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nexport class BasicDrawer {\n    isAnyKindOfVisible(_cell) {\n        return true;\n    }\n    drawInto(dest, map, opts = {}) {\n        const buffer = dest instanceof GWU.canvas.DataBuffer ? dest : dest.buffer;\n        const offsetX = opts.offsetX || 0;\n        const offsetY = opts.offsetY || 0;\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                if (map.hasXY(x + offsetX, y + offsetY)) {\n                    const cell = map.cell(x + offsetX, y + offsetY);\n                    this.drawCell(mixer, cell, opts.fov);\n                    buffer.drawSprite(x, y, mixer);\n                }\n            }\n        }\n    }\n    drawCell(dest, cell, fov) {\n        dest.blackOut();\n        const isVisible = fov ? fov.isAnyKindOfVisible(cell.x, cell.y) : true;\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (needSnapshot || (cell.needsRedraw && isVisible)) {\n            this.getAppearance(dest, cell);\n            cell.putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            cell.getSnapshot(dest);\n        }\n        this.applyLight(dest, cell, fov);\n        if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n            GWU.color.separate(dest.fg, dest.bg);\n        }\n        return true;\n    }\n    // getCellAppearance(cell: CellType, dest: GWU.sprite.Mixer) {\n    //     dest.blackOut();\n    //     const isVisible = true; // this.fov.isAnyKindOfVisible(x, y);\n    //     const isRevealed = true; // this.fov.isRevealed(x, y);\n    //     const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     if (needSnapshot || (cell.needsRedraw && isVisible)) {\n    //         this.layers.forEach((layer) => layer.putAppearance(dest, cell));\n    //         if (dest.dances) {\n    //             cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n    //         } else {\n    //             cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n    //         }\n    //         dest.bake();\n    //         cell.putSnapshot(dest);\n    //         cell.needsRedraw = false;\n    //         cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     } else {\n    //         cell.getSnapshot(dest);\n    //     }\n    //     if (isVisible) {\n    //         const light = this.light.getLight(cell.x, cell.y);\n    //         dest.multiply(light);\n    //     } else if (isRevealed) {\n    //         dest.scale(50);\n    //     } else {\n    //         dest.blackOut();\n    //     }\n    //     if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n    //         GWU.color.separate(dest.fg, dest.bg);\n    //     }\n    // }\n    getAppearance(dest, cell) {\n        const ground = cell.tiles[Flags.Depth.GROUND];\n        const surface = cell.tiles[Flags.Depth.SURFACE];\n        const liquid = cell.tiles[Flags.Depth.LIQUID];\n        const gas = cell.tiles[Flags.Depth.GAS]; // How to get volume!?!?!?!\n        const actor = cell.hasActor() ? cell.map.actorAt(cell.x, cell.y) : null;\n        const item = cell.hasItem() ? cell.map.itemAt(cell.x, cell.y) : null;\n        dest.drawSprite(ground.sprite);\n        if (surface) {\n            dest.drawSprite(surface.sprite);\n        }\n        if (liquid) {\n            dest.drawSprite(liquid.sprite);\n        }\n        if (item) {\n            item.drawInto(dest);\n        }\n        if (actor) {\n            actor.drawInto(dest);\n        }\n        if (gas) {\n            const opacity = GWU.rng.cosmetic.number(50) + 25;\n            dest.drawSprite(gas.sprite, opacity);\n        }\n        if (dest.dances) {\n            cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        else {\n            cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        dest.bake();\n    }\n    applyLight(dest, cell, fov) {\n        const isVisible = !fov || fov.isAnyKindOfVisible(cell.x, cell.y);\n        const isRevealed = !fov || fov.isRevealed(cell.x, cell.y);\n        if (isVisible) {\n            const light = cell.map.light.getLight(cell.x, cell.y);\n            dest.multiply(light);\n            // TODO - is Clairy\n            // TODO - is Telepathy\n        }\n        else if (isRevealed) {\n            dest.scale(50);\n        }\n        else {\n            dest.blackOut();\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\n// import { CellMemory } from './cellMemory';\nimport * as Effect from '../effect';\nimport { BasicDrawer } from '../draw/basic';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        // _memory: GWU.grid.Grid<CellMemory>;\n        this.machineCount = 0;\n        this._seed = 0;\n        this.rng = GWU.rng.random;\n        this.id = 'MAP';\n        this.actors = [];\n        this.items = [];\n        this.width = width;\n        this.height = height;\n        this.flags = { map: 0 };\n        this.layers = [];\n        if (opts.id) {\n            this.id = opts.id;\n        }\n        this.drawer = opts.drawer || new BasicDrawer();\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        // this._memory = GWU.grid.make(\n        //     width,\n        //     height,\n        //     (x, y) => new CellMemory(this, x, y)\n        // );\n        if (opts.seed) {\n            this._seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        // this.fov = new GWU.fov.FovSystem(this, opts);\n        this.properties = {};\n        this.initLayers();\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(v) {\n        this._seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    // memory(x: number, y: number): CellMemory {\n    //     return this._memory[x][y];\n    // }\n    // knowledge(x: number, y: number): CellInfoType {\n    //     if (this.fov.isAnyKindOfVisible(x, y)) return this.cell(x,y);\n    //     return this._memory[x][y];\n    // }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n        this.addLayer(Flags.Depth.ITEM, new Layer.ItemLayer(this, 'item'));\n        this.addLayer(Flags.Depth.ACTOR, new Layer.ActorLayer(this, 'actor'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // items\n    hasItem(x, y) {\n        return this.cell(x, y).hasItem();\n    }\n    itemAt(x, y) {\n        return this.items.find((i) => i.isAt(x, y)) || null;\n    }\n    eachItem(cb) {\n        this.items.forEach(cb);\n    }\n    addItem(x, y, item, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addItem(item, fireEffects);\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    removeItem(item, fireEffects = false) {\n        const cell = this.cell(item.x, item.y);\n        if (!cell.removeItem(item, fireEffects))\n            return false;\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    // async moveItem(item: Item, dir: GWU.xy.Loc | number): Promise<boolean> {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = item.x;\n    //     const oldY = item.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[item.depth] as Layer.ItemLayer;\n    //     if (!(await layer.removeItem(item))) return false;\n    //     if (!(await this.addItem(x, y, item))) {\n    //         layer.forceItem(item.x, item.y, item);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (item.lastSeen) {\n    //     //         this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n    //     //         this.clearCellFlag(\n    //     //             item.lastSeen.x,\n    //     //             item.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         item.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.item = item;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     item.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.actors.find((a) => a.isAt(x, y)) || null;\n    }\n    eachActor(cb) {\n        this.actors.forEach(cb);\n    }\n    addActor(x, y, actor, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addActor(actor, fireEffects);\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    removeActor(actor, fireEffects = false) {\n        const cell = this.cell(actor.x, actor.y);\n        if (!cell.removeActor(actor, fireEffects))\n            return false;\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    // async moveActor(actor: Actor, dir: GWU.xy.Loc | number): Promise<boolean> {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = actor.x;\n    //     const oldY = actor.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[actor.depth] as Layer.ActorLayer;\n    //     if (!(await layer.removeActor(actor))) return false;\n    //     if (!(await layer.addActor(x, y, actor))) {\n    //         layer.forceActor(actor.x, actor.y, actor);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (actor.lastSeen) {\n    //     //         this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(\n    //     //             actor\n    //     //         );\n    //     //         this.clearCellFlag(\n    //     //             actor.lastSeen.x,\n    //     //             actor.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         actor.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.actor = actor;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     actor.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Information\n    // isVisible(x: number, y: number): boolean {\n    //     return this.fov.isAnyKindOfVisible(x, y);\n    // }\n    hasKey(x, y) {\n        const actor = this.actorAt(x, y);\n        if (actor && actor.isKey(x, y))\n            return true;\n        const item = this.itemAt(x, y);\n        if (item && item.isKey(x, y))\n            return true;\n        return false;\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const getCh = (cell) => {\n            return cell.dump();\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        // this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile\n    // useMemory = false\n    ) {\n        return this.cell(x, y).hasTile(tile);\n        // if (!useMemory) return this.cell(x, y).hasTile(tile);\n        // return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clearTiles(tile);\n    }\n    async tick(dt) {\n        let didSomething = await this.fireAll('tick');\n        for (let layer of this.layers) {\n            if (layer && (await layer.tick(dt))) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cell(x, y));\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.actors = src.actors.slice();\n        this.items = src.items.slice();\n        this.flags.map = src.flags.map;\n        // this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.machineCount = src.machineCount;\n        this._seed = src._seed;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    async fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.fireEvent(event, ctx);\n    }\n    async fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        await willFire.forEachAsync(async (w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    await cell.fireEvent(event, {\n                        force: true,\n                        depth,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    async activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        (await cell.fireEvent('machine', ctx)) || didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    // DRAW\n    drawInto(dest, opts) {\n        this.drawer.drawInto(dest, this, opts);\n    }\n    getAppearanceAt(x, y, dest) {\n        const cell = this.cell(x, y);\n        return this.drawer.drawCell(dest, cell);\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Map } from '../map/map';\nimport * as Flags from '../flags';\nexport class Memory extends Map {\n    constructor(map) {\n        super(map.width, map.height);\n        // this.actor = actor;\n        this.source = map;\n        this.cells.forEach((c) => c.setCellFlag(Flags.Cell.STABLE_MEMORY));\n    }\n    cell(x, y) {\n        let cell = this.cells[x][y];\n        if (!cell.hasCellFlag(Flags.Cell.STABLE_MEMORY)) {\n            cell = this.source.cell(x, y);\n        }\n        return cell;\n    }\n    memory(x, y) {\n        return this.cells[x][y];\n    }\n    isMemory(x, y) {\n        return this.cells[x][y].hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    setTile() {\n        throw new Error('Cannot set tiles on memory.');\n    }\n    addItem() {\n        throw new Error('Cannot add Items to memory!');\n    }\n    removeItem() {\n        throw new Error('Cannot remove Items from memory!');\n    }\n    // async moveItem(): Promise<boolean> {\n    //     throw new Error('Cannot move Items on memory!');\n    // }\n    eachItem(cb) {\n        this.source.eachItem((i) => {\n            if (!this.isMemory(i.x, i.y)) {\n                cb(i);\n                const i2 = this.items.find((other) => other.id == i.id);\n                if (i2) {\n                    const mem = this.cell(i2.x, i2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ITEM | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.items, i2);\n                }\n            }\n        });\n        this.items.forEach(cb);\n    }\n    addActor() {\n        throw new Error('Cannot add Actors to memory!');\n    }\n    removeActor() {\n        throw new Error('Cannot remove Actors from memory!');\n    }\n    // async moveActor(): Promise<boolean> {\n    //     throw new Error('Cannot move Actors on memory!');\n    // }\n    eachActor(cb) {\n        this.source.eachActor((a) => {\n            if (!this.isMemory(a.x, a.y)) {\n                cb(a);\n                const a2 = this.actors.find((other) => other.id == a.id);\n                if (a2) {\n                    const mem = this.cell(a2.x, a2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.actors, a2);\n                }\n            }\n        });\n        this.actors.forEach(cb);\n    }\n    storeMemory(x, y) {\n        const mem = this.memory(x, y);\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        const cell = this.source.cell(x, y);\n        mem.copy(cell);\n        mem.setCellFlag(Flags.Cell.STABLE_MEMORY);\n        let newList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR);\n        // add any current items+actors\n        if (cell.hasItem()) {\n            const item = this.source.itemAt(x, y);\n            if (item) {\n                this.items.push(item.clone());\n                if (item.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (cell.hasActor()) {\n            const actor = this.source.actorAt(x, y);\n            if (actor) {\n                this.actors.push(actor.clone());\n                if (actor.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        this.light.setLight(x, y, this.source.light.getLight(x, y));\n    }\n    forget(x, y) {\n        const mem = this.memory(x, y);\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        mem.clearCellFlag(Flags.Cell.STABLE_MEMORY);\n        let newList = this.source\n            .cell(x, y)\n            .hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n    }\n    onFovChange(x, y, isVisible) {\n        if (!isVisible) {\n            this.storeMemory(x, y);\n        }\n        else {\n            this.forget(x, y);\n        }\n    }\n}\n","import { Memory } from './memory';\nconst cache = {};\nexport function store(actor, map, memory) {\n    let actorMemory = cache[actor.id];\n    if (!actorMemory) {\n        cache[actor.id] = actorMemory = {};\n    }\n    actorMemory[map.id] = memory;\n}\nexport function get(actor, map) {\n    let actorMemory = cache[actor.id];\n    if (actorMemory) {\n        const memory = actorMemory[map.id];\n        if (memory)\n            return memory;\n    }\n    return new Memory(map);\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Actor } from './actor';\nimport * as Memory from '../memory';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n        this.flags = { actor: 0 };\n        this.vision = {};\n        if (opts.flags) {\n            this.flags.actor = GWU.flag.from(Flags.Actor, opts.flags);\n        }\n        if (opts.vision) {\n            this.vision.normal = opts.vision;\n        }\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n        if (options.fov) {\n            actor.fov = options.fov;\n        }\n        if (options.memory) {\n            actor.memory = options.memory;\n        }\n        if (this.vision.normal) {\n            actor.visionDistance = this.vision.normal;\n        }\n    }\n    addToMap(actor, map) {\n        super.addToMap(actor, map);\n        if (this.hasActorFlag(Flags.Actor.HAS_MEMORY)) {\n            actor.memory = Memory.get(actor, map);\n        }\n        if (this.hasActorFlag(Flags.Actor.USES_FOV)) {\n            actor.fov = new GWU.fov.FovSystem(map);\n            actor.fov.follow = actor;\n            if (actor.memory) {\n                actor.fov.onFovChange = actor.memory;\n            }\n        }\n    }\n    removeFromMap(actor) {\n        super.removeFromMap(actor);\n        if (actor._map && actor.memory) {\n            Memory.store(actor, actor._map, actor.memory);\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    canSeeEntity(_actor, _entity) {\n        return true;\n    }\n    isAbleToSee(_actor, _entity) {\n        return true;\n    }\n    isAbleToSense(_actor, _entity) {\n        return true;\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    async pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    async dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.quantity = other.quantity;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n}\n","// import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n        item.quantity = options.quantity || 1;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        // fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        // if (this.map.fov.changed) {\n        //     this.fovVersion = this.version;\n        //     this.map.fov.changed = false;\n        // }\n        // if (snap.version !== this.fovVersion) {\n        //     snap.map.fov.copy(this.map.fov);\n        // }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        // if (snap.version < this.fovVersion || this.map.fov.changed) {\n        //     this.map.fov.copy(snap.map.fov);\n        //     this.fovVersion = snap.version;\n        // }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import * as GWU from 'gw-utils';\nexport function getCellPathCost(map, x, y) {\n    const cell = map.cell(x, y);\n    if (cell.blocksMove())\n        return GWU.path.OBSTRUCTION;\n    if (cell.blocksPathing())\n        return GWU.path.FORBIDDEN;\n    if (cell.hasActor())\n        return 10;\n    return 1;\n}\nexport function fillCostMap(map, costMap) {\n    costMap.update((_v, x, y) => getCellPathCost(map, x, y));\n}\nexport function getPathBetween(map, x0, y0, x1, y1, options = {}) {\n    const distanceMap = GWU.grid.alloc(map.width, map.height);\n    const costMap = GWU.grid.alloc(map.width, map.height);\n    fillCostMap(map, costMap);\n    GWU.path.calculateDistances(distanceMap, x0, y0, costMap, options.eightWays, GWU.xy.straightDistanceBetween(x0, y0, x1, y1) + 1);\n    const path = GWU.path.getPath(distanceMap, x1, y1, (x, y) => map.cell(x, y).blocksMove(), options.eightWays);\n    GWU.grid.free(costMap);\n    GWU.grid.free(distanceMap);\n    return path;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    async spawn(map, x = -1, y = -1, opts = {}) {\n        var _a;\n        opts.canSpawn = opts.canSpawn || GWU.TRUE;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_a = opts.machine) !== null && _a !== void 0 ? _a : 0;\n        const leader = await this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        await this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    async _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!(await this._addLeader(leader, map, x, y, opts))) {\n            return null;\n        }\n        return leader;\n    }\n    async _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    async _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    async _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        await Promise.all(entries.map(async ([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                await this._spawnMember(kindId, map, leader, opts);\n            }\n        }));\n        return count;\n    }\n    async _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1,\n            -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!(await this._addMember(member, map, x, y, leader, opts))) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canSpawn(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_SAFE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","lastId","kind","_map","key","machineHome","depth","light","flags","entity","next","id","map","hasEntityFlag","Flags.Entity","L_ON_MAP","Error","setEntityFlag","addToMap","clearEntityFlag","removeFromMap","sprite","isDestroyed","L_DESTROYED","other","constructor","copy","Object","assign","canBeSeen","tag","tags","includes","matches","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","sidebar","drawStatus","dest","_observer","drawSprite","name","EntityKind","config","requiredTileTags","flavor","description","make","split","t","trim","slice","init","_entity","length","hasAllTileTags","hasAnyTileTag","_opts","getAppearanceAt","mixer","drawTitle","Entity.Entity","super","leader","items","fov","memory","visionDistance","actor","Flags.Depth","ACTOR","hasActorFlag","Flags.Actor","IS_PLAYER","canSee","isAbleToSee","isDirectlyVisible","xy","forLineBetween","i","j","distanceBetween","blocksVision","canSeeOrSense","isAbleToSense","isAnyKindOfVisible","item","pickupItem","dropItem","Handler","src","ctx","handlers","installHandler","handler","_a","fn","info","from","Flags","chance","values","forEach","v","effect","effects","reset","E_FIRED","install","_b","_c","_d","index","dissipate","priority","groundTile","article","tile","tileMech","hasEffect","Flags.Tile","T_IS_FLAMMABLE","push","arraysIntersect","every","blocksMove","hasTileFlag","T_PATHING_BLOCKER","arg","color","result","fg","toString","options","_e","_f","base","extends","tiles","text","replace","search","Number","parseInt","substring","delta","undefined","entries","value","makeEffect","Flags.TileMech","ch","bg","opacity","all","get","args","enter","open","tick","close","player","emit","async","fire","ctx_","force","rng","grid","alloc","width","height","didSomething","allHandlers","h","E_NEXT_ALWAYS","data","gameHasEnded","nextInfo","E_NEXT_EVERYWHERE","forEachAsync","E_NO_MARK_FIRED","free","EmitEffect","events","FnEffect","MessageEffect","message","fired","addAt","ActivateMachineEffect","activateMachine","machine","machineId","EffectEffect","FIRE.fire","SpawnEffect","_g","parts","p","grow","decrement","spread","Flags.Effect","volume","match","matchTile","Tile.tiles","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","isBlocking","E_PERMIT_BLOCKING","blocksPathing","E_TREAT_AS_BLOCKING","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","spawnTiles","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","spawnMap","accomplishedSomething","blockedByOtherLayers","E_BLOCKED_BY_OTHER_LAYERS","superpriority","E_SUPERPRIORITY","blockedByActors","blockedByItems","hasTile","setTile","Flags.Cell","EVENT_FIRED_THIS_TURN","E_PROTECTED","EVENT_PROTECTED","setMapFlag","Flags.Map","MAP_CHANGED","cellIsOk","isStart","hasXY","hasCellFlag","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","dir","x2","y2","madeChange","startProb","probDec","fill","count","DIRS","clearAll","clear","clearDepth","GAS","LIQUID","SURFACE","GROUND","blockingMap","eachActor","a","loc","matchingLocNear","c","removeActor","addActor","eachItem","removeItem","addItem","layers","ALL_LAYERS","Array","isArray","reduce","out","fireSync","_ctx","e","chokeCount","toFire","TILE.tiles","NULL","snapshot","makeMixer","TILE.get","hasStableSnapshot","STABLE_SNAPSHOT","hasStableMemory","getSnapshot","checkEntities","some","hasItem","hasActor","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","withEntities","needsRedraw","changed","CHANGED","Math","max","TILE.Tile","highestPriorityTile","cb","find","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","current","blocksLayer","highestPriority","ground","depthTile","glowLightChanged","L_LIST_IN_SIDEBAR","MAP_SIDEBAR_TILES_CHANGED","setCellFlag","CAUGHT_FIRE_THIS_TURN","blackOut","tileFlag","tileMechFlag","hasTileMechFlag","event","fireEvent","ev","_activate","Effect.effects","Effect.fire","itemAt","withEffects","clearCellFlag","tileWithEffect","hasItems","foundIndex","obj","splice","isKey","actorAt","isPlayer","actors","MapLayer","properties","_other","_x","_y","_tile","_actor","_item","_dt","TileLayer","ActorLayer","ItemLayer","GasLayer","startingVolume","update","d","clearTile","floor","min","total","highestVolume","startingTile","highestTile","updateCellVolume","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","TM_EXPLOSIVE_PROMOTE","x0","y0","n","BasicDrawer","_cell","buffer","canvas","DataBuffer","offsetX","offsetY","Mixer","drawCell","isVisible","getAppearance","putSnapshot","applyLight","L_VISUALLY_DISTINCT","separate","surface","liquid","gas","drawInto","cosmetic","number","dances","COLORS_DANCE","bake","isRevealed","getLight","multiply","scale","machineCount","_seed","random","drawer","cells","seed","LightSystem","initLayers","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","ITEM","Layer.ItemLayer","Layer.ActorLayer","layer","isAt","fireEffects","fireAll","then","hasPlayer","fmt","log","console","dump","l","boundary","isBoundaryXY","clearTiles","dt","willFire","promoteChance","w","originX","originY","eachGlowLight","_cb","isDark","Memory","source","isMemory","i2","arrayDelete","a2","mem","currentList","filter","newList","clone","setLight","forget","storeMemory","cache","store","actorMemory","ActorKind","Entity.EntityKind","vision","normal","HAS_MEMORY","Memory.get","USES_FOV","FovSystem","follow","onFovChange","Memory.store","action","list","remove","makeOptions","kinds","makeKind","randomKind","forbidTags","startsWith","k","JSON","stringify","made","quantity","ItemKind","updateChokepoints","updateCounts","passMap","passableArcCount","oldX","CLOCK_DIRS","oldY","newX","newY","cellCount","floodFillCount","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","eachCell","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","prefab","charToTile","isStringArray","len","line","updateChokeCounts","layerVersion","lightVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","getCellPathCost","path","OBSTRUCTION","FORBIDDEN","fillCostMap","costMap","_v","x1","y1","distanceMap","calculateDistances","eightWays","straightDistanceBetween","getPath","members","horde","range","frequency","canSpawn","TRUE","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","Promise","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","matchingLoc","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted"],"mappings":"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"}