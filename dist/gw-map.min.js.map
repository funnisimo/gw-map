{"version":3,"file":"gw-map.min.js","sources":["../js/flags.js","../js/light.js","../js/layer.js","../js/tileEvent.js","../js/tile.js","../js/cell.js","../js/map.js","../js/tiles.js"],"sourcesContent":["import { flag as Flag } from \"gw-utils\";\nexport var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"LIQUID\"] = 1] = \"LIQUID\";\n    Depth[Depth[\"SURFACE\"] = 2] = \"SURFACE\";\n    Depth[Depth[\"GAS\"] = 3] = \"GAS\";\n    Depth[Depth[\"ITEM\"] = 4] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 5] = \"ACTOR\";\n    Depth[Depth[\"PLAYER\"] = 6] = \"PLAYER\";\n    Depth[Depth[\"FX\"] = 7] = \"FX\";\n    Depth[Depth[\"UI\"] = 8] = \"UI\";\n})(Depth || (Depth = {}));\nconst Fl = Flag.fl;\nexport var Layer;\n(function (Layer) {\n    Layer[Layer[\"L_DYNAMIC\"] = Fl(0)] = \"L_DYNAMIC\";\n    Layer[Layer[\"L_SUPERPRIORITY\"] = Fl(1)] = \"L_SUPERPRIORITY\";\n    Layer[Layer[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Layer[Layer[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Layer[Layer[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Layer[Layer[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Layer[Layer[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Layer[Layer[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Layer[Layer[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Layer[Layer[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Layer[Layer[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Layer[Layer[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Layer[Layer[\"L_BLOCKED_BY_STAIRS\"] = Layer.L_BLOCKS_ITEMS |\n        Layer.L_BLOCKS_SURFACE |\n        Layer.L_BLOCKS_GAS |\n        Layer.L_BLOCKS_LIQUID |\n        Layer.L_BLOCKS_EFFECTS |\n        Layer.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Layer[Layer[\"L_BLOCKS_SCENT\"] = Layer.L_BLOCKS_MOVE | Layer.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Layer[Layer[\"L_DIVIDES_LEVEL\"] = Layer.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Layer[Layer[\"L_WAYPOINT_BLOCKER\"] = Layer.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Layer[Layer[\"L_IS_WALL\"] = Layer.L_BLOCKS_MOVE |\n        Layer.L_BLOCKS_VISION |\n        Layer.L_BLOCKS_LIQUID |\n        Layer.L_BLOCKS_GAS |\n        Layer.L_BLOCKS_EFFECTS |\n        Layer.L_BLOCKS_DIAGONAL] = \"L_IS_WALL\";\n    Layer[Layer[\"L_BLOCKS_EVERYTHING\"] = Layer.L_IS_WALL |\n        Layer.L_BLOCKS_ITEMS |\n        Layer.L_BLOCKS_ACTORS |\n        Layer.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Layer || (Layer = {}));\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Activation;\n(function (Activation) {\n    Activation[Activation[\"DFF_SUBSEQ_ALWAYS\"] = Fl(0)] = \"DFF_SUBSEQ_ALWAYS\";\n    Activation[Activation[\"DFF_SUBSEQ_EVERYWHERE\"] = Fl(1)] = \"DFF_SUBSEQ_EVERYWHERE\";\n    Activation[Activation[\"DFF_TREAT_AS_BLOCKING\"] = Fl(2)] = \"DFF_TREAT_AS_BLOCKING\";\n    Activation[Activation[\"DFF_PERMIT_BLOCKING\"] = Fl(3)] = \"DFF_PERMIT_BLOCKING\";\n    Activation[Activation[\"DFF_ACTIVATE_DORMANT_MONSTER\"] = Fl(4)] = \"DFF_ACTIVATE_DORMANT_MONSTER\";\n    Activation[Activation[\"DFF_BLOCKED_BY_OTHER_LAYERS\"] = Fl(6)] = \"DFF_BLOCKED_BY_OTHER_LAYERS\";\n    Activation[Activation[\"DFF_SUPERPRIORITY\"] = Fl(7)] = \"DFF_SUPERPRIORITY\";\n    Activation[Activation[\"DFF_AGGRAVATES_MONSTERS\"] = Fl(8)] = \"DFF_AGGRAVATES_MONSTERS\";\n    Activation[Activation[\"DFF_RESURRECT_ALLY\"] = Fl(9)] = \"DFF_RESURRECT_ALLY\";\n    Activation[Activation[\"DFF_EMIT_EVENT\"] = Fl(10)] = \"DFF_EMIT_EVENT\";\n    Activation[Activation[\"DFF_NO_REDRAW_CELL\"] = Fl(11)] = \"DFF_NO_REDRAW_CELL\";\n    Activation[Activation[\"DFF_ABORT_IF_BLOCKS_MAP\"] = Fl(12)] = \"DFF_ABORT_IF_BLOCKS_MAP\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ITEMS\"] = Fl(13)] = \"DFF_BLOCKED_BY_ITEMS\";\n    Activation[Activation[\"DFF_BLOCKED_BY_ACTORS\"] = Fl(14)] = \"DFF_BLOCKED_BY_ACTORS\";\n    Activation[Activation[\"DFF_ALWAYS_FIRE\"] = Fl(15)] = \"DFF_ALWAYS_FIRE\";\n    Activation[Activation[\"DFF_NO_MARK_FIRED\"] = Fl(16)] = \"DFF_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Activation[Activation[\"DFF_PROTECTED\"] = Fl(19)] = \"DFF_PROTECTED\";\n    Activation[Activation[\"DFF_SPREAD_CIRCLE\"] = Fl(20)] = \"DFF_SPREAD_CIRCLE\";\n    Activation[Activation[\"DFF_SPREAD_LINE\"] = Fl(21)] = \"DFF_SPREAD_LINE\";\n    Activation[Activation[\"DFF_NULL_SURFACE\"] = Fl(22)] = \"DFF_NULL_SURFACE\";\n    Activation[Activation[\"DFF_NULL_LIQUID\"] = Fl(23)] = \"DFF_NULL_LIQUID\";\n    Activation[Activation[\"DFF_NULL_GAS\"] = Fl(24)] = \"DFF_NULL_GAS\";\n    Activation[Activation[\"DFF_EVACUATE_CREATURES\"] = Fl(25)] = \"DFF_EVACUATE_CREATURES\";\n    Activation[Activation[\"DFF_EVACUATE_ITEMS\"] = Fl(26)] = \"DFF_EVACUATE_ITEMS\";\n    Activation[Activation[\"DFF_BUILD_IN_WALLS\"] = Fl(27)] = \"DFF_BUILD_IN_WALLS\";\n    Activation[Activation[\"DFF_MUST_TOUCH_WALLS\"] = Fl(28)] = \"DFF_MUST_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_NO_TOUCH_WALLS\"] = Fl(29)] = \"DFF_NO_TOUCH_WALLS\";\n    Activation[Activation[\"DFF_ONLY_IF_EMPTY\"] = Activation.DFF_BLOCKED_BY_ITEMS | Activation.DFF_BLOCKED_BY_ACTORS] = \"DFF_ONLY_IF_EMPTY\";\n    Activation[Activation[\"DFF_NULLIFY_CELL\"] = Activation.DFF_NULL_SURFACE | Activation.DFF_NULL_LIQUID | Activation.DFF_NULL_GAS] = \"DFF_NULLIFY_CELL\";\n})(Activation || (Activation = {}));\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_LIQUID\"] = Fl(0)] = \"T_LIQUID\";\n    Tile[Tile[\"T_SURFACE\"] = Fl(1)] = \"T_SURFACE\";\n    Tile[Tile[\"T_GAS\"] = Fl(2)] = \"T_GAS\";\n    Tile[Tile[\"T_BRIDGE\"] = Fl(11)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(12)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(13)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(14)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(15)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(16)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(17)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(18)] = \"T_ENTANGLES\";\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(24)] = \"T_IS_TRAP\";\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    Tile[Tile[\"T_SACRED\"] = Fl(26)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(27)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(28)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(29)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(30)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    TileMech[TileMech[\"TM_IS_SECRET\"] = Fl(0)] = \"TM_IS_SECRET\";\n    TileMech[TileMech[\"TM_PROMOTES_WITH_KEY\"] = Fl(1)] = \"TM_PROMOTES_WITH_KEY\";\n    TileMech[TileMech[\"TM_PROMOTES_WITHOUT_KEY\"] = Fl(2)] = \"TM_PROMOTES_WITHOUT_KEY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_STEP\"] = Fl(3)] = \"TM_PROMOTES_ON_STEP\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_ITEM_REMOVE\"] = Fl(4)] = \"TM_PROMOTES_ON_ITEM_REMOVE\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_PLAYER_ENTRY\"] = Fl(5)] = \"TM_PROMOTES_ON_PLAYER_ENTRY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_SACRIFICE_ENTRY\"] = Fl(6)] = \"TM_PROMOTES_ON_SACRIFICE_ENTRY\";\n    TileMech[TileMech[\"TM_PROMOTES_ON_ELECTRICITY\"] = Fl(7)] = \"TM_PROMOTES_ON_ELECTRICITY\";\n    TileMech[TileMech[\"TM_ALLOWS_SUBMERGING\"] = Fl(8)] = \"TM_ALLOWS_SUBMERGING\";\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_EXTINGUISHES_FIRE\"] = Fl(14)] = \"TM_EXTINGUISHES_FIRE\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_REFLECTS_BOLTS\"] = Fl(16)] = \"TM_REFLECTS_BOLTS\";\n    TileMech[TileMech[\"TM_STAND_IN_TILE\"] = Fl(17)] = \"TM_STAND_IN_TILE\";\n    TileMech[TileMech[\"TM_LIST_IN_SIDEBAR\"] = Fl(18)] = \"TM_LIST_IN_SIDEBAR\";\n    TileMech[TileMech[\"TM_VISUALLY_DISTINCT\"] = Fl(19)] = \"TM_VISUALLY_DISTINCT\";\n    TileMech[TileMech[\"TM_BRIGHT_MEMORY\"] = Fl(20)] = \"TM_BRIGHT_MEMORY\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_CONNECTS_LEVEL\"] = Fl(22)] = \"TM_CONNECTS_LEVEL\";\n    TileMech[TileMech[\"TM_INTERRUPT_EXPLORATION_WHEN_SEEN\"] = Fl(23)] = \"TM_INTERRUPT_EXPLORATION_WHEN_SEEN\";\n    TileMech[TileMech[\"TM_INVERT_WHEN_HIGHLIGHTED\"] = Fl(24)] = \"TM_INVERT_WHEN_HIGHLIGHTED\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    TileMech[TileMech[\"TM_PROMOTES\"] = TileMech.TM_PROMOTES_WITH_KEY |\n        TileMech.TM_PROMOTES_WITHOUT_KEY |\n        TileMech.TM_PROMOTES_ON_STEP |\n        TileMech.TM_PROMOTES_ON_ITEM_REMOVE |\n        TileMech.TM_PROMOTES_ON_SACRIFICE_ENTRY |\n        TileMech.TM_PROMOTES_ON_ELECTRICITY |\n        TileMech.TM_PROMOTES_ON_PLAYER_ENTRY] = \"TM_PROMOTES\";\n})(TileMech || (TileMech = {}));\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"REVEALED\"] = Fl(0)] = \"REVEALED\";\n    Cell[Cell[\"VISIBLE\"] = Fl(1)] = \"VISIBLE\";\n    Cell[Cell[\"WAS_VISIBLE\"] = Fl(2)] = \"WAS_VISIBLE\";\n    Cell[Cell[\"IN_FOV\"] = Fl(3)] = \"IN_FOV\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(4)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_MONSTER\"] = Fl(5)] = \"HAS_MONSTER\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(6)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(7)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_STAIRS\"] = Fl(8)] = \"HAS_STAIRS\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(9)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"CELL_CHANGED\"] = Fl(10)] = \"CELL_CHANGED\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(12)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(13)] = \"IS_CURSOR\";\n    Cell[Cell[\"MAGIC_MAPPED\"] = Fl(14)] = \"MAGIC_MAPPED\";\n    Cell[Cell[\"ITEM_DETECTED\"] = Fl(15)] = \"ITEM_DETECTED\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(16)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"CLAIRVOYANT_VISIBLE\"] = Fl(17)] = \"CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"WAS_CLAIRVOYANT_VISIBLE\"] = Fl(18)] = \"WAS_CLAIRVOYANT_VISIBLE\";\n    Cell[Cell[\"CLAIRVOYANT_DARKENED\"] = Fl(19)] = \"CLAIRVOYANT_DARKENED\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(20)] = \"IMPREGNABLE\";\n    Cell[Cell[\"TELEPATHIC_VISIBLE\"] = Fl(22)] = \"TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"WAS_TELEPATHIC_VISIBLE\"] = Fl(23)] = \"WAS_TELEPATHIC_VISIBLE\";\n    Cell[Cell[\"MONSTER_DETECTED\"] = Fl(24)] = \"MONSTER_DETECTED\";\n    Cell[Cell[\"WAS_MONSTER_DETECTED\"] = Fl(25)] = \"WAS_MONSTER_DETECTED\";\n    Cell[Cell[\"LIGHT_CHANGED\"] = Fl(27)] = \"LIGHT_CHANGED\";\n    Cell[Cell[\"CELL_LIT\"] = Fl(28)] = \"CELL_LIT\";\n    Cell[Cell[\"IS_IN_SHADOW\"] = Fl(29)] = \"IS_IN_SHADOW\";\n    Cell[Cell[\"CELL_DARK\"] = Fl(30)] = \"CELL_DARK\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.REVEALED |\n        Cell.MAGIC_MAPPED |\n        Cell.ITEM_DETECTED |\n        Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.HAS_STAIRS |\n        Cell.STABLE_MEMORY |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE | Cell.CLAIRVOYANT_VISIBLE | Cell.TELEPATHIC_VISIBLE] = \"ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"HAS_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_MONSTER] = \"HAS_ACTOR\";\n    Cell[Cell[\"IS_WAS_ANY_KIND_OF_VISIBLE\"] = Cell.VISIBLE |\n        Cell.WAS_VISIBLE |\n        Cell.CLAIRVOYANT_VISIBLE |\n        Cell.WAS_CLAIRVOYANT_VISIBLE |\n        Cell.TELEPATHIC_VISIBLE |\n        Cell.WAS_TELEPATHIC_VISIBLE] = \"IS_WAS_ANY_KIND_OF_VISIBLE\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.VISIBLE | Cell.IN_FOV | Cell.NEEDS_REDRAW | Cell.CELL_CHANGED] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n///////////////////////////////////////////////////////\n// CELL MECH\nexport var CellMech;\n(function (CellMech) {\n    CellMech[CellMech[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    CellMech[CellMech[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    CellMech[CellMech[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    CellMech[CellMech[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(4)] = \"CAUGHT_FIRE_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_FIRED_THIS_TURN\"] = Fl(5)] = \"EVENT_FIRED_THIS_TURN\";\n    CellMech[CellMech[\"EVENT_PROTECTED\"] = Fl(6)] = \"EVENT_PROTECTED\";\n    CellMech[CellMech[\"IS_IN_LOOP\"] = Fl(10)] = \"IS_IN_LOOP\";\n    CellMech[CellMech[\"IS_CHOKEPOINT\"] = Fl(11)] = \"IS_CHOKEPOINT\";\n    CellMech[CellMech[\"IS_GATE_SITE\"] = Fl(12)] = \"IS_GATE_SITE\";\n    CellMech[CellMech[\"IS_IN_ROOM_MACHINE\"] = Fl(13)] = \"IS_IN_ROOM_MACHINE\";\n    CellMech[CellMech[\"IS_IN_AREA_MACHINE\"] = Fl(14)] = \"IS_IN_AREA_MACHINE\";\n    CellMech[CellMech[\"IS_POWERED\"] = Fl(15)] = \"IS_POWERED\";\n    CellMech[CellMech[\"IS_IN_MACHINE\"] = CellMech.IS_IN_ROOM_MACHINE | CellMech.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    CellMech[CellMech[\"PERMANENT_MECH_FLAGS\"] = CellMech.SEARCHED_FROM_HERE |\n        CellMech.PRESSURE_PLATE_DEPRESSED |\n        CellMech.KNOWN_TO_BE_TRAP_FREE |\n        CellMech.IS_IN_LOOP |\n        CellMech.IS_CHOKEPOINT |\n        CellMech.IS_GATE_SITE |\n        CellMech.IS_IN_MACHINE] = \"PERMANENT_MECH_FLAGS\";\n})(CellMech || (CellMech = {}));\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_STABLE_GLOW_LIGHTS\"] = Fl(1)] = \"MAP_STABLE_GLOW_LIGHTS\";\n    Map[Map[\"MAP_STABLE_LIGHTS\"] = Fl(2)] = \"MAP_STABLE_LIGHTS\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(7)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = Map.MAP_STABLE_LIGHTS | Map.MAP_STABLE_GLOW_LIGHTS | Map.MAP_FOV_CHANGED] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import { utils as Utils, range as Range, grid as Grid, color as Color, data as DATA, config as CONFIG, make as Make, } from \"gw-utils\";\nimport * as Flags from \"./flags\";\n// const LIGHT_SMOOTHING_THRESHOLD = 150;       // light components higher than this magnitude will be toned down a little\nexport const config = (CONFIG.light = { INTENSITY_DARK: 20 }); // less than 20% for highest color in rgb\nconst LIGHT_COMPONENTS = Color.make();\nexport class Light {\n    constructor(color, range, fadeTo, pass = false) {\n        this.fadeTo = 0;\n        this.passThroughActors = false;\n        this.id = null;\n        this.color = Color.from(color) || null; /* color */\n        this.radius = Range.make(range || 1);\n        this.fadeTo = fadeTo || 0;\n        this.passThroughActors = pass; // generally no, but miner light does (TODO - string parameter?  'false' or 'true')\n    }\n    copy(other) {\n        this.color = other.color;\n        this.radius.copy(other.radius);\n        this.fadeTo = other.fadeTo;\n        this.passThroughActors = other.passThroughActors;\n    }\n    get intensity() {\n        return intensity(this.color);\n    }\n    // Returns true if any part of the light hit cells that are in the player's field of view.\n    paint(map, x, y, maintainShadows = false, isMinersLight = false) {\n        if (!map)\n            return false;\n        let k;\n        // let colorComponents = [0,0,0];\n        let lightMultiplier;\n        let radius = this.radius.value();\n        let outerRadius = Math.ceil(radius);\n        // calcLightComponents(colorComponents, this);\n        LIGHT_COMPONENTS.copy(this.color).bake();\n        // console.log('paint', LIGHT_COMPONENTS.toString(true), x, y, outerRadius);\n        // the miner's light does not dispel IS_IN_SHADOW,\n        // so the player can be in shadow despite casting his own light.\n        const dispelShadows = !isMinersLight &&\n            !maintainShadows &&\n            intensity(LIGHT_COMPONENTS) > config.INTENSITY_DARK;\n        const fadeToPercent = this.fadeTo;\n        const grid = Grid.alloc(map.width, map.height, 0);\n        map.calcFov(grid, x, y, outerRadius, this.passThroughActors ? 0 : Flags.Cell.HAS_ACTOR, Flags.Layer.L_BLOCKS_VISION);\n        let overlappedFieldOfView = false;\n        grid.forCircle(x, y, outerRadius, (v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            lightMultiplier = Math.floor(100 -\n                (100 - fadeToPercent) * (Utils.distanceBetween(x, y, i, j) / radius));\n            for (k = 0; k < 3; k++) {\n                cell.light[k] += Math.floor((LIGHT_COMPONENTS[k] * lightMultiplier) / 100);\n            }\n            if (dispelShadows) {\n                cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n            }\n            if (cell.flags & (Flags.Cell.IN_FOV | Flags.Cell.ANY_KIND_OF_VISIBLE)) {\n                overlappedFieldOfView = true;\n            }\n            // console.log(i, j, lightMultiplier, cell.light);\n        });\n        if (dispelShadows) {\n            const cell = map.cell(x, y);\n            cell.flags &= ~Flags.Cell.IS_IN_SHADOW;\n        }\n        Grid.free(grid);\n        return overlappedFieldOfView;\n    }\n}\nexport function intensity(color) {\n    return Math.max(color[0], color[1], color[2]);\n}\nexport function make(...args) {\n    if (args.length == 1) {\n        const config = args[0];\n        if (typeof config === \"string\") {\n            const cached = lights[config];\n            if (cached)\n                return cached;\n            const [color, radius, fadeTo, pass] = config\n                .split(/[,|]/)\n                .map((t) => t.trim());\n            return new Light(Color.from(color), Range.from(radius || 1), Number.parseInt(fadeTo || \"0\"), !!pass && pass !== \"false\");\n        }\n        else if (Array.isArray(config)) {\n            const [color, radius, fadeTo, pass] = config;\n            return new Light(color, radius, fadeTo, pass);\n        }\n        else if (config && config.color) {\n            return new Light(Color.from(config.color), Range.from(config.radius), Number.parseInt(config.fadeTo || \"0\"), config.pass);\n        }\n        else {\n            throw new Error(\"Unknown Light config - \" + config);\n        }\n    }\n    else {\n        const [color, radius, fadeTo, pass] = args;\n        return new Light(color, radius, fadeTo, pass);\n    }\n}\nMake.light = make;\nexport const lights = {};\nexport function from(...args) {\n    if (args.length != 1)\n        Utils.ERROR(\"Unknown Light config: \" + JSON.stringify(args));\n    const arg = args[0];\n    if (typeof arg === \"string\") {\n        const cached = lights[arg];\n        if (cached)\n            return cached;\n    }\n    return make(arg);\n}\nexport function install(id, ...args) {\n    let source;\n    if (args.length == 1) {\n        source = make(args[0]);\n    }\n    else {\n        source = make(args[0], args[1], args[2], args[3]);\n    }\n    lights[id] = source;\n    if (source)\n        source.id = id;\n    return source;\n}\nexport function installAll(config = {}) {\n    const entries = Object.entries(config);\n    entries.forEach(([name, info]) => {\n        install(name, info);\n    });\n}\n// export function calcLightComponents(colorComponents, theLight) {\n// \tconst randComponent = cosmetic.range(0, theLight.color.rand);\n// \tcolorComponents[0] = randComponent + theLight.color.red + cosmetic.range(0, theLight.color.redRand);\n// \tcolorComponents[1] = randComponent + theLight.color.green + cosmetic.range(0, theLight.color.greenRand);\n// \tcolorComponents[2] = randComponent + theLight.color.blue + cosmetic.range(0, theLight.color.blueRand);\n// }\nfunction updateDisplayDetail(map) {\n    map.eachCell((cell, _i, _j) => {\n        // clear light flags\n        cell.flags &= ~(Flags.Cell.CELL_LIT | Flags.Cell.CELL_DARK);\n        if (cell.light.some((v, i) => v !== cell.oldLight[i])) {\n            cell.lightChanged = true;\n        }\n        if (cell.isDark()) {\n            cell.flags |= Flags.Cell.CELL_DARK;\n        }\n        else if (!(cell.flags & Flags.Cell.IS_IN_SHADOW)) {\n            cell.flags |= Flags.Cell.CELL_LIT;\n        }\n    });\n}\n// export function backUpLighting(map: Map.Map, lights: LightDataGrid) {\n//   let k;\n//   map.eachCell((cell, i, j) => {\n//     for (k = 0; k < 3; k++) {\n//       lights[i][j][k] = cell.light[k];\n//     }\n//   });\n// }\n// export function restoreLighting(map: Map.Map, lights: LightDataGrid) {\n//   let k;\n//   map.eachCell((cell, i, j) => {\n//     for (k = 0; k < 3; k++) {\n//       cell.light[k] = lights[i][j][k];\n//     }\n//   });\n// }\nexport function recordOldLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.oldLight[k] = cell.light[k];\n            cell.lightChanged = false;\n        }\n    });\n}\nexport function zeroOutLights(map) {\n    let k;\n    const light = map.ambientLight ? map.ambientLight : [0, 0, 0];\n    map.eachCell((cell, _i, _j) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = light[k];\n        }\n        cell.flags |= Flags.Cell.IS_IN_SHADOW;\n    });\n}\nexport function recordGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.glowLight[k] = cell.light[k];\n        }\n    });\n}\nexport function restoreGlowLights(map) {\n    let k;\n    map.eachCell((cell) => {\n        for (k = 0; k < 3; k++) {\n            cell.light[k] = cell.glowLight[k];\n        }\n    });\n}\nexport function updateLighting(map) {\n    // Copy Light over oldLight\n    recordOldLights(map);\n    if (!map.lightChanged)\n        return false;\n    // and then zero out Light.\n    zeroOutLights(map);\n    if (!map.glowLightChanged) {\n        restoreGlowLights(map);\n    }\n    else {\n        // GW.debug.log('painting glow lights.');\n        // Paint all glowing tiles.\n        map.eachStaticLight((light, x, y) => {\n            //   const light = lights[id];\n            if (light) {\n                light.paint(map, x, y);\n            }\n        });\n        recordGlowLights(map);\n        map.glowLightChanged = false;\n    }\n    // Cycle through monsters and paint their lights:\n    map.eachDynamicLight((light, x, y) => {\n        light.paint(map, x, y);\n        // if (monst.mutationIndex >= 0 && mutationCatalog[monst.mutationIndex].light != lights['NO_LIGHT']) {\n        //     paint(map, mutationCatalog[monst.mutationIndex].light, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isBurning()) { // monst.status.burning && !(actor.kind.flags & Flags.Actor.AF_FIERY)) {\n        // \tpaint(map, lights.BURNING_CREATURE, actor.x, actor.y, false, false);\n        // }\n        // if (actor.isTelepathicallyRevealed()) {\n        // \tpaint(map, lights['TELEPATHY_LIGHT'], actor.x, actor.y, false, true);\n        // }\n    });\n    // Also paint telepathy lights for dormant monsters.\n    // for (monst of map.dormantMonsters) {\n    //     if (monsterTelepathicallyRevealed(monst)) {\n    //         paint(map, lights['TELEPATHY_LIGHT'], monst.xLoc, monst.yLoc, false, true);\n    //     }\n    // }\n    updateDisplayDetail(map);\n    // Miner's light:\n    const PLAYER = DATA.player;\n    if (PLAYER) {\n        const PLAYERS_LIGHT = lights.PLAYERS_LIGHT;\n        if (PLAYERS_LIGHT && PLAYERS_LIGHT.radius) {\n            PLAYERS_LIGHT.paint(map, PLAYER.x, PLAYER.y, true, true);\n        }\n    }\n    map.lightChanged = false;\n    // if (PLAYER.status.invisible) {\n    //     PLAYER.info.foreColor = playerInvisibleColor;\n    // } else if (playerInDarkness()) {\n    // \tPLAYER.info.foreColor = playerInDarknessColor;\n    // } else if (pmap[PLAYER.xLoc][PLAYER.yLoc].flags & IS_IN_SHADOW) {\n    // \tPLAYER.info.foreColor = playerInShadowColor;\n    // } else {\n    // \tPLAYER.info.foreColor = playerInLightColor;\n    // }\n    return true;\n}\n// TODO - Move?\nexport function playerInDarkness(map, PLAYER, darkColor) {\n    const cell = map.cell(PLAYER.x, PLAYER.y);\n    return cell.isDark(darkColor);\n    // return (\n    //   cell.light[0] + 10 < darkColor.r &&\n    //   cell.light[1] + 10 < darkColor.g &&\n    //   cell.light[2] + 10 < darkColor.b\n    // );\n}\n","import * as GW from \"gw-utils\";\nimport { Layer as Flags, Depth } from \"./flags\";\nimport * as Light from \"./light\";\nexport { Flags, Depth };\nexport class Layer {\n    constructor(config) {\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.flags = { layer: 0 };\n        this.sprite = GW.make.sprite(config.sprite || config);\n        this.light = config.light ? Light.make(config.light) : null;\n        this.priority = GW.utils.first(config.priority, 50);\n        this.depth =\n            (config.depth && typeof config.depth !== \"number\"\n                ? Depth[config.depth]\n                : config.depth) || 0;\n        // @ts-ignore\n        this.flags.layer = GW.flag.from(Flags, config.layerFlags, config.flags, 0);\n    }\n}\nexport function make(config) {\n    return new Layer(config);\n}\nGW.make.layer = make;\n","import { utils as Utils, random, grid as Grid, events as Events, color as Color, flag as Flag, data as Data, message as Msg, make as Make, } from \"gw-utils\";\nimport { Depth, Activation as Flags, Tile as TileFlags, CellMech as CellMechFlags, Layer as LayerFlags, } from \"./flags\";\nimport * as Tile from \"./tile\";\nexport { Flags };\nexport class TileEvent {\n    constructor(opts = {}) {\n        if (typeof opts === \"function\") {\n            opts = {\n                fn: opts,\n            };\n        }\n        this.tile = opts.tile || null;\n        this.fn = opts.fn || null;\n        this.item = opts.item || null;\n        this.chance = opts.chance || 0;\n        this.volume = opts.volume || 0;\n        // spawning pattern:\n        this.spread = opts.spread || 0;\n        this.radius = opts.radius || 0;\n        this.decrement = opts.decrement || 0;\n        this.flags = Flag.from(Flags, opts.flags);\n        this.matchTile = opts.matchTile || opts.needs || 0; /* ENUM tileType */\n        this.next = opts.next || null; /* ENUM makeEventTypes */\n        this.message = opts.message || null;\n        this.lightFlare = opts.flare || null;\n        this.flashColor = opts.flash ? Color.from(opts.flash) : null;\n        // this.effectRadius = radius || 0;\n        this.messageDisplayed = false;\n        this.emit = opts.emit || null; // name of the event to emit when activated\n        this.id = opts.id || null;\n    }\n}\nexport function make(opts) {\n    if (!opts)\n        return null;\n    if (typeof opts === \"string\") {\n        opts = { tile: opts };\n    }\n    const te = new TileEvent(opts);\n    return te;\n}\nMake.tileEvent = make;\nexport const activations = {\n    DF_NONE: null,\n};\nexport function install(id, event) {\n    if (!(event instanceof TileEvent)) {\n        event = make(event);\n    }\n    activations[id] = event;\n    if (event)\n        event.id = id;\n    return event;\n}\nexport function resetAllMessages() {\n    Object.values(activations).forEach((f) => {\n        if (f instanceof TileEvent) {\n            f.messageDisplayed = false;\n        }\n    });\n}\n// returns whether the feature was successfully generated (false if we aborted because of blocking)\nexport async function spawn(activation, ctx = {}) {\n    let i, j;\n    if (!activation)\n        return false;\n    if (!ctx)\n        return false;\n    let feat;\n    if (typeof activation === \"string\") {\n        // @ts-ignore\n        feat = activations[activation];\n        if (!feat)\n            Utils.ERROR(\"Unknown tile Event: \" + activation);\n    }\n    else if (typeof activation === \"function\") {\n        return activation(ctx);\n    }\n    else {\n        feat = activation;\n    }\n    const map = ctx.map;\n    const x = ctx.x;\n    const y = ctx.y;\n    if (!map || x === undefined || y === undefined) {\n        Utils.ERROR(\"MAP, x, y are required in context.\");\n    }\n    if (ctx.safe &&\n        map.hasCellMechFlag(x, y, CellMechFlags.EVENT_FIRED_THIS_TURN)) {\n        if (!(feat.flags & Flags.DFF_ALWAYS_FIRE)) {\n            // Activation.debug('spawn - already fired.');\n            return false;\n        }\n    }\n    // Activation.debug('spawn', x, y, 'id=', feat.id, 'tile=', feat.tile, 'item=', feat.item);\n    ctx.refreshCell = ctx.refreshCell || !(feat.flags & Flags.DFF_NO_REDRAW_CELL);\n    const abortIfBlocking = (ctx.abortIfBlocking =\n        ctx.abortIfBlocking || feat.flags & Flags.DFF_ABORT_IF_BLOCKS_MAP);\n    // if ((feat.flags & DFF_RESURRECT_ALLY) && !resurrectAlly(x, y))\n    // {\n    //     return false;\n    // }\n    if (feat.message &&\n        feat.message.length &&\n        !feat.messageDisplayed &&\n        map.isVisible(x, y)) {\n        feat.messageDisplayed = true;\n        Msg.add(feat.message);\n    }\n    let tile = null;\n    if (feat.tile) {\n        tile = Tile.tiles[feat.tile] || null;\n        if (!tile) {\n            Utils.ERROR(\"Unknown tile: \" + feat.tile);\n        }\n    }\n    let item = null;\n    if (feat.item && \"item\" in Make) {\n        item = Make.item(feat.item);\n        if (!item) {\n            Utils.ERROR(\"Unknown item: \" + feat.item);\n        }\n    }\n    // Blocking keeps track of whether to abort if it turns out that the DF would obstruct the level.\n    const blocking = (ctx.blocking =\n        abortIfBlocking &&\n            !(feat.flags & Flags.DFF_PERMIT_BLOCKING) &&\n            ((tile && tile.blocksPathing()) ||\n                (item && item.blocksMove()) ||\n                feat.flags & Flags.DFF_TREAT_AS_BLOCKING)\n            ? true\n            : false);\n    // Activation.debug('- blocking', blocking);\n    const spawnMap = Grid.alloc(map.width, map.height);\n    let didSomething = false;\n    computeSpawnMap(feat, spawnMap, ctx);\n    if (!blocking ||\n        !map.gridDisruptsPassability(spawnMap, { bounds: ctx.bounds })) {\n        if (feat.flags & Flags.DFF_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (feat.flags & Flags.DFF_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (feat.flags & Flags.DFF_NULLIFY_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (nullifyCells(map, spawnMap, feat.flags)) {\n                didSomething = true;\n            }\n        }\n        if (tile || item || feat.fn) {\n            if (await spawnTiles(feat, spawnMap, ctx, tile, item)) {\n                didSomething = true;\n            }\n        }\n    }\n    if (item) {\n        item.delete();\n    }\n    if (didSomething && feat.flags & Flags.DFF_PROTECTED) {\n        spawnMap.forEach((v, i, j) => {\n            if (!v)\n                return;\n            const cell = map.cell(i, j);\n            cell.mechFlags |= CellMechFlags.EVENT_PROTECTED;\n        });\n    }\n    if (didSomething) {\n        // if ((feat.flags & Flags.DFF_AGGRAVATES_MONSTERS) && feat.effectRadius) {\n        //     await aggravateMonsters(feat.effectRadius, x, y, /* Color. */gray);\n        // }\n        // if (refreshCell && feat.flashColor && feat.effectRadius) {\n        //     await colorFlash(feat.flashColor, 0, (IN_FOV | CLAIRVOYANT_VISIBLE), 4, feat.effectRadius, x, y);\n        // }\n        // if (refreshCell && feat.lightFlare) {\n        //     createFlare(x, y, feat.lightFlare);\n        // }\n    }\n    // if (refreshCell && feat.tile\n    // \t&& (tile.flags & (TileFlags.T_IS_FIRE | TileFlags.T_AUTO_DESCENT))\n    // \t&& map.hasTileFlag(PLAYER.xLoc, PLAYER.yLoc, (TileFlags.T_IS_FIRE | TileFlags.T_AUTO_DESCENT)))\n    // {\n    // \tawait applyInstantTileEffectsToCreature(PLAYER);\n    // }\n    // apply tile effects\n    if (didSomething) {\n        for (let i = 0; i < spawnMap.width; ++i) {\n            for (let j = 0; j < spawnMap.height; ++j) {\n                const v = spawnMap[i][j];\n                if (!v || Data.gameHasEnded)\n                    continue;\n                const cell = map.cell(i, j);\n                if (cell.actor || cell.item) {\n                    for (let t of cell.tiles()) {\n                        await t.applyInstantEffects(map, i, j, cell);\n                        if (Data.gameHasEnded) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (feat.emit) {\n        await Events.emit(feat.emit, ctx);\n        didSomething = true;\n    }\n    if (Data.gameHasEnded) {\n        Grid.free(spawnMap);\n        return didSomething;\n    }\n    //\tif (succeeded && feat.message[0] && !feat.messageDisplayed && isVisible(x, y)) {\n    //\t\tfeat.messageDisplayed = true;\n    //\t\tmessage(feat.message, false);\n    //\t}\n    if (feat.next && (didSomething || feat.flags & Flags.DFF_SUBSEQ_ALWAYS)) {\n        // Activation.debug('- subsequent: %s, everywhere=%s', feat.next, feat.flags & Flags.DFF_SUBSEQ_EVERYWHERE);\n        if (feat.flags & Flags.DFF_SUBSEQ_EVERYWHERE) {\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j]) {\n                        ctx.x = i;\n                        ctx.y = j;\n                        await spawn(feat.next, ctx);\n                    }\n                }\n            }\n            ctx.x = x;\n            ctx.y = y;\n        }\n        else {\n            await spawn(feat.next, ctx);\n        }\n    }\n    if (didSomething) {\n        if (tile &&\n            tile.flags.tile &\n                (TileFlags.T_DEEP_WATER | TileFlags.T_LAVA | TileFlags.T_AUTO_DESCENT)) {\n            Data.updateMapToShoreThisTurn = false;\n        }\n        // awaken dormant creatures?\n        // if (feat.flags & Flags.DFF_ACTIVATE_DORMANT_MONSTER) {\n        //     for (monst of map.dormant) {\n        //         if (monst.x == x && monst.y == y || spawnMap[monst.x][monst.y]) {\n        //             // found it!\n        //             toggleMonsterDormancy(monst);\n        //         }\n        //     }\n        // }\n    }\n    if (didSomething) {\n        spawnMap.forEach((v, i, j) => {\n            if (v)\n                map.redrawXY(i, j);\n        });\n        map.changed = true;\n        if (!(feat.flags & Flags.DFF_NO_MARK_FIRED)) {\n            spawnMap.forEach((v, i, j) => {\n                if (v) {\n                    map.setCellFlags(i, j, 0, CellMechFlags.EVENT_FIRED_THIS_TURN);\n                }\n            });\n        }\n    }\n    // Activation.debug('- spawn complete : @%d,%d, ok=%s, feat=%s', ctx.x, ctx.y, didSomething, feat.id);\n    Grid.free(spawnMap);\n    return didSomething;\n}\nfunction cellIsOk(feat, x, y, ctx = {}) {\n    const map = ctx.map;\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (feat.flags & Flags.DFF_BUILD_IN_WALLS) {\n        if (!cell.isWall())\n            return false;\n    }\n    else if (feat.flags & Flags.DFF_MUST_TOUCH_WALLS) {\n        let ok = false;\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = true;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    else if (feat.flags & Flags.DFF_NO_TOUCH_WALLS) {\n        let ok = true;\n        map.eachNeighbor(x, y, (c) => {\n            if (c.isWall()) {\n                ok = false;\n            }\n        });\n        if (!ok)\n            return false;\n    }\n    if (ctx.bounds && !ctx.bounds.containsXY(x, y))\n        return false;\n    if (feat.matchTile && !cell.hasTile(feat.matchTile))\n        return false;\n    if (cell.hasLayerFlag(LayerFlags.L_BLOCKS_EFFECTS) &&\n        !feat.matchTile &&\n        (ctx.x != x || ctx.y != y))\n        return false;\n    return true;\n}\nexport function computeSpawnMap(feat, spawnMap, ctx = {}) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    const map = ctx.map;\n    const x = ctx.x;\n    const y = ctx.y;\n    const bounds = ctx.bounds || null;\n    if (bounds) {\n        // Activation.debug('- bounds', bounds);\n    }\n    let startProb = feat.spread || 0;\n    let probDec = feat.decrement || 0;\n    if (feat.matchTile && typeof feat.matchTile === \"string\") {\n        const name = feat.matchTile;\n        const tile = Tile.tiles[name];\n        if (!tile) {\n            Utils.ERROR(\"Failed to find match tile with name:\" + name);\n        }\n        feat.matchTile = tile.id;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let radius = feat.radius || 0;\n    if (feat.flags & Flags.DFF_SPREAD_CIRCLE) {\n        radius = 0;\n        startProb = startProb || 100;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        while (random.chance(startProb)) {\n            startProb -= probDec;\n            ++radius;\n        }\n        startProb = 100;\n        probDec = 0;\n    }\n    if (radius) {\n        startProb = startProb || 100;\n        spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n            if (!cellIsOk(feat, i, j, ctx))\n                return 0;\n            const dist = Math.floor(Utils.distanceBetween(x, y, i, j));\n            const prob = startProb - dist * probDec;\n            if (!random.chance(prob))\n                return 0;\n            return 1;\n        });\n        spawnMap[x][y] = 1;\n    }\n    else if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (feat.flags & Flags.DFF_SPREAD_LINE) {\n            x2 = x;\n            y2 = y;\n            const dir = Utils.DIRS[random.number(4)];\n            while (madeChange) {\n                madeChange = false;\n                x2 = x2 + dir[0];\n                y2 = y2 + dir[1];\n                if (spawnMap.hasXY(x2, y2) &&\n                    !spawnMap[x2][y2] &&\n                    cellIsOk(feat, x2, y2, ctx) &&\n                    random.chance(startProb)) {\n                    spawnMap[x2][y2] = 1;\n                    madeChange = true;\n                    startProb -= probDec;\n                }\n            }\n        }\n        else {\n            if (probDec <= 0)\n                probDec = startProb;\n            while (madeChange && startProb > 0) {\n                madeChange = false;\n                t++;\n                for (i = 0; i < map.width; i++) {\n                    for (j = 0; j < map.height; j++) {\n                        if (spawnMap[i][j] == t - 1) {\n                            for (dir = 0; dir < 4; dir++) {\n                                x2 = i + Utils.DIRS[dir][0];\n                                y2 = j + Utils.DIRS[dir][1];\n                                if (spawnMap.hasXY(x2, y2) &&\n                                    !spawnMap[x2][y2] &&\n                                    cellIsOk(feat, x2, y2, ctx) &&\n                                    random.chance(startProb)) {\n                                    spawnMap[x2][y2] = t;\n                                    madeChange = true;\n                                }\n                            }\n                        }\n                    }\n                }\n                startProb -= probDec;\n            }\n        }\n    }\n    if (!cellIsOk(feat, x, y, ctx)) {\n        spawnMap[x][y] = 0;\n    }\n}\nexport async function spawnTiles(feat, spawnMap, ctx, tile, item) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = feat.flags & Flags.DFF_BLOCKED_BY_OTHER_LAYERS;\n    const superpriority = feat.flags & Flags.DFF_SUPERPRIORITY;\n    const applyEffects = ctx.refreshCell;\n    const map = ctx.map;\n    const volume = ctx.volume || feat.volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.mechFlags & CellMechFlags.EVENT_PROTECTED)\n                continue;\n            if (tile) {\n                if (cell.tile(tile.depth) === tile) {\n                    // If the new cell does not already contains the fill terrain,\n                    if (tile.depth == Depth.GAS) {\n                        spawnMap[i][j] = 1;\n                        cell.gasVolume += volume;\n                    }\n                    else if (tile.depth == Depth.LIQUID) {\n                        spawnMap[i][j] = 1;\n                        cell.liquidVolume += volume;\n                    }\n                }\n                else if ((superpriority || cell.tile(tile.depth).priority < tile.priority) && // If the terrain in the layer to be overwritten has a higher priority number (unless superpriority),\n                    !cell.obstructsLayer(tile.depth) && // If we will be painting into the surface layer when that cell forbids it,\n                    (!cell.item || !(feat.flags & Flags.DFF_BLOCKED_BY_ITEMS)) &&\n                    (!cell.actor || !(feat.flags & Flags.DFF_BLOCKED_BY_ACTORS)) &&\n                    (!blockedByOtherLayers || cell.topmostTile().priority < tile.priority)) {\n                    // if the fill won't violate the priority of the most important terrain in this cell:\n                    spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                    map.setTile(i, j, tile, volume);\n                    // map.redrawCell(cell);\n                    // if (volume && cell.gas) {\n                    //     cell.volume += (feat.volume || 0);\n                    // }\n                    // debug('- tile', i, j, 'tile=', tile.id);\n                    // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                    accomplishedSomething = true;\n                }\n            }\n            if (item) {\n                if (superpriority || !cell.item) {\n                    if (!cell.hasLayerFlag(LayerFlags.L_BLOCKS_ITEMS)) {\n                        spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                        if (cell.item) {\n                            map.removeItem(cell.item);\n                        }\n                        const clone = item.clone();\n                        map.addItem(i, j, clone);\n                        // map.redrawCell(cell);\n                        // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                        accomplishedSomething = true;\n                        // Activation.debug('- item', i, j, 'item=', itemKind.id);\n                    }\n                }\n            }\n            if (feat.fn) {\n                ctx.spawnMap = spawnMap;\n                if (await feat.fn(i, j, ctx)) {\n                    spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                    // map.redrawCell(cell);\n                    // cell.mechFlags |= CellMechFlags.EVENT_FIRED_THIS_TURN;\n                    accomplishedSomething = true;\n                }\n            }\n            if (applyEffects) {\n                // if (PLAYER.xLoc == i && PLAYER.yLoc == j && !PLAYER.status.levitating && refresh) {\n                // \tflavorMessage(tileFlavor(PLAYER.xLoc, PLAYER.yLoc));\n                // }\n                // if (cell.actor || cell.item) {\n                // \tfor(let t of cell.tiles()) {\n                // \t\tawait t.applyInstantEffects(map, i, j, cell);\n                // \t\tif (Data.gameHasEnded) {\n                // \t\t\treturn true;\n                // \t\t}\n                // \t}\n                // }\n                // if (tile.flags & TileFlags.T_IS_FIRE) {\n                // \tif (cell.flags & CellFlags.HAS_ITEM) {\n                // \t\ttheItem = map.itemAt(i, j);\n                // \t\tif (theItem.flags & Flags.Item.ITEM_FLAMMABLE) {\n                // \t\t\tawait burnItem(theItem);\n                // \t\t}\n                // \t}\n                // }\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.changed = true;\n    }\n    return accomplishedSomething;\n}\nexport function nullifyCells(map, spawnMap, flags) {\n    let didSomething = false;\n    const nullSurface = flags & Flags.DFF_NULL_SURFACE;\n    const nullLiquid = flags & Flags.DFF_NULL_LIQUID;\n    const nullGas = flags & Flags.DFF_NULL_GAS;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        map.clearCellLayers(i, j, !!nullLiquid, !!nullSurface, !!nullGas);\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let i, j;\n    let didSomething = false;\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            if (!blockingMap[i][j])\n                continue;\n            const cell = map.cell(i, j);\n            if (!cell.actor)\n                continue;\n            const monst = cell.actor;\n            const loc = map.matchingLocNear(i, j, (cell) => {\n                return !monst.forbidsCell(cell);\n            }, { hallways: true, blockingMap });\n            if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                map.moveActor(loc[0], loc[1], monst);\n                // map.redrawXY(loc[0], loc[1]);\n                didSomething = true;\n            }\n        }\n    }\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    blockingMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (!cell.item)\n            return;\n        const item = cell.item;\n        const loc = map.matchingLocNear(i, j, (dest) => {\n            return !item.forbidsCell(dest);\n        }, { hallways: true, blockingMap });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(item);\n            map.addItem(loc[0], loc[1], item);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import { flag as Flag, utils as Utils, color as Color, make as Make, } from \"gw-utils\";\nimport { Tile as Flags, TileMech as MechFlags } from \"./flags\";\nimport * as TileEvent from \"./tileEvent\";\nimport * as Layer from \"./layer\";\nexport { Flags, MechFlags };\n/** Tile Class */\nexport class Tile extends Layer.Layer {\n    /**\n     * Creates a new Tile object.\n     * @param {Object} [config={}] - The configuration of the Tile\n     * @param {String|Number|String[]} [config.flags=0] - Flags and MechFlags for the tile\n     * @param {String} [config.layer=GROUND] - Name of the layer for this tile\n     * @param {String} [config.ch] - The sprite character\n     * @param {String} [config.fg] - The sprite foreground color\n     * @param {String} [config.bg] - The sprite background color\n     */\n    constructor(config) {\n        super((() => {\n            if (!config.Extends)\n                return config;\n            if (typeof config.Extends === \"string\") {\n                config.Extends = tiles[config.Extends];\n                if (!config.Extends)\n                    throw new Error(\"Unknown tile base - \" + config.Extends);\n            }\n            const base = config.Extends;\n            config.ch = Utils.first(config.ch, base.sprite.ch, -1);\n            config.fg = Utils.first(config.fg, base.sprite.fg, -1);\n            config.bg = Utils.first(config.bg, base.sprite.bg, -1);\n            config.depth = Utils.first(config.depth, base.depth);\n            config.priority = Utils.first(config.priority, base.priority);\n            config.opacity = Utils.first(config.opacity, base.sprite.opacity);\n            return config;\n        })());\n        this.flags = { layer: 0, tile: 0, tileMech: 0 };\n        this.activates = {};\n        this.flavor = null;\n        this.desc = null;\n        this.article = null;\n        this.dissipate = 2000; // 20 * 100 = 20%\n        let base = config.Extends;\n        if (base) {\n            Utils.assignOmitting([\"sprite\", \"depth\", \"priority\", \"activates\", \"flags\"], this, base);\n            if (base.activates) {\n                Object.assign(this.activates, base.activates);\n            }\n            Object.assign(this.flags, base.flags);\n        }\n        Utils.assignOmitting([\n            \"Extends\",\n            \"extends\",\n            \"flags\",\n            \"layerFlags\",\n            \"mechFlags\",\n            \"sprite\",\n            \"activates\",\n            \"ch\",\n            \"fg\",\n            \"bg\",\n            \"opacity\",\n            \"light\",\n            \"depth\",\n            \"priority\",\n            \"flags\",\n        ], this, config);\n        this.name = config.name || (base ? base.name : config.id);\n        this.id = config.id;\n        // @ts-ignore\n        this.flags.tile = Flag.from(Flags, this.flags.tile, config.flags);\n        // @ts-ignore\n        this.flags.layer = Flag.from(Layer.Flags, this.flags.layer, config.layerFlags || config.flags);\n        // @ts-ignore\n        this.flags.tileMech = Flag.from(MechFlags, this.flags.tileMech, config.mechFlags || config.flags);\n        if (config.activates) {\n            Object.entries(config.activates).forEach(([key, info]) => {\n                if (info) {\n                    const activation = TileEvent.make(info);\n                    this.activates[key] = activation;\n                }\n                else {\n                    delete this.activates[key];\n                }\n            });\n        }\n    }\n    /**\n     * Returns whether or not this tile as the given flag.\n     * Will return true if any bit in the flag is true, so testing with\n     * multiple flags will return true if any of them is set.\n     * @param {number} flag - The flag to check\n     * @returns {boolean} Whether or not the flag is set\n     */\n    hasAllFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllLayerFlags(flag) {\n        return (this.flags.layer & flag) === flag;\n    }\n    hasAllMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksPathing() {\n        return (this.flags.layer & Layer.Flags.L_BLOCKS_MOVE ||\n            this.flags.tile & Flags.T_PATHING_BLOCKER);\n    }\n    activatesOn(name) {\n        return !!this.activates[name];\n    }\n    getName(arg) {\n        let opts = {};\n        if (arg === true || arg === false) {\n            opts.article = arg;\n        }\n        else if (typeof arg === \"string\") {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || \"white\";\n            }\n            if (typeof color !== \"string\") {\n                color = Color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === \"string\" ? opts.article : this.article || \"a\";\n            result = article + \" \" + result;\n        }\n        return result;\n    }\n    getDescription(opts = {}) {\n        return this.getName(opts);\n    }\n}\n// Types.Tile = Tile;\nexport function make(config) {\n    return new Tile(config);\n}\nMake.tile = make;\nexport const tiles = {};\nexport function install(...args) {\n    let id = args[0];\n    let base = args[1];\n    let config = args[2];\n    if (arguments.length == 1) {\n        config = args[0];\n        config.Extends = config.Extends || null;\n        id = config.id;\n    }\n    else if (arguments.length == 2) {\n        config = base;\n    }\n    if (typeof base === \"string\") {\n        config.Extends = tiles[base] || Utils.ERROR(\"Unknown base tile: \" + base);\n    }\n    // config.name = config.name || base.name || id.toLowerCase();\n    config.id = id;\n    const tile = make(config);\n    tiles[id] = tile;\n    return tile;\n}\n/**\n * Adds multiple tiles to the GW.tiles collection.\n * It extracts all the id:opts pairs from the config object and uses\n * them to call addTileKind.\n * @param {Object} config - The tiles to add in [id, config] pairs\n * @returns {void} Nothing\n * @see addTileKind\n */\nexport function installAll(config) {\n    Object.entries(config).forEach(([id, opts]) => {\n        opts.id = id;\n        install(id, opts);\n    });\n}\n","import { color as Color, canvas as Canvas, utils as Utils, config as CONFIG, data as DATA, random, make as Make, } from \"gw-utils\";\nimport { Tile, tiles as TILES } from \"./tile\";\nimport * as Activation from \"./tileEvent\";\nimport * as Light from \"./light\";\nimport * as Layer from \"./layer\";\nimport { Cell as Flags, CellMech as MechFlags, TileMech as TileMechFlags, Tile as TileFlags, Map as MapFlags, Layer as LayerFlags, Depth, } from \"./flags\";\nexport { Flags, MechFlags };\n// TODO - Move to gw-ui\nColor.install(\"cursorColor\", 25, 100, 150);\nCONFIG.cursorPathIntensity = 50;\nexport class CellMemory {\n    constructor() {\n        this.mixer = new Canvas.Mixer();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.layerFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    clear() {\n        this.mixer.nullify();\n        this.item = null;\n        this.itemQuantity = 0;\n        this.actor = null;\n        this.tile = null;\n        this.cellFlags = 0;\n        this.cellMechFlags = 0;\n        this.layerFlags = 0;\n        this.tileFlags = 0;\n        this.tileMechFlags = 0;\n    }\n    copy(other) {\n        const mixer = this.mixer;\n        Object.assign(this, other);\n        this.mixer = mixer;\n        this.mixer.copy(other.mixer);\n    }\n}\nexport class Cell {\n    constructor() {\n        this._tiles = [];\n        this.layers = null;\n        this._actor = null;\n        this._item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory = new CellMemory();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n    }\n    copy(other) {\n        Utils.copyObject(this, other);\n    }\n    clear() {\n        for (let i = 0; i < this._tiles.length; ++i) {\n            this._tiles[i] = null;\n        }\n        this.layers = null;\n        this._actor = null;\n        this._item = null;\n        this.data = {};\n        this.flags = Flags.CELL_DEFAULT; // non-terrain cell flags\n        this.mechFlags = 0;\n        this.gasVolume = 0; // quantity of gas in cell\n        this.liquidVolume = 0;\n        this.machineNumber = 0;\n        this.memory.clear();\n        this.light = [100, 100, 100];\n        this.oldLight = [100, 100, 100];\n        this.glowLight = [100, 100, 100];\n    }\n    clearLayers(nullLiquid = false, nullSurface = false, nullGas = false) {\n        if (nullLiquid) {\n            this._tiles[1] = null;\n            this.liquidVolume = 0;\n        }\n        if (nullSurface) {\n            this._tiles[2] = null;\n        }\n        if (nullGas) {\n            this._tiles[3] = null;\n            this.gasVolume = 0;\n        }\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    get ground() {\n        var _a;\n        return ((_a = this._tiles[Depth.GROUND]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get liquid() {\n        var _a;\n        return ((_a = this._tiles[Depth.LIQUID]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get surface() {\n        var _a;\n        return ((_a = this._tiles[Depth.SURFACE]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get gas() {\n        var _a;\n        return ((_a = this._tiles[Depth.GAS]) === null || _a === void 0 ? void 0 : _a.id) || null;\n    }\n    get groundTile() {\n        return this._tiles[Depth.GROUND] || TILES.NULL;\n    }\n    get liquidTile() {\n        return this._tiles[Depth.LIQUID] || TILES.NULL;\n    }\n    get surfaceTile() {\n        return this._tiles[Depth.SURFACE] || TILES.NULL;\n    }\n    get gasTile() {\n        return this._tiles[Depth.GAS] || TILES.NULL;\n    }\n    dump() {\n        if (this.actor)\n            return this.actor.sprite.ch;\n        if (this.item)\n            return this.item.sprite.ch;\n        for (let i = this._tiles.length - 1; i >= 0; --i) {\n            if (!this._tiles[i])\n                continue;\n            const tile = this._tiles[i] || TILES.NULL;\n            if (tile.sprite.ch)\n                return tile.sprite.ch;\n        }\n        return TILES.NULL.sprite.ch;\n    }\n    get changed() {\n        return (this.flags & Flags.CELL_CHANGED) > 0;\n    }\n    set changed(v) {\n        if (v) {\n            this.flags |= Flags.CELL_CHANGED;\n        }\n        else {\n            this.flags &= ~Flags.CELL_CHANGED;\n        }\n    }\n    isVisible() {\n        return this.flags & Flags.VISIBLE;\n    }\n    isAnyKindOfVisible() {\n        return (this.flags & Flags.ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isOrWasAnyKindOfVisible() {\n        return (this.flags &\n            Flags.IS_WAS_ANY_KIND_OF_VISIBLE /* || CONFIG.playbackOmniscience */);\n    }\n    isRevealed(orMapped = false) {\n        const flag = Flags.REVEALED | (orMapped ? Flags.MAGIC_MAPPED : 0);\n        return (this.flags & flag) > 0;\n    }\n    listInSidebar() {\n        return this.hasTileMechFlag(TileMechFlags.TM_LIST_IN_SIDEBAR, true);\n    }\n    get needsRedraw() {\n        return (this.flags & Flags.NEEDS_REDRAW) > 0;\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags |= Flags.NEEDS_REDRAW;\n        }\n        else {\n            this.flags &= ~Flags.NEEDS_REDRAW;\n        }\n    }\n    // TODO - Use functions in LIGHT to check these on cell.light directly???\n    hasVisibleLight() {\n        return Light.intensity(this.light) > CONFIG.light.INTENSITY_DARK;\n    } // TODO\n    isDark(darkColor) {\n        const intensity = darkColor\n            ? Light.intensity(darkColor)\n            : CONFIG.light.INTENSITY_DARK;\n        return Light.intensity(this.light) <= intensity;\n    } // TODO\n    get lightChanged() {\n        return (this.flags & Flags.LIGHT_CHANGED) > 0;\n    }\n    set lightChanged(v) {\n        if (v) {\n            this.flags |= Flags.LIGHT_CHANGED;\n        }\n        else {\n            this.flags &= ~Flags.LIGHT_CHANGED;\n        }\n    }\n    tile(layer = Depth.GROUND) {\n        return this._tiles[layer] || TILES.NULL;\n    }\n    *tiles() {\n        for (let tile of this._tiles) {\n            if (tile) {\n                yield tile;\n            }\n        }\n    }\n    layerFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.layerFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags.layer;\n        }\n        return flags;\n    }\n    tileFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags.tile;\n        }\n        return flags;\n    }\n    tileMechFlags(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge && !this.isVisible()) {\n            return this.memory.tileMechFlags;\n        }\n        let flags = 0;\n        for (let tile of this.tiles()) {\n            flags |= tile.flags.tileMech;\n        }\n        return flags;\n    }\n    hasLayerFlag(flag, limitToPlayerKnowledge = false) {\n        const flags = this.layerFlags(limitToPlayerKnowledge);\n        return !!(flag & flags);\n    }\n    hasAllLayerFlags(flag, limitToPlayerKnowledge = false) {\n        const flags = this.layerFlags(limitToPlayerKnowledge);\n        return (flag & flags) === flag;\n    }\n    hasTileFlag(flagMask, limitToPlayerKnowledge = false) {\n        const tileFlags = this.tileFlags(limitToPlayerKnowledge);\n        return !!(flagMask & tileFlags);\n    }\n    hasAllTileFlags(flags, limitToPlayerKnowledge = false) {\n        return (flags & this.tileFlags(limitToPlayerKnowledge)) === flags;\n    }\n    hasTileMechFlag(flagMask, limitToPlayerKnowledge = false) {\n        const mechFlags = this.tileMechFlags(limitToPlayerKnowledge);\n        return !!(flagMask & mechFlags);\n    }\n    hasAllTileMechFlags(flags, limitToPlayerKnowledge = false) {\n        return (flags & this.tileMechFlags(limitToPlayerKnowledge)) === flags;\n    }\n    setFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags |= cellFlag;\n        this.mechFlags |= cellMechFlag;\n        // this.flags |= Flags.NEEDS_REDRAW;\n    }\n    clearFlags(cellFlag = 0, cellMechFlag = 0) {\n        this.flags &= ~cellFlag;\n        this.mechFlags &= ~cellMechFlag;\n        // if ((~cellFlag) & Flags.NEEDS_REDRAW) {\n        //   this.flags |= Flags.NEEDS_REDRAW;\n        // }\n    }\n    hasFlag(flag, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellFlags\n            : this.flags;\n        return (flag & flags) > 0;\n    }\n    hasMechFlag(flag, limitToPlayerKnowledge = false) {\n        const flags = limitToPlayerKnowledge && !this.isAnyKindOfVisible()\n            ? this.memory.cellMechFlags\n            : this.mechFlags;\n        return (flag & flags) > 0;\n    }\n    hasTile(tile) {\n        let id;\n        if (tile instanceof Tile) {\n            id = tile.id;\n        }\n        else {\n            id = tile;\n        }\n        return this._tiles.some((t) => t && t.id === id);\n    }\n    // hasTileInGroup(...groups) {\n    //   if (groups.length == 1 && Array.isArray(groups[0])) {\n    //     groups = groups[0];\n    //   }\n    //   return this.layers.some( (tileId) => {\n    //     const tile = TILES[tileId] || TILES.NOTHING;\n    //     return Utils.intersect(groups, tile.groups);\n    //   });\n    // }\n    // promotedTileFlags() {\n    //   return this.successorTileFlags(\"promote\");\n    // }\n    // discoveredTileFlags() {\n    //   return this.successorTileFlags(\"discover\");\n    // }\n    // hasDiscoveredTileFlag(flag: number) {\n    //   // if (!this.hasTileMechFlag(TM_IS_SECRET)) return false;\n    //   return this.discoveredTileFlags() & flag;\n    // }\n    topmostTile(skipGas = false) {\n        let best = TILES.NULL;\n        let bestPriority = -10000;\n        for (let layer = Depth.GROUND; layer <= (skipGas ? Depth.LIQUID : Depth.GAS); ++layer) {\n            // @ts-ignore\n            const tile = this._tiles[layer];\n            if (!tile)\n                continue;\n            if (tile.priority > bestPriority) {\n                best = tile;\n                bestPriority = tile.priority;\n            }\n        }\n        return best;\n    }\n    tileWithFlag(tileFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags.tile & tileFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileWithMechFlag(mechFlag) {\n        for (let tile of this.tiles()) {\n            if (tile.flags.tileMech & mechFlag)\n                return tile;\n        }\n        return null;\n    }\n    tileDesc() {\n        return this.topmostTile().desc;\n    }\n    tileFlavor() {\n        return this.topmostTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.topmostTile().getName(opts);\n    }\n    isClear() {\n        return this.ground == null;\n    }\n    isEmpty() {\n        return !(this._actor || this._item);\n    }\n    isMoveableNow(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const layerFlags = useMemory\n            ? this.memory.layerFlags\n            : this.layerFlags(false);\n        return (layerFlags & LayerFlags.L_BLOCKS_MOVE) === 0;\n    }\n    isWalkableNow(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const layerFlags = useMemory\n            ? this.memory.layerFlags\n            : this.layerFlags(false);\n        if (layerFlags & LayerFlags.L_BLOCKS_MOVE)\n            return false;\n        const tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        if (!(tileFlags & TileFlags.T_IS_DEEP_LIQUID))\n            return true;\n        return (tileFlags & TileFlags.T_BRIDGE) > 0;\n    }\n    canBeWalked(limitToPlayerKnowledge = false) {\n        if (this.isWalkableNow(limitToPlayerKnowledge))\n            return true;\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        const layerFlags = useMemory\n            ? this.memory.layerFlags\n            : this.layerFlags(false);\n        return (layerFlags & LayerFlags.L_SECRETLY_PASSABLE) > 0;\n    }\n    isWall(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let layerFlags = useMemory ? this.memory.layerFlags : this.layerFlags();\n        return (layerFlags & LayerFlags.L_IS_WALL) === LayerFlags.L_IS_WALL;\n    }\n    isObstruction(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let layerFlags = useMemory ? this.memory.layerFlags : this.layerFlags();\n        return !!(layerFlags & LayerFlags.L_BLOCKS_DIAGONAL);\n    }\n    isDoorway(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let layerFlags = useMemory ? this.memory.layerFlags : this.layerFlags();\n        return ((layerFlags & LayerFlags.L_BLOCKS_VISION) > 0 &&\n            (layerFlags & LayerFlags.L_BLOCKS_MOVE) === 0);\n    }\n    isSecretDoorway(limitToPlayerKnowledge = false) {\n        if (limitToPlayerKnowledge)\n            return false;\n        const layerFlags = this.layerFlags(limitToPlayerKnowledge);\n        return (layerFlags & LayerFlags.L_SECRETLY_PASSABLE) > 0;\n    }\n    blocksPathing(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        if (!this.isWalkableNow(limitToPlayerKnowledge))\n            return true;\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_PATHING_BLOCKER);\n    }\n    blocksVision() {\n        const layerFlags = this.layerFlags();\n        return !!(layerFlags & LayerFlags.L_BLOCKS_VISION);\n    }\n    isLiquid(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_IS_DEEP_LIQUID);\n    }\n    // TODO - Should this look at the tiles instead of the flags?\n    // What if a gas tile is not set with T_GAS?\n    // Should we force T_GAS if layer === GAS when creating a tile?\n    hasGas(limitToPlayerKnowledge = false) {\n        const useMemory = limitToPlayerKnowledge && !this.isAnyKindOfVisible();\n        let tileFlags = useMemory ? this.memory.tileFlags : this.tileFlags();\n        return !!(tileFlags & TileFlags.T_GAS);\n    }\n    markRevealed() {\n        this.flags &= ~Flags.STABLE_MEMORY;\n        if (this.flags & Flags.REVEALED)\n            return false;\n        this.flags |= Flags.REVEALED;\n        return !this.isWall();\n    }\n    obstructsLayer(depth) {\n        return (depth === Depth.SURFACE && this.hasLayerFlag(LayerFlags.L_BLOCKS_SURFACE));\n    }\n    setTile(tileId = null, volume = 0, map) {\n        map = map || DATA.map;\n        let tile;\n        if (tileId === null) {\n            tile = TILES.NULL;\n            tileId = null;\n        }\n        else if (typeof tileId === \"string\") {\n            tile = TILES[tileId];\n        }\n        else if (tileId instanceof Tile) {\n            tile = tileId;\n            tileId = tile.id;\n        }\n        if (!tile) {\n            return Utils.ERROR(\"Unknown tile - \" + tileId);\n        }\n        const oldTile = this._tiles[tile.depth] || TILES.NULL;\n        const oldTileId = oldTile === TILES.NULL ? null : oldTile.id;\n        if (oldTile.blocksPathing() != tile.blocksPathing()) {\n            DATA.staleLoopMap = true;\n        }\n        if (tile.flags.tile & TileFlags.T_IS_FIRE &&\n            !(oldTile.flags.tile & TileFlags.T_IS_FIRE)) {\n            this.mechFlags |= MechFlags.CAUGHT_FIRE_THIS_TURN;\n        }\n        const blocksVision = tile.flags.layer & LayerFlags.L_BLOCKS_VISION;\n        const oldBlocksVision = oldTile.flags.layer & LayerFlags.L_BLOCKS_VISION;\n        if (map && this.isAnyKindOfVisible() && blocksVision != oldBlocksVision) {\n            map.setFlag(MapFlags.MAP_FOV_CHANGED);\n        }\n        if (oldTileId !== null)\n            this.removeLayer(oldTile);\n        this._tiles[tile.depth] = tileId === null ? null : tile;\n        if (tileId !== null)\n            this.addLayer(tile);\n        if (tile.depth == Depth.LIQUID) {\n            this.liquidVolume =\n                volume + (tileId == oldTileId ? this.liquidVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_LIQUID);\n        }\n        else if (tile.depth == Depth.GAS) {\n            this.gasVolume = volume + (tileId == oldTileId ? this.gasVolume : 0);\n            if (map)\n                map.clearFlag(MapFlags.MAP_NO_GAS);\n        }\n        if (tile.depth > 0 && !this._tiles[0]) {\n            this._tiles[0] = TILES.FLOOR; // TODO - Not good\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n        if (map && oldTile.light !== tile.light) {\n            map.clearFlag(MapFlags.MAP_STABLE_GLOW_LIGHTS | MapFlags.MAP_STABLE_LIGHTS);\n        }\n        return true;\n    }\n    clearLayer(depth) {\n        // @ts-ignore\n        if (typeof depth === \"string\")\n            depth = Layer[depth];\n        const current = this._tiles[depth];\n        if (current) {\n            // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n            this.flags |= Flags.CELL_CHANGED;\n            this.removeLayer(current);\n        }\n        this._tiles[depth] = null;\n        if (depth == Depth.LIQUID) {\n            this.liquidVolume = 0;\n        }\n        else if (depth == Depth.GAS) {\n            this.gasVolume = 0;\n        }\n    }\n    clearLayersExcept(except = Depth.GROUND, ground) {\n        const floorTile = ground ? TILES[ground] : this.groundTile;\n        for (let layer = 0; layer < this._tiles.length; layer++) {\n            if (layer != except && layer != Depth.GAS) {\n                if (layer === Depth.GROUND) {\n                    if (floorTile !== this.groundTile)\n                        this.setTile(floorTile);\n                }\n                else {\n                    this.clearLayer(layer);\n                }\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n        this.flags |= Flags.CELL_CHANGED;\n    }\n    clearLayersWithFlags(tileFlags, tileMechFlags = 0) {\n        for (let i = 0; i < this._tiles.length; ++i) {\n            const tile = this._tiles[i];\n            if (!tile)\n                continue;\n            if (tileFlags && tileMechFlags) {\n                if (tile.flags.tile & tileFlags &&\n                    tile.flags.tileMech & tileMechFlags) {\n                    this.clearLayer(i);\n                }\n            }\n            else if (tileFlags) {\n                if (tile.flags.tile & tileFlags) {\n                    this.clearLayer(i);\n                }\n            }\n            else if (tileMechFlags) {\n                if (tile.flags.tileMech & tileMechFlags) {\n                    this.clearLayer(i);\n                }\n            }\n        }\n        // this.flags |= (Flags.NEEDS_REDRAW | Flags.CELL_CHANGED);\n    }\n    // EVENTS\n    async activate(name, ctx = {}) {\n        ctx.cell = this;\n        let fired = false;\n        // cell.debug(\"fire event - %s\", name);\n        for (let tile of this.tiles()) {\n            if (!tile.activates)\n                continue;\n            const ev = tile.activates[name];\n            if (ev) {\n                // cell.debug(\" - has event\");\n                if (ev.chance && !random.chance(ev.chance, 10000)) {\n                    continue;\n                }\n                ctx.tile = tile;\n                // cell.debug(\" - spawn event @%d,%d - %s\", ctx.x, ctx.y, name);\n                fired = (await Activation.spawn(ev, ctx)) || fired;\n                // cell.debug(\" - spawned\");\n                if (fired) {\n                    break;\n                }\n            }\n        }\n        if (fired) {\n            // this.mechFlags |= MechFlags.EVENT_FIRED_THIS_TURN;\n        }\n        return fired;\n    }\n    activatesOn(name) {\n        for (let tile of this.tiles()) {\n            if (tile.activatesOn(name))\n                return true;\n        }\n        return false;\n    }\n    // ITEM\n    get item() {\n        return this._item;\n    }\n    set item(item) {\n        if (this.item) {\n            this.removeLayer(this.item);\n        }\n        this._item = item;\n        if (item) {\n            this.flags |= Flags.HAS_ITEM;\n            this.addLayer(item);\n        }\n        else {\n            this.flags &= ~Flags.HAS_ITEM;\n        }\n    }\n    // ACTOR\n    get actor() {\n        return this._actor;\n    }\n    set actor(actor) {\n        if (this.actor) {\n            this.removeLayer(this.actor);\n        }\n        this._actor = actor;\n        if (actor) {\n            this.flags |= Flags.HAS_ACTOR;\n            this.addLayer(actor);\n        }\n        else {\n            this.flags &= ~Flags.HAS_ACTOR;\n        }\n    }\n    addLayer(layer) {\n        if (!layer)\n            return;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        let current = this.layers;\n        if (!current ||\n            current.layer.depth > layer.depth ||\n            (current.layer.depth == layer.depth &&\n                current.layer.priority > layer.priority)) {\n            this.layers = {\n                layer,\n                next: current,\n            };\n            return;\n        }\n        while (current.next &&\n            (current.layer.depth < layer.depth ||\n                (current.layer.depth == layer.depth &&\n                    current.layer.priority <= layer.priority))) {\n            current = current.next;\n        }\n        const item = {\n            layer,\n            next: current.next,\n        };\n        current.next = item;\n    }\n    removeLayer(layer) {\n        if (!layer)\n            return false;\n        if (!this.layers)\n            return false;\n        // this.flags |= Flags.NEEDS_REDRAW;\n        this.flags |= Flags.CELL_CHANGED;\n        if (this.layers && this.layers.layer === layer) {\n            this.layers = this.layers.next;\n            return true;\n        }\n        let prev = this.layers;\n        let current = this.layers.next;\n        while (current) {\n            if (current.layer === layer) {\n                prev.next = current.next;\n                return true;\n            }\n            prev = current;\n            current = current.next;\n        }\n        return false;\n    }\n    // MEMORY\n    storeMemory() {\n        const memory = this.memory;\n        memory.tileFlags = this.tileFlags();\n        memory.tileMechFlags = this.tileMechFlags();\n        memory.layerFlags = this.layerFlags();\n        memory.cellFlags = this.flags;\n        memory.cellMechFlags = this.mechFlags;\n        memory.tile = this.topmostTile();\n        if (this.item) {\n            memory.item = this.item;\n            memory.itemQuantity = this.item.quantity;\n        }\n        else {\n            memory.item = null;\n            memory.itemQuantity = 0;\n        }\n        memory.actor = this.actor;\n        getAppearance(this, memory.mixer);\n        if (this.actor && this.isOrWasAnyKindOfVisible()) {\n            if (this.actor.rememberedInCell && this.actor.rememberedInCell !== this) {\n                // console.log(\"remembered in cell change\");\n                this.actor.rememberedInCell.storeMemory();\n                this.actor.rememberedInCell.flags |= Flags.NEEDS_REDRAW;\n            }\n            this.actor.rememberedInCell = this;\n        }\n    }\n}\nexport function make(tile) {\n    const cell = new Cell();\n    if (tile) {\n        cell.setTile(tile);\n    }\n    return cell;\n}\nMake.cell = make;\nexport function getAppearance(cell, dest) {\n    const memory = cell.memory.mixer;\n    memory.blackOut();\n    let needDistinctness = cell.tileMechFlags() & TileMechFlags.TM_VISUALLY_DISTINCT;\n    let current = cell.layers;\n    while (current) {\n        const layer = current.layer;\n        let alpha = layer.sprite.opacity || 100;\n        if (layer.depth == Depth.LIQUID) {\n            alpha = Utils.clamp(cell.liquidVolume || 0, 20, 100);\n        }\n        else if (layer.depth == Depth.GAS) {\n            alpha = Utils.clamp(cell.gasVolume || 0, 20, 100);\n        }\n        memory.drawSprite(layer.sprite, alpha);\n        current = current.next;\n    }\n    memory.fg.multiply(cell.light);\n    memory.bg.multiply(cell.light);\n    memory.bake(!cell.isAnyKindOfVisible()); // turns off dancing if not visible\n    if (needDistinctness) {\n        Color.separate(memory.fg, memory.bg);\n    }\n    dest.drawSprite(memory);\n    return true;\n}\n","import { utils as Utils, random, grid as Grid, fov as Fov, flag as Flag, path as Path, color as Color, colors as COLORS, config as CONFIG, data as DATA, make as Make, } from \"gw-utils\";\nimport * as Cell from \"./cell\";\nimport { Map as Flags, Cell as CellFlags, Tile as TileFlags, CellMech as CellMechFlags, TileMech as TileMechFlags, Depth as TileLayer, Layer as LayerFlags, } from \"./flags\";\nimport * as Layer from \"./layer\";\nexport { Flags };\nUtils.setDefaults(CONFIG, {\n    \"map.deepestLevel\": 99,\n});\nexport class Map {\n    constructor(w, h, opts = {}) {\n        this.locations = {};\n        this.config = {};\n        this._actors = null;\n        this._items = null;\n        this.flags = 0;\n        this.ambientLight = null;\n        this.lights = null;\n        this.events = {};\n        this._width = w;\n        this._height = h;\n        this.cells = Grid.make(w, h, () => new Cell.Cell());\n        this.locations = opts.locations || {};\n        this.config = Object.assign({}, opts);\n        this.config.tick = this.config.tick || 100;\n        this._actors = null;\n        this._items = null;\n        this.flags = Flag.from(Flags, Flags.MAP_DEFAULT, opts.flags);\n        this.ambientLight = null;\n        const ambient = opts.ambient || opts.ambientLight || opts.light;\n        if (ambient) {\n            this.ambientLight = Color.make(ambient);\n        }\n        this.lights = null;\n        this.id = opts.id;\n        this.events = opts.events || {};\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    async start() { }\n    clear() {\n        this.cells.forEach((c) => c.clear());\n        this.changed = true;\n    }\n    dump(fmt) {\n        this.cells.dump(fmt || ((c) => c.dump()));\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    eachCell(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    forEach(fn) {\n        this.cells.forEach((c, i, j) => fn(c, i, j, this));\n    }\n    forRect(x, y, w, h, fn) {\n        this.cells.forRect(x, y, w, h, (c, i, j) => fn(c, i, j, this));\n    }\n    eachNeighbor(x, y, fn, only4dirs = false) {\n        this.cells.eachNeighbor(x, y, (c, i, j) => fn(c, i, j, this), only4dirs);\n    }\n    count(fn) {\n        let count = 0;\n        this.forEach((c, x, y, g) => {\n            if (fn(c, x, y, g)) {\n                ++count;\n            }\n        });\n        return count;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return this.cells.isBoundaryXY(x, y);\n    }\n    get changed() {\n        return (this.flags & Flags.MAP_CHANGED) > 0;\n    }\n    set changed(v) {\n        if (v === true) {\n            this.flags |= Flags.MAP_CHANGED;\n        }\n        else if (v === false) {\n            this.flags &= ~Flags.MAP_CHANGED;\n        }\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).flags & flag;\n    }\n    hasCellMechFlag(x, y, flag) {\n        return this.cell(x, y).mechFlags & flag;\n    }\n    hasLayerFlag(x, y, flag) {\n        return this.cell(x, y).hasLayerFlag(flag);\n    }\n    hasTileFlag(x, y, flag) {\n        return this.cell(x, y).hasTileFlag(flag);\n    }\n    hasTileMechFlag(x, y, flag) {\n        return this.cell(x, y).hasTileMechFlag(flag);\n    }\n    redrawCell(cell) {\n        // if (cell.isAnyKindOfVisible()) {\n        cell.needsRedraw = true;\n        this.flags |= Flags.MAP_CHANGED;\n        // }\n    }\n    redrawXY(x, y) {\n        const cell = this.cell(x, y);\n        this.redrawCell(cell);\n    }\n    redrawAll() {\n        this.forEach((c) => {\n            // if (c.isAnyKindOfVisible()) {\n            c.needsRedraw = true;\n            // }\n        });\n        this.changed = true;\n    }\n    revealAll() {\n        this.forEach((c) => {\n            c.markRevealed();\n            c.storeMemory();\n        });\n        if (DATA.player) {\n            DATA.player.invalidateCostMap();\n        }\n    }\n    markRevealed(x, y) {\n        if (!this.cell(x, y).markRevealed())\n            return;\n        if (DATA.player) {\n            DATA.player.invalidateCostMap();\n        }\n    }\n    isVisible(x, y) {\n        return this.cell(x, y).isVisible();\n    }\n    isAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isAnyKindOfVisible();\n    }\n    isOrWasAnyKindOfVisible(x, y) {\n        return this.cell(x, y).isOrWasAnyKindOfVisible();\n    }\n    get lightChanged() {\n        return (this.flags & Flags.MAP_STABLE_LIGHTS) == 0;\n    }\n    set lightChanged(v) {\n        if (v) {\n            this.flags &= ~Flags.MAP_STABLE_LIGHTS;\n        }\n        else {\n            this.flags |= Flags.MAP_STABLE_LIGHTS;\n        }\n    }\n    get glowLightChanged() {\n        return (this.flags & Flags.MAP_STABLE_GLOW_LIGHTS) == 0;\n    }\n    set glowLightChanged(v) {\n        if (v) {\n            this.flags &= ~(Flags.MAP_STABLE_GLOW_LIGHTS | Flags.MAP_STABLE_LIGHTS);\n        }\n        else {\n            this.flags |= Flags.MAP_STABLE_GLOW_LIGHTS;\n        }\n    }\n    setFlag(flag) {\n        this.flags |= flag;\n        this.changed = true;\n    }\n    setFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags |= mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((c) => c.setFlags(cellFlag, cellMechFlag));\n        }\n        this.changed = true;\n    }\n    clearFlag(flag) {\n        this.flags &= ~flag;\n        this.changed = true;\n    }\n    clearFlags(mapFlag = 0, cellFlag = 0, cellMechFlag = 0) {\n        if (mapFlag) {\n            this.flags &= ~mapFlag;\n        }\n        if (cellFlag || cellMechFlag) {\n            this.forEach((cell) => cell.clearFlags(cellFlag, cellMechFlag));\n        }\n        this.changed = true;\n    }\n    // setCellFlag(x: number, y: number, flag: number) {\n    //   this.cell(x, y).flags |= flag;\n    // }\n    setCellFlags(x, y, cellFlag = 0, cellMechFlag = 0) {\n        this.cell(x, y).setFlags(cellFlag, cellMechFlag);\n        this.flags |= Flags.MAP_CHANGED;\n    }\n    clearCellFlags(x, y, cellFlags = 0, cellMechFlags = 0) {\n        this.cell(x, y).clearFlags(cellFlags, cellMechFlags);\n        this.changed = true;\n    }\n    hasTile(x, y, tile) {\n        return this.cells[x][y].hasTile(tile);\n    }\n    layerFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].layerFlags(limitToPlayerKnowledge);\n    }\n    tileFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileFlags(limitToPlayerKnowledge);\n    }\n    tileMechFlags(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].tileMechFlags(limitToPlayerKnowledge);\n    }\n    tileWithFlag(x, y, flag = 0) {\n        return this.cells[x][y].tileWithFlag(flag);\n    }\n    tileWithMechFlag(x, y, mechFlag = 0) {\n        return this.cells[x][y].tileWithMechFlag(mechFlag);\n    }\n    hasKnownTileFlag(x, y, flagMask = 0) {\n        return this.cells[x][y].memory.tileFlags & flagMask;\n    }\n    // hasTileInGroup(x, y, ...groups) { return this.cells[x][y].hasTileInGroup(...groups); }\n    // discoveredTileFlags(x: number, y: number) {\n    //   return this.cells[x][y].discoveredTileFlags();\n    // }\n    // hasDiscoveredTileFlag(x: number, y: number, flag = 0) {\n    //   return this.cells[x][y].hasDiscoveredTileFlag(flag);\n    // }\n    isClear(x, y) {\n        return this.cells[x][y].isClear();\n    }\n    isEmpty(x, y) {\n        return this.cells[x][y].isEmpty();\n    }\n    isObstruction(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isObstruction(limitToPlayerKnowledge);\n    }\n    isDoorway(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isDoorway(limitToPlayerKnowledge);\n    }\n    isSecretDoorway(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isSecretDoorway(limitToPlayerKnowledge);\n    }\n    isLiquid(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isLiquid(limitToPlayerKnowledge);\n    }\n    hasGas(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].hasGas(limitToPlayerKnowledge);\n    }\n    blocksPathing(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].blocksPathing(limitToPlayerKnowledge);\n    }\n    blocksVision(x, y) {\n        return this.cells[x][y].blocksVision();\n    }\n    isMoveableNow(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isMoveableNow(limitToPlayerKnowledge);\n    }\n    isWalkableNow(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].isWalkableNow(limitToPlayerKnowledge);\n    }\n    canBeWalked(x, y, limitToPlayerKnowledge = false) {\n        return this.cells[x][y].canBeWalked(limitToPlayerKnowledge);\n    }\n    topmostTile(x, y, skipGas = false) {\n        return this.cells[x][y].topmostTile(skipGas);\n    }\n    tileFlavor(x, y) {\n        return this.cells[x][y].tileFlavor();\n    }\n    setTile(x, y, tileId, volume = 0) {\n        return this.cell(x, y).setTile(tileId, volume, this);\n    }\n    clearCell(x, y) {\n        this.cell(x, y).clear();\n    }\n    clearCellLayersWithFlags(x, y, tileFlags, tileMechFlags = 0) {\n        const cell = this.cell(x, y);\n        cell.clearLayersWithFlags(tileFlags, tileMechFlags);\n    }\n    clearCellLayers(x, y, nullLiquid = true, nullSurface = true, nullGas = true) {\n        this.changed = true;\n        return this.cell(x, y).clearLayers(nullLiquid, nullSurface, nullGas);\n    }\n    fill(tileId, boundaryTile) {\n        let i, j;\n        if (boundaryTile === undefined) {\n            boundaryTile = tileId;\n        }\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                if (this.isBoundaryXY(i, j)) {\n                    this.setTile(i, j, boundaryTile);\n                }\n                else {\n                    this.setTile(i, j, tileId);\n                }\n            }\n        }\n    }\n    neighborCount(x, y, matchFn, only4dirs = false) {\n        let count = 0;\n        this.eachNeighbor(x, y, (...args) => {\n            if (matchFn(...args))\n                ++count;\n        }, only4dirs);\n        return count;\n    }\n    walkableArcCount(x, y) {\n        if (!this.hasXY(x, y))\n            return -1;\n        return this.cells.arcCount(x, y, (c) => c.isWalkableNow());\n    }\n    diagonalBlocked(x1, y1, x2, y2, limitToPlayerKnowledge = false) {\n        if (x1 == x2 || y1 == y2) {\n            return false; // If it's not a diagonal, it's not diagonally blocked.\n        }\n        if (this.isObstruction(x1, y2, limitToPlayerKnowledge)) {\n            return true;\n        }\n        if (this.isObstruction(x2, y1, limitToPlayerKnowledge)) {\n            return true;\n        }\n        return false;\n    }\n    fillCostGrid(costGrid, costFn) {\n        costFn =\n            costFn || ((c) => (c.isWalkableNow() ? 1 : Path.OBSTRUCTION));\n        this.cells.forEach((cell, i, j) => {\n            if (cell.isClear()) {\n                costGrid[i][j] = Path.OBSTRUCTION;\n            }\n            else {\n                costGrid[i][j] = costFn(cell, i, j, this);\n            }\n        });\n    }\n    matchingNeighbor(x, y, matcher, only4dirs = false) {\n        const maxIndex = only4dirs ? 4 : 8;\n        for (let d = 0; d < maxIndex; ++d) {\n            const dir = Utils.DIRS[d];\n            const i = x + dir[0];\n            const j = y + dir[1];\n            if (this.hasXY(i, j)) {\n                if (matcher(this.cells[i][j], i, j, this))\n                    return [i, j];\n            }\n        }\n        return [-1, -1];\n    }\n    matchingLocNear(x, y, ...args) {\n        let i, j, k;\n        let matcher = args[0];\n        let opts = args[1] || {};\n        const arg = args[0];\n        if (typeof arg !== \"function\") {\n            opts = arg || args[1];\n            matcher = opts.match || Utils.TRUE;\n        }\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const deterministic = opts.deterministic || false;\n        const candidateLocs = [];\n        // count up the number of candidate locations\n        for (k = 0; k < Math.max(this.width, this.height) && !candidateLocs.length; k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (!this.hasXY(i, j))\n                        continue;\n                    const cell = this.cell(i, j);\n                    // if ((i == x-k || i == x+k || j == y-k || j == y+k)\n                    if (Math.ceil(Utils.distanceBetween(x, y, i, j)) == k &&\n                        (!blockingMap || !blockingMap[i][j]) &&\n                        matcher(cell, i, j, this) &&\n                        (!forbidLiquid || !cell.liquid) &&\n                        (hallwaysAllowed || this.walkableArcCount(i, j) < 2)) {\n                        candidateLocs.push([i, j]);\n                    }\n                }\n            }\n        }\n        if (candidateLocs.length == 0) {\n            return [-1, -1];\n        }\n        // and pick one\n        let randIndex = 0;\n        if (deterministic) {\n            randIndex = Math.floor(candidateLocs.length / 2);\n        }\n        else {\n            randIndex = random.number(candidateLocs.length);\n        }\n        return candidateLocs[randIndex];\n    }\n    randomMatchingLoc(opts = {}) {\n        let x;\n        let y;\n        let cell;\n        if (typeof opts === \"function\") {\n            opts = { match: opts };\n        }\n        const sequence = random.sequence(this.width * this.height);\n        const hallwaysAllowed = opts.hallways || false;\n        const blockingMap = opts.blockingMap || null;\n        const forbidLiquid = opts.liquids === false;\n        const matcher = opts.match || Utils.TRUE;\n        const forbidCellFlags = opts.forbidCellFlags || 0;\n        const forbidTileFlags = opts.forbidTileFlags || 0;\n        const forbidTileMechFlags = opts.forbidTileMechFlags || 0;\n        const tile = opts.tile || null;\n        let success = false;\n        let index = 0;\n        while (!success && index < sequence.length) {\n            const v = sequence[index];\n            x = v % this.width;\n            y = Math.floor(v / this.width);\n            cell = this.cell(x, y);\n            if ((!blockingMap || !blockingMap[x][y]) &&\n                (!tile || cell.hasTile(tile)) &&\n                (!forbidLiquid || !cell.liquid) &&\n                (!forbidCellFlags || !(cell.flags & forbidCellFlags)) &&\n                (!forbidTileFlags || !cell.hasTileFlag(forbidTileFlags)) &&\n                (!forbidTileMechFlags || !cell.hasTileMechFlag(forbidTileMechFlags)) &&\n                (hallwaysAllowed || this.walkableArcCount(x, y) < 2) &&\n                matcher(cell, x, y, this)) {\n                success = true;\n            }\n            ++index;\n        }\n        if (!success) {\n            // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => FAIL');\n            return [-1, -1];\n        }\n        // map.debug('randomMatchingLocation', dungeonType, liquidType, terrainType, ' => ', x, y);\n        return [x, y];\n    }\n    // LIGHT\n    hasVisibleLight(x, y) {\n        return this.cell(x, y).hasVisibleLight();\n    }\n    addStaticLight(x, y, light) {\n        const info = { x, y, light, next: this.lights };\n        this.lights = info;\n        this.glowLightChanged = true;\n        return info;\n    }\n    removeStaticLight(x, y, light) {\n        let prev = this.lights;\n        if (!prev)\n            return;\n        function matches(info) {\n            if (info.x != x || info.y != y)\n                return false;\n            return !light || light === info.light;\n        }\n        this.glowLightChanged = true;\n        while (prev && matches(prev)) {\n            prev = this.lights = prev.next;\n        }\n        if (!prev)\n            return;\n        let current = prev.next;\n        while (current) {\n            if (matches(current)) {\n                prev.next = current.next;\n            }\n            else {\n                prev = current;\n            }\n            current = current.next;\n        }\n    }\n    eachStaticLight(fn) {\n        Utils.eachChain(this.lights, (info) => fn(info.light, info.x, info.y));\n        this.eachCell((cell, x, y) => {\n            for (let tile of cell.tiles()) {\n                if (tile.light) {\n                    fn(tile.light, x, y);\n                }\n            }\n        });\n    }\n    eachDynamicLight(fn) {\n        Utils.eachChain(this._actors, (actor) => {\n            if (actor.light)\n                fn(actor.light, actor.x, actor.y);\n        });\n    }\n    // Layers\n    addFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addLayer(anim);\n        anim.x = x;\n        anim.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    moveFx(x, y, anim) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeLayer(anim);\n        this.redrawCell(oldCell);\n        cell.addLayer(anim);\n        this.redrawCell(cell);\n        anim.x = x;\n        anim.y = y;\n        return true;\n    }\n    removeFx(anim) {\n        const oldCell = this.cell(anim.x, anim.y);\n        oldCell.removeLayer(anim);\n        this.redrawCell(oldCell);\n        this.flags |= Flags.MAP_CHANGED;\n        return true;\n    }\n    // ACTORS\n    // will return the PLAYER if the PLAYER is at (x, y).\n    actorAt(x, y) {\n        // creature *\n        if (!this.hasXY(x, y))\n            return null;\n        const cell = this.cell(x, y);\n        return cell.actor;\n    }\n    addActor(x, y, theActor) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.actor) {\n            return false;\n        }\n        cell.actor = theActor; // adjusts the layer\n        theActor.next = this._actors;\n        this._actors = theActor;\n        const flag = theActor === DATA.player ? CellFlags.HAS_PLAYER : CellFlags.HAS_MONSTER;\n        cell.flags |= flag;\n        // if (theActor.flags & Flags.Actor.MK_DETECTED)\n        // {\n        // \tcell.flags |= CellFlags.MONSTER_DETECTED;\n        // }\n        if (theActor.light) {\n            this.lightChanged = true;\n        }\n        // If the player moves or an actor that blocks vision and the cell is visible...\n        // -- we need to update the FOV\n        if (theActor.isPlayer() ||\n            (cell.isAnyKindOfVisible() && theActor.blocksVision())) {\n            this.flags |= Flags.MAP_FOV_CHANGED;\n        }\n        theActor.x = x;\n        theActor.y = y;\n        this.redrawCell(cell);\n        return true;\n    }\n    addActorNear(x, y, theActor) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return !theActor.avoidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the actor.');\n            return false;\n        }\n        return this.addActor(loc[0], loc[1], theActor);\n    }\n    moveActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        this.removeActor(actor);\n        if (!this.addActor(x, y, actor)) {\n            this.addActor(actor.x, actor.y, actor);\n            return false;\n        }\n        if (actor.light) {\n            this.lightChanged = true;\n        }\n        return true;\n    }\n    removeActor(actor) {\n        if (!this.hasXY(actor.x, actor.y))\n            return false;\n        const cell = this.cell(actor.x, actor.y);\n        if (cell.actor === actor) {\n            cell.actor = null;\n            Utils.removeFromChain(this, \"actors\", actor);\n            if (actor.light) {\n                this.lightChanged = true;\n            }\n            // If the player moves or an actor that blocks vision and the cell is visible...\n            // -- we need to update the FOV\n            if (actor.isPlayer() ||\n                (cell.isAnyKindOfVisible() && actor.blocksVision())) {\n                this.flags |= Flags.MAP_FOV_CHANGED;\n            }\n            this.redrawCell(cell);\n            return true;\n        }\n        return false;\n    }\n    deleteActorAt(x, y) {\n        const actor = this.actorAt(x, y);\n        if (!actor)\n            return false;\n        this.removeActor(actor);\n        actor.delete();\n        return true;\n    }\n    // dormantAt(x: number, y: number) {  // creature *\n    // \tif (!(this.cell(x, y).flags & CellFlags.HAS_DORMANT_MONSTER)) {\n    // \t\treturn null;\n    // \t}\n    // \treturn this.dormantActors.find( (m) => m.x == x && m.y == y );\n    // }\n    //\n    // addDormant(x, y, actor) {\n    // \ttheActor.x = x;\n    // \ttheActor.y = y;\n    // \tthis.dormant.add(theActor);\n    // \tcell.flags |= (CellFlags.HAS_DORMANT_MONSTER);\n    // \tthis.flags |= Flags.MAP_CHANGED;\n    // \treturn true;\n    // }\n    //\n    // removeDormant(actor) {\n    // \tconst cell = this.cell(actor.x, actor.y);\n    // \tcell.flags &= ~(CellFlags.HAS_DORMANT_MONSTER);\n    // \tcell.flags |= CellFlags.NEEDS_REDRAW;\n    // \tthis.flags |= Flags.MAP_CHANGED;\n    // \tthis.dormant.remove(actor);\n    // }\n    // ITEMS\n    itemAt(x, y) {\n        const cell = this.cell(x, y);\n        return cell.item;\n    }\n    addItem(x, y, theItem) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.item) {\n            // GW.ui.message(colors.badMessageColor, 'There is already an item there.');\n            return false;\n        }\n        theItem.x = x;\n        theItem.y = y;\n        cell.item = theItem; // adjusts the layers\n        theItem.next = this._items;\n        this._items = theItem;\n        if (theItem.light) {\n            this.lightChanged = true;\n        }\n        this.redrawCell(cell);\n        if (theItem.isDetected() || CONFIG.D_ITEM_OMNISCIENCE) {\n            cell.flags |= CellFlags.ITEM_DETECTED;\n        }\n        return true;\n    }\n    addItemNear(x, y, theItem) {\n        const loc = this.matchingLocNear(x, y, (cell) => {\n            return !theItem.forbidsCell(cell);\n        });\n        if (!loc || loc[0] < 0) {\n            // GW.ui.message(colors.badMessageColor, 'There is no place to put the item.');\n            return false;\n        }\n        return this.addItem(loc[0], loc[1], theItem);\n    }\n    removeItem(theItem) {\n        const x = theItem.x;\n        const y = theItem.y;\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        if (cell.item !== theItem)\n            return false;\n        cell.item = null;\n        Utils.removeFromChain(this, \"items\", theItem);\n        if (theItem.light) {\n            this.lightChanged = true;\n        }\n        cell.flags &= ~(CellFlags.HAS_ITEM | CellFlags.ITEM_DETECTED);\n        this.redrawCell(cell);\n        return true;\n    }\n    // // PROMOTE\n    //\n    // async promote(x, y, mechFlag) {\n    // \tif (this.hasTileMechFlag(x, y, mechFlag)) {\n    // \t\tconst cell = this.cell(x, y);\n    // \t\tfor (let tile of cell.tiles()) {\n    // \t\t\tif (tile.mechFlags & mechFlag) {\n    // \t\t\t\tawait tile.promote(this, x, y, false);\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // }\n    gridDisruptsWalkability(blockingGrid, opts = {}) {\n        const walkableGrid = Grid.alloc(this.width, this.height);\n        let disrupts = false;\n        const gridOffsetX = opts.gridOffsetX || 0;\n        const gridOffsetY = opts.gridOffsetY || 0;\n        const bounds = opts.bounds || null; // TODO - Where is this used ???\n        // Get all walkable locations after lake added\n        this.cells.forEach((cell, i, j) => {\n            if (bounds && !bounds.contains(i, j))\n                return; // outside bounds\n            const blockingX = i + gridOffsetX;\n            const blockingY = j + gridOffsetY;\n            if (cell.isClear()) {\n                return; // not walkable\n            }\n            else if (cell.hasTileFlag(TileFlags.T_HAS_STAIRS)) {\n                if (blockingGrid.get(blockingX, blockingY)) {\n                    disrupts = true;\n                }\n                else {\n                    walkableGrid[i][j] = 1;\n                }\n            }\n            else if (cell.canBeWalked()) {\n                if (blockingGrid.get(blockingX, blockingY))\n                    return;\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        Grid.free(walkableGrid);\n        return disrupts;\n    }\n    // FOV\n    // Returns a boolean grid indicating whether each square is in the field of view of (xLoc, yLoc).\n    // forbiddenTileFlags is the set of terrain flags that will block vision (but the blocking cell itself is\n    // illuminated); forbiddenCellFlags is the set of map flags that will block vision.\n    // If cautiousOnWalls is set, we will not illuminate blocking tiles unless the tile one space closer to the origin\n    // is visible to the player; this is to prevent lights from illuminating a wall when the player is on the other\n    // side of the wall.\n    calcFov(grid, x, y, maxRadius, forbiddenCellFlags = 0, forbiddenLayerFlags = LayerFlags.L_BLOCKS_VISION) {\n        maxRadius = maxRadius || this.width + this.height;\n        grid.fill(0);\n        const map = this;\n        const FOV = new Fov.FOV({\n            isBlocked(i, j) {\n                return !!(!grid.hasXY(i, j) ||\n                    map.hasCellFlag(i, j, forbiddenCellFlags) ||\n                    map.hasLayerFlag(i, j, forbiddenLayerFlags));\n            },\n            calcRadius(x, y) {\n                return Math.sqrt(x ** 2 + y ** 2);\n            },\n            setVisible(x, y) {\n                grid[x][y] = 1;\n            },\n            hasXY(x, y) {\n                return grid.hasXY(x, y);\n            },\n        });\n        return FOV.calculate(x, y, maxRadius);\n    }\n    losFromTo(a, b) {\n        if (Utils.equalsXY(a, b))\n            return true;\n        const line = Utils.getLine(a.x, a.y, b.x, b.y);\n        if (!line.length)\n            return false;\n        return !line.some((loc) => {\n            return this.blocksVision(loc[0], loc[1]);\n        });\n    }\n    // MEMORIES\n    storeMemory(x, y) {\n        const cell = this.cell(x, y);\n        cell.storeMemory();\n    }\n    storeMemories() {\n        let x, y;\n        for (x = 0; x < this.width; ++x) {\n            for (y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.flags & CellFlags.ANY_KIND_OF_VISIBLE) {\n                    this.storeMemory(x, y);\n                }\n                cell.flags &= CellFlags.PERMANENT_CELL_FLAGS;\n                cell.mechFlags &= CellMechFlags.PERMANENT_MECH_FLAGS;\n            }\n        }\n    }\n    // TICK\n    async tick() {\n        // map.debug(\"tick\");\n        this.resetCellEvents();\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cells[x][y];\n                await cell.activate(\"tick\", { map: this, x, y, cell, safe: true });\n            }\n        }\n        updateLiquid(this);\n        updateGas(this);\n    }\n    resetCellEvents() {\n        this.forEach((c) => (c.mechFlags &= ~(CellMechFlags.EVENT_FIRED_THIS_TURN | CellMechFlags.EVENT_PROTECTED)));\n    }\n}\nexport function make(w, h, opts = {}, wall) {\n    if (typeof opts === \"string\") {\n        opts = { tile: opts };\n        if (wall) {\n            opts.wall = wall;\n        }\n    }\n    const map = new Map(w, h, opts);\n    const floor = opts.tile || opts.floor || opts.floorTile;\n    const boundary = opts.boundary || opts.wall || opts.wallTile;\n    if (floor) {\n        map.fill(floor, boundary);\n    }\n    if (!DATA.map) {\n        DATA.map = map;\n    }\n    return map;\n}\nMake.map = make;\nif (!COLORS.cursor) {\n    Color.install(\"cursor\", COLORS.yellow);\n}\nif (!COLORS.path) {\n    Color.install(\"path\", COLORS.gold);\n}\nexport function getCellAppearance(map, x, y, dest) {\n    dest.blackOut();\n    if (!map.hasXY(x, y))\n        return;\n    const cell = map.cell(x, y);\n    if (cell.isAnyKindOfVisible() &&\n        cell.flags & (CellFlags.CELL_CHANGED | CellFlags.NEEDS_REDRAW)) {\n        Cell.getAppearance(cell, dest);\n    }\n    else {\n        // if (cell.isRevealed()) {\n        dest.drawSprite(cell.memory.mixer);\n    }\n    if (cell.isVisible()) {\n        // keep here to allow for games that do not use fov to work\n    }\n    else if (!cell.isRevealed()) {\n        if (!cell.isAnyKindOfVisible())\n            dest.blackOut();\n    }\n    else if (!cell.isAnyKindOfVisible()) {\n        dest.bg.mix(COLORS.black, 30);\n        dest.fg.mix(COLORS.black, 30);\n    }\n    let needDistinctness = false;\n    if (cell.flags & (CellFlags.IS_CURSOR | CellFlags.IS_IN_PATH)) {\n        const highlight = cell.flags & CellFlags.IS_CURSOR ? COLORS.cursor : COLORS.path;\n        if (cell.hasTileMechFlag(TileMechFlags.TM_INVERT_WHEN_HIGHLIGHTED)) {\n            Color.swap(dest.fg, dest.bg);\n        }\n        else {\n            // if (!GAME.trueColorMode || !dest.needDistinctness) {\n            // dest.fg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n            // }\n            dest.bg.mix(highlight, CONFIG.cursorPathIntensity || 20);\n        }\n        needDistinctness = true;\n    }\n    if (needDistinctness) {\n        Color.separate(dest.fg, dest.bg);\n    }\n    // dest.bake();\n}\nexport function addText(map, x, y, text, fg, bg, layer) {\n    for (let ch of text) {\n        const sprite = Layer.make({\n            ch,\n            fg,\n            bg,\n            depth: layer || TileLayer.GROUND,\n            priority: 200,\n        }); // on top of ground tiles\n        const cell = map.cell(x++, y);\n        cell.addLayer(sprite);\n    }\n}\nexport function updateGas(map) {\n    if (map.flags & Flags.MAP_NO_GAS)\n        return;\n    const newVolume = Grid.alloc(map.width, map.height);\n    map.forEach((c, x, y) => {\n        if (c.hasLayerFlag(LayerFlags.L_BLOCKS_GAS))\n            return;\n        let gas = c.gasTile;\n        let highest = c.gasVolume;\n        let sum = c.gasVolume || 0;\n        let count = 1;\n        map.eachNeighbor(x, y, (n, _i, _j) => {\n            if (n.hasLayerFlag(LayerFlags.L_BLOCKS_GAS))\n                return;\n            ++count;\n            sum += n.gasVolume;\n            if (n.gasVolume > highest) {\n                gas = n.gasTile;\n                highest = n.gasVolume;\n            }\n        });\n        if (sum <= 0)\n            return;\n        const newVol = Math.floor(sum / count);\n        if (c.gasTile != gas) {\n            c.setTile(gas, 0, map); // volume = 0 to start, will change later\n        }\n        newVolume[x][y] += newVol;\n        const rem = sum - count * Math.floor(sum / count);\n        if (rem && random.number(count) < rem) {\n            newVolume[x][y] += 1;\n        }\n        // disperses\n        if (newVolume[x][y] > 0 && gas.dissipate) {\n            if (gas.dissipate > 10000) {\n                newVolume[x][y] -= Math.floor(gas.dissipate / 10000);\n                if (random.chance(gas.dissipate % 10000, 10000)) {\n                    newVolume[x][y] -= 1;\n                }\n            }\n            else if (random.chance(gas.dissipate, 10000)) {\n                newVolume[x][y] -= 1;\n                // console.log(\"dissipate\", reduce, x, y, newVolume[x][y]);\n            }\n        }\n    });\n    // newVolume.dump();\n    let hasGas = false;\n    newVolume.forEach((v, i, j) => {\n        const cell = map.cell(i, j);\n        if (v > 0) {\n            hasGas = true;\n            if (cell.gas && cell.gasVolume !== v) {\n                cell.gasVolume = v;\n                map.redrawCell(cell);\n            }\n        }\n        else if (cell.gas) {\n            cell.clearLayer(TileLayer.GAS);\n            map.redrawCell(cell);\n        }\n    });\n    if (hasGas) {\n        map.flags &= ~Flags.MAP_NO_GAS;\n    }\n    else {\n        map.flags |= Flags.MAP_NO_GAS;\n    }\n    map.changed = true;\n    Grid.free(newVolume);\n}\nexport function updateLiquid(map) {\n    if (map.flags & Flags.MAP_NO_LIQUID)\n        return;\n    const newVolume = Grid.alloc(map.width, map.height);\n    map.forEach((c, x, y) => {\n        if (c.hasLayerFlag(LayerFlags.L_BLOCKS_LIQUID))\n            return;\n        let liquid = c.liquidTile;\n        let highest = c.liquidVolume;\n        let sum = c.liquidVolume || 0;\n        let count = 1;\n        map.eachNeighbor(x, y, (n, _i, _j) => {\n            if (n.hasLayerFlag(LayerFlags.L_BLOCKS_LIQUID))\n                return;\n            ++count;\n            sum += n.liquidVolume;\n            if (n.liquidVolume > highest) {\n                liquid = n.liquidTile;\n                highest = n.liquidVolume;\n            }\n        });\n        if (sum <= 0)\n            return;\n        const newVol = Math.floor(sum / count);\n        if (c.liquidTile != liquid) {\n            c.setTile(liquid, 0, map); // volume = 0 to start, will change later\n        }\n        newVolume[x][y] += newVol;\n        const rem = sum - count * Math.floor(sum / count);\n        if (rem && random.number(count) < rem) {\n            newVolume[x][y] += 1;\n        }\n        // disperses\n        if (newVolume[x][y] > 0 && liquid.dissipate) {\n            if (liquid.dissipate > 10000) {\n                newVolume[x][y] -= Math.floor(liquid.dissipate / 10000);\n                if (random.chance(liquid.dissipate % 10000, 10000)) {\n                    newVolume[x][y] -= 1;\n                }\n            }\n            else if (random.chance(liquid.dissipate, 10000)) {\n                newVolume[x][y] -= 1;\n                // console.log(\"dissipate\", reduce, x, y, newVolume[x][y]);\n            }\n        }\n    });\n    // newVolume.dump();\n    let hasLiquid = false;\n    newVolume.forEach((v, i, j) => {\n        const cell = map.cell(i, j);\n        if (v > 0) {\n            hasLiquid = true;\n            if (cell.liquid && cell.liquidVolume !== v) {\n                cell.liquidVolume = v;\n                map.redrawCell(cell);\n            }\n        }\n        else if (cell.liquid) {\n            cell.clearLayer(TileLayer.LIQUID);\n            map.redrawCell(cell);\n        }\n    });\n    if (hasLiquid) {\n        map.flags &= ~Flags.MAP_NO_LIQUID;\n    }\n    else {\n        map.flags |= Flags.MAP_NO_LIQUID;\n    }\n    map.changed = true;\n    Grid.free(newVolume);\n}\n","import * as Tile from \"./tile\";\n// These are the minimal set of tiles to make the diggers work\nTile.install(\"NULL\", {\n    ch: \"\\u2205\",\n    fg: \"white\",\n    bg: \"black\",\n    flags: \"T_OBSTRUCTS_PASSABILITY\",\n    name: \"eerie nothingness\",\n    article: \"an\",\n    priority: 0,\n});\nTile.install(\"FLOOR\", {\n    ch: \"\\u00b7\",\n    fg: [30, 30, 30, 20, 0, 0, 0],\n    bg: [2, 2, 10, 0, 2, 2, 0],\n    priority: 10,\n    article: \"the\",\n});\nTile.install(\"DOOR\", {\n    ch: \"+\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: \"T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, TM_VISUALLY_DISTINCT\",\n    article: \"a\",\n    activates: {\n        enter: { tile: \"DOOR_OPEN\" },\n        open: { tile: \"DOOR_OPEN_ALWAYS\" },\n    },\n});\nTile.install(\"DOOR_OPEN\", \"DOOR\", {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: \"!L_BLOCKS_ITEMS, !L_BLOCKS_VISION\",\n    name: \"open door\",\n    article: \"an\",\n    activates: {\n        tick: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n        enter: null,\n        open: null,\n        close: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n    },\n});\nTile.install(\"DOOR_OPEN_ALWAYS\", \"DOOR_OPEN\", {\n    activates: {\n        tick: null,\n        close: { tile: \"DOOR\", flags: \"DFF_SUPERPRIORITY, DFF_ONLY_IF_EMPTY\" },\n    },\n});\nTile.install(\"BRIDGE\", {\n    ch: \"=\",\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: \"SURFACE\",\n    flags: \"T_BRIDGE, TM_VISUALLY_DISTINCT\",\n    article: \"a\",\n});\nTile.install(\"UP_STAIRS\", {\n    ch: \"<\",\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: \"T_UP_STAIRS, L_BLOCKED_BY_STAIRS, TM_VISUALLY_DISTINCT, TM_LIST_IN_SIDEBAR\",\n    name: \"upward staircase\",\n    article: \"an\",\n});\nTile.install(\"DOWN_STAIRS\", {\n    ch: \">\",\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: \"T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, TM_VISUALLY_DISTINCT, TM_LIST_IN_SIDEBAR\",\n    name: \"downward staircase\",\n    article: \"a\",\n});\nTile.install(\"WALL\", {\n    ch: \"#\",\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: \"L_BLOCKS_EVERYTHING\",\n    article: \"a\",\n    name: \"stone wall\",\n    desc: \"A wall made from rough cut stone.\",\n    flavor: \"a rough stone wall\",\n});\nTile.install(\"LAKE\", {\n    ch: \"~\",\n    fg: [5, 8, 20, 10, 0, 4, 15, true],\n    bg: [10, 15, 41, 6, 5, 5, 5, true],\n    priority: 50,\n    flags: \"T_DEEP_WATER\",\n    name: \"deep water\",\n    article: \"the\",\n});\n"],"names":["Depth","Fl","Flag","fl","Layer","Activation","Tile","TileMech","Cell","CellMech","Map","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_IS_WALL","DFF_BLOCKED_BY_ITEMS","DFF_BLOCKED_BY_ACTORS","DFF_NULL_SURFACE","DFF_NULL_LIQUID","DFF_NULL_GAS","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","TM_PROMOTES_WITH_KEY","TM_PROMOTES_WITHOUT_KEY","TM_PROMOTES_ON_STEP","TM_PROMOTES_ON_ITEM_REMOVE","TM_PROMOTES_ON_SACRIFICE_ENTRY","TM_PROMOTES_ON_ELECTRICITY","TM_PROMOTES_ON_PLAYER_ENTRY","REVEALED","MAGIC_MAPPED","ITEM_DETECTED","HAS_ITEM","HAS_DORMANT_MONSTER","HAS_STAIRS","STABLE_MEMORY","IMPREGNABLE","VISIBLE","CLAIRVOYANT_VISIBLE","TELEPATHIC_VISIBLE","HAS_PLAYER","HAS_MONSTER","WAS_VISIBLE","WAS_CLAIRVOYANT_VISIBLE","WAS_TELEPATHIC_VISIBLE","IN_FOV","NEEDS_REDRAW","CELL_CHANGED","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_TRAP_FREE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","MAP_STABLE_LIGHTS","MAP_STABLE_GLOW_LIGHTS","MAP_FOV_CHANGED","config","CONFIG","light","INTENSITY_DARK","LIGHT_COMPONENTS","Color","make","Light","[object Object]","color","range","fadeTo","pass","this","passThroughActors","id","from","radius","Range","other","copy","intensity","map","x","y","maintainShadows","isMinersLight","k","lightMultiplier","value","outerRadius","Math","ceil","bake","dispelShadows","fadeToPercent","grid","Grid","alloc","width","height","calcFov","Flags.Cell","HAS_ACTOR","Flags.Layer","overlappedFieldOfView","forCircle","v","i","j","cell","floor","Utils","distanceBetween","flags","IS_IN_SHADOW","ANY_KIND_OF_VISIBLE","free","max","args","length","cached","lights","split","t","trim","Number","parseInt","Array","isArray","Error","install","source","recordOldLights","eachCell","oldLight","lightChanged","zeroOutLights","ambientLight","_i","_j","recordGlowLights","glowLight","restoreGlowLights","ERROR","JSON","stringify","arg","Object","entries","forEach","name","info","glowLightChanged","eachStaticLight","paint","eachDynamicLight","CELL_LIT","CELL_DARK","some","isDark","updateDisplayDetail","PLAYER","DATA","player","PLAYERS_LIGHT","darkColor","priority","depth","layer","sprite","GW.make","Light.make","GW.utils","first","GW.flag","Flags","layerFlags","TileEvent","opts","fn","tile","item","chance","volume","spread","decrement","matchTile","needs","next","message","lightFlare","flare","flashColor","flash","messageDisplayed","emit","tileEvent","activations","DF_NONE","async","spawn","activation","ctx","feat","undefined","safe","hasCellMechFlag","CellMechFlags","EVENT_FIRED_THIS_TURN","DFF_ALWAYS_FIRE","refreshCell","DFF_NO_REDRAW_CELL","abortIfBlocking","DFF_ABORT_IF_BLOCKS_MAP","isVisible","Msg","add","Tile.tiles","Make","blocking","DFF_PERMIT_BLOCKING","blocksPathing","blocksMove","DFF_TREAT_AS_BLOCKING","spawnMap","didSomething","computeSpawnMap","gridDisruptsPassability","bounds","DFF_EVACUATE_CREATURES","evacuateCreatures","DFF_EVACUATE_ITEMS","evacuateItems","DFF_NULLIFY_CELL","nullifyCells","spawnTiles","delete","DFF_PROTECTED","mechFlags","EVENT_PROTECTED","Data","gameHasEnded","actor","tiles","applyInstantEffects","Events","DFF_SUBSEQ_ALWAYS","DFF_SUBSEQ_EVERYWHERE","TileFlags","updateMapToShoreThisTurn","redrawXY","changed","DFF_NO_MARK_FIRED","setCellFlags","cellIsOk","hasXY","DFF_BUILD_IN_WALLS","isWall","DFF_MUST_TOUCH_WALLS","ok","eachNeighbor","c","DFF_NO_TOUCH_WALLS","containsXY","hasTile","hasLayerFlag","LayerFlags","dir","x2","y2","madeChange","startProb","probDec","DFF_SPREAD_CIRCLE","random","updateCircle","_v","dist","prob","DFF_SPREAD_LINE","DIRS","number","accomplishedSomething","blockedByOtherLayers","DFF_BLOCKED_BY_OTHER_LAYERS","superpriority","DFF_SUPERPRIORITY","GAS","gasVolume","LIQUID","liquidVolume","obstructsLayer","topmostTile","setTile","removeItem","clone","addItem","nullSurface","nullLiquid","nullGas","clearCellLayers","blockingMap","monst","loc","matchingLocNear","forbidsCell","hallways","moveActor","dest","event","values","f","Layer.Layer","super","Extends","base","ch","fg","bg","opacity","tileMech","activates","flavor","desc","article","dissipate","assignOmitting","assign","Layer.Flags","MechFlags","key","TileEvent.make","flag","T_PATHING_BLOCKER","result","toString","getName","arguments","cursorPathIntensity","CellMemory","mixer","Canvas","Mixer","itemQuantity","cellFlags","cellMechFlags","tileFlags","tileMechFlags","nullify","_tiles","layers","_actor","_item","data","CELL_DEFAULT","machineNumber","memory","copyObject","clear","ground","_a","GROUND","liquid","surface","SURFACE","gas","groundTile","TILES","NULL","liquidTile","surfaceTile","gasTile","IS_WAS_ANY_KIND_OF_VISIBLE","orMapped","hasTileMechFlag","TileMechFlags","TM_LIST_IN_SIDEBAR","needsRedraw","Light.intensity","LIGHT_CHANGED","limitToPlayerKnowledge","flagMask","cellFlag","cellMechFlag","isAnyKindOfVisible","skipGas","best","bestPriority","tileFlag","mechFlag","useMemory","T_IS_DEEP_LIQUID","T_BRIDGE","isWalkableNow","L_SECRETLY_PASSABLE","T_GAS","tileId","oldTile","oldTileId","staleLoopMap","CAUGHT_FIRE_THIS_TURN","blocksVision","oldBlocksVision","setFlag","MapFlags","removeLayer","addLayer","clearFlag","MAP_NO_LIQUID","MAP_NO_GAS","FLOOR","current","except","floorTile","clearLayer","fired","ev","Activation.spawn","activatesOn","prev","quantity","getAppearance","isOrWasAnyKindOfVisible","rememberedInCell","storeMemory","blackOut","needDistinctness","TM_VISUALLY_DISTINCT","alpha","clamp","drawSprite","multiply","separate","setDefaults","map.deepestLevel","w","h","locations","_actors","_items","events","_width","_height","cells","Cell.Cell","tick","MAP_DEFAULT","ambient","fmt","dump","forRect","only4dirs","count","g","isBoundaryXY","MAP_CHANGED","hasTileFlag","redrawCell","markRevealed","invalidateCostMap","mapFlag","setFlags","clearFlags","tileWithFlag","tileWithMechFlag","isClear","isEmpty","isObstruction","isDoorway","isSecretDoorway","isLiquid","hasGas","isMoveableNow","canBeWalked","tileFlavor","clearLayersWithFlags","clearLayers","boundaryTile","matchFn","arcCount","x1","y1","costGrid","costFn","Path","OBSTRUCTION","matcher","maxIndex","d","match","TRUE","hallwaysAllowed","forbidLiquid","liquids","deterministic","candidateLocs","walkableArcCount","push","randIndex","sequence","forbidCellFlags","forbidTileFlags","forbidTileMechFlags","success","index","hasVisibleLight","matches","eachChain","anim","oldCell","theActor","CellFlags","isPlayer","avoidsCell","addActor","removeActor","removeFromChain","actorAt","theItem","isDetected","D_ITEM_OMNISCIENCE","blockingGrid","walkableGrid","disrupts","gridOffsetX","gridOffsetY","contains","blockingX","blockingY","get","floodFill","maxRadius","forbiddenCellFlags","forbiddenLayerFlags","fill","Fov","FOV","isBlocked","hasCellFlag","calcRadius","sqrt","calculate","a","b","equalsXY","line","getLine","PERMANENT_CELL_FLAGS","PERMANENT_MECH_FLAGS","resetCellEvents","activate","updateLiquid","updateGas","wall","boundary","wallTile","newVolume","highest","sum","n","newVol","rem","TileLayer","hasLiquid","COLORS","cursor","yellow","path","gold","Cell.getAppearance","isRevealed","mix","black","IS_CURSOR","IS_IN_PATH","highlight","TM_INVERT_WHEN_HIGHLIGHTED","swap","text","Layer.make","enter","open","close"],"mappings":"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"}