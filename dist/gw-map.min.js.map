{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/actor/actor.js","../js/effect/effect.js","../js/tile/tile.js","../js/tile/index.js","../js/effect/types/basic.js","../js/effect/types/spread.js","../js/effect/handlers/emit.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/tile.js","../js/effect/handlers/clear.js","../js/effect/handlers/feature.js","../js/map/cell.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/actorLayer.js","../js/layer/itemLayer.js","../js/layer/gasLayer.js","../js/layer/fireLayer.js","../js/draw/basic.js","../js/map/map.js","../js/memory/memory.js","../js/memory/system.js","../js/actor/kind.js","../js/actor/make.js","../js/item/item.js","../js/item/kind.js","../js/item/make.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/path.js","../js/horde/horde.js","../js/horde/make.js","../js/fx/fx.js","../js/tile/tiles.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_ON_MAP\"] = Fl(17)] = \"L_ON_MAP\";\n    Entity[Entity[\"DEFAULT_ACTOR\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ACTOR\";\n    Entity[Entity[\"DEFAULT_ITEM\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ITEM\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n    Actor[Actor[\"HAS_MEMORY\"] = Fl(1)] = \"HAS_MEMORY\";\n    Actor[Actor[\"USES_FOV\"] = Fl(2)] = \"USES_FOV\";\n    Actor[Actor[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n    Item[Item[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(0)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(1)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"KNOWN_TO_BE_SAFE\"] = Fl(2)] = \"KNOWN_TO_BE_SAFE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to speed checks\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(16)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(17)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(18)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(19)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_FX\"] = Fl(20)] = \"HAS_FX\";\n    Cell[Cell[\"HAS_TICK_EFFECT\"] = Fl(22)] = \"HAS_TICK_EFFECT\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_SAFE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_NEEDS_REDRAW\"] = Fl(1)] = \"MAP_NEEDS_REDRAW\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_IGNORE_FOV\"] = Fl(12)] = \"E_IGNORE_FOV\";\n    // E_SPREAD_CIRCLE = Fl(13), // Spread in a circle around the spot (using FOV), radius calculated using spread+decrement\n    // E_SPREAD_LINE = Fl(14), // Spread in a line in one random direction\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nlet lastId = 0;\nexport class Entity {\n    constructor(kind) {\n        this._map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n        this.id = '' + ++lastId;\n    }\n    get map() {\n        return this._map;\n    }\n    addToMap(map, x, y) {\n        if (this.hasEntityFlag(Flags.Entity.L_ON_MAP)) {\n            throw new Error('Entity is currently on a map!');\n        }\n        this.x = x;\n        this.y = y;\n        this.setEntityFlag(Flags.Entity.L_ON_MAP);\n        if (this._map === map) {\n            return false;\n        }\n        this._map = map;\n        this.kind.addToMap(this, map);\n        return true;\n    }\n    removeFromMap() {\n        this.clearEntityFlag(Flags.Entity.L_ON_MAP);\n        this.kind.removeFromMap(this);\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    isAt(x, y) {\n        return this.x === x && this.y === y;\n    }\n    clone() {\n        const other = new this.constructor(this.kind);\n        other.copy(this);\n        return other;\n    }\n    copy(other) {\n        this.depth = other.depth;\n        this.light = other.light;\n        Object.assign(this.flags, other.flags);\n        this.next = other.next;\n        this.x = other.x;\n        this.y = other.y;\n        this.kind = other.kind;\n        this.id = other.id;\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    setEntityFlag(flag) {\n        this.flags.entity |= flag;\n    }\n    clearEntityFlag(flag) {\n        this.flags.entity &= ~flag;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isKey(x, y) {\n        return this.key && this.key.matches(x, y);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n    drawStatus(buffer, bounds) {\n        return this.kind.drawStatus(this, buffer, bounds);\n    }\n    drawInto(dest, _observer) {\n        dest.drawSprite(this.sprite);\n    }\n    toString() {\n        return `${this.constructor.name}-${this.id} @ ${this.x},${this.y}`;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requiredTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config.sprite ? config.sprite : config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requiredTileTags) {\n            if (typeof config.requiredTileTags === 'string') {\n                this.requiredTileTags = config.requiredTileTags\n                    .split(/[,|]/)\n                    .map((t) => t.trim());\n            }\n            else {\n                this.requiredTileTags = config.requiredTileTags\n                    .slice()\n                    .map((t) => t.trim());\n            }\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    addToMap(_entity, _map) { }\n    removeFromMap(_entity) { }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAllTileTags(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    avoidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAnyTileTag(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n    drawStatus(entity, buffer, bounds) {\n        if (!entity.map)\n            return 0;\n        if (entity.isDestroyed)\n            return 0;\n        const mixer = new GWU.sprite.Mixer();\n        entity.map.getAppearanceAt(entity.x, entity.y, mixer);\n        buffer.drawSprite(bounds.x + 1, bounds.y, mixer);\n        buffer.wrapText(bounds.x + 3, bounds.y, bounds.width - 3, entity.getName(), 'purple');\n        return 1;\n    }\n}\nexport function make(opts, makeOpts = {}) {\n    const kind = new EntityKind(opts);\n    return kind.make(makeOpts);\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.next = null;\n        this.leader = null;\n        this.items = null;\n        this.fov = null;\n        this.memory = null;\n        this.visionDistance = 99;\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.leader = other.leader;\n        this.items = other.items;\n        this.fov = other.fov;\n        this.memory = other.memory;\n        this.visionDistance = other.visionDistance;\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    canSee(x, y) {\n        if (x instanceof Entity.Entity) {\n            return this.canSee(x.x, x.y) && this.kind.isAbleToSee(this, x);\n        }\n        if (this.fov) {\n            return this.fov.isDirectlyVisible(x, y);\n        }\n        else if (this.map) {\n            if (GWU.xy.distanceBetween(this.x, this.y, x, y) >\n                this.visionDistance) {\n                return false;\n            }\n            return GWU.xy.forLineBetween(this.x, this.y, x, y, (i, j) => {\n                if (this.map.cell(i, j).blocksVision())\n                    return false;\n            });\n        }\n        else {\n            return false; // need a map or an fov\n        }\n    }\n    canSeeOrSense(x, y) {\n        if (x instanceof Entity.Entity) {\n            return (this.canSeeOrSense(x.x, x.y) &&\n                (this.kind.isAbleToSee(this, x) ||\n                    this.kind.isAbleToSense(this, x)));\n        }\n        if (this.fov) {\n            return this.fov.isAnyKindOfVisible(x, y);\n        }\n        return this.canSee(x, y);\n    }\n    isAbleToSee(entity) {\n        return this.kind.isAbleToSee(this, entity);\n    }\n    isAbleToSense(entity) {\n        return this.kind.isAbleToSense(this, entity);\n    }\n    ////////////////// INVENTORY\n    pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n}\n","export const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id.toLowerCase()] = handler;\n}\nexport const effectTypes = {};\nexport function installType(id, type) {\n    effectTypes[id] = type;\n}\n// export class Effect {\n//     id = '';\n//     chance = 100 * 100; // 100%\n//     type: string; // self | bolt | beam | ball | burst | adjacent | spread\n//     aim: string; // actor | item | cell\n//     bolt: string | GWU.sprite.SpriteData | null = null;\n//     beam = false;\n//     range = 0;\n//     ball: string | GWU.sprite.SpriteData | null = null;\n//     radius = 0;\n//     center = false;\n//     effects: EffectFn[];\n//     good = false;\n//     seen = false;\n//     next: Effect | null = null;\n//     constructor(config: EffectConfig) {\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         this.aim = config.aim || 'actor';\n//         if (typeof config.chance === 'string') {\n//             // '20%' becomes 2000\n//             config.chance = Math.floor(Number.parseFloat(config.chance) * 100);\n//         }\n//         this.chance = config.chance || 100 * 100;\n//         const type = config.type || 'basic';\n//         const parts = type.split(':');\n//         if (type.startsWith('bolt') || type.startsWith('beam')) {\n//             // bolt:range:sprite\n//             this.type = parts[0];\n//             this.range = parts[1] ? Number.parseInt(parts[1]) : 99;\n//             this.bolt = parts[1] || 'missile';\n//             this.beam = type.startsWith('beam');\n//         } else if (\n//             type.startsWith('ball') ||\n//             type.startsWith('burst') ||\n//             type.startsWith('aura')\n//         ) {\n//             this.type = parts[0];\n//             this.radius = parts[1] ? Number.parseInt(parts[1]) : 2;\n//             this.range = parts[2] ? Number.parseInt(parts[2]) : 99;\n//             this.ball = parts[3] || 'explosion';\n//             this.center = !type.startsWith('aura');\n//         } else {\n//             this.type = 'basic';\n//         }\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         if (Array.isArray(config.effects)) {\n//             this.effects = config.effects.map((e) => {\n//                 if (typeof e === 'function') return e;\n//                 return effectFnFromString(e);\n//             });\n//         } else {\n//             this.effects = [];\n//             Object.entries(config.effects).forEach(([key, value]) => {\n//                 const handler = handlers[key.toLowerCase()];\n//                 if (handler) {\n//                     this.effects.push(handler(value));\n//                 } else if (typeof value === 'function') {\n//                     this.effects.push(value);\n//                 } else {\n//                     throw new Error('Unknown effect: ' + key);\n//                 }\n//             });\n//         }\n//         if (this.effects.length === 0) throw new Error('No effects!');\n//     }\n//     clone(): this {\n//         const other = new (this.constructor as new (\n//             config: EffectConfig\n//         ) => this)(this as EffectConfig);\n//         return other;\n//     }\n//     fire(map: Map.MapType, x: number, y: number, ctx: EffectCtx = {}): boolean {\n//         let didSomething = false;\n//         ctx.good = this.good;\n//         ctx.seen = this.seen;\n//         if (!this.chance || map.rng.chance(this.chance, 10000)) {\n//             // fire\n//             for (let effect of this.effects) {\n//                 if (GWU.data.gameHasEnded) break;\n//                 if (effect(map, x, y, ctx)) {\n//                     didSomething = true;\n//                 } else {\n//                     break;\n//                 }\n//             }\n//         }\n//         if (ctx.aware && didSomething) {\n//             this.seen = true;\n//         }\n//         this.good = ctx.good;\n//         return didSomething;\n//     }\n//     reset() {\n//         this.seen = false;\n//     }\n// }\n// export function effectFnFromString(e: string): EffectFn {\n//     const parts = e.split(':');\n//     if (parts.length === 0) throw new Error('Invalid effect string.');\n//     // @ts-ignore\n//     const name = parts.shift().toLowerCase();\n//     const handler = handlers[name] || null;\n//     if (!handler) {\n//         throw new Error('Failed to find effect handler: ' + name);\n//     }\n//     return handler(parts);\n// }\nexport function make(opts) {\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    let config = {};\n    if (typeof opts === 'string') {\n        // Special case\n        if (opts.toLowerCase().startsWith('spread:')) {\n            const endPos = opts.indexOf(':', 8);\n            const tile = opts.substring(8, endPos);\n            config = {\n                type: 'spread:' + opts.substring(endPos),\n                effects: ['tile:' + tile],\n            };\n        }\n        else {\n            config = { type: 'basic', effects: [opts] };\n        }\n    }\n    else if (typeof opts === 'function') {\n        config = { type: 'basic', effects: [opts] };\n    }\n    else if (Array.isArray(opts)) {\n        config = { type: 'basic', effects: opts };\n    }\n    else {\n        // @ts-ignore\n        if (opts.effect) {\n            // @ts-ignore\n            opts.effects = [opts.effect];\n            delete opts.effect;\n        }\n        // object only\n        if (opts.effects) {\n            Object.assign(config, opts);\n            if (typeof config.effects === 'string') {\n                config.effects = [opts.effects];\n            }\n            else if (typeof config.effects === 'function') {\n                config.effects = [opts.effects];\n            }\n        }\n        else {\n            config.effects = {};\n            Object.entries(opts).forEach(([key, value]) => {\n                const handler = handlers[key.toLowerCase()];\n                if (handler !== undefined) {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else if (typeof value === 'function') {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else {\n                    // @ts-ignore\n                    config[key] = value;\n                }\n            });\n        }\n    }\n    config.type = config.type || 'basic';\n    if (typeof config.type !== 'string')\n        throw new Error('Invalid effect type: ' + JSON.stringify(config.type));\n    const typeParts = config.type.split(':').map((t) => t.trim());\n    const typeName = typeParts.shift();\n    const makeFn = effectTypes[typeName.toLowerCase()];\n    if (!makeFn)\n        throw new Error('Invalid effect type: ' + typeName);\n    const effect = makeFn(config);\n    if (Array.isArray(config.effects)) {\n        config.effects.forEach((e) => {\n            if (typeof e === 'function') {\n                effect.effects.push(e);\n            }\n            else {\n                const parts = e.split(':').map((t) => t.trim());\n                if (parts.length === 1) {\n                    const effect = installedEffects[parts[0]];\n                    if (!effect)\n                        throw new Error('Failed to find effect with id: ' + parts[0]);\n                    effect.effects.push(effect.trigger.bind(effect));\n                }\n                else {\n                    const handler = handlers[parts[0].toLowerCase()];\n                    if (!handler)\n                        throw new Error('Unknown effect: ' + parts[0]);\n                    parts.shift();\n                    effect.effects.push(handler(parts));\n                }\n            }\n        });\n    }\n    else {\n        Object.entries(config.effects).forEach(([key, value]) => {\n            const handler = handlers[key.toLowerCase()];\n            if (!handler)\n                throw new Error('Failed to find handler type: ' + key);\n            effect.effects.push(handler(value));\n        });\n    }\n    if (config.next) {\n        effect.next = make(config.next);\n    }\n    return effect;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'object' && 'trigger' in opts) {\n        return opts;\n    }\n    if (typeof opts === 'string') {\n        const effect = installedEffects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\nfunction isEffect(obj) {\n    return typeof obj === 'object' && 'trigger' in obj;\n}\n//////////////////////////////\n// INSTALL\nexport const installedEffects = {};\nexport function install(id, config) {\n    const effect = isEffect(config) ? config.clone() : make(config);\n    installedEffects[id] = effect;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function resetAll() {\n    Object.values(installedEffects).forEach((e) => (e.seen = false));\n}\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/effect';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string' && !value.includes(':')) {\n                effects[key] = value;\n                return;\n            }\n            try {\n                effects[key] = makeEffect(value);\n            }\n            catch (e) {\n                throw new Error(`Failed to add effect to tile => ${key} : ${JSON.stringify(value)} : ` + e.message);\n            }\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\n// import './tiles';\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nimport * as Flags from '../../flags';\nexport class BasicEffect {\n    constructor(config) {\n        this.effects = [];\n        this.chance = 100 * 100; // 100%\n        this.seen = false;\n        this.flags = 0;\n        this.next = null;\n        if (typeof config === 'object' && !Array.isArray(config)) {\n            this.flags = GWU.flag.from(Flags.Effect, config.flags);\n            this.chance = Number.parseInt(config.chance || '10000');\n        }\n    }\n    clone() {\n        const other = new this.constructor();\n        other.effects = this.effects.slice();\n        other.chance = this.chance;\n        other.seen = false;\n        other.flags = this.flags;\n        other.next = this.next;\n        return other;\n    }\n    trigger(loc, ctx = {}) {\n        if (!ctx.force && this.chance) {\n            const rng = ctx.rng || loc.map.rng || GWU.random;\n            if (!rng.chance(this.chance, 10000))\n                return false;\n        }\n        let didSomething = false;\n        for (let eff of this.effects) {\n            if (eff(loc, ctx)) {\n                didSomething = true;\n            }\n        }\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                return this.next.trigger(loc, ctx);\n            }\n        }\n        return didSomething;\n    }\n}\nexport function makeBasicEffect(config) {\n    if (typeof config !== 'object') {\n        return new BasicEffect();\n    }\n    return new BasicEffect(config);\n}\nEffect.installType('basic', makeBasicEffect);\n","import * as GWU from 'gw-utils';\nimport { BasicEffect } from './basic';\nimport { installType } from '../effect';\nimport * as Flags from '../../flags';\nexport function makeSpreadEffect(config) {\n    return new SpreadEffect(config);\n}\ninstallType('spread', makeSpreadEffect);\nexport class SpreadEffect extends BasicEffect {\n    constructor(config) {\n        super(config);\n        this.grow = 0;\n        this.decrement = 0;\n        this.matchTile = '';\n        if (!config) {\n            config = { grow: 0, decrement: 0, flags: 0 };\n        }\n        if (typeof config === 'string') {\n            config = config.split(':').map((t) => t.trim());\n        }\n        if (Array.isArray(config)) {\n            if (config[0].toLowerCase() === 'spread') {\n                config.shift();\n            }\n            config = {\n                grow: config[0] || '0',\n                decrement: config[1] || '100',\n                flags: config[2] || '0',\n            };\n        }\n        else if (typeof config.type === 'string' &&\n            config.type.includes(':')) {\n            const parts = config.type.split(':').map((t) => t.trim());\n            if (parts[0].toLowerCase() === 'spread') {\n                parts.shift();\n            }\n            config.grow = parts[0] || '0';\n            config.decrement = parts[1] || '100';\n            config.flags = config.flags + '|' + parts[2];\n        }\n        this.grow = Number.parseInt(config.grow || 0);\n        this.decrement = Number.parseInt(config.decrement || 100);\n        this.flags = GWU.flag.from(Flags.Effect, config.flags || 0);\n        this.matchTile = config.matchTile || '';\n    }\n    clone() {\n        const other = super.clone();\n        other.grow = this.grow;\n        other.decrement = this.decrement;\n        other.matchTile = this.matchTile;\n        return other;\n    }\n    trigger(xy, ctx = {}) {\n        const abortIfBlocking = !!(this.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        let didSomething = false;\n        const map = xy.map;\n        const spawnMap = GWU.grid.alloc(map.width, map.height);\n        didSomething = computeSpawnMap(this, xy, spawnMap);\n        if (!didSomething) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (abortIfBlocking && mapDisruptedBy(map, spawnMap)) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, spawnMap, this.flags)) {\n                didSomething = true;\n            }\n        }\n        spawnMap.forEach((v, x, y) => {\n            if (!v)\n                return;\n            spawnMap[x][y] = 1; // convert from generations to off/on/success\n            for (let eff of this.effects) {\n                if (eff({ map, x, y }, ctx)) {\n                    didSomething = true;\n                    spawnMap[x][y] = 2;\n                }\n            }\n        });\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                if (this.flags & Flags.Effect.E_NEXT_EVERYWHERE) {\n                    spawnMap.forEach((v, x, y) => {\n                        if (!v)\n                            return;\n                        if (v == 2 || nextAlways) {\n                            this.next.trigger({ map, x, y }, ctx);\n                        }\n                    });\n                }\n                else {\n                    this.next.trigger({ map, x: xy.x, y: xy.y }, ctx);\n                }\n            }\n        }\n        GWU.grid.free(spawnMap);\n        return didSomething;\n    }\n}\nexport function mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(map.width, map.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(map.width, map.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (map.cell(i, j).isStairs()) {\n                disrupts = true;\n            }\n        }\n        else if (!map.cell(i, j).blocksMove()) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGWU.grid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.matchTile && !isStart && !cell.hasTile(effect.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, loc, spawnMap) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const map = loc.map;\n    let startProb = effect.grow || 0;\n    let probDec = effect.decrement || 0;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, loc.x, loc.y, true)) {\n        return false;\n    }\n    spawnMap[loc.x][loc.y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y])\n            return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const c = map.cell(x, y);\n            return !a.forbidsCell(c);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeActor(a);\n            map.addActor(loc[0], loc[1], a);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y])\n            return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const dest = map.cell(x, y);\n            return !i.forbidsCell(dest);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(i);\n            map.addItem(loc[0], loc[1], i);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { installHandler } from '../effect';\n//////////////////////////////////////////////\n// EMIT\nexport function makeEmitHandler(config) {\n    if (Array.isArray(config))\n        config = config[0];\n    if (typeof config !== 'string')\n        throw new Error('Invalid EMIT handler config - ' + config);\n    return emitEffect.bind(undefined, config);\n}\nexport function emitEffect(id, loc, ctx) {\n    return GWU.events.emit(id, loc.x, loc.y, ctx);\n}\ninstallHandler('emit', makeEmitHandler);\n","import * as GWU from 'gw-utils';\nimport { installHandler } from '../effect';\n//////////////////////////////////////////////\n// MESSAGE\nexport function makeMessageHandler(src) {\n    if (Array.isArray(src))\n        src = src[0];\n    if (typeof src !== 'string') {\n        throw new Error('Need message for message effect.');\n    }\n    const info = {\n        msg: src,\n    };\n    return messageEffect.bind(undefined, info);\n}\nexport function messageEffect(info, loc, ctx) {\n    const seen = ctx.seen;\n    const msg = info.msg;\n    if (msg &&\n        msg.length &&\n        ctx.aware &&\n        !seen\n    // && map.isVisible(x, y)\n    ) {\n        GWU.message.addAt(loc.x, loc.y, msg, ctx);\n        return true;\n    }\n    return false;\n}\ninstallHandler('msg', makeMessageHandler);\n","import { installHandler } from '../effect';\n//////////////////////////////////////////////\n// ActivateMachine\nexport function makeActivateMachine() {\n    return activateMachine.bind(undefined);\n}\nexport function activateMachine(loc, ctx) {\n    const cell = loc.map.cell(loc.x, loc.y);\n    const machine = cell.machineId;\n    if (!machine)\n        return false;\n    return loc.map.activateMachine(machine, loc.x, loc.y, ctx);\n}\ninstallHandler('activateMachine', makeActivateMachine);\n","import { installHandler } from '../effect';\nexport function makeTileHandler(src) {\n    if (!src)\n        throw new Error('Tile effect needs configuration.');\n    if (typeof src === 'string') {\n        src = { id: src };\n    }\n    else if (Array.isArray(src)) {\n        src = { id: src[0] };\n    }\n    else if (!src.id) {\n        throw new Error('Tile effect needs configuration with id.');\n    }\n    const opts = src;\n    if (opts.id.includes('!')) {\n        opts.superpriority = true;\n    }\n    if (opts.id.includes('~')) {\n        opts.blockedByActors = true;\n        opts.blockedByItems = true;\n    }\n    opts.id = opts.id.replace(/[!~]*/g, '');\n    return tileEffect.bind(opts);\n}\nexport function tileEffect(loc, ctx) {\n    this.machine = ctx.machine || 0;\n    const didSomething = loc.map.setTile(loc.x, loc.y, this.id, this);\n    return didSomething;\n}\ninstallHandler('tile', makeTileHandler);\n","import * as Flags from '../../flags';\nimport { installHandler } from '../effect';\nexport function makeClearHandler(config) {\n    let layers = 0;\n    if (!config) {\n        layers = Flags.Depth.ALL_LAYERS;\n    }\n    else if (typeof config === 'number') {\n        layers = config;\n    }\n    else if (typeof config === 'string') {\n        const parts = config.split(/[,|]/g);\n        layers = parts.reduce((out, v) => {\n            if (typeof v === 'number')\n                return out | v;\n            const depth = Flags.Depth[v] || 0;\n            return out | depth;\n        }, 0);\n    }\n    else {\n        throw new Error('Invalid config for clear effect: ' + JSON.stringify(config));\n    }\n    return clearEffect.bind(undefined, layers);\n}\nexport function clearEffect(layers, loc, _ctx) {\n    if (!layers)\n        return false;\n    const cell = loc.map.cell(loc.x, loc.y);\n    return cell.clearDepth(layers);\n}\ninstallHandler('clear', makeClearHandler);\n","import * as Effect from '../effect';\nexport function makeFeatureHandler(id) {\n    if (Array.isArray(id))\n        id = id[0];\n    if (id && typeof id !== 'string') {\n        id = id.id;\n    }\n    if (!id || !id.length)\n        throw new Error('Feature effect needs ID');\n    return featureEffect.bind(undefined, id);\n}\nexport function featureEffect(id, loc, ctx) {\n    const feat = Effect.installedEffects[id];\n    if (!feat) {\n        throw new Error('Failed to find feature: ' + id);\n    }\n    return feat.trigger(loc, ctx);\n}\nEffect.installHandler('feature', makeFeatureHandler);\nEffect.installHandler('effect', makeFeatureHandler);\nEffect.installHandler('id', makeFeatureHandler);\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nGWU.color.install('cellStatusName', 'light_blue');\n// class CellEntities {\n//     cell: Cell;\n//     constructor(cell: Cell) {\n//         this.cell = cell;\n//     }\n//     eachItem(cb: EachCb<Item>): void {\n//         let object: Item | null = this.cell._item;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     eachActor(cb: EachCb<Actor>): void {\n//         let object: Actor | null = this.cell._actor;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     forEach(cb: EachCb<Entity>): void {\n//         this.eachItem(cb);\n//         this.eachActor(cb);\n//     }\n//     some(cb: MatchCb<Entity>): boolean {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         return false;\n//     }\n//     reduce(cb: ReduceCb<Entity>, start?: any): any {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         return start;\n//     }\n// }\nexport class Cell {\n    // toFire: Partial<Effect.EffectCtx>[] = [];\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.x = -1;\n        this.y = -1;\n        // this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.snapshot = GWU.sprite.makeMixer();\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    get hasStableSnapshot() {\n        return this.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    }\n    get hasStableMemory() {\n        return this.hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        // this._actor = other.actor;\n        // this._item = other.item;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n        other.getSnapshot(this.snapshot);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, checkEntities = false) {\n        var _a, _b;\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        if (!checkEntities)\n            return false;\n        if (this.hasItem()) {\n            if ((_a = this.item) === null || _a === void 0 ? void 0 : _a.hasEntityFlag(flag))\n                return true;\n        }\n        if (this.hasActor()) {\n            if ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.hasEntityFlag(flag))\n                return true;\n        }\n        return false;\n    }\n    hasAllEntityFlags(flags, checkEntities = false) {\n        return (this.entityFlags(checkEntities) & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        var _a, _b;\n        let flag = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            if (this.hasItem()) {\n                flag |= ((_a = this.item) === null || _a === void 0 ? void 0 : _a.flags.entity) || 0;\n            }\n            if (this.hasActor()) {\n                flag |= ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.flags.entity) || 0;\n            }\n        }\n        return flag;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n            this.flags.cell &= ~Flags.Cell.STABLE_SNAPSHOT;\n            this.map.needsRedraw = true;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return this.tiles.some((t) => t && t.blocksVision());\n    }\n    blocksPathing() {\n        return this.tiles.some((t) => t && t.blocksPathing());\n    }\n    blocksMove() {\n        return this.tiles.some((t) => t && t.blocksMove());\n    }\n    blocksEffects() {\n        return this.tiles.some((t) => t && t.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isNull() {\n        return this.tiles.every((t) => !t || t === TILE.tiles.NULL);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    // hasKey(): boolean {\n    //     return this._entities.some(\n    //         (e) => !!e.key && e.key.matches(this.x, this.y)\n    //     );\n    // }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile, opts = {}) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (this.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && this.hasItem())\n            return false;\n        if (opts.blockedByActors && this.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && this.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = this.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === TILE.tiles.NULL) {\n                this.tiles[0] = TILE.get(tile.groundTile);\n            }\n        }\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            this.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            this.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            this.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.needsRedraw = true;\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.snapshot.blackOut();\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    tileWithEffect(name) {\n        return this.tiles.find((t) => t === null || t === void 0 ? void 0 : t.hasEffect(name)) || null;\n    }\n    fireEvent(event, ctx = {}) {\n        // ctx.cell = this;\n        let didSomething = false;\n        // console.log('fire event - %s', event);\n        for (const tile of this.tiles) {\n            if (!tile || !tile.effects)\n                continue;\n            const ev = tile.effects[event];\n            if (ev) {\n                const r = this._activate(ev, ctx);\n                if (r) {\n                    didSomething = true;\n                }\n            }\n        }\n        return didSomething;\n    }\n    _activate(effect, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.installedEffects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = effect.trigger(this, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this.map.itemAt(this.x, this.y);\n    }\n    addItem(item, withEffects = false) {\n        this.setCellFlag(Flags.Cell.HAS_ITEM);\n        item.addToMap(this.map, this.x, this.y);\n        this.map.items.push(item);\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (item.key &&\n                item.key.matches(this.x, this.y) &&\n                this.hasEffect('key')) {\n                this.fireEvent('key', {\n                    key: item,\n                    item,\n                });\n            }\n            else if (this.hasEffect('add_item')) {\n                this.fireEvent('add_item', {\n                    key: item,\n                    item,\n                });\n            }\n        }\n        return true;\n    }\n    removeItem(item, withEffects = false) {\n        let hasItems = false;\n        let foundIndex = -1;\n        this.map.items.forEach((obj, index) => {\n            if (obj === item) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasItems = true;\n            }\n        });\n        if (!hasItems) {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.map.items.splice(foundIndex, 1); // delete the item\n        item.removeFromMap();\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (item.isKey(this.x, this.y) && this.hasEffect('no_key')) {\n                this.fireEvent('no_key', {\n                    key: item,\n                    item,\n                });\n            }\n            else if (this.hasEffect('remove_item')) {\n                this.fireEvent('remove_item', {\n                    key: item,\n                    item,\n                });\n            }\n        }\n        return true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this.map.actorAt(this.x, this.y);\n    }\n    addActor(actor, withEffects = false) {\n        this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        if (actor.isPlayer()) {\n            this.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        actor.addToMap(this.map, this.x, this.y);\n        this.map.actors.push(actor);\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (actor.isKey(this.x, this.y) && this.hasEffect('key')) {\n                this.fireEvent('key', {\n                    key: actor,\n                    actor,\n                });\n            }\n            else if (actor.isPlayer() && this.hasEffect('add_player')) {\n                this.fireEvent('add_player', {\n                    player: actor,\n                    actor,\n                });\n            }\n            else if (this.hasEffect('add_actor')) {\n                this.fireEvent('add_actor', {\n                    actor,\n                });\n            }\n        }\n        return true;\n    }\n    removeActor(actor, withEffects = false) {\n        let hasActor = false;\n        let foundIndex = -1;\n        this.map.actors.forEach((obj, index) => {\n            if (obj === actor) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasActor = true;\n            }\n        });\n        if (!hasActor) {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        if (foundIndex < 0)\n            return false;\n        actor.removeFromMap();\n        this.map.actors.splice(foundIndex, 1); // delete the actor\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (actor.isKey(this.x, this.y) && this.hasEffect('no_key')) {\n                this.fireEvent('no_key', {\n                    key: actor,\n                    actor,\n                });\n            }\n            else if (actor.isPlayer() && this.hasEffect('remove_player')) {\n                this.fireEvent('remove_player', {\n                    actor,\n                    player: actor,\n                });\n            }\n            else if (this.hasEffect('remove_actor')) {\n                this.fireEvent('remove_actor', {\n                    actor,\n                });\n            }\n        }\n        return true;\n    }\n    hasFx() {\n        return !!(this.flags.cell & Flags.Cell.HAS_FX);\n    }\n    get fx() {\n        return this.map.fxAt(this.x, this.y);\n    }\n    _addFx(_fx) {\n        this.setCellFlag(Flags.Cell.HAS_FX);\n        this.needsRedraw = true;\n    }\n    _removeFx(_fx) {\n        if (!this.fx) {\n            this.clearCellFlag(Flags.Cell.HAS_FX);\n        }\n        this.needsRedraw = true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        if (this.hasActor()) {\n            const actor = this.map.actorAt(this.x, this.y);\n            if (actor && actor.sprite.ch)\n                return actor.sprite.ch;\n        }\n        if (this.hasItem()) {\n            const item = this.map.itemAt(this.x, this.y);\n            if (item && item.sprite.ch)\n                return item.sprite.ch;\n        }\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n    drawStatus(buffer, bounds) {\n        const lines = buffer.wrapText(bounds.x + 1, bounds.y, bounds.width - 1, this.getName(), 'cellStatusName');\n        return lines;\n    }\n    toString() {\n        return `Cell @ ${this.x},${this.y}`;\n    }\n}\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile, _opts) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts) {\n        const cell = this.map.cell(x, y);\n        return cell.setTile(tile, opts);\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // // Bookkeeping for fire, pressure plates and key-activated tiles.\n        // for (let x = 0; x < this.map.width; ++x) {\n        //     for (let y = 0; y < this.map.height; ++y) {\n        //         const cell = this.map.cell(x, y);\n        //         if (\n        //             !cell.hasCellFlag(\n        //                 Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM\n        //             ) &&\n        //             cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)\n        //         ) {\n        //             cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n        //         }\n        //     }\n        // }\n        return true;\n    }\n}\n","// import * as GWU from 'gw-utils';\nimport { MapLayer } from './mapLayer';\nexport class ActorLayer extends MapLayer {\n    constructor(map, name = 'actor') {\n        super(map, name);\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class ItemLayer extends MapLayer {\n    constructor(map, name = 'item') {\n        super(map, name);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            cell.fireEvent(event, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nexport class BasicDrawer {\n    isAnyKindOfVisible(_cell) {\n        return true;\n    }\n    drawInto(dest, map, opts = {}) {\n        const buffer = dest instanceof GWU.buffer.Buffer ? dest : dest.buffer;\n        const offsetX = opts.offsetX || 0;\n        const offsetY = opts.offsetY || 0;\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                if (map.hasXY(x + offsetX, y + offsetY)) {\n                    const cell = map.cell(x + offsetX, y + offsetY);\n                    this.drawCell(mixer, cell, opts.fov);\n                    buffer.drawSprite(x, y, mixer);\n                }\n            }\n        }\n    }\n    drawCell(dest, cell, fov) {\n        dest.blackOut();\n        // const isVisible = fov ? fov.isAnyKindOfVisible(cell.x, cell.y) : true;\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (cell.needsRedraw || needSnapshot) {\n            this.getAppearance(dest, cell);\n            cell.putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            cell.getSnapshot(dest);\n        }\n        this.applyLight(dest, cell, fov);\n        if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT |\n            Flags.Entity.L_LIST_IN_SIDEBAR, true)) {\n            [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n        }\n        return true;\n    }\n    // getCellAppearance(cell: CellType, dest: GWU.sprite.Mixer) {\n    //     dest.blackOut();\n    //     const isVisible = true; // this.fov.isAnyKindOfVisible(x, y);\n    //     const isRevealed = true; // this.fov.isRevealed(x, y);\n    //     const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     if (needSnapshot || (cell.needsRedraw && isVisible)) {\n    //         this.layers.forEach((layer) => layer.putAppearance(dest, cell));\n    //         if (dest.dances) {\n    //             cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n    //         } else {\n    //             cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n    //         }\n    //         dest.bake();\n    //         cell.putSnapshot(dest);\n    //         cell.needsRedraw = false;\n    //         cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     } else {\n    //         cell.getSnapshot(dest);\n    //     }\n    //     if (isVisible) {\n    //         const light = this.light.getLight(cell.x, cell.y);\n    //         dest.multiply(light);\n    //     } else if (isRevealed) {\n    //         dest.scale(50);\n    //     } else {\n    //         dest.blackOut();\n    //     }\n    //     if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n    //         [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n    //     }\n    // }\n    getAppearance(dest, cell) {\n        const ground = cell.tiles[Flags.Depth.GROUND];\n        const surface = cell.tiles[Flags.Depth.SURFACE];\n        const liquid = cell.tiles[Flags.Depth.LIQUID];\n        const gas = cell.tiles[Flags.Depth.GAS]; // How to get volume!?!?!?!\n        dest.drawSprite(ground.sprite);\n        if (surface) {\n            dest.drawSprite(surface.sprite);\n        }\n        if (liquid) {\n            dest.drawSprite(liquid.sprite);\n        }\n        if (cell.hasItem()) {\n            const item = cell.map.itemAt(cell.x, cell.y);\n            if (item)\n                item.drawInto(dest);\n        }\n        if (cell.hasActor()) {\n            const actor = cell.map.actorAt(cell.x, cell.y);\n            if (actor)\n                actor.drawInto(dest);\n        }\n        if (gas) {\n            const opacity = GWU.rng.cosmetic.number(50) + 25;\n            dest.drawSprite(gas.sprite, opacity);\n        }\n        if (cell.hasFx()) {\n            const fx = cell.map.fxAt(cell.x, cell.y);\n            if (fx)\n                dest.drawSprite(fx.sprite);\n        }\n        if (dest.dances) {\n            cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        else {\n            cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        dest.bake();\n    }\n    applyLight(dest, cell, fov) {\n        const isVisible = !fov || fov.isAnyKindOfVisible(cell.x, cell.y);\n        const isRevealed = !fov || fov.isRevealed(cell.x, cell.y);\n        const light = cell.map.light.getLight(cell.x, cell.y);\n        dest.multiply(light);\n        // TODO - is Clairy\n        // TODO - is Telepathy\n        if (fov && fov.isCursor(cell.x, cell.y)) {\n            dest.invert();\n        }\n        else if (!isVisible) {\n            if (isRevealed) {\n                dest.scale(50);\n            }\n            else {\n                dest.blackOut();\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\n// import { CellMemory } from './cellMemory';\nimport * as Effect from '../effect';\nimport { BasicDrawer } from '../draw/basic';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        // _memory: GWU.grid.Grid<CellMemory>;\n        this.machineCount = 0;\n        this._seed = 0;\n        this.rng = GWU.rng.random;\n        this.id = 'MAP';\n        this.actors = [];\n        this.items = [];\n        this.fx = [];\n        this._animations = [];\n        this._queuedEvents = [];\n        this.width = width;\n        this.height = height;\n        this.flags = { map: 0 };\n        this.layers = [];\n        if (opts.id) {\n            this.id = opts.id;\n        }\n        this.drawer = opts.drawer || new BasicDrawer();\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        // this._memory = GWU.grid.make(\n        //     width,\n        //     height,\n        //     (x, y) => new CellMemory(this, x, y)\n        // );\n        if (opts.seed) {\n            this._seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        // this.fov = new GWU.fov.FovSystem(this, opts);\n        this.properties = {};\n        this.initLayers();\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(v) {\n        this._seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    // memory(x: number, y: number): CellMemory {\n    //     return this._memory[x][y];\n    // }\n    // knowledge(x: number, y: number): CellInfoType {\n    //     if (this.fov.isAnyKindOfVisible(x, y)) return this.cell(x,y);\n    //     return this._memory[x][y];\n    // }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n        this.addLayer(Flags.Depth.ITEM, new Layer.ItemLayer(this, 'item'));\n        this.addLayer(Flags.Depth.ACTOR, new Layer.ActorLayer(this, 'actor'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // items\n    hasItem(x, y) {\n        return this.cell(x, y).hasItem();\n    }\n    itemAt(x, y) {\n        return this.items.find((i) => i.isAt(x, y)) || null;\n    }\n    eachItem(cb) {\n        this.items.forEach(cb);\n    }\n    addItem(x, y, item, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        return cell.addItem(item, fireEffects);\n    }\n    addItemNear(x, y, item, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this.cell(i, j);\n            if (cell.hasItem())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (item.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        const cell = this.cell(loc[0], loc[1]);\n        return cell.addItem(item, fireEffects);\n    }\n    removeItem(item, fireEffects = false) {\n        const cell = this.cell(item.x, item.y);\n        return cell.removeItem(item, fireEffects);\n    }\n    //  moveItem(item: Item, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = item.x;\n    //     const oldY = item.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[item.depth] as Layer.ItemLayer;\n    //     if (!( layer.removeItem(item))) return false;\n    //     if (!( this.addItem(x, y, item))) {\n    //         layer.forceItem(item.x, item.y, item);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (item.lastSeen) {\n    //     //         this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n    //     //         this.clearCellFlag(\n    //     //             item.lastSeen.x,\n    //     //             item.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         item.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.item = item;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     item.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.actors.find((a) => a.isAt(x, y)) || null;\n    }\n    eachActor(cb) {\n        this.actors.forEach(cb);\n    }\n    addActor(x, y, actor, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        return cell.addActor(actor, fireEffects);\n    }\n    addActorNear(x, y, actor, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this.cell(i, j);\n            if (cell.hasActor())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        const cell = this.cell(loc[0], loc[1]);\n        return cell.addActor(actor, fireEffects);\n    }\n    removeActor(actor, fireEffects = false) {\n        const cell = this.cell(actor.x, actor.y);\n        return cell.removeActor(actor, fireEffects);\n    }\n    //  moveActor(actor: Actor, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = actor.x;\n    //     const oldY = actor.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[actor.depth] as Layer.ActorLayer;\n    //     if (!( layer.removeActor(actor))) return false;\n    //     if (!( layer.addActor(x, y, actor))) {\n    //         layer.forceActor(actor.x, actor.y, actor);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (actor.lastSeen) {\n    //     //         this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(\n    //     //             actor\n    //     //         );\n    //     //         this.clearCellFlag(\n    //     //             actor.lastSeen.x,\n    //     //             actor.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         actor.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.actor = actor;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     actor.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    fxAt(x, y) {\n        return this.fx.find((i) => i.isAt(x, y)) || null;\n    }\n    eachFx(cb) {\n        this.fx.forEach(cb);\n    }\n    addFx(x, y, fx) {\n        const cell = this.get(x, y);\n        if (!cell)\n            return false;\n        fx.x = x;\n        fx.y = y;\n        cell._addFx(fx);\n        this.fx.push(fx);\n        return true;\n    }\n    moveFx(fx, x, y) {\n        const current = this.get(fx.x, fx.y);\n        const updated = this.get(x, y);\n        if (!updated)\n            return false;\n        current._removeFx(fx);\n        fx.x = x;\n        fx.y = y;\n        updated._addFx(fx);\n        return true;\n    }\n    removeFx(fx) {\n        const cell = this.get(fx.x, fx.y);\n        GWU.arrayDelete(this.fx, fx);\n        if (cell) {\n            cell._removeFx(fx);\n        }\n        return true;\n    }\n    // Information\n    // isVisible(x: number, y: number): boolean {\n    //     return this.fov.isAnyKindOfVisible(x, y);\n    // }\n    hasKey(x, y) {\n        const actor = this.actorAt(x, y);\n        if (actor && actor.isKey(x, y))\n            return true;\n        const item = this.itemAt(x, y);\n        if (item && item.isKey(x, y))\n            return true;\n        return false;\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const getCh = (cell) => {\n            return cell.dump();\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    get needsRedraw() {\n        return this.hasMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v)\n            this.setMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n        else\n            this.clearMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    hasEntityFlag(x, y, flag) {\n        return this.cell(x, y).hasEntityFlag(flag);\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        // this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile\n    // useMemory = false\n    ) {\n        return this.cell(x, y).hasTile(tile);\n        // if (!useMemory) return this.cell(x, y).hasTile(tile);\n        // return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            const name = tile;\n            tile = TILE.get(name);\n            if (!tile)\n                throw new Error('Failed to find tile: ' + name);\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clearTiles(tile);\n    }\n    tick(dt) {\n        let didSomething = false;\n        this._animations.forEach((a) => {\n            didSomething = a.tick(dt) || didSomething;\n        });\n        this._animations = this._animations.filter((a) => a.isRunning());\n        didSomething = this.fireAll('tick') || didSomething;\n        for (let layer of this.layers) {\n            if (layer && layer.tick(dt)) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cell(x, y));\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.actors = src.actors.slice();\n        this.items = src.items.slice();\n        this.flags.map = src.flags.map;\n        // this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.machineCount = src.machineCount;\n        this._seed = src._seed;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    queueEvent(x, y, event, ctx) {\n        this._queuedEvents.push({ event, x, y, ctx });\n    }\n    fireQueuedEvents() {\n        for (let i = 0; i < this._queuedEvents.length; ++i) {\n            const info = this._queuedEvents[i];\n            const cell = this.cell(info.x, info.y);\n            cell.fireEvent(info.event, info.ctx);\n        }\n        this._queuedEvents.length = 0;\n    }\n    fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.fireEvent(event, ctx);\n    }\n    fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        willFire.forEach((w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    cell.fireEvent(event, {\n                        force: true,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        cell.fireEvent('machine', ctx) || didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    // DRAW\n    drawInto(dest, opts) {\n        this.drawer.drawInto(dest, this, opts);\n    }\n    getAppearanceAt(x, y, dest) {\n        const cell = this.cell(x, y);\n        return this.drawer.drawCell(dest, cell);\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n    // redrawCell(x: number, y: number): void {\n    //     // if (clearMemory) {\n    //     //     this.clearMemory(x, y);\n    //     // }\n    //     this.cell(x, y).needsRedraw = true;\n    // }\n    // Animator\n    addAnimation(a) {\n        this._animations.push(a);\n    }\n    removeAnimation(a) {\n        GWU.arrayDelete(this._animations, a);\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Map } from '../map/map';\nimport * as Flags from '../flags';\nexport class Memory extends Map {\n    constructor(map) {\n        super(map.width, map.height);\n        // this.actor = actor;\n        this.source = map;\n        this.cells.forEach((c) => c.setCellFlag(Flags.Cell.STABLE_MEMORY));\n    }\n    cell(x, y) {\n        let cell = this.cells[x][y];\n        if (!cell.hasCellFlag(Flags.Cell.STABLE_MEMORY)) {\n            cell = this.source.cell(x, y);\n        }\n        return cell;\n    }\n    memory(x, y) {\n        return this.cells[x][y];\n    }\n    isMemory(x, y) {\n        return this.cells[x][y].hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    setTile() {\n        throw new Error('Cannot set tiles on memory.');\n    }\n    addItem() {\n        throw new Error('Cannot add Items to memory!');\n    }\n    removeItem() {\n        throw new Error('Cannot remove Items from memory!');\n    }\n    //  moveItem(): boolean {\n    //     throw new Error('Cannot move Items on memory!');\n    // }\n    eachItem(cb) {\n        this.source.eachItem((i) => {\n            if (!this.isMemory(i.x, i.y)) {\n                cb(i);\n                const i2 = this.items.find((other) => other.id == i.id);\n                if (i2) {\n                    const mem = this.cell(i2.x, i2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ITEM | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.items, i2);\n                }\n            }\n        });\n        this.items.forEach(cb);\n    }\n    addActor() {\n        throw new Error('Cannot add Actors to memory!');\n    }\n    removeActor() {\n        throw new Error('Cannot remove Actors from memory!');\n    }\n    //  moveActor(): boolean {\n    //     throw new Error('Cannot move Actors on memory!');\n    // }\n    eachActor(cb) {\n        this.source.eachActor((a) => {\n            if (!this.isMemory(a.x, a.y)) {\n                cb(a);\n                const a2 = this.actors.find((other) => other.id == a.id);\n                if (a2) {\n                    const mem = this.cell(a2.x, a2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.actors, a2);\n                }\n            }\n        });\n        this.actors.forEach(cb);\n    }\n    storeMemory(x, y) {\n        const mem = this.cells[x][y];\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        const cell = this.source.cell(x, y);\n        mem.copy(cell);\n        mem.setCellFlag(Flags.Cell.STABLE_MEMORY);\n        mem.map = this; // so that drawing this cell results in using the right map\n        let newList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR);\n        // add any current items+actors\n        if (cell.hasItem()) {\n            const item = this.source.itemAt(x, y);\n            if (item) {\n                const copy = item.clone();\n                copy._map = this; // memory is map\n                this.items.push(copy);\n                if (copy.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (cell.hasActor()) {\n            const actor = this.source.actorAt(x, y);\n            if (actor) {\n                const copy = actor.clone();\n                copy._map = this; // memory is map\n                this.actors.push(copy);\n                if (copy.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        this.light.setLight(x, y, this.source.light.getLight(x, y));\n    }\n    forget(x, y) {\n        const mem = this.memory(x, y);\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        mem.clearCellFlag(Flags.Cell.STABLE_MEMORY);\n        let newList = this.source\n            .cell(x, y)\n            .hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n    }\n    onFovChange(x, y, isVisible) {\n        if (!isVisible) {\n            this.storeMemory(x, y);\n        }\n        else {\n            this.forget(x, y);\n        }\n    }\n}\n","import { Memory } from './memory';\nconst cache = {};\nexport function store(actor, map, memory) {\n    let actorMemory = cache[actor.id];\n    if (!actorMemory) {\n        cache[actor.id] = actorMemory = {};\n    }\n    actorMemory[map.id] = memory;\n}\nexport function get(actor, map) {\n    let actorMemory = cache[actor.id];\n    if (actorMemory) {\n        const memory = actorMemory[map.id];\n        if (memory)\n            return memory;\n    }\n    return new Memory(map);\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Actor } from './actor';\nimport * as Memory from '../memory';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n        this.flags = {\n            actor: Flags.Actor.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.vision = {};\n        if (opts.flags) {\n            this.flags.actor = GWU.flag.from(Flags.Actor, this.flags.actor, opts.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, opts.flags);\n        }\n        if (opts.vision) {\n            this.vision.normal = opts.vision;\n        }\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n        Object.assign(actor.flags, this.flags);\n        if (options.fov) {\n            actor.fov = options.fov;\n        }\n        if (options.memory) {\n            actor.memory = options.memory;\n        }\n        if (this.vision.normal) {\n            actor.visionDistance = this.vision.normal;\n        }\n    }\n    addToMap(actor, map) {\n        super.addToMap(actor, map);\n        if (this.hasActorFlag(Flags.Actor.HAS_MEMORY)) {\n            actor.memory = Memory.get(actor, map);\n        }\n        if (this.hasActorFlag(Flags.Actor.USES_FOV)) {\n            actor.fov = new GWU.fov.FovSystem(map);\n            actor.fov.follow = actor;\n            if (actor.memory) {\n                actor.fov.callback = actor.memory;\n            }\n        }\n    }\n    removeFromMap(actor) {\n        super.removeFromMap(actor);\n        if (actor._map && actor.memory) {\n            Memory.store(actor, actor._map, actor.memory);\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    canSeeEntity(_actor, _entity) {\n        return true;\n    }\n    isAbleToSee(_actor, _entity) {\n        return true;\n    }\n    isAbleToSense(_actor, _entity) {\n        return true;\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.quantity = other.quantity;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n        this.flags = {\n            item: Flags.Item.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        if (config.flags) {\n            this.flags.item = GWU.flag.from(Flags.Item, this.flags.item, config.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, config.flags);\n        }\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n        Object.assign(item.flags, this.flags);\n        item.quantity = options.quantity || 1;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        // fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        // if (this.map.fov.changed) {\n        //     this.fovVersion = this.version;\n        //     this.map.fov.changed = false;\n        // }\n        // if (snap.version !== this.fovVersion) {\n        //     snap.map.fov.copy(this.map.fov);\n        // }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        // if (snap.version < this.fovVersion || this.map.fov.changed) {\n        //     this.map.fov.copy(snap.map.fov);\n        //     this.fovVersion = snap.version;\n        // }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import * as GWU from 'gw-utils';\nexport function getCellPathCost(map, x, y) {\n    const cell = map.cell(x, y);\n    if (cell.blocksMove())\n        return GWU.path.OBSTRUCTION;\n    if (cell.blocksPathing())\n        return GWU.path.FORBIDDEN;\n    if (cell.hasActor())\n        return 10;\n    return 1;\n}\nexport function fillCostMap(map, costMap) {\n    costMap.update((_v, x, y) => getCellPathCost(map, x, y));\n}\nexport function getPathBetween(map, x0, y0, x1, y1, options = {}) {\n    const distanceMap = GWU.grid.alloc(map.width, map.height);\n    const costMap = GWU.grid.alloc(map.width, map.height);\n    fillCostMap(map, costMap);\n    GWU.path.calculateDistances(distanceMap, x0, y0, costMap, options.eightWays, GWU.xy.straightDistanceBetween(x0, y0, x1, y1) + 1);\n    const path = GWU.path.getPath(distanceMap, x1, y1, (x, y) => map.cell(x, y).blocksMove(), options.eightWays);\n    GWU.grid.free(costMap);\n    GWU.grid.free(distanceMap);\n    return path;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    spawn(map, x = -1, y = -1, opts = {}) {\n        var _a;\n        opts.canSpawn = opts.canSpawn || GWU.TRUE;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_a = opts.machine) !== null && _a !== void 0 ? _a : 0;\n        const leader = this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addLeader(leader, map, x, y, opts)) {\n            return null;\n        }\n        return leader;\n    }\n    _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        entries.forEach(([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                this._spawnMember(kindId, map, leader, opts);\n            }\n        });\n        return count;\n    }\n    _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1, -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addMember(member, map, x, y, leader, opts)) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canSpawn(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\n// export class SpriteFX extends FX {\n//     sprite: GWU.sprite.SpriteConfig;\n//     stepCount: number;\n//     x: number;\n//     y: number;\n//     constructor(\n//         map: MapType,\n//         sprite: string | GWU.sprite.SpriteConfig,\n//         x: number,\n//         y: number,\n//         opts: SpriteFxOptions = {}\n//     ) {\n//         const count = opts.blink || 1;\n//         const duration = opts.duration || 1000;\n//         opts.speed = opts.speed || duration / (2 * count - 1);\n//         super(map, opts);\n//         if (typeof sprite === 'string') {\n//             const name = sprite;\n//             sprite = GWU.sprite.sprites[sprite];\n//             if (!sprite) throw new Error('Cannot find sprite! ' + name);\n//         }\n//         this.sprite = sprite;\n//         this.x = x || 0;\n//         this.y = y || 0;\n//         this.stepCount = 2 * count - 1;\n//     }\n//     start() {\n//         this.map.addFx(this.x, this.y, this.sprite);\n//         return super.start();\n//     }\n//     step() {\n//         --this.stepCount;\n//         if (this.stepCount <= 0) return this.stop();\n//         if (this.stepCount % 2 == 0) {\n//             this.map.removeFx(this);\n//         } else {\n//             this.map.addFx(this.x, this.y, this);\n//         }\n//     }\n//     stop(result?: any) {\n//         this.map.removeFx(this);\n//         return super.stop(result);\n//     }\n//     moveDir(dx: number, dy: number) {\n//         return this.moveTo(this.x + dx, this.y + dy);\n//     }\n//     moveTo(x: number, y: number) {\n//         this.map.moveFx(x, y, this);\n//         return true;\n//     }\n// }\nexport async function flashSprite(map, x, y, sprite, duration = 100, count = 1, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ visible: true })\n        .to({ visible: false })\n        .repeat(count)\n        .repeatDelay(duration)\n        .duration(duration)\n        .onUpdate((obj) => {\n        if (obj.visible) {\n            map.addFx(x, y, entity);\n        }\n        else {\n            map.removeFx(entity);\n        }\n    });\n    // realTime\n    animator = animator || GWU.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nGWU.sprite.install('bump', 'white', 50);\nexport async function hit(map, target, sprite, duration, animator) {\n    sprite = sprite || 'hit';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('hit', 'red', 50);\nexport async function miss(map, target, sprite, duration, animator) {\n    sprite = sprite || 'miss';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('miss', 'green', 50);\nexport async function fadeInOut(map, x, y, sprite, duration = 100, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite).clone();\n    }\n    else {\n        sprite = GWU.sprite.make(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ opacity: 0 })\n        .to({ opacity: 100 })\n        .repeat(2)\n        .yoyo(true)\n        .duration(Math.floor(duration / 2))\n        .onUpdate((obj) => {\n        entity.sprite.opacity = obj.opacity;\n        map.cell(x, y).needsRedraw = true; // we changed the sprite so redraw\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n    });\n    // realTime\n    animator = animator || GWU.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport async function moveSprite(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    const from = { x: GWU.xy.x(source), y: GWU.xy.y(source) };\n    map.addFx(from.x, from.y, entity);\n    let duration = opts.duration ||\n        Math.ceil(16 * (GWU.xy.maxAxisFromTo(source, target) / (opts.speed || 8)));\n    if (GWU.xy.isLoc(target)) {\n        target = { x: target[0], y: target[1] };\n    }\n    const tween = GWU.tween\n        .make(from)\n        .to(target)\n        .duration(duration)\n        .onUpdate((vals) => {\n        // tweens dont update every step, so...\n        // draw line from current pos to vals pos\n        // check each step for blocking...\n        // end at either vals or last blocking spot\n        const dest = { x: entity.x, y: entity.y };\n        const ok = GWU.xy.forLineBetween(dest.x, dest.y, vals.x, vals.y, (x, y) => {\n            if (opts.stepFn) {\n                if (opts.stepFn(x, y)) {\n                    if (!opts.stopBeforeWalls) {\n                        dest.x = x;\n                        dest.y = y;\n                    }\n                    return false;\n                }\n            }\n            else if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (!opts.stopBeforeWalls) {\n                    dest.x = x;\n                    dest.y = y;\n                }\n                return false;\n            }\n            dest.x = x;\n            dest.y = y;\n        });\n        map.moveFx(entity, dest.x, dest.y);\n        if (!ok) {\n            tween.stop();\n        }\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n        return entity;\n    });\n    const animator = opts.animator || map;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport function bolt(map, source, target, sprite, opts = {}) {\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport async function projectile(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    if (sprite.ch && sprite.ch.length == 4) {\n        const dir = GWU.xy.dirFromTo(source, target);\n        let index = 0;\n        if (dir[0] && dir[1]) {\n            index = 2;\n            if (dir[0] != dir[1]) {\n                // remember up is -y\n                index = 3;\n            }\n        }\n        else if (dir[0]) {\n            index = 1;\n        }\n        const ch = sprite.ch[index];\n        sprite = GWU.sprite.make(ch, sprite.fg, sprite.bg);\n    }\n    else if (sprite.ch && sprite.ch.length !== 1) {\n        throw new Error('projectile requires 4 chars - vert,horiz,diag-left,diag-right (e.g: \"|-\\\\/\")');\n    }\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport function beam(map, from, to, sprite, opts = {}) {\n    opts.fade = opts.fade || 100;\n    if (opts.stopAtWalls === undefined)\n        opts.stopAtWalls = true;\n    const line = [];\n    GWU.xy.forLineFromTo(from, to, (x, y) => {\n        if (!map.hasXY(x, y))\n            return false;\n        if (opts.stepFn && opts.stepFn(x, y))\n            return false;\n        if (opts.stopAtWalls || opts.stopBeforeWalls) {\n            if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (opts.stopBeforeWalls)\n                    return false;\n                line.push([x, y]);\n                return false;\n            }\n        }\n        line.push([x, y]);\n        return true;\n    });\n    const duration = opts.duration || Math.ceil(16 * (line.length / (opts.speed || 8)));\n    const animator = opts.animator || map;\n    const promises = [];\n    let lastIndex = -1;\n    const tween = GWU.tween\n        .make({ index: 0 })\n        .to({ index: line.length - 1 })\n        .duration(duration)\n        .onUpdate((vals) => {\n        while (lastIndex < vals.index) {\n            ++lastIndex;\n            const loc = line[lastIndex] || [-1, -1];\n            promises.push(fadeInOut(map, loc[0], loc[1], sprite, opts.fade, animator));\n        }\n    })\n        .onFinish(async () => {\n        await Promise.all(promises);\n        const loc = line[line.length - 1];\n        return { x: loc[0], y: loc[1] };\n    });\n    animator.addAnimation(tween);\n    return tween.start();\n}\nfunction isInShape(shape, cx, cy, allowCenter, x, y) {\n    const sx = Math.abs(x - cx);\n    const sy = Math.abs(y - cy);\n    if (sx == 0 && sy == 0 && !allowCenter)\n        return false;\n    switch (shape) {\n        case '+':\n            return sx == 0 || sy == 0;\n        case 'x':\n        case 'X':\n            return sx == sy;\n        case '*':\n            return sx == 0 || sy == 0 || sx == sy;\n        default:\n            return true;\n    }\n}\nfunction checkExplosionOpts(opts) {\n    opts.speed = opts.speed || 2;\n    opts.fade = opts.fade || 100;\n    opts.shape = opts.shape || 'o';\n    if (opts.center === undefined) {\n        opts.center = true;\n    }\n}\nexport function explosion(map, x, y, radius, sprite, opts = {}) {\n    checkExplosionOpts(opts);\n    opts.animator = opts.animator || map;\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const grid = GWU.grid.alloc(map.width, map.height);\n    const fov = new GWU.fov.FOV({\n        isBlocked(x, y) {\n            return map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE);\n        },\n        hasXY(x, y) {\n            return map.hasXY(x, y);\n        },\n    });\n    fov.calculate(x, y, radius, (x1, y1) => {\n        grid[x1][y1] = 1;\n    });\n    const duration = opts.duration || 32 * (radius / opts.speed);\n    const promises = [];\n    const tween = GWU.tween\n        .make({ r: 0 })\n        .to({ r: radius })\n        .duration(duration)\n        .onUpdate((vals) => {\n        const minX = Math.max(0, x - vals.r);\n        const minY = Math.max(0, y - vals.r);\n        const maxX = Math.min(map.width - 1, x + vals.r);\n        const maxY = Math.min(map.height - 1, y + vals.r);\n        for (let x1 = minX; x1 <= maxX; ++x1) {\n            for (let y1 = minY; y1 <= maxY; ++y1) {\n                if (grid[x1][y1] &&\n                    GWU.xy.distanceBetween(x, y, x1, y1) <= vals.r) {\n                    grid[x1][y1] = 0;\n                    if (isInShape(opts.shape, x, y, opts.center, x1, y1)) {\n                        promises.push(fadeInOut(map, x1, y1, sprite, opts.fade, opts.animator));\n                    }\n                }\n            }\n        }\n    })\n        .onFinish(async (_obj, success) => {\n        GWU.grid.free(grid);\n        await Promise.all(promises);\n        return success;\n    });\n    opts.animator.addAnimation(tween);\n    return tween.start();\n}\n/*\nexport function explosionFor(\n    map: MapType,\n    grid: GWU.grid.NumGrid,\n    x: number,\n    y: number,\n    radius: number,\n    sprite: string | GWU.sprite.SpriteConfig,\n    opts: ExplosionOptions = {}\n) {\n    checkExplosionOpts(opts);\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    const animation = new ExplosionFX(\n        map,\n        grid,\n        x,\n        y,\n        radius,\n        sprite,\n        opts.speed,\n        opts.fade,\n        opts.shape,\n        opts.center,\n        opts.stepFn\n    );\n    return opts.playFn!(animation);\n}\n*/\n","import * as GWU from 'gw-utils';\nimport * as Tile from './tile';\nimport '../effect/handlers';\nimport '../effect/types';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([30, 30, 30]).rand(20, 0, 0, 0),\n    bg: GWU.color.from([2, 2, 10]).rand(0, 2, 2, 0),\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: 'TILE:DOOR_OPEN',\n        open: 'TILE:DOOR_OPEN_ALWAYS',\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            effects: 'TILE:DOOR~!',\n        },\n        enter: null,\n        open: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: 'EMIT:UP_STAIRS',\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: 'EMIT:DOWN_STAIRS',\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: GWU.color.from([5, 8, 20]).dance(10, 0, 4, 15),\n    bg: GWU.color.from([10, 15, 41]).dance(6, 5, 5, 5),\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([5, 8, 10]).dance(10, 0, 4, 15),\n    bg: GWU.color.from([10, 30, 30]).dance(6, 0, 10, 10),\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    depth: 'SURFACE',\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_LIST_IN_SIDEBAR","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_SAFE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","lastId","kind","_map","key","machineHome","depth","light","flags","entity","next","id","map","hasEntityFlag","Flags.Entity","L_ON_MAP","Error","setEntityFlag","addToMap","clearEntityFlag","removeFromMap","sprite","isDestroyed","L_DESTROYED","other","constructor","copy","Object","assign","canBeSeen","tag","tags","includes","matches","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","buffer","bounds","drawStatus","dest","_observer","drawSprite","name","EntityKind","config","requiredTileTags","flavor","description","make","split","t","trim","slice","init","_entity","length","hasAllTileTags","hasAnyTileTag","_opts","mixer","Mixer","getAppearanceAt","wrapText","width","makeOpts","Entity.Entity","super","leader","items","fov","memory","visionDistance","actor","Flags.Depth","ACTOR","hasActorFlag","Flags.Actor","IS_PLAYER","canSee","isAbleToSee","isDirectlyVisible","xy","distanceBetween","forLineBetween","i","j","blocksVision","canSeeOrSense","isAbleToSense","isAnyKindOfVisible","item","pickupItem","dropItem","handlers","installHandler","handler","toLowerCase","effectTypes","installType","type","startsWith","endPos","indexOf","tile","substring","effects","Array","isArray","effect","entries","forEach","value","undefined","JSON","stringify","typeName","shift","makeFn","e","push","parts","installedEffects","trigger","bind","from","install","obj","clone","_a","_b","_c","_d","index","dissipate","priority","groundTile","article","tileMech","hasEffect","Flags.Tile","T_IS_FLAMMABLE","arraysIntersect","every","blocksMove","hasTileFlag","T_PATHING_BLOCKER","arg","color","result","fg","toString","options","_e","_f","base","extends","tiles","text","replace","search","Number","parseInt","delta","makeEffect","message","Flags.TileMech","ch","bg","opacity","all","get","args","BasicEffect","chance","seen","Flags.Effect","loc","ctx","force","rng","random","didSomething","eff","nextAlways","E_NEXT_ALWAYS","makeBasicEffect","makeSpreadEffect","SpreadEffect","grow","decrement","matchTile","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","spawnMap","grid","alloc","height","computeSpawnMap","free","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","v","E_NEXT_EVERYWHERE","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","cellIsOk","isStart","hasXY","hasCellFlag","Flags.Cell","EVENT_PROTECTED","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","hasTile","dir","x2","y2","madeChange","startProb","probDec","fill","count","DIRS","clearAll","clear","clearDepth","GAS","LIQUID","SURFACE","GROUND","blockingMap","eachActor","a","matchingLocNear","c","removeActor","addActor","eachItem","removeItem","addItem","makeEmitHandler","emitEffect","events","emit","makeMessageHandler","src","info","msg","messageEffect","aware","addAt","makeActivateMachine","activateMachine","machine","machineId","makeTileHandler","superpriority","blockedByActors","blockedByItems","tileEffect","setTile","makeClearHandler","layers","reduce","out","ALL_LAYERS","clearEffect","_ctx","makeFeatureHandler","featureEffect","feat","Effect.installedEffects","values","chokeCount","TILE.tiles","NULL","snapshot","makeMixer","TILE.get","hasStableSnapshot","STABLE_SNAPSHOT","hasStableMemory","getSnapshot","checkEntities","some","hasItem","hasActor","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","withEntities","needsRedraw","changed","CHANGED","Math","max","TILE.Tile","highestPriorityTile","cb","find","blocksPathing","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","current","blocksLayer","blockedByOtherLayers","highestPriority","ground","depthTile","glowLightChanged","setMapFlag","Flags.Map","MAP_SIDEBAR_TILES_CHANGED","setCellFlag","CAUGHT_FIRE_THIS_TURN","blackOut","tileFlag","tileMechFlag","hasTileMechFlag","event","ev","_activate","itemAt","withEffects","fireEvent","hasItems","foundIndex","clearCellFlag","splice","isKey","actorAt","isPlayer","actors","player","HAS_FX","fx","fxAt","_fx","MapLayer","properties","_other","_x","_y","_tile","_actor","_item","_dt","TileLayer","ActorLayer","ItemLayer","GasLayer","volume","startingVolume","spread","update","d","clearTile","floor","min","total","highestVolume","startingTile","highestTile","updateCellVolume","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","fire","TM_EXPLOSIVE_PROMOTE","x0","y0","n","BasicDrawer","_cell","Buffer","offsetX","offsetY","drawCell","needSnapshot","getAppearance","putSnapshot","applyLight","L_VISUALLY_DISTINCT","separate","surface","liquid","gas","drawInto","cosmetic","number","hasFx","dances","COLORS_DANCE","bake","isVisible","isRevealed","getLight","multiply","isCursor","invert","scale","machineCount","_seed","_animations","_queuedEvents","drawer","cells","seed","LightSystem","initLayers","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","ITEM","Layer.ItemLayer","Layer.ActorLayer","layer","isAt","fireEffects","hasPlayer","_addFx","updated","_removeFx","arrayDelete","fmt","log","console","dump","hasMapFlag","MAP_NEEDS_REDRAW","clearMapFlag","l","boundary","isBoundaryXY","clearTiles","dt","tick","filter","isRunning","fireAll","willFire","EVENT_FIRED_THIS_TURN","promoteChance","w","originX","originY","eachGlowLight","_cb","isDark","h","Memory","source","isMemory","i2","a2","mem","currentList","newList","setLight","forget","storeMemory","cache","store","actorMemory","ActorKind","Entity.EntityKind","DEFAULT","DEFAULT_ACTOR","vision","normal","HAS_MEMORY","Memory.get","USES_FOV","FovSystem","follow","callback","Memory.store","action","list","remove","makeOptions","kinds","makeKind","randomKind","match","forbidTags","k","made","quantity","ItemKind","Flags.Item","updateChokepoints","updateCounts","passMap","passableArcCount","oldX","CLOCK_DIRS","oldY","newX","newY","cellCount","floodFillCount","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","eachCell","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","prefab","charToTile","isStringArray","len","line","updateChokeCounts","layerVersion","lightVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","getCellPathCost","path","OBSTRUCTION","FORBIDDEN","fillCostMap","costMap","_v","x1","y1","distanceMap","calculateDistances","eightWays","straightDistanceBetween","getPath","members","horde","range","frequency","Flags","canSpawn","TRUE","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","matchingLoc","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted","async","flashSprite","duration","animator","Entity.make","addFx","tween","visible","to","repeat","repeatDelay","onUpdate","removeFx","loop","addAnimation","start","fadeInOut","yoyo","onFinish","moveSprite","target","ceil","maxAxisFromTo","speed","isLoc","vals","stepFn","stopBeforeWalls","moveFx","stop","isInShape","shape","cx","cy","allowCenter","sx","abs","sy","dirFromTo","fade","stopAtWalls","forLineFromTo","promises","lastIndex","Promise","radius","center","checkExplosionOpts","FOV","isBlocked","calculate","r","minX","minY","maxX","maxY","_obj","success","rand","enter","open","close","dance"],"mappings":"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"}