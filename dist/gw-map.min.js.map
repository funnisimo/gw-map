{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/actor/actor.js","../js/effect/handler.js","../js/effect/make.js","../js/tile/tile.js","../js/tile/tiles.js","../js/tile/index.js","../js/effect/fire.js","../js/effect/handlers/emit.js","../js/effect/handlers/fn.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/effect.js","../js/effect/handlers/tile.js","../js/map/cell.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/actorLayer.js","../js/layer/itemLayer.js","../js/layer/gasLayer.js","../js/layer/fireLayer.js","../js/draw/basic.js","../js/map/map.js","../js/memory/memory.js","../js/memory/system.js","../js/actor/kind.js","../js/actor/make.js","../js/item/item.js","../js/item/kind.js","../js/item/make.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/path.js","../js/horde/horde.js","../js/horde/make.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_ON_MAP\"] = Fl(17)] = \"L_ON_MAP\";\n    Entity[Entity[\"DEFAULT_ACTOR\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ACTOR\";\n    Entity[Entity[\"DEFAULT_ITEM\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ITEM\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n    Actor[Actor[\"HAS_MEMORY\"] = Fl(1)] = \"HAS_MEMORY\";\n    Actor[Actor[\"USES_FOV\"] = Fl(2)] = \"USES_FOV\";\n    Actor[Actor[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n    Item[Item[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(0)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(1)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"KNOWN_TO_BE_SAFE\"] = Fl(2)] = \"KNOWN_TO_BE_SAFE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to speed checks\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(16)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(27)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(18)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(19)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_TICK_EFFECT\"] = Fl(22)] = \"HAS_TICK_EFFECT\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_SAFE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_SPREAD_CIRCLE\"] = Fl(13)] = \"E_SPREAD_CIRCLE\";\n    Effect[Effect[\"E_SPREAD_LINE\"] = Fl(14)] = \"E_SPREAD_LINE\";\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nlet lastId = 0;\nexport class Entity {\n    constructor(kind) {\n        this._map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n        this.id = '' + ++lastId;\n    }\n    get map() {\n        return this._map;\n    }\n    addToMap(map, x, y) {\n        if (this.hasEntityFlag(Flags.Entity.L_ON_MAP)) {\n            throw new Error('Entity is currently on a map!');\n        }\n        this.x = x;\n        this.y = y;\n        this.setEntityFlag(Flags.Entity.L_ON_MAP);\n        if (this._map === map) {\n            return false;\n        }\n        this._map = map;\n        this.kind.addToMap(this, map);\n        return true;\n    }\n    removeFromMap() {\n        this.clearEntityFlag(Flags.Entity.L_ON_MAP);\n        this.kind.removeFromMap(this);\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    isAt(x, y) {\n        return this.x === x && this.y === y;\n    }\n    clone() {\n        const other = new this.constructor(this.kind);\n        other.copy(this);\n        return other;\n    }\n    copy(other) {\n        this.depth = other.depth;\n        this.light = other.light;\n        Object.assign(this.flags, other.flags);\n        this.next = other.next;\n        this.x = other.x;\n        this.y = other.y;\n        this.kind = other.kind;\n        this.id = other.id;\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    setEntityFlag(flag) {\n        this.flags.entity |= flag;\n    }\n    clearEntityFlag(flag) {\n        this.flags.entity &= ~flag;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isKey(x, y) {\n        return this.key && this.key.matches(x, y);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n    drawStatus(buffer, bounds) {\n        return this.kind.drawStatus(this, buffer, bounds);\n    }\n    drawInto(dest, _observer) {\n        dest.drawSprite(this.sprite);\n    }\n    toString() {\n        return `${this.constructor.name}-${this.id} @ ${this.x},${this.y}`;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requiredTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requiredTileTags) {\n            if (typeof config.requiredTileTags === 'string') {\n                this.requiredTileTags = config.requiredTileTags\n                    .split(/[,|]/)\n                    .map((t) => t.trim());\n            }\n            else {\n                this.requiredTileTags = config.requiredTileTags\n                    .slice()\n                    .map((t) => t.trim());\n            }\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    addToMap(_entity, _map) { }\n    removeFromMap(_entity) { }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAllTileTags(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    avoidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAnyTileTag(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n    drawStatus(entity, buffer, bounds) {\n        if (!entity.map)\n            return 0;\n        if (entity.isDestroyed)\n            return 0;\n        const mixer = new GWU.sprite.Mixer();\n        entity.map.getAppearanceAt(entity.x, entity.y, mixer);\n        buffer.drawSprite(bounds.x + 1, bounds.y, mixer);\n        buffer.wrapText(bounds.x + 3, bounds.y, bounds.width - 3, entity.getName(), 'purple');\n        return 1;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.next = null;\n        this.leader = null;\n        this.items = null;\n        this.fov = null;\n        this.memory = null;\n        this.visionDistance = 99;\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.leader = other.leader;\n        this.items = other.items;\n        this.fov = other.fov;\n        this.memory = other.memory;\n        this.visionDistance = other.visionDistance;\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    canSee(x, y) {\n        if (x instanceof Entity.Entity) {\n            return this.canSee(x.x, x.y) && this.kind.isAbleToSee(this, x);\n        }\n        if (this.fov) {\n            return this.fov.isDirectlyVisible(x, y);\n        }\n        else if (this.map) {\n            return GWU.xy.forLineBetween(this.x, this.y, x, y, (i, j) => GWU.xy.distanceBetween(this.x, this.y, i, j) <=\n                this.visionDistance &&\n                !this.map.cell(i, j).blocksVision());\n        }\n        else {\n            return false; // need a map or an fov\n        }\n    }\n    canSeeOrSense(x, y) {\n        if (x instanceof Entity.Entity) {\n            return (this.canSeeOrSense(x.x, x.y) &&\n                (this.kind.isAbleToSee(this, x) ||\n                    this.kind.isAbleToSense(this, x)));\n        }\n        if (this.fov) {\n            return this.fov.isAnyKindOfVisible(x, y);\n        }\n        return this.canSee(x, y);\n    }\n    isAbleToSee(entity) {\n        return this.kind.isAbleToSee(this, entity);\n    }\n    isAbleToSense(entity) {\n        return this.kind.isAbleToSense(this, entity);\n    }\n    ////////////////// INVENTORY\n    async pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    async dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n}\n","// @ts-nocheck\nexport class Handler {\n    make(src, dest) {\n        return true;\n    }\n    fire(config, map, x, y, ctx) {\n        return false;\n    }\n}\nexport const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id] = handler;\n}\n","import * as GWU from 'gw-utils';\nimport { handlers } from './handler';\nimport { Effect as Flags } from '../flags';\nexport function make(opts) {\n    var _a;\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    if (typeof opts === 'string') {\n        throw new Error('Cannot make effect from string: ' + opts);\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    // now make base effect stuff\n    const info = {\n        flags: GWU.flag.from(Flags, opts.flags),\n        chance: (_a = opts.chance) !== null && _a !== void 0 ? _a : 0,\n        next: null,\n        id: opts.id || 'n/a',\n    };\n    if (opts.next) {\n        if (typeof opts.next === 'string') {\n            info.next = opts.next;\n        }\n        else {\n            info.next = make(opts.next);\n        }\n    }\n    // and all the handlers\n    Object.values(handlers).forEach((v) => v.make(opts, info));\n    return info;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'string') {\n        const effect = effects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\n// resetMessageDisplayed\nexport function reset(effect) {\n    effect.flags &= ~Flags.E_FIRED;\n}\nexport function resetAll() {\n    Object.values(effects).forEach((e) => reset(e));\n}\nexport const effects = {};\nexport function install(id, config) {\n    const effect = make(config);\n    effects[id] = effect;\n    effect.id = id;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/make';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string') {\n                effects[key] = value;\n                return;\n            }\n            effects[key] = makeEffect(value);\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as Tile from './tile';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: [30, 30, 30, 20, 0, 0, 0],\n    bg: [2, 2, 10, 0, 2, 2, 0],\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: { tile: 'DOOR_OPEN' },\n        open: { tile: 'DOOR_OPEN_ALWAYS' },\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            tile: 'DOOR',\n            flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY',\n        },\n        enter: null,\n        open: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: { emit: 'UP_STAIRS' },\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: { emit: 'DOWN_STAIRS' },\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: [5, 8, 20, 10, 0, 4, 15, true],\n    bg: [10, 15, 41, 6, 5, 5, 5, true],\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: [5, 8, 10, 10, 0, 4, 15, true],\n    bg: [10, 30, 30, 6, 0, 10, 10, true],\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    depth: 'SURFACE',\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\nimport './tiles';\n","import * as GWU from 'gw-utils';\nimport { Effect as Flags } from '../flags';\nimport { from } from './make';\nimport { handlers } from './handler';\nexport async function fire(effect, map, x, y, ctx_ = {}) {\n    if (!effect)\n        return false;\n    if (typeof effect === 'string') {\n        const name = effect;\n        effect = from(name);\n        if (!effect)\n            throw new Error('Failed to find effect: ' + name);\n    }\n    const ctx = ctx_;\n    if (!ctx.force && effect.chance && !map.rng.chance(effect.chance, 10000))\n        return false;\n    const grid = (ctx.grid = GWU.grid.alloc(map.width, map.height));\n    let didSomething = false;\n    const allHandlers = Object.values(handlers);\n    for (let h of allHandlers) {\n        if (await h.fire(effect, map, x, y, ctx)) {\n            didSomething = true;\n        }\n    }\n    // do the next effect - if applicable\n    if (effect.next &&\n        (didSomething || effect.flags & Flags.E_NEXT_ALWAYS) &&\n        !GWU.data.gameHasEnded) {\n        const nextInfo = typeof effect.next === 'string' ? from(effect.next) : effect.next;\n        if (effect.flags & Flags.E_NEXT_EVERYWHERE) {\n            await grid.forEachAsync(async (v, i, j) => {\n                if (!v)\n                    return;\n                didSomething =\n                    (await fire(nextInfo, map, i, j, ctx)) || didSomething;\n            });\n        }\n        else {\n            didSomething =\n                (await fire(nextInfo, map, x, y, ctx)) || didSomething;\n        }\n    }\n    // bookkeeping\n    if (didSomething &&\n        // map.isVisible(x, y) &&\n        !(effect.flags & Flags.E_NO_MARK_FIRED)) {\n        effect.flags |= Flags.E_FIRED;\n    }\n    GWU.grid.free(grid);\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// EMIT\nexport class EmitEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.emit)\n            return true;\n        if (typeof src.emit !== 'string') {\n            throw new Error('emit effects must be string name to emit: { emit: \"EVENT\" }');\n        }\n        dest.emit = src.emit;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (config.emit) {\n            await GWU.events.emit(config.emit, x, y, ctx);\n            return true;\n        }\n        return false;\n    }\n}\ninstallHandler('emit', new EmitEffect());\n","import { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// FN\nexport class FnEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.fn)\n            return true;\n        if (typeof src.fn !== 'function') {\n            throw new Error('fn effects must be functions.');\n        }\n        dest.fn = src.fn;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.fn) {\n            return await config.fn(config, map, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('fn', new FnEffect());\n","import * as GWU from 'gw-utils';\nimport { Handler, installHandler } from '../handler';\nimport { Effect as Flags } from '../../flags';\n//////////////////////////////////////////////\n// MESSAGE\nexport class MessageEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.message)\n            return true;\n        if (typeof src.message !== 'string') {\n            throw new Error('Emit must be configured with name of event to emit');\n        }\n        dest.message = src.message;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (!config.message)\n            return false;\n        const fired = !!(config.flags & Flags.E_FIRED);\n        if (config.message &&\n            config.message.length &&\n            !fired\n        // && map.isVisible(x, y)\n        ) {\n            GWU.message.addAt(x, y, config.message, ctx);\n            return true;\n        }\n        return false;\n    }\n}\ninstallHandler('message', new MessageEffect());\n","import { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// ActivateMachine\nexport class ActivateMachineEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.activateMachine)\n            return true;\n        dest.activateMachine = true;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.activateMachine) {\n            const cell = map.cell(x, y);\n            const machine = cell.machineId;\n            if (!machine)\n                return false;\n            return await map.activateMachine(machine, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('activateMachine', new ActivateMachineEffect());\n","import { Handler, installHandler } from '../handler';\nimport * as FIRE from '../fire';\n//////////////////////////////////////////////\n// EMIT\nexport class EffectEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.effect)\n            return true;\n        dest.effect = src.effect;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.effect) {\n            return await FIRE.fire(config.effect, map, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('effect', new EffectEffect());\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../../flags';\nimport * as Tile from '../../tile';\nimport { Handler, installHandler } from '../handler';\nexport class SpawnEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!src.tile)\n            return true; // no error\n        let config = src.tile;\n        if (typeof config === 'string') {\n            const parts = config.split(/[,|]/).map((p) => p.trim());\n            config = {\n                tile: parts[0],\n                grow: Number.parseInt(parts[1] || '0'),\n                decrement: Number.parseInt(parts[2] || '0'),\n            };\n        }\n        const info = {\n            grow: (_b = (_a = config.grow) !== null && _a !== void 0 ? _a : config.spread) !== null && _b !== void 0 ? _b : 0,\n            decrement: (_c = config.decrement) !== null && _c !== void 0 ? _c : 0,\n            flags: GWU.flag.from(Flags.Effect, config.flags),\n            volume: (_d = config.volume) !== null && _d !== void 0 ? _d : 0,\n            next: (_e = config.next) !== null && _e !== void 0 ? _e : null,\n        };\n        const id = (_f = config.tile) !== null && _f !== void 0 ? _f : config.id;\n        if (typeof id === 'string') {\n            info.tile = id;\n        }\n        else {\n            throw new Error('Invalid tile spawn config: ' + id);\n        }\n        if (!info.tile) {\n            throw new Error('Must have tile.');\n        }\n        const match = (_g = config.matchTile) !== null && _g !== void 0 ? _g : config.match;\n        if (typeof match === 'string') {\n            info.matchTile = match;\n        }\n        else if (match) {\n            throw new Error('Invalid tile spawn match tile: ' + config.matchTile);\n        }\n        dest.tile = info;\n        return true;\n    }\n    fire(effect, map, x, y, ctx) {\n        if (!effect.tile)\n            return false; // did nothing\n        const id = effect.tile.tile;\n        const tile = Tile.tiles[id] || null;\n        if (!tile) {\n            throw new Error('Failed to find tile for effect: ' + id);\n        }\n        const abortIfBlocking = !!(effect.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        const isBlocking = !!(abortIfBlocking &&\n            !(effect.flags & Flags.Effect.E_PERMIT_BLOCKING) &&\n            (tile.blocksPathing() ||\n                effect.flags & Flags.Effect.E_TREAT_AS_BLOCKING));\n        let didSomething = false;\n        didSomething = computeSpawnMap(effect, map, x, y, ctx);\n        if (!didSomething) {\n            return false;\n        }\n        if (abortIfBlocking &&\n            isBlocking &&\n            this.mapDisruptedBy(map, ctx.grid)) {\n            // GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (effect.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, ctx.grid, effect.flags)) {\n                didSomething = true;\n            }\n        }\n        const spawned = spawnTiles(effect.flags, ctx.grid, map, tile, effect.tile.volume, ctx.machine);\n        return spawned;\n    }\n    mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(map.width, map.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(map.width, map.height, (i, j) => {\n            const lakeX = i + blockingToMapX;\n            const lakeY = j + blockingToMapY;\n            if (blockingGrid.get(lakeX, lakeY)) {\n                if (map.cell(i, j).isStairs()) {\n                    disrupts = true;\n                }\n            }\n            else if (!map.cell(i, j).blocksMove()) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGWU.grid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\ninstallHandler('tile', new SpawnEffect());\n// tick\n// Spawn\nexport function spawnTiles(flags, spawnMap, map, tile, volume = 0, machine) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = !!(flags & Flags.Effect.E_BLOCKED_BY_OTHER_LAYERS);\n    const superpriority = !!(flags & Flags.Effect.E_SUPERPRIORITY);\n    const blockedByActors = !!(flags & Flags.Effect.E_BLOCKED_BY_ACTORS);\n    const blockedByItems = !!(flags & Flags.Effect.E_BLOCKED_BY_ITEMS);\n    // const applyEffects = ctx.refreshCell;\n    volume = volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            // const isRoot = spawnMap[i][j] === 1;\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.hasTile(tile)) {\n                // If the new cell already contains the fill terrain,\n                // if (tile.depth == Flags.Depth.GAS) {\n                //     spawnMap[i][j] = 1;\n                //     cell.gasVolume += volume;\n                // } else if (tile.depth == Flags.Depth.LIQUID) {\n                //     spawnMap[i][j] = 1;\n                //     cell.liquidVolume += volume;\n                // }\n            }\n            else if (map.setTile(i, j, tile, {\n                volume,\n                superpriority,\n                blockedByOtherLayers,\n                blockedByActors,\n                blockedByItems,\n                machine,\n            })) {\n                // if the fill won't violate the priority of the most important terrain in this cell:\n                spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                // map.redrawCell(cell);\n                // if (volume && cell.gas) {\n                //     cell.volume += (feat.volume || 0);\n                // }\n                cell.flags.cell |= Flags.Cell.EVENT_FIRED_THIS_TURN;\n                if (flags & Flags.Effect.E_PROTECTED) {\n                    cell.flags.cell |= Flags.Cell.EVENT_PROTECTED;\n                }\n                accomplishedSomething = true;\n                // debug('- tile', i, j, 'tile=', tile.id);\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.setMapFlag(Flags.Map.MAP_CHANGED);\n    }\n    return accomplishedSomething;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.tile.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.tile.matchTile &&\n        !isStart &&\n        !cell.hasTile(effect.tile.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, map, x, y, ctx) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const config = effect.tile;\n    let startProb = config.grow || 0;\n    let probDec = config.decrement || 0;\n    const spawnMap = ctx.grid;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\n// export function spreadCircle(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     let radius = 0;\n//     startProb = startProb || 100;\n//     if (startProb >= 100) {\n//         probDec = probDec || 100;\n//     }\n//     while (map.rng.chance(startProb)) {\n//         startProb -= probDec;\n//         ++radius;\n//     }\n//     // startProb = 100;\n//     // probDec = 0;\n//     spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n//         if (!cellIsOk(this, i, j, ctx)) return 0;\n//         // const dist = Math.floor(GWU.utils.distanceBetween(x, y, i, j));\n//         // const prob = startProb - dist * probDec;\n//         // if (!map.rng.chance(prob)) return 0;\n//         return 1;\n//     });\n//     // spawnMap[x][y] = 1;\n//     // if (!isOk(flags, x, y, ctx)) {\n//     //     spawnMap[x][y] = 0;\n//     // }\n//     return true;\n// }\n// export function spreadLine(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     let x2, y2;\n//     let madeChange;\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     if (startProb) {\n//         madeChange = true;\n//         if (startProb >= 100) {\n//             probDec = probDec || 100;\n//         }\n//         x2 = x;\n//         y2 = y;\n//         const dir = GWU.xy.DIRS[map.rng.number(4)];\n//         while (madeChange) {\n//             madeChange = false;\n//             x2 = x2 + dir[0];\n//             y2 = y2 + dir[1];\n//             if (\n//                 spawnMap.hasXY(x2, y2) &&\n//                 !spawnMap[x2][y2] &&\n//                 cellIsOk(this, x2, y2, ctx) &&\n//                 map.rng.chance(startProb)\n//             ) {\n//                 spawnMap[x2][y2] = 1;\n//                 madeChange = true;\n//                 startProb -= probDec;\n//             }\n//         }\n//     }\n//     if (!cellIsOk(this, x, y, ctx)) {\n//         spawnMap[x][y] = 0;\n//     }\n//     return true;\n// }\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y])\n            return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const c = map.cell(x, y);\n            return !a.forbidsCell(c);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeActor(a);\n            map.addActor(loc[0], loc[1], a);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y])\n            return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const dest = map.cell(x, y);\n            return !i.forbidsCell(dest);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(i);\n            map.addItem(loc[0], loc[1], i);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nclass ClearTileEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.clear)\n            return true;\n        let config = src.clear;\n        let layers = 0;\n        if (typeof config === 'string') {\n            config = config.split(/[,|]/).map((t) => t.trim());\n        }\n        if (config === true) {\n            layers = Flags.Depth.ALL_LAYERS;\n        }\n        else if (typeof config === 'number') {\n            layers = config;\n        }\n        else if (Array.isArray(config)) {\n            layers = config.reduce((out, v) => {\n                if (typeof v === 'number')\n                    return out | v;\n                const depth = Flags.Depth[v] || 0;\n                return out | depth;\n            }, 0);\n        }\n        else {\n            throw new Error('clear effect must have number or string config.');\n        }\n        dest.clear = layers;\n        return layers > 0;\n    }\n    async fire(config, map, x, y, ctx) {\n        return this.fireSync(config, map, x, y, ctx);\n    }\n    fireSync(config, map, x, y, _ctx) {\n        if (!config.clear)\n            return false;\n        if (!map)\n            return false;\n        const cell = map.cell(x, y);\n        return cell.clearDepth(config.clear);\n    }\n}\ninstallHandler('clear', new ClearTileEffect());\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nGWU.color.install('cellStatusName', 'light_blue');\n// class CellEntities {\n//     cell: Cell;\n//     constructor(cell: Cell) {\n//         this.cell = cell;\n//     }\n//     eachItem(cb: EachCb<Item>): void {\n//         let object: Item | null = this.cell._item;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     eachActor(cb: EachCb<Actor>): void {\n//         let object: Actor | null = this.cell._actor;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     forEach(cb: EachCb<Entity>): void {\n//         this.eachItem(cb);\n//         this.eachActor(cb);\n//     }\n//     some(cb: MatchCb<Entity>): boolean {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         return false;\n//     }\n//     reduce(cb: ReduceCb<Entity>, start?: any): any {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         return start;\n//     }\n// }\nexport class Cell {\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.x = -1;\n        this.y = -1;\n        this.toFire = [];\n        // this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.snapshot = GWU.sprite.makeMixer();\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    get hasStableSnapshot() {\n        return this.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    }\n    get hasStableMemory() {\n        return this.hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        // this._actor = other.actor;\n        // this._item = other.item;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n        other.getSnapshot(this.snapshot);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, checkEntities = false) {\n        var _a, _b;\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        if (!checkEntities)\n            return false;\n        if (this.hasItem()) {\n            if ((_a = this.item) === null || _a === void 0 ? void 0 : _a.hasEntityFlag(flag))\n                return true;\n        }\n        if (this.hasActor()) {\n            if ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.hasEntityFlag(flag))\n                return true;\n        }\n        return false;\n    }\n    hasAllEntityFlags(flags, checkEntities = false) {\n        return (this.entityFlags(checkEntities) & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        var _a, _b;\n        let flag = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            if (this.hasItem()) {\n                flag |= ((_a = this.item) === null || _a === void 0 ? void 0 : _a.flags.entity) || 0;\n            }\n            if (this.hasActor()) {\n                flag |= ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.flags.entity) || 0;\n            }\n        }\n        return flag;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return this.tiles.some((t) => t && t.blocksVision());\n    }\n    blocksPathing() {\n        return this.tiles.some((t) => t && t.blocksPathing());\n    }\n    blocksMove() {\n        return this.tiles.some((t) => t && t.blocksMove());\n    }\n    blocksEffects() {\n        return this.tiles.some((t) => t && t.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isNull() {\n        return this.tiles.every((t) => !t || t === TILE.tiles.NULL);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    // hasKey(): boolean {\n    //     return this._entities.some(\n    //         (e) => !!e.key && e.key.matches(this.x, this.y)\n    //     );\n    // }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile, opts = {}) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (this.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && this.hasItem())\n            return false;\n        if (opts.blockedByActors && this.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && this.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = this.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === TILE.tiles.NULL) {\n                this.tiles[0] = TILE.get(tile.groundTile);\n            }\n        }\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            this.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            this.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            this.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.needsRedraw = true;\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.snapshot.blackOut();\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    needsToFire() {\n        return this.toFire.length > 0;\n    }\n    willFire(event) {\n        return !!this.toFire.find((ctx) => ctx.event === event);\n    }\n    clearEvents() {\n        this.toFire.length = 0;\n    }\n    tileWithEffect(name) {\n        return this.tiles.find((t) => t === null || t === void 0 ? void 0 : t.hasEffect(name)) || null;\n    }\n    async fireAll() {\n        let ctx;\n        let didSomething = false;\n        for (ctx of this.toFire) {\n            didSomething =\n                (await this.fireEvent(ctx.event, ctx)) || didSomething;\n        }\n        this.toFire.length = 0; // clear\n        return didSomething;\n    }\n    async fireEvent(event, ctx = {}) {\n        ctx.cell = this;\n        let didSomething = false;\n        // console.log('fire event - %s', event);\n        for (ctx.tile of this.tiles) {\n            if (!ctx.tile || !ctx.tile.effects)\n                continue;\n            const ev = ctx.tile.effects[event];\n            if (ev && (await this._activate(ev, ctx))) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    async _activate(effect, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.effects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = await Effect.fire(effect, this.map, this.x, this.y, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this.map.itemAt(this.x, this.y);\n    }\n    addItem(item, withEffects = false) {\n        this.setCellFlag(Flags.Cell.HAS_ITEM);\n        item.addToMap(this.map, this.x, this.y);\n        this.map.items.push(item);\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (item.key &&\n                item.key.matches(this.x, this.y) &&\n                this.hasEffect('key')) {\n                const tile = this.tileWithEffect('key');\n                this.toFire.push({\n                    event: 'key',\n                    key: item,\n                    item,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('add_item')) {\n                const tile = this.tileWithEffect('add_item');\n                this.toFire.push({ event: 'add_item', item, tile, cell: this });\n            }\n        }\n    }\n    removeItem(item, withEffects = false) {\n        let hasItems = false;\n        let foundIndex = -1;\n        this.map.items.forEach((obj, index) => {\n            if (obj === item) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasItems = true;\n            }\n        });\n        if (!hasItems) {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.map.items.splice(foundIndex, 1); // delete the item\n        item.removeFromMap();\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (item.isKey(this.x, this.y) && this.hasEffect('no_key')) {\n                const tile = this.tileWithEffect('no_key');\n                this.toFire.push({\n                    event: 'no_key',\n                    key: item,\n                    item,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('remove_item')) {\n                const tile = this.tileWithEffect('remove_item');\n                this.toFire.push({\n                    event: 'remove_item',\n                    item,\n                    tile,\n                    cell: this,\n                });\n            }\n        }\n        return true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this.map.actorAt(this.x, this.y);\n    }\n    addActor(actor, withEffects = false) {\n        this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        if (actor.isPlayer()) {\n            this.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        actor.addToMap(this.map, this.x, this.y);\n        this.map.actors.push(actor);\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (actor.isKey(this.x, this.y) && this.hasEffect('key')) {\n                const tile = this.tileWithEffect('key');\n                this.toFire.push({\n                    event: 'key',\n                    key: actor,\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (actor.isPlayer() && this.hasEffect('add_player')) {\n                const tile = this.tileWithEffect('add_player');\n                this.toFire.push({\n                    event: 'add_player',\n                    actor,\n                    player: actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('add_actor')) {\n                const tile = this.tileWithEffect('add_actor');\n                this.toFire.push({\n                    event: 'add_actor',\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n        }\n    }\n    removeActor(actor, withEffects = false) {\n        let hasActor = false;\n        let foundIndex = -1;\n        this.map.actors.forEach((obj, index) => {\n            if (obj === actor) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasActor = true;\n            }\n        });\n        if (!hasActor) {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        if (foundIndex < 0)\n            return false;\n        actor.removeFromMap();\n        this.map.actors.splice(foundIndex, 1); // delete the actor\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (withEffects) {\n            if (actor.isKey(this.x, this.y) && this.hasEffect('no_key')) {\n                const tile = this.tileWithEffect('no_key');\n                this.toFire.push({\n                    event: 'no_key',\n                    key: actor,\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (actor.isPlayer() && this.hasEffect('remove_player')) {\n                const tile = this.tileWithEffect('remove_player');\n                this.toFire.push({\n                    event: 'remove_player',\n                    actor,\n                    player: actor,\n                    tile,\n                    cell: this,\n                });\n            }\n            else if (this.hasEffect('remove_actor')) {\n                const tile = this.tileWithEffect('remove_actor');\n                this.toFire.push({\n                    event: 'remove_actor',\n                    actor,\n                    tile,\n                    cell: this,\n                });\n            }\n        }\n        return true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        if (this.hasActor()) {\n            const actor = this.map.actorAt(this.x, this.y);\n            if (actor && actor.sprite.ch)\n                return actor.sprite.ch;\n        }\n        if (this.hasItem()) {\n            const item = this.map.itemAt(this.x, this.y);\n            if (item && item.sprite.ch)\n                return item.sprite.ch;\n        }\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n    drawStatus(buffer, bounds) {\n        const lines = buffer.wrapText(bounds.x + 1, bounds.y, bounds.width - 1, this.getName(), 'cellStatusName');\n        return lines;\n    }\n    toString() {\n        return `Cell @ ${this.x},${this.y}`;\n    }\n}\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile, _opts) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts) {\n        const cell = this.map.cell(x, y);\n        return cell.setTile(tile, opts);\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // // Bookkeeping for fire, pressure plates and key-activated tiles.\n        // for (let x = 0; x < this.map.width; ++x) {\n        //     for (let y = 0; y < this.map.height; ++y) {\n        //         const cell = this.map.cell(x, y);\n        //         if (\n        //             !cell.hasCellFlag(\n        //                 Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM\n        //             ) &&\n        //             cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)\n        //         ) {\n        //             cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n        //         }\n        //     }\n        // }\n        return true;\n    }\n}\n","// import * as GWU from 'gw-utils';\nimport { MapLayer } from './mapLayer';\nexport class ActorLayer extends MapLayer {\n    constructor(map, name = 'actor') {\n        super(map, name);\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class ItemLayer extends MapLayer {\n    constructor(map, name = 'item') {\n        super(map, name);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    async tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    await this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        await this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    async exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            await cell.fireEvent(event, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nexport class BasicDrawer {\n    isAnyKindOfVisible(_cell) {\n        return true;\n    }\n    drawInto(dest, map, opts = {}) {\n        const buffer = dest instanceof GWU.buffer.Buffer ? dest : dest.buffer;\n        const offsetX = opts.offsetX || 0;\n        const offsetY = opts.offsetY || 0;\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                if (map.hasXY(x + offsetX, y + offsetY)) {\n                    const cell = map.cell(x + offsetX, y + offsetY);\n                    this.drawCell(mixer, cell, opts.fov);\n                    buffer.drawSprite(x, y, mixer);\n                }\n            }\n        }\n    }\n    drawCell(dest, cell, fov) {\n        dest.blackOut();\n        // const isVisible = fov ? fov.isAnyKindOfVisible(cell.x, cell.y) : true;\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (cell.needsRedraw || needSnapshot) {\n            this.getAppearance(dest, cell);\n            cell.putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            cell.getSnapshot(dest);\n        }\n        this.applyLight(dest, cell, fov);\n        if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT |\n            Flags.Entity.L_LIST_IN_SIDEBAR, true)) {\n            GWU.color.separate(dest.fg, dest.bg);\n        }\n        return true;\n    }\n    // getCellAppearance(cell: CellType, dest: GWU.sprite.Mixer) {\n    //     dest.blackOut();\n    //     const isVisible = true; // this.fov.isAnyKindOfVisible(x, y);\n    //     const isRevealed = true; // this.fov.isRevealed(x, y);\n    //     const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     if (needSnapshot || (cell.needsRedraw && isVisible)) {\n    //         this.layers.forEach((layer) => layer.putAppearance(dest, cell));\n    //         if (dest.dances) {\n    //             cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n    //         } else {\n    //             cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n    //         }\n    //         dest.bake();\n    //         cell.putSnapshot(dest);\n    //         cell.needsRedraw = false;\n    //         cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     } else {\n    //         cell.getSnapshot(dest);\n    //     }\n    //     if (isVisible) {\n    //         const light = this.light.getLight(cell.x, cell.y);\n    //         dest.multiply(light);\n    //     } else if (isRevealed) {\n    //         dest.scale(50);\n    //     } else {\n    //         dest.blackOut();\n    //     }\n    //     if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n    //         GWU.color.separate(dest.fg, dest.bg);\n    //     }\n    // }\n    getAppearance(dest, cell) {\n        const ground = cell.tiles[Flags.Depth.GROUND];\n        const surface = cell.tiles[Flags.Depth.SURFACE];\n        const liquid = cell.tiles[Flags.Depth.LIQUID];\n        const gas = cell.tiles[Flags.Depth.GAS]; // How to get volume!?!?!?!\n        const actor = cell.hasActor() ? cell.map.actorAt(cell.x, cell.y) : null;\n        const item = cell.hasItem() ? cell.map.itemAt(cell.x, cell.y) : null;\n        dest.drawSprite(ground.sprite);\n        if (surface) {\n            dest.drawSprite(surface.sprite);\n        }\n        if (liquid) {\n            dest.drawSprite(liquid.sprite);\n        }\n        if (item) {\n            item.drawInto(dest);\n        }\n        if (actor) {\n            actor.drawInto(dest);\n        }\n        if (gas) {\n            const opacity = GWU.rng.cosmetic.number(50) + 25;\n            dest.drawSprite(gas.sprite, opacity);\n        }\n        if (dest.dances) {\n            cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        else {\n            cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        dest.bake();\n    }\n    applyLight(dest, cell, fov) {\n        const isVisible = !fov || fov.isAnyKindOfVisible(cell.x, cell.y);\n        const isRevealed = !fov || fov.isRevealed(cell.x, cell.y);\n        const light = cell.map.light.getLight(cell.x, cell.y);\n        dest.multiply(light);\n        // TODO - is Clairy\n        // TODO - is Telepathy\n        if (fov && fov.isCursor(cell.x, cell.y)) {\n            dest.invert();\n        }\n        else if (!isVisible) {\n            if (isRevealed) {\n                dest.scale(50);\n            }\n            else {\n                dest.blackOut();\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\n// import { CellMemory } from './cellMemory';\nimport * as Effect from '../effect';\nimport { BasicDrawer } from '../draw/basic';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        // _memory: GWU.grid.Grid<CellMemory>;\n        this.machineCount = 0;\n        this._seed = 0;\n        this.rng = GWU.rng.random;\n        this.id = 'MAP';\n        this.actors = [];\n        this.items = [];\n        this.width = width;\n        this.height = height;\n        this.flags = { map: 0 };\n        this.layers = [];\n        if (opts.id) {\n            this.id = opts.id;\n        }\n        this.drawer = opts.drawer || new BasicDrawer();\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        // this._memory = GWU.grid.make(\n        //     width,\n        //     height,\n        //     (x, y) => new CellMemory(this, x, y)\n        // );\n        if (opts.seed) {\n            this._seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        // this.fov = new GWU.fov.FovSystem(this, opts);\n        this.properties = {};\n        this.initLayers();\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(v) {\n        this._seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    // memory(x: number, y: number): CellMemory {\n    //     return this._memory[x][y];\n    // }\n    // knowledge(x: number, y: number): CellInfoType {\n    //     if (this.fov.isAnyKindOfVisible(x, y)) return this.cell(x,y);\n    //     return this._memory[x][y];\n    // }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n        this.addLayer(Flags.Depth.ITEM, new Layer.ItemLayer(this, 'item'));\n        this.addLayer(Flags.Depth.ACTOR, new Layer.ActorLayer(this, 'actor'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // items\n    hasItem(x, y) {\n        return this.cell(x, y).hasItem();\n    }\n    itemAt(x, y) {\n        return this.items.find((i) => i.isAt(x, y)) || null;\n    }\n    eachItem(cb) {\n        this.items.forEach(cb);\n    }\n    addItem(x, y, item, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addItem(item, fireEffects);\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    removeItem(item, fireEffects = false) {\n        const cell = this.cell(item.x, item.y);\n        if (!cell.removeItem(item, fireEffects))\n            return false;\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    // async moveItem(item: Item, dir: GWU.xy.Loc | number): Promise<boolean> {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = item.x;\n    //     const oldY = item.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[item.depth] as Layer.ItemLayer;\n    //     if (!(await layer.removeItem(item))) return false;\n    //     if (!(await this.addItem(x, y, item))) {\n    //         layer.forceItem(item.x, item.y, item);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (item.lastSeen) {\n    //     //         this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n    //     //         this.clearCellFlag(\n    //     //             item.lastSeen.x,\n    //     //             item.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         item.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.item = item;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     item.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.actors.find((a) => a.isAt(x, y)) || null;\n    }\n    eachActor(cb) {\n        this.actors.forEach(cb);\n    }\n    addActor(x, y, actor, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        cell.addActor(actor, fireEffects);\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    removeActor(actor, fireEffects = false) {\n        const cell = this.cell(actor.x, actor.y);\n        if (!cell.removeActor(actor, fireEffects))\n            return false;\n        if (!fireEffects)\n            return true;\n        return cell.fireAll().then(() => true);\n    }\n    // async moveActor(actor: Actor, dir: GWU.xy.Loc | number): Promise<boolean> {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = actor.x;\n    //     const oldY = actor.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[actor.depth] as Layer.ActorLayer;\n    //     if (!(await layer.removeActor(actor))) return false;\n    //     if (!(await layer.addActor(x, y, actor))) {\n    //         layer.forceActor(actor.x, actor.y, actor);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (actor.lastSeen) {\n    //     //         this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(\n    //     //             actor\n    //     //         );\n    //     //         this.clearCellFlag(\n    //     //             actor.lastSeen.x,\n    //     //             actor.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         actor.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.actor = actor;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     actor.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Information\n    // isVisible(x: number, y: number): boolean {\n    //     return this.fov.isAnyKindOfVisible(x, y);\n    // }\n    hasKey(x, y) {\n        const actor = this.actorAt(x, y);\n        if (actor && actor.isKey(x, y))\n            return true;\n        const item = this.itemAt(x, y);\n        if (item && item.isKey(x, y))\n            return true;\n        return false;\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const getCh = (cell) => {\n            return cell.dump();\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        // this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile\n    // useMemory = false\n    ) {\n        return this.cell(x, y).hasTile(tile);\n        // if (!useMemory) return this.cell(x, y).hasTile(tile);\n        // return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clearTiles(tile);\n    }\n    async tick(dt) {\n        let didSomething = await this.fireAll('tick');\n        for (let layer of this.layers) {\n            if (layer && (await layer.tick(dt))) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cell(x, y));\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.actors = src.actors.slice();\n        this.items = src.items.slice();\n        this.flags.map = src.flags.map;\n        // this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.machineCount = src.machineCount;\n        this._seed = src._seed;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    async fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.fireEvent(event, ctx);\n    }\n    async fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        await willFire.forEachAsync(async (w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    await cell.fireEvent(event, {\n                        force: true,\n                        depth,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    async activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        (await cell.fireEvent('machine', ctx)) || didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    // DRAW\n    drawInto(dest, opts) {\n        this.drawer.drawInto(dest, this, opts);\n    }\n    getAppearanceAt(x, y, dest) {\n        const cell = this.cell(x, y);\n        return this.drawer.drawCell(dest, cell);\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Map } from '../map/map';\nimport * as Flags from '../flags';\nexport class Memory extends Map {\n    constructor(map) {\n        super(map.width, map.height);\n        // this.actor = actor;\n        this.source = map;\n        this.cells.forEach((c) => c.setCellFlag(Flags.Cell.STABLE_MEMORY));\n    }\n    cell(x, y) {\n        let cell = this.cells[x][y];\n        if (!cell.hasCellFlag(Flags.Cell.STABLE_MEMORY)) {\n            cell = this.source.cell(x, y);\n        }\n        return cell;\n    }\n    memory(x, y) {\n        return this.cells[x][y];\n    }\n    isMemory(x, y) {\n        return this.cells[x][y].hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    setTile() {\n        throw new Error('Cannot set tiles on memory.');\n    }\n    addItem() {\n        throw new Error('Cannot add Items to memory!');\n    }\n    removeItem() {\n        throw new Error('Cannot remove Items from memory!');\n    }\n    // async moveItem(): Promise<boolean> {\n    //     throw new Error('Cannot move Items on memory!');\n    // }\n    eachItem(cb) {\n        this.source.eachItem((i) => {\n            if (!this.isMemory(i.x, i.y)) {\n                cb(i);\n                const i2 = this.items.find((other) => other.id == i.id);\n                if (i2) {\n                    const mem = this.cell(i2.x, i2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ITEM | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.items, i2);\n                }\n            }\n        });\n        this.items.forEach(cb);\n    }\n    addActor() {\n        throw new Error('Cannot add Actors to memory!');\n    }\n    removeActor() {\n        throw new Error('Cannot remove Actors from memory!');\n    }\n    // async moveActor(): Promise<boolean> {\n    //     throw new Error('Cannot move Actors on memory!');\n    // }\n    eachActor(cb) {\n        this.source.eachActor((a) => {\n            if (!this.isMemory(a.x, a.y)) {\n                cb(a);\n                const a2 = this.actors.find((other) => other.id == a.id);\n                if (a2) {\n                    const mem = this.cell(a2.x, a2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.actors, a2);\n                }\n            }\n        });\n        this.actors.forEach(cb);\n    }\n    storeMemory(x, y) {\n        const mem = this.cells[x][y];\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        const cell = this.source.cell(x, y);\n        mem.copy(cell);\n        mem.setCellFlag(Flags.Cell.STABLE_MEMORY);\n        mem.map = this; // so that drawing this cell results in using the right map\n        let newList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR);\n        // add any current items+actors\n        if (cell.hasItem()) {\n            const item = this.source.itemAt(x, y);\n            if (item) {\n                const copy = item.clone();\n                copy._map = this; // memory is map\n                this.items.push(copy);\n                if (copy.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (cell.hasActor()) {\n            const actor = this.source.actorAt(x, y);\n            if (actor) {\n                const copy = actor.clone();\n                copy._map = this; // memory is map\n                this.actors.push(copy);\n                if (copy.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        this.light.setLight(x, y, this.source.light.getLight(x, y));\n    }\n    forget(x, y) {\n        const mem = this.memory(x, y);\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        mem.clearCellFlag(Flags.Cell.STABLE_MEMORY);\n        let newList = this.source\n            .cell(x, y)\n            .hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n    }\n    onFovChange(x, y, isVisible) {\n        if (!isVisible) {\n            this.storeMemory(x, y);\n        }\n        else {\n            this.forget(x, y);\n        }\n    }\n}\n","import { Memory } from './memory';\nconst cache = {};\nexport function store(actor, map, memory) {\n    let actorMemory = cache[actor.id];\n    if (!actorMemory) {\n        cache[actor.id] = actorMemory = {};\n    }\n    actorMemory[map.id] = memory;\n}\nexport function get(actor, map) {\n    let actorMemory = cache[actor.id];\n    if (actorMemory) {\n        const memory = actorMemory[map.id];\n        if (memory)\n            return memory;\n    }\n    return new Memory(map);\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Actor } from './actor';\nimport * as Memory from '../memory';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n        this.flags = {\n            actor: Flags.Actor.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.vision = {};\n        if (opts.flags) {\n            this.flags.actor = GWU.flag.from(Flags.Actor, this.flags.actor, opts.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, opts.flags);\n        }\n        if (opts.vision) {\n            this.vision.normal = opts.vision;\n        }\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n        Object.assign(actor.flags, this.flags);\n        if (options.fov) {\n            actor.fov = options.fov;\n        }\n        if (options.memory) {\n            actor.memory = options.memory;\n        }\n        if (this.vision.normal) {\n            actor.visionDistance = this.vision.normal;\n        }\n    }\n    addToMap(actor, map) {\n        super.addToMap(actor, map);\n        if (this.hasActorFlag(Flags.Actor.HAS_MEMORY)) {\n            actor.memory = Memory.get(actor, map);\n        }\n        if (this.hasActorFlag(Flags.Actor.USES_FOV)) {\n            actor.fov = new GWU.fov.FovSystem(map);\n            actor.fov.follow = actor;\n            if (actor.memory) {\n                actor.fov.callback = actor.memory;\n            }\n        }\n    }\n    removeFromMap(actor) {\n        super.removeFromMap(actor);\n        if (actor._map && actor.memory) {\n            Memory.store(actor, actor._map, actor.memory);\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    canSeeEntity(_actor, _entity) {\n        return true;\n    }\n    isAbleToSee(_actor, _entity) {\n        return true;\n    }\n    isAbleToSense(_actor, _entity) {\n        return true;\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    async pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    async dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.quantity = other.quantity;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n        this.flags = {\n            item: Flags.Item.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        if (config.flags) {\n            this.flags.item = GWU.flag.from(Flags.Item, this.flags.item, config.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, config.flags);\n        }\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n        Object.assign(item.flags, this.flags);\n        item.quantity = options.quantity || 1;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        // fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        // if (this.map.fov.changed) {\n        //     this.fovVersion = this.version;\n        //     this.map.fov.changed = false;\n        // }\n        // if (snap.version !== this.fovVersion) {\n        //     snap.map.fov.copy(this.map.fov);\n        // }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        // if (snap.version < this.fovVersion || this.map.fov.changed) {\n        //     this.map.fov.copy(snap.map.fov);\n        //     this.fovVersion = snap.version;\n        // }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import * as GWU from 'gw-utils';\nexport function getCellPathCost(map, x, y) {\n    const cell = map.cell(x, y);\n    if (cell.blocksMove())\n        return GWU.path.OBSTRUCTION;\n    if (cell.blocksPathing())\n        return GWU.path.FORBIDDEN;\n    if (cell.hasActor())\n        return 10;\n    return 1;\n}\nexport function fillCostMap(map, costMap) {\n    costMap.update((_v, x, y) => getCellPathCost(map, x, y));\n}\nexport function getPathBetween(map, x0, y0, x1, y1, options = {}) {\n    const distanceMap = GWU.grid.alloc(map.width, map.height);\n    const costMap = GWU.grid.alloc(map.width, map.height);\n    fillCostMap(map, costMap);\n    GWU.path.calculateDistances(distanceMap, x0, y0, costMap, options.eightWays, GWU.xy.straightDistanceBetween(x0, y0, x1, y1) + 1);\n    const path = GWU.path.getPath(distanceMap, x1, y1, (x, y) => map.cell(x, y).blocksMove(), options.eightWays);\n    GWU.grid.free(costMap);\n    GWU.grid.free(distanceMap);\n    return path;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    async spawn(map, x = -1, y = -1, opts = {}) {\n        var _a;\n        opts.canSpawn = opts.canSpawn || GWU.TRUE;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_a = opts.machine) !== null && _a !== void 0 ? _a : 0;\n        const leader = await this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        await this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    async _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!(await this._addLeader(leader, map, x, y, opts))) {\n            return null;\n        }\n        return leader;\n    }\n    async _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    async _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    async _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        await Promise.all(entries.map(async ([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                await this._spawnMember(kindId, map, leader, opts);\n            }\n        }));\n        return count;\n    }\n    async _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1,\n            -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!(await this._addMember(member, map, x, y, leader, opts))) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canSpawn(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_LIST_IN_SIDEBAR","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_SAFE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","lastId","kind","_map","key","machineHome","depth","light","flags","entity","next","id","map","hasEntityFlag","Flags.Entity","L_ON_MAP","Error","setEntityFlag","addToMap","clearEntityFlag","removeFromMap","sprite","isDestroyed","L_DESTROYED","other","constructor","copy","Object","assign","canBeSeen","tag","tags","includes","matches","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","buffer","bounds","drawStatus","dest","_observer","drawSprite","name","EntityKind","config","requiredTileTags","flavor","description","make","split","t","trim","slice","init","_entity","length","hasAllTileTags","hasAnyTileTag","_opts","mixer","Mixer","getAppearanceAt","wrapText","width","Entity.Entity","super","leader","items","fov","memory","visionDistance","actor","Flags.Depth","ACTOR","hasActorFlag","Flags.Actor","IS_PLAYER","canSee","isAbleToSee","isDirectlyVisible","xy","forLineBetween","i","j","distanceBetween","blocksVision","canSeeOrSense","isAbleToSense","isAnyKindOfVisible","item","pickupItem","dropItem","Handler","src","ctx","handlers","installHandler","handler","_a","fn","info","from","Flags","chance","values","forEach","v","effect","effects","reset","E_FIRED","install","_b","_c","_d","index","dissipate","priority","groundTile","article","tile","tileMech","hasEffect","Flags.Tile","T_IS_FLAMMABLE","push","arraysIntersect","every","blocksMove","hasTileFlag","T_PATHING_BLOCKER","arg","color","result","fg","toString","options","_e","_f","base","extends","tiles","text","replace","search","Number","parseInt","substring","delta","undefined","entries","value","makeEffect","Flags.TileMech","ch","bg","opacity","all","get","args","enter","open","tick","close","player","emit","async","fire","ctx_","force","rng","grid","alloc","height","didSomething","allHandlers","h","E_NEXT_ALWAYS","data","gameHasEnded","nextInfo","E_NEXT_EVERYWHERE","forEachAsync","E_NO_MARK_FIRED","free","EmitEffect","events","FnEffect","MessageEffect","message","fired","addAt","ActivateMachineEffect","activateMachine","machine","machineId","EffectEffect","FIRE.fire","SpawnEffect","_g","parts","p","grow","decrement","spread","Flags.Effect","volume","match","matchTile","Tile.tiles","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","isBlocking","E_PERMIT_BLOCKING","blocksPathing","E_TREAT_AS_BLOCKING","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","spawnTiles","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","spawnMap","accomplishedSomething","blockedByOtherLayers","E_BLOCKED_BY_OTHER_LAYERS","superpriority","E_SUPERPRIORITY","blockedByActors","blockedByItems","hasTile","setTile","Flags.Cell","EVENT_FIRED_THIS_TURN","E_PROTECTED","EVENT_PROTECTED","setMapFlag","Flags.Map","MAP_CHANGED","cellIsOk","isStart","hasXY","hasCellFlag","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","dir","x2","y2","madeChange","startProb","probDec","fill","count","DIRS","clearAll","clear","clearDepth","GAS","LIQUID","SURFACE","GROUND","blockingMap","eachActor","a","loc","matchingLocNear","c","removeActor","addActor","eachItem","removeItem","addItem","layers","ALL_LAYERS","Array","isArray","reduce","out","fireSync","_ctx","e","chokeCount","toFire","TILE.tiles","NULL","snapshot","makeMixer","TILE.get","hasStableSnapshot","STABLE_SNAPSHOT","hasStableMemory","getSnapshot","checkEntities","some","hasItem","hasActor","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","withEntities","needsRedraw","changed","CHANGED","Math","max","TILE.Tile","highestPriorityTile","cb","find","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","current","blocksLayer","highestPriority","ground","depthTile","glowLightChanged","MAP_SIDEBAR_TILES_CHANGED","setCellFlag","CAUGHT_FIRE_THIS_TURN","blackOut","tileFlag","tileMechFlag","hasTileMechFlag","event","fireEvent","ev","_activate","Effect.effects","Effect.fire","itemAt","withEffects","tileWithEffect","hasItems","foundIndex","obj","clearCellFlag","splice","isKey","actorAt","isPlayer","actors","MapLayer","properties","_other","_x","_y","_tile","_actor","_item","_dt","TileLayer","ActorLayer","ItemLayer","GasLayer","startingVolume","update","d","clearTile","floor","min","total","highestVolume","startingTile","highestTile","updateCellVolume","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","TM_EXPLOSIVE_PROMOTE","x0","y0","n","BasicDrawer","_cell","Buffer","offsetX","offsetY","drawCell","needSnapshot","getAppearance","putSnapshot","applyLight","L_VISUALLY_DISTINCT","separate","surface","liquid","gas","drawInto","cosmetic","number","dances","COLORS_DANCE","bake","isVisible","isRevealed","getLight","multiply","isCursor","invert","scale","machineCount","_seed","random","drawer","cells","seed","LightSystem","initLayers","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","ITEM","Layer.ItemLayer","Layer.ActorLayer","layer","isAt","fireEffects","fireAll","then","hasPlayer","fmt","log","console","dump","l","boundary","isBoundaryXY","clearTiles","dt","willFire","promoteChance","w","originX","originY","eachGlowLight","_cb","isDark","Memory","source","isMemory","i2","arrayDelete","a2","mem","currentList","filter","newList","clone","setLight","forget","storeMemory","cache","store","actorMemory","ActorKind","Entity.EntityKind","DEFAULT","DEFAULT_ACTOR","vision","normal","HAS_MEMORY","Memory.get","USES_FOV","FovSystem","follow","callback","Memory.store","action","list","remove","makeOptions","kinds","makeKind","randomKind","forbidTags","startsWith","k","JSON","stringify","made","quantity","ItemKind","Flags.Item","updateChokepoints","updateCounts","passMap","passableArcCount","oldX","CLOCK_DIRS","oldY","newX","newY","cellCount","floodFillCount","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","eachCell","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","prefab","charToTile","isStringArray","len","line","updateChokeCounts","layerVersion","lightVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","getCellPathCost","path","OBSTRUCTION","FORBIDDEN","fillCostMap","costMap","_v","x1","y1","distanceMap","calculateDistances","eightWays","straightDistanceBetween","getPath","members","horde","range","frequency","canSpawn","TRUE","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","Promise","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","matchingLoc","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted"],"mappings":"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"}