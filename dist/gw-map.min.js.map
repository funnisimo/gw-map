{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/actor/pain.js","../js/actor/stat.js","../js/actor/status.js","../js/actor/action.js","../js/actor/actor.js","../js/effect/effect.js","../js/tile/tile.js","../js/tile/index.js","../js/effect/types/basic.js","../js/effect/types/spread.js","../js/effect/handlers/emit.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/tile.js","../js/effect/handlers/clear.js","../js/effect/handlers/feature.js","../js/effect/handlers/nourish.js","../js/effect/handlers/stat.js","../js/map/cell.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/gasLayer.js","../js/layer/fireLayer.js","../js/draw/basic.js","../js/map/map.js","../js/memory/memory.js","../js/memory/system.js","../js/ai/ai.js","../js/ai/typical.js","../js/ai/wander.js","../js/ai/utils.js","../js/actor/kind.js","../js/actor/make.js","../js/actor/actions/bump.js","../js/actor/actions/standStill.js","../js/fx/fx.js","../js/actor/actions/moveDir.js","../js/actor/actions/idle.js","../js/actor/actions/pickup.js","../js/item/item.js","../js/item/kind.js","../js/item/make.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/path.js","../js/horde/horde.js","../js/horde/make.js","../js/command/command.js","../js/command/moveDir.js","../js/command/pickup.js","../js/player/attribute.js","../js/player/skill.js","../js/player/player.js","../js/player/kind.js","../js/player/make.js","../js/game/game.js","../js/tile/tiles.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_ON_MAP\"] = Fl(17)] = \"L_ON_MAP\";\n    Entity[Entity[\"DEFAULT_ACTOR\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ACTOR\";\n    Entity[Entity[\"DEFAULT_ITEM\"] = Entity.L_LIST_IN_SIDEBAR] = \"DEFAULT_ITEM\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n    Actor[Actor[\"HAS_MEMORY\"] = Fl(1)] = \"HAS_MEMORY\";\n    Actor[Actor[\"USES_FOV\"] = Fl(2)] = \"USES_FOV\";\n    Actor[Actor[\"STABLE_COST_MAP\"] = Fl(3)] = \"STABLE_COST_MAP\";\n    Actor[Actor[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n    Item[Item[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_SHALLOW_WATER\"] = Fl(4)] = \"T_SHALLOW_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n    Tile[Tile[\"T_ANY_LIQUID\"] = Tile.T_IS_DEEP_LIQUID | Tile.T_SHALLOW_WATER] = \"T_ANY_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(0)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(1)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"KNOWN_TO_BE_SAFE\"] = Fl(2)] = \"KNOWN_TO_BE_SAFE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to speed checks\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(16)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(17)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(18)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(19)] = \"HAS_ITEM\";\n    Cell[Cell[\"HAS_FX\"] = Fl(20)] = \"HAS_FX\";\n    Cell[Cell[\"HAS_TICK_EFFECT\"] = Fl(22)] = \"HAS_TICK_EFFECT\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_SAFE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_NEEDS_REDRAW\"] = Fl(1)] = \"MAP_NEEDS_REDRAW\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_IGNORE_FOV\"] = Fl(12)] = \"E_IGNORE_FOV\";\n    // E_SPREAD_CIRCLE = Fl(13), // Spread in a circle around the spot (using FOV), radius calculated using spread+decrement\n    // E_SPREAD_LINE = Fl(14), // Spread in a line in one random direction\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nlet lastId = 0;\nexport class Entity {\n    constructor(kind) {\n        this._map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n        this.id = '' + ++lastId;\n    }\n    get map() {\n        return this._map;\n    }\n    addToMap(map, x, y) {\n        this.x = x;\n        this.y = y;\n        this.setEntityFlag(Flags.Entity.L_ON_MAP);\n        if (this._map === map) {\n            return false;\n        }\n        this._map = map;\n        this.kind.addToMap(this, map);\n        return true;\n    }\n    removeFromMap() {\n        this.clearEntityFlag(Flags.Entity.L_ON_MAP);\n        this.kind.removeFromMap(this);\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    isAt(x, y) {\n        return this.x === x && this.y === y;\n    }\n    clone() {\n        const other = new this.constructor(this.kind);\n        other.copy(this);\n        return other;\n    }\n    copy(other) {\n        this.depth = other.depth;\n        this.light = other.light;\n        Object.assign(this.flags, other.flags);\n        this.next = other.next;\n        this.x = other.x;\n        this.y = other.y;\n        this.kind = other.kind;\n        this.id = other.id;\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    setEntityFlag(flag) {\n        this.flags.entity |= flag;\n    }\n    clearEntityFlag(flag) {\n        this.flags.entity &= ~flag;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    isKey(x, y) {\n        return this.key && this.key.matches(x, y);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n    drawStatus(buffer, bounds) {\n        return this.kind.drawStatus(this, buffer, bounds);\n    }\n    drawInto(dest, _observer) {\n        dest.drawSprite(this.sprite);\n    }\n    toString() {\n        return `${this.constructor.name}-${this.id} @ ${this.x},${this.y}`;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requiredTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config.sprite ? config.sprite : config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requiredTileTags) {\n            if (typeof config.requiredTileTags === 'string') {\n                this.requiredTileTags = config.requiredTileTags\n                    .split(/[,|]/)\n                    .map((t) => t.trim());\n            }\n            else {\n                this.requiredTileTags = config.requiredTileTags\n                    .slice()\n                    .map((t) => t.trim());\n            }\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    addToMap(_entity, _map) { }\n    removeFromMap(_entity) { }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAllTileTags(this.requiredTileTags)) {\n            return true;\n        }\n        return false;\n    }\n    avoidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAnyTileTag(this.requiredTileTags)) {\n            return true;\n        }\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n    drawStatus(entity, buffer, bounds) {\n        if (!entity.map)\n            return 0;\n        if (entity.isDestroyed)\n            return 0;\n        const mixer = new GWU.sprite.Mixer();\n        entity.map.getAppearanceAt(entity.x, entity.y, mixer);\n        buffer.drawSprite(bounds.x + 1, bounds.y, mixer);\n        buffer.wrapText(bounds.x + 3, bounds.y, bounds.width - 3, entity.getName(), 'purple');\n        return 1;\n    }\n}\nexport function make(opts, makeOpts = {}) {\n    const kind = new EntityKind(opts);\n    return kind.make(makeOpts);\n}\n","import * as GWU from 'gw-utils';\nexport class PainMessages {\n    constructor(msgs = []) {\n        this._msgs = [];\n        msgs.forEach((m) => this.add(m));\n    }\n    add(msg) {\n        this._msgs.push(msg);\n        return this;\n    }\n    get(pct, singular = true) {\n        const index = GWU.clamp(Math.floor(pct * this._msgs.length), 0, this._msgs.length - 1);\n        const msg = this._msgs[index];\n        return this._format(msg, singular);\n    }\n    _format(msg, singular = true) {\n        return msg.replace(/\\[(\\w+)\\|?(\\w*)\\]/g, singular ? '$1' : '$2');\n    }\n}\nexport const painMessages = {};\nexport function installPain(id, pain) {\n    if (Array.isArray(pain)) {\n        pain = new PainMessages(pain);\n    }\n    painMessages[id] = pain;\n}\nexport function getPain(id) {\n    const m = painMessages[id];\n    if (!m)\n        throw new Error('No such pain message index: ' + id);\n    return m;\n}\n","import * as GWU from 'gw-utils';\nexport class Stats {\n    constructor(opts = {}) {\n        this._max = {};\n        this._rate = {};\n        this._value = {};\n        this.init(opts);\n    }\n    get(name) {\n        return this._value[name] || 0;\n    }\n    getPct(name) {\n        const max = this.max(name);\n        return max ? Math.round((100 * this.get(name)) / max) : 0;\n    }\n    max(name) {\n        return this._max[name] || 0;\n    }\n    regen(name) {\n        return this._rate[name] || null;\n    }\n    init(opts) {\n        for (let name in opts) {\n            this.set(name, opts[name]);\n        }\n    }\n    set(name, v, max) {\n        if (typeof v !== 'number') {\n            const r = GWU.range.make(v);\n            v = r.value();\n        }\n        this._value[name] = v;\n        this._max[name] = max || v;\n    }\n    gain(name, amount, allowOver = false) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        let v = this._value[name] + amount;\n        if (!allowOver) {\n            v = Math.min(v, this._max[name]);\n        }\n        this._value[name] = v;\n    }\n    drain(name, amount) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._value[name] = Math.max(0, this._value[name] - amount);\n    }\n    raiseMax(name, amount, raiseValue = true) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._max[name] += amount;\n        if (raiseValue) {\n            this.gain(name, amount);\n        }\n    }\n    reduceMax(name, amount, lowerValue = false) {\n        if (typeof amount !== 'number') {\n            amount = GWU.range.value(amount);\n        }\n        this._max[name] = Math.max(0, this._max[name] - amount);\n        if (lowerValue) {\n            this.drain(name, amount);\n        }\n    }\n    setRegen(name, turns, count = 1) {\n        const r = (this._rate[name] = this._rate[name] || { elapsed: 0 });\n        r.turns = turns;\n        r.count = count;\n    }\n    regenAll() {\n        for (let name in this._max) {\n            const r = this._rate[name];\n            r.elapsed += 1;\n            if (r.elapsed >= r.turns) {\n                this.gain(name, r.count);\n                r.elapsed -= r.turns;\n            }\n        }\n    }\n    restore(name, value) {\n        if (value === undefined)\n            value = this._max[name];\n        this._value[name] = value;\n    }\n    adjust(name, type, amount) {\n        amount = GWU.range.from(amount);\n        const v = amount.value();\n        const c = this.get(name);\n        if (type === 'inc') {\n            this.gain(name, amount);\n        }\n        else if (type === 'dec') {\n            this.drain(name, amount);\n        }\n        else if (type === 'set') {\n            this.set(name, amount);\n        }\n        else if (type === 'min') {\n            const v = amount.value();\n            if (this.get(name) < v) {\n                this.set(name, v);\n            }\n        }\n        else if (type === 'max') {\n            if (this.get(name) > v) {\n                this.set(name, v);\n            }\n        }\n        else {\n            throw new Error('Invalid stat adjust type: ' + type);\n        }\n        return c !== this.get(name);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Status {\n    constructor() {\n        this._set = {};\n        this._time = {};\n        this._count = {};\n        this._done = {};\n        this._value = {};\n        this.changed = null;\n    }\n    clear(name) {\n        this.clearTime(name);\n        this.clearCount(name);\n        this.setOff(name);\n        return this._update(name);\n    }\n    get(name) {\n        return this._value[name] || false;\n    }\n    has(name) {\n        return this._value[name] || false;\n    }\n    _addDone(name, done) {\n        if (done) {\n            if (!this._done[name]) {\n                this._done[name] = done;\n            }\n        }\n    }\n    /**\n     * Sets the count for a status variable.\n     * If setting the count turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {number} count The count to set.\n     * @param {function} [done] The function to call whenever the count goes to 0.\n     * @returns {boolean} Whether or not setting the count turned the status on.\n     */\n    setCount(name, count, done) {\n        const status = this;\n        status._count[name] = Math.max(count, status._count[name] || 0);\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Increments the count for the status by the given amount (1=default)\n     * If incrementing the count turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {number} [count=1] The count to incrmeent.\n     * @param {function} [done] The function to call whenever the count goes to 0.\n     * @returns {boolean} Whether or not incrementing the count turned the status on.\n     */\n    increment(name, count = 1, done) {\n        if (typeof count == 'function') {\n            done = count;\n            count = 1;\n        }\n        const status = this;\n        status._count[name] = (status._count[name] || 0) + count;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Decrements the count for the status by the given amount (1=default)\n     * If decrementing the count turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * Also, if the status is turned off, and a done function was set, then it\n     * is called.\n     * @param {string} name The name of the status to adjust.\n     * @param {number} [count=1] The count to decrement.\n     * @returns {boolean} Whether or not decrementing the count turned the status off.\n     */\n    decrement(name, count = 1) {\n        const status = this;\n        status._count[name] = Math.max(0, (status._count[name] || 0) - count);\n        return this._update(name);\n    }\n    /**\n     * Clears all counts from the given status.\n     * If clearing the count turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * Also, if the status is turned off, and a done function was set, then it\n     * is called.\n     * @param {string} name The name of the status to adjust.\n     * @returns {boolean} Whether or not decrementing the count turned the status off.\n     */\n    clearCount(name) {\n        const status = this;\n        status._count[name] = 0;\n        return this._update(name);\n    }\n    /**\n     * Turns on the given status.\n     * @param {string} name The status to adjust.\n     * @param {function} [done] The function to call when the status is turned off.\n     * @returns {boolean} True if this turns on the status. (It could be on because of a time or count).\n     */\n    setOn(name, done) {\n        const status = this;\n        status._set[name] = true;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Turns off the given status.\n     *\n     * @param {string} name The status to adjust.\n     * @returns {boolean} True if this turns off the status. (It could be on because of a time or count).\n     */\n    setOff(name) {\n        const status = this;\n        status._set[name] = false;\n        return this._update(name);\n    }\n    /**\n     * Sets the time for a status variable.\n     * If setting the time turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to set.\n     * @param {function} [done] The function to call whenever the status goes false.\n     * @returns {boolean} Whether or not setting the time turned the status on.\n     */\n    setTime(name, value, done) {\n        const status = this;\n        // if (value === true) {\n        //   return RUT.Status.setOn(source, name, done);\n        // }\n        value = GWU.range.make(value).value();\n        const current = status._time[name] || 0;\n        status._time[name] = Math.max(value, current);\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Adds to the time for a status variable.\n     * If adding to the time turns on the status (it was off),\n     * then this function returns true.  Otherwise, false.\n     * The done variable is only set if there is no other done function\n     * already for this status.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to add.\n     * @param {function} [done] The function to call whenever the status goes false.\n     * @returns {boolean} Whether or not adding the time turned the status on.\n     */\n    addTime(name, value = 1, done) {\n        if (typeof value == 'function') {\n            done = value;\n            value = 1;\n        }\n        const status = this;\n        // if (value === true) {\n        //   return RUT.Status.setOn(source, name, done);\n        // }\n        value = GWU.range.make(value).value();\n        status._time[name] = (status._time[name] || 0) + value;\n        this._addDone(name, done);\n        return this._update(name);\n    }\n    /**\n     * Removes time for a status variable.\n     * If removing to the time turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * @param {string} name The name of the status to set.\n     * @param {GWU.range.RangeBase} time The time value to remove.\n     * @returns {boolean} Whether or not removing the time turned the status off.\n     */\n    removeTime(name, value = 1) {\n        const status = this;\n        value = GWU.range.make(value).value();\n        status._time[name] = Math.max(0, (status._time[name] || 0) - value);\n        return this._update(name);\n    }\n    /**\n     * Removes all time for a status variable.\n     * If removing to the time turns off the status (it was on),\n     * then this function returns true.  Otherwise, false.\n     * @param {string} name The name of the status to set.\n     * @returns {boolean} Whether or not removing the time turned the status off.\n     */\n    clearTime(name) {\n        const status = this;\n        status._time[name] = 0;\n        return this._update(name);\n    }\n    /**\n     * Removes time for all status variables that have time.\n     * If removing the time turns off any status (it was on),\n     * then this function returns an object with all of those statuses as keys and false as the values.  Otherwise, false.\n     * @param {Status|object} source The object to set the status on.  If object.status is set then that is where the values are updated.\n     * @param {string} name The name of the status to set.\n     * @returns {boolean|object} false or an object with the names of the statuses that were cleared as keys and false as the values.\n     */\n    decayAllTimes(delta = 1) {\n        const status = this;\n        const cleared = {};\n        let noticed = false;\n        for (let name in status._time) {\n            if (this.removeTime(name, delta)) {\n                noticed = true;\n                cleared[name] = false;\n            }\n        }\n        return noticed ? cleared : false;\n    }\n    /**\n     * Updates the value of the status and returns whether or not this change\n     * turned the status on or off (true = change, false = no change)\n     * @param {string} name The name of the status to update\n     * @returns {boolean} True if the value was turned on or off, False otherwise.\n     */\n    _update(name) {\n        const status = this;\n        const rec = this._value;\n        let was = rec[name];\n        let value = (rec[name] =\n            status._set[name] ||\n                status._time[name] > 0 ||\n                status._count[name] > 0 ||\n                false);\n        const doneFn = this._done[name];\n        if (!value && doneFn) {\n            doneFn(this, name);\n            status._done[name] = null;\n        }\n        if (was && !value) {\n            if (this.changed)\n                this.changed(this, name);\n            // console.log('called changed: false');\n            return true;\n        }\n        else if (!was && value) {\n            if (this.changed)\n                this.changed(this, name);\n            // console.log('called changed: true');\n            return true;\n        }\n        return false;\n    }\n}\n","export const installedActions = {};\nexport function installAction(name, fn) {\n    installedActions[name.toLowerCase()] = fn;\n}\nexport function getAction(name) {\n    return installedActions[name.toLowerCase()] || null;\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { getAction } from './action';\nimport { Status } from './status';\nimport { Stats } from './stat';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.ai = null;\n        this.leader = null;\n        this.items = null; // inventory\n        this.fov = null;\n        this.memory = null;\n        this.visionDistance = 99;\n        this.data = {};\n        this._costMap = null;\n        this._goalMap = null;\n        this.next = null; // TODO - can we get rid of this?\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n        this.stats = new Stats();\n        this.status = new Status();\n    }\n    copy(other) {\n        super.copy(other);\n        this.leader = other.leader;\n        this.items = other.items;\n        this.fov = other.fov;\n        this.memory = other.memory;\n        this.visionDistance = other.visionDistance;\n    }\n    destroy() {\n        this.setEntityFlag(Flags.Entity.L_DESTROYED);\n        if (this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    setActorFlag(flag) {\n        this.flags.actor |= flag;\n    }\n    clearActorFlag(flag) {\n        this.flags.actor &= ~flag;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    isDead() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    getAction(name) {\n        const action = this.kind.actions[name];\n        if (action === undefined || action === true) {\n            const main = getAction(name); // default is to do any action\n            return main || false;\n        }\n        else if (action === false) {\n            return false;\n        }\n        return action;\n    }\n    getBumpActions() {\n        return this.kind.bump;\n    }\n    canSee(x, y) {\n        if (x instanceof Entity.Entity) {\n            if (x instanceof Actor) {\n                if (x.fov)\n                    return x.fov.isDirectlyVisible(this.x, this.y);\n            }\n            return this.canSee(x.x, x.y) && this.kind.isAbleToSee(this, x);\n        }\n        if (this.fov) {\n            return this.fov.isDirectlyVisible(x, y);\n        }\n        else if (this.map) {\n            if (GWU.xy.distanceBetween(this.x, this.y, x, y) >\n                this.visionDistance) {\n                return false;\n            }\n            return GWU.xy.forLineBetween(this.x, this.y, x, y, (i, j) => {\n                if (this.map.cell(i, j).blocksVision())\n                    return false;\n            });\n        }\n        else {\n            return false; // need a map or an fov\n        }\n    }\n    canSeeOrSense(x, y) {\n        if (x instanceof Entity.Entity) {\n            return (this.canSeeOrSense(x.x, x.y) &&\n                (this.kind.isAbleToSee(this, x) ||\n                    this.kind.isAbleToSense(this, x)));\n        }\n        if (this.fov) {\n            return this.fov.isAnyKindOfVisible(x, y);\n        }\n        return this.canSee(x, y);\n    }\n    isAbleToSee(entity) {\n        return this.kind.isAbleToSee(this, entity);\n    }\n    isAbleToSense(entity) {\n        return this.kind.isAbleToSense(this, entity);\n    }\n    ////////////////// ACTOR\n    async act(game) {\n        if (this.ai && this.ai.fn) {\n            const r = await this.ai.fn(game, this);\n            if (r)\n                return r;\n        }\n        if (this.kind.ai) {\n            const r = await this.kind.ai.fn(game, this);\n            if (r)\n                return r;\n        }\n        // idle - always\n        return this.moveSpeed();\n    }\n    moveSpeed() {\n        return this.kind.moveSpeed;\n    }\n    startTurn() { }\n    endTurn(pct = 100) {\n        return Math.floor((pct * this.moveSpeed()) / 100);\n    }\n    ///////\n    willAttack(_other) {\n        return true;\n    }\n    canPass(_other) {\n        return false;\n    }\n    ////////////////// INVENTORY\n    avoidsItem(_item) {\n        return false;\n    }\n    canAddItem(_item) {\n        return false;\n    }\n    addItem(_item) { }\n    pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n    // PATHFINDING\n    addToMap(map, x, y) {\n        const mapChanged = super.addToMap(map, x, y);\n        if (mapChanged) {\n            this.clearActorFlag(Flags.Actor.STABLE_COST_MAP);\n        }\n        return mapChanged;\n    }\n    removeFromMap() {\n        super.removeFromMap();\n        if (this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n    }\n    /*\n    Calculates and returns the actor's move cost map.\n    Used in pathfinding.\n    */\n    costMap() {\n        if (!this.map) {\n            throw new Error('Actor must have map to calculate costMap.');\n        }\n        const staleMap = !this.hasActorFlag(Flags.Actor.STABLE_COST_MAP);\n        if (staleMap && this._costMap) {\n            GWU.grid.free(this._costMap);\n            this._costMap = null;\n        }\n        if (!this._costMap) {\n            this._costMap = GWU.grid.alloc(this.map.width, this.map.height);\n        }\n        else if (!staleMap) {\n            return this._costMap;\n        }\n        const kind = this.kind;\n        const map = this.map;\n        this._costMap.update((_v, x, y) => {\n            const cell = map.cell(x, y);\n            if (kind.forbidsCell(cell, this)) {\n                return cell.hasEntityFlag(Flags.Entity.L_BLOCKS_DIAGONAL)\n                    ? GWU.path.OBSTRUCTION\n                    : GWU.path.FORBIDDEN;\n            }\n            else if (kind.avoidsCell(cell, this)) {\n                return GWU.path.AVOIDED;\n            }\n            return GWU.path.OK;\n        });\n        this.setActorFlag(Flags.Actor.STABLE_COST_MAP);\n        /*\n\n            if (cellHasTerrainFlag(i, j, T_OBSTRUCTS_PASSABILITY)\n            && (!cellHasTMFlag(i, j, TM_IS_SECRET) || (discoveredTerrainFlagsAtLoc(i, j) & T_OBSTRUCTS_PASSABILITY)))\n            {\n                playerCostMap[i][j] = monsterCostMap[i][j] = cellHasTerrainFlag(i, j, T_OBSTRUCTS_DIAGONAL_MOVEMENT) ? PDS_OBSTRUCTION : PDS_FORBIDDEN;\n            } else if (cellHasTerrainFlag(i, j, T_SACRED)) {\n                    playerCostMap[i][j] = 1;\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n            } else if (cellHasTerrainFlag(i, j, T_LAVA_INSTA_DEATH)) {\n        monsterCostMap[i][j] = PDS_FORBIDDEN;\n        if (player.status[STATUS_LEVITATING] || !player.status[STATUS_IMMUNE_TO_FIRE]) {\n            playerCostMap[i][j] = 1;\n        } else {\n            playerCostMap[i][j] = PDS_FORBIDDEN;\n        }\n            } else {\n                if (pmap[i][j].flags & HAS_MONSTER) {\n                    monst = monsterAtLoc(i, j);\n                    if ((monst.creatureState == MONSTER_SLEEPING\n                         || monst.turnsSpentStationary > 2\n             || (monst.info.flags & MONST_GETS_TURN_ON_ACTIVATION)\n                         || monst.creatureState == MONSTER_ALLY)\n                        && monst.creatureState != MONSTER_FLEEING)\n                    {\n                        playerCostMap[i][j] = 1;\n                        monsterCostMap[i][j] = PDS_FORBIDDEN;\n                        continue;\n                    }\n                }\n\n                if (cellHasTerrainFlag(i, j, (T_AUTO_DESCENT | T_IS_DF_TRAP))) {\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n          if (player.status[STATUS_LEVITATING]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = PDS_FORBIDDEN;\n          }\n                } else if (cellHasTerrainFlag(i, j, T_IS_FIRE)) {\n                    monsterCostMap[i][j] = PDS_FORBIDDEN;\n          if (player.status[STATUS_IMMUNE_TO_FIRE]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = PDS_FORBIDDEN;\n          }\n                } else if (cellHasTerrainFlag(i, j, (T_IS_DEEP_WATER | T_SPONTANEOUSLY_IGNITES))) {\n          if (player.status[STATUS_LEVITATING]) {\n              playerCostMap[i][j] = 1;\n          } else {\n              playerCostMap[i][j] = 5;\n          }\n                    monsterCostMap[i][j] = 5;\n        } else if (cellHasTerrainFlag(i, j, T_OBSTRUCTS_PASSABILITY)\n                   && cellHasTMFlag(i, j, TM_IS_SECRET) && !(discoveredTerrainFlagsAtLoc(i, j) & T_OBSTRUCTS_PASSABILITY)\n                   && !(pmap[i][j].flags & IN_FIELD_OF_VIEW))\n             {\n            // Secret door that the player can't currently see\n            playerCostMap[i][j] = 100;\n            monsterCostMap[i][j] = 1;\n                } else {\n                    playerCostMap[i][j] = monsterCostMap[i][j] = 1;\n                }\n            }\n        }\n    }\n        */\n        return this._costMap;\n    }\n    get goalMap() {\n        return this._goalMap;\n    }\n    setGoal(x, y) {\n        const map = this._map;\n        if (!map)\n            throw new Error('No map to set goal with!');\n        if (!this._goalMap) {\n            this._goalMap = GWU.grid.alloc(map.width, map.height);\n        }\n        const goalMap = this._goalMap;\n        GWU.path.calculateDistances(goalMap, x, y, this.costMap());\n        return this._goalMap;\n    }\n    clearGoal() {\n        if (this._goalMap) {\n            GWU.grid.free(this._goalMap);\n            this._goalMap = null;\n        }\n    }\n}\n","export const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id.toLowerCase()] = handler;\n}\nexport const effectTypes = {};\nexport function installType(id, type) {\n    effectTypes[id] = type;\n}\n// export class Effect {\n//     id = '';\n//     chance = 100 * 100; // 100%\n//     type: string; // self | bolt | beam | ball | burst | adjacent | spread\n//     aim: string; // actor | item | cell\n//     bolt: string | GWU.sprite.SpriteData | null = null;\n//     beam = false;\n//     range = 0;\n//     ball: string | GWU.sprite.SpriteData | null = null;\n//     radius = 0;\n//     center = false;\n//     effects: EffectFn[];\n//     good = false;\n//     seen = false;\n//     next: Effect | null = null;\n//     constructor(config: EffectConfig) {\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         this.aim = config.aim || 'actor';\n//         if (typeof config.chance === 'string') {\n//             // '20%' becomes 2000\n//             config.chance = Math.floor(Number.parseFloat(config.chance) * 100);\n//         }\n//         this.chance = config.chance || 100 * 100;\n//         const type = config.type || 'basic';\n//         const parts = type.split(':');\n//         if (type.startsWith('bolt') || type.startsWith('beam')) {\n//             // bolt:range:sprite\n//             this.type = parts[0];\n//             this.range = parts[1] ? Number.parseInt(parts[1]) : 99;\n//             this.bolt = parts[1] || 'missile';\n//             this.beam = type.startsWith('beam');\n//         } else if (\n//             type.startsWith('ball') ||\n//             type.startsWith('burst') ||\n//             type.startsWith('aura')\n//         ) {\n//             this.type = parts[0];\n//             this.radius = parts[1] ? Number.parseInt(parts[1]) : 2;\n//             this.range = parts[2] ? Number.parseInt(parts[2]) : 99;\n//             this.ball = parts[3] || 'explosion';\n//             this.center = !type.startsWith('aura');\n//         } else {\n//             this.type = 'basic';\n//         }\n//         if (typeof config.effects === 'string') {\n//             config.effects = [config.effects];\n//         } else if (typeof config.effects === 'function') {\n//             config.effects = [config.effects];\n//         }\n//         if (Array.isArray(config.effects)) {\n//             this.effects = config.effects.map((e) => {\n//                 if (typeof e === 'function') return e;\n//                 return effectFnFromString(e);\n//             });\n//         } else {\n//             this.effects = [];\n//             Object.entries(config.effects).forEach(([key, value]) => {\n//                 const handler = handlers[key.toLowerCase()];\n//                 if (handler) {\n//                     this.effects.push(handler(value));\n//                 } else if (typeof value === 'function') {\n//                     this.effects.push(value);\n//                 } else {\n//                     throw new Error('Unknown effect: ' + key);\n//                 }\n//             });\n//         }\n//         if (this.effects.length === 0) throw new Error('No effects!');\n//     }\n//     clone(): this {\n//         const other = new (this.constructor as new (\n//             config: EffectConfig\n//         ) => this)(this as EffectConfig);\n//         return other;\n//     }\n//     fire(map: Map.MapType, x: number, y: number, ctx: EffectCtx = {}): boolean {\n//         let didSomething = false;\n//         ctx.good = this.good;\n//         ctx.seen = this.seen;\n//         if (!this.chance || map.rng.chance(this.chance, 10000)) {\n//             // fire\n//             for (let effect of this.effects) {\n//                 if (GWU.data.gameHasEnded) break;\n//                 if (effect(map, x, y, ctx)) {\n//                     didSomething = true;\n//                 } else {\n//                     break;\n//                 }\n//             }\n//         }\n//         if (ctx.aware && didSomething) {\n//             this.seen = true;\n//         }\n//         this.good = ctx.good;\n//         return didSomething;\n//     }\n//     reset() {\n//         this.seen = false;\n//     }\n// }\n// export function effectFnFromString(e: string): EffectFn {\n//     const parts = e.split(':');\n//     if (parts.length === 0) throw new Error('Invalid effect string.');\n//     // @ts-ignore\n//     const name = parts.shift().toLowerCase();\n//     const handler = handlers[name] || null;\n//     if (!handler) {\n//         throw new Error('Failed to find effect handler: ' + name);\n//     }\n//     return handler(parts);\n// }\nexport function make(opts) {\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    let config = {};\n    if (typeof opts === 'string') {\n        // Special case\n        if (opts.toLowerCase().startsWith('spread:')) {\n            const endPos = opts.indexOf(':', 8);\n            const tile = opts.substring(8, endPos);\n            config = {\n                type: 'spread:' + opts.substring(endPos),\n                effects: ['tile:' + tile],\n            };\n        }\n        else {\n            config = { type: 'basic', effects: [opts] };\n        }\n    }\n    else if (typeof opts === 'function') {\n        config = { type: 'basic', effects: [opts] };\n    }\n    else if (Array.isArray(opts)) {\n        config = { type: 'basic', effects: opts };\n    }\n    else {\n        // @ts-ignore\n        if (opts.effect) {\n            // @ts-ignore\n            opts.effects = [opts.effect];\n            delete opts.effect;\n        }\n        // object only\n        if (opts.effects) {\n            Object.assign(config, opts);\n            if (typeof config.effects === 'string') {\n                config.effects = [opts.effects];\n            }\n            else if (typeof config.effects === 'function') {\n                config.effects = [opts.effects];\n            }\n        }\n        else {\n            config.effects = {};\n            Object.entries(opts).forEach(([key, value]) => {\n                const handler = handlers[key.toLowerCase()];\n                if (handler !== undefined) {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else if (typeof value === 'function') {\n                    // @ts-ignore\n                    config.effects[key] = value;\n                }\n                else {\n                    // @ts-ignore\n                    config[key] = value;\n                }\n            });\n        }\n    }\n    config.type = config.type || 'basic';\n    if (typeof config.type !== 'string')\n        throw new Error('Invalid effect type: ' + JSON.stringify(config.type));\n    const typeParts = config.type.split(':').map((t) => t.trim());\n    const typeName = typeParts.shift();\n    const makeFn = effectTypes[typeName.toLowerCase()];\n    if (!makeFn)\n        throw new Error('Invalid effect type: ' + typeName);\n    const effect = makeFn(config);\n    if (Array.isArray(config.effects)) {\n        config.effects.forEach((e) => {\n            if (typeof e === 'function') {\n                effect.effects.push(e);\n            }\n            else {\n                const parts = e.split(':').map((t) => t.trim());\n                if (parts.length === 1) {\n                    const effect = installedEffects[parts[0]];\n                    if (!effect)\n                        throw new Error('Failed to find effect with id: ' + parts[0]);\n                    effect.effects.push(effect.trigger.bind(effect));\n                }\n                else {\n                    const handler = handlers[parts[0].toLowerCase()];\n                    if (!handler)\n                        throw new Error('Unknown effect: ' + parts[0]);\n                    parts.shift();\n                    effect.effects.push(handler(parts));\n                }\n            }\n        });\n    }\n    else {\n        Object.entries(config.effects).forEach(([key, value]) => {\n            const handler = handlers[key.toLowerCase()];\n            if (!handler)\n                throw new Error('Failed to find handler type: ' + key);\n            effect.effects.push(handler(value));\n        });\n    }\n    if (config.next) {\n        effect.next = make(config.next);\n    }\n    return effect;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'object' && 'trigger' in opts) {\n        return opts;\n    }\n    if (typeof opts === 'string') {\n        const effect = installedEffects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\nfunction isEffect(obj) {\n    return typeof obj === 'object' && 'trigger' in obj;\n}\n//////////////////////////////\n// INSTALL\nexport const installedEffects = {};\nexport function install(id, config) {\n    const effect = isEffect(config) ? config.clone() : make(config);\n    installedEffects[id] = effect;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function resetAll() {\n    Object.values(installedEffects).forEach((e) => (e.seen = false));\n}\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/effect';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string' && !value.includes(':')) {\n                effects[key] = value;\n                return;\n            }\n            try {\n                effects[key] = makeEffect(value);\n            }\n            catch (e) {\n                throw new Error(`Failed to add effect to tile => ${key} : ${JSON.stringify(value)} : ` + e.message);\n            }\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\n// import './tiles';\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nimport * as Flags from '../../flags';\nexport class BasicEffect {\n    constructor(config) {\n        this.effects = [];\n        this.chance = 100 * 100; // 100%\n        this.seen = false;\n        this.flags = 0;\n        this.next = null;\n        if (typeof config === 'object' && !Array.isArray(config)) {\n            this.flags = GWU.flag.from(Flags.Effect, config.flags);\n            this.chance = Number.parseInt(config.chance || '10000');\n        }\n    }\n    clone() {\n        const other = new this.constructor();\n        other.effects = this.effects.slice();\n        other.chance = this.chance;\n        other.seen = false;\n        other.flags = this.flags;\n        other.next = this.next;\n        return other;\n    }\n    trigger(loc, ctx = {}) {\n        if (!ctx.force && this.chance) {\n            const rng = ctx.rng || loc.map.rng || GWU.random;\n            if (!rng.chance(this.chance, 10000))\n                return false;\n        }\n        let didSomething = false;\n        for (let eff of this.effects) {\n            if (eff(loc, ctx)) {\n                didSomething = true;\n            }\n        }\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                return this.next.trigger(loc, ctx);\n            }\n        }\n        return didSomething;\n    }\n}\nexport function makeBasicEffect(config) {\n    if (typeof config !== 'object') {\n        return new BasicEffect();\n    }\n    return new BasicEffect(config);\n}\nEffect.installType('basic', makeBasicEffect);\n","import * as GWU from 'gw-utils';\nimport { BasicEffect } from './basic';\nimport { installType } from '../effect';\nimport * as Flags from '../../flags';\nexport function makeSpreadEffect(config) {\n    return new SpreadEffect(config);\n}\ninstallType('spread', makeSpreadEffect);\nexport class SpreadEffect extends BasicEffect {\n    constructor(config) {\n        super(config);\n        this.grow = 0;\n        this.decrement = 0;\n        this.matchTile = '';\n        if (!config) {\n            config = { grow: 0, decrement: 0, flags: 0 };\n        }\n        if (typeof config === 'string') {\n            config = config.split(':').map((t) => t.trim());\n        }\n        if (Array.isArray(config)) {\n            if (config[0].toLowerCase() === 'spread') {\n                config.shift();\n            }\n            config = {\n                grow: config[0] || '0',\n                decrement: config[1] || '100',\n                flags: config[2] || '0',\n            };\n        }\n        else if (typeof config.type === 'string' &&\n            config.type.includes(':')) {\n            const parts = config.type.split(':').map((t) => t.trim());\n            if (parts[0].toLowerCase() === 'spread') {\n                parts.shift();\n            }\n            config.grow = parts[0] || '0';\n            config.decrement = parts[1] || '100';\n            config.flags = config.flags + '|' + parts[2];\n        }\n        this.grow = Number.parseInt(config.grow || 0);\n        this.decrement = Number.parseInt(config.decrement || 100);\n        this.flags = GWU.flag.from(Flags.Effect, config.flags || 0);\n        this.matchTile = config.matchTile || '';\n    }\n    clone() {\n        const other = super.clone();\n        other.grow = this.grow;\n        other.decrement = this.decrement;\n        other.matchTile = this.matchTile;\n        return other;\n    }\n    trigger(xy, ctx = {}) {\n        const abortIfBlocking = !!(this.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        let didSomething = false;\n        const map = xy.map;\n        const spawnMap = GWU.grid.alloc(map.width, map.height);\n        didSomething = computeSpawnMap(this, xy, spawnMap);\n        if (!didSomething) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (abortIfBlocking && mapDisruptedBy(map, spawnMap)) {\n            GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, spawnMap)) {\n                didSomething = true;\n            }\n        }\n        if (this.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, spawnMap, this.flags)) {\n                didSomething = true;\n            }\n        }\n        spawnMap.forEach((v, x, y) => {\n            if (!v)\n                return;\n            spawnMap[x][y] = 1; // convert from generations to off/on/success\n            for (let eff of this.effects) {\n                if (eff({ map, x, y }, ctx)) {\n                    didSomething = true;\n                    spawnMap[x][y] = 2;\n                }\n            }\n        });\n        if (this.next) {\n            const nextAlways = !!(this.flags & Flags.Effect.E_NEXT_ALWAYS);\n            if (didSomething || nextAlways) {\n                if (this.flags & Flags.Effect.E_NEXT_EVERYWHERE) {\n                    spawnMap.forEach((v, x, y) => {\n                        if (!v)\n                            return;\n                        if (v == 2 || nextAlways) {\n                            this.next.trigger({ map, x, y }, ctx);\n                        }\n                    });\n                }\n                else {\n                    this.next.trigger({ map, x: xy.x, y: xy.y }, ctx);\n                }\n            }\n        }\n        GWU.grid.free(spawnMap);\n        return didSomething;\n    }\n}\nexport function mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n    const walkableGrid = GWU.grid.alloc(map.width, map.height);\n    let disrupts = false;\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(map.width, map.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (map.cell(i, j).isStairs()) {\n                disrupts = true;\n            }\n        }\n        else if (!map.cell(i, j).blocksMove()) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                }\n                else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n    // console.log('WALKABLE GRID');\n    // walkableGWU.grid.dump();\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.matchTile && !isStart && !cell.hasTile(effect.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, loc, spawnMap) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const map = loc.map;\n    let startProb = effect.grow || 0;\n    let probDec = effect.decrement || 0;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, loc.x, loc.y, true)) {\n        return false;\n    }\n    spawnMap[loc.x][loc.y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y])\n            return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const c = map.cell(x, y);\n            return !a.forbidsCell(c);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeActor(a);\n            map.addActor(loc[0], loc[1], a);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y])\n            return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            if (blockingMap[x][y])\n                return false;\n            const dest = map.cell(x, y);\n            return !i.forbidsCell(dest);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            map.removeItem(i);\n            map.addItem(loc[0], loc[1], i);\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import { installHandler } from '../effect';\n//////////////////////////////////////////////\n// EMIT\nexport function makeEmitHandler(config) {\n    if (Array.isArray(config))\n        config = config[0];\n    if (typeof config !== 'string')\n        throw new Error('Invalid EMIT handler config - ' + config);\n    return emitEffect.bind(undefined, config);\n}\nexport function emitEffect(id, loc, ctx) {\n    return loc.map.events.emit(id, loc, ctx);\n}\ninstallHandler('emit', makeEmitHandler);\n","import * as GWU from 'gw-utils';\nimport { installHandler } from '../effect';\n//////////////////////////////////////////////\n// MESSAGE\nexport function makeMessageHandler(src) {\n    if (Array.isArray(src))\n        src = src[0];\n    if (typeof src !== 'string') {\n        throw new Error('Need message for message effect.');\n    }\n    const info = {\n        msg: src,\n    };\n    return messageEffect.bind(undefined, info);\n}\nexport function messageEffect(info, loc, ctx) {\n    const seen = ctx.seen;\n    const msg = info.msg;\n    if (msg &&\n        msg.length &&\n        ctx.aware &&\n        !seen\n    // && map.isVisible(x, y)\n    ) {\n        GWU.message.addAt(loc.x, loc.y, msg, ctx);\n        return true;\n    }\n    return false;\n}\ninstallHandler('msg', makeMessageHandler);\n","import { installHandler } from '../effect';\n//////////////////////////////////////////////\n// ActivateMachine\nexport function makeActivateMachine() {\n    return activateMachine.bind(undefined);\n}\nexport function activateMachine(loc, ctx) {\n    const cell = loc.map.cell(loc.x, loc.y);\n    const machine = cell.machineId;\n    if (!machine)\n        return false;\n    return loc.map.activateMachine(machine, loc.x, loc.y, ctx);\n}\ninstallHandler('activateMachine', makeActivateMachine);\n","import { installHandler } from '../effect';\nexport function makeTileHandler(src) {\n    if (!src)\n        throw new Error('Tile effect needs configuration.');\n    if (typeof src === 'string') {\n        src = { id: src };\n    }\n    else if (Array.isArray(src)) {\n        src = { id: src[0] };\n    }\n    else if (!src.id) {\n        throw new Error('Tile effect needs configuration with id.');\n    }\n    const opts = src;\n    if (opts.id.includes('!')) {\n        opts.superpriority = true;\n    }\n    if (opts.id.includes('~')) {\n        opts.blockedByActors = true;\n        opts.blockedByItems = true;\n    }\n    opts.id = opts.id.replace(/[!~]*/g, '');\n    return tileEffect.bind(opts);\n}\nexport function tileEffect(loc, ctx) {\n    this.machine = ctx.machine || 0;\n    const didSomething = loc.map.setTile(loc.x, loc.y, this.id, this);\n    return didSomething;\n}\ninstallHandler('tile', makeTileHandler);\n","import * as Flags from '../../flags';\nimport { installHandler } from '../effect';\nexport function makeClearHandler(config) {\n    let layers = 0;\n    if (!config) {\n        layers = Flags.Depth.ALL_LAYERS;\n    }\n    else if (typeof config === 'number') {\n        layers = config;\n    }\n    else if (typeof config === 'string') {\n        const parts = config.split(/[,|]/g);\n        layers = parts.reduce((out, v) => {\n            if (typeof v === 'number')\n                return out | v;\n            const depth = Flags.Depth[v] || 0;\n            return out | depth;\n        }, 0);\n    }\n    else {\n        throw new Error('Invalid config for clear effect: ' + JSON.stringify(config));\n    }\n    return clearEffect.bind(undefined, layers);\n}\nexport function clearEffect(layers, loc, _ctx) {\n    if (!layers)\n        return false;\n    const cell = loc.map.cell(loc.x, loc.y);\n    return cell.clearDepth(layers);\n}\ninstallHandler('clear', makeClearHandler);\n","import * as Effect from '../effect';\nexport function makeFeatureHandler(id) {\n    if (Array.isArray(id))\n        id = id[0];\n    if (id && typeof id !== 'string') {\n        id = id.id;\n    }\n    if (!id || !id.length)\n        throw new Error('Feature effect needs ID');\n    return featureEffect.bind(undefined, id);\n}\nexport function featureEffect(id, loc, ctx) {\n    const feat = Effect.installedEffects[id];\n    if (!feat) {\n        throw new Error('Failed to find feature: ' + id);\n    }\n    return feat.trigger(loc, ctx);\n}\nEffect.installHandler('feature', makeFeatureHandler);\nEffect.installHandler('effect', makeFeatureHandler);\nEffect.installHandler('id', makeFeatureHandler);\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nexport function makeNourishEffect(opts) {\n    if (!opts)\n        throw new Error('Invalid Nourish config.');\n    let info = {};\n    if (typeof opts === 'string') {\n        opts = opts.split(':').map((t) => t.trim());\n    }\n    if (Array.isArray(opts)) {\n        info.type = opts[0] || 'inc';\n        info.amount = GWU.range.make(opts[1] || 1);\n    }\n    else if (opts.type || opts.amount) {\n        info.type = opts.type || 'inc';\n        info.amount = GWU.range.make(opts.amount || 1);\n    }\n    else {\n        throw new Error('Invalid Nourish config: ' + JSON.stringify(opts));\n    }\n    return nourishEffect.bind(undefined, info);\n}\nexport function nourishEffect(config, loc, _ctx) {\n    if (!config.amount)\n        return false;\n    // who am I nourishing?\n    const actor = loc.map.actorAt(loc.x, loc.y);\n    if (!actor) {\n        return false;\n    }\n    const stats = actor.stats;\n    const c = stats.get('food');\n    if (!stats.adjust('food', config.type, config.amount))\n        return false;\n    const n = stats.get('food');\n    if (n < c && n / stats.max('food') < 0.1) {\n        GWU.message.addAt(actor.x, actor.y, nourishEffect.default.pukeMsg, {\n            actor,\n        });\n    }\n    return true;\n}\nnourishEffect.default = {\n    pukeMsg: '%you vomit.',\n};\nEffect.installHandler('nourish', makeNourishEffect);\n","import * as GWU from 'gw-utils';\nimport * as Effect from '../effect';\nexport function makeStatEffect(opts) {\n    if (!opts)\n        throw new Error('Invalid Stat config.');\n    const info = {};\n    if (typeof opts === 'string') {\n        opts = opts.split(':').map((t) => t.trim());\n    }\n    if (Array.isArray(opts)) {\n        info.stat = opts[0];\n        info.type = opts[1] || 'inc';\n        info.amount = GWU.range.make(opts[2] || 1);\n    }\n    else if (opts.type || opts.amount) {\n        info.stat = opts.stat;\n        info.type = opts.type || 'inc';\n        info.amount = GWU.range.make(info.amount || 1);\n    }\n    else {\n        throw new Error('Invalid stat effect configuration: ' + JSON.stringify(opts));\n    }\n    return statEffect.bind(undefined, info);\n}\nexport function statEffect(config, loc, _ctx) {\n    if (!config.amount)\n        return false;\n    // who am I nourishing?\n    const actor = loc.map.actorAt(loc.x, loc.y);\n    if (!actor) {\n        return false;\n    }\n    // sustain?\n    const stats = actor.stats;\n    if (!stats.adjust('food', config.type, config.amount))\n        return false;\n    return true;\n}\nEffect.installHandler('stat', makeStatEffect);\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nGWU.color.install('cellStatusName', 'light_blue');\n// class CellEntities {\n//     cell: Cell;\n//     constructor(cell: Cell) {\n//         this.cell = cell;\n//     }\n//     eachItem(cb: EachCb<Item>): void {\n//         let object: Item | null = this.cell._item;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     eachActor(cb: EachCb<Actor>): void {\n//         let object: Actor | null = this.cell._actor;\n//         while (object) {\n//             cb(object);\n//             object = object.next;\n//         }\n//     }\n//     forEach(cb: EachCb<Entity>): void {\n//         this.eachItem(cb);\n//         this.eachActor(cb);\n//     }\n//     some(cb: MatchCb<Entity>): boolean {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (cb(object)) return true;\n//             object = object.next;\n//         }\n//         return false;\n//     }\n//     reduce(cb: ReduceCb<Entity>, start?: any): any {\n//         let object: Entity | null = this.cell._item;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         object = this.cell._actor;\n//         while (object) {\n//             if (start === undefined) {\n//                 start = object;\n//             } else {\n//                 start = cb(start, object);\n//             }\n//             object = object.next;\n//         }\n//         return start;\n//     }\n// }\nexport class Cell {\n    // toFire: Partial<Effect.EffectCtx>[] = [];\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this.x = -1;\n        this.y = -1;\n        // this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.snapshot = GWU.sprite.makeMixer();\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    get hasStableSnapshot() {\n        return this.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    }\n    get hasStableMemory() {\n        return this.hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        // this._actor = other.actor;\n        // this._item = other.item;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n        other.getSnapshot(this.snapshot);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, checkEntities = false) {\n        var _a, _b;\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        if (!checkEntities)\n            return false;\n        if (this.hasItem()) {\n            if ((_a = this.item) === null || _a === void 0 ? void 0 : _a.hasEntityFlag(flag))\n                return true;\n        }\n        if (this.hasActor()) {\n            if ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.hasEntityFlag(flag))\n                return true;\n        }\n        return false;\n    }\n    hasAllEntityFlags(flags, checkEntities = false) {\n        return (this.entityFlags(checkEntities) & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        var _a, _b;\n        let flag = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            if (this.hasItem()) {\n                flag |= ((_a = this.item) === null || _a === void 0 ? void 0 : _a.flags.entity) || 0;\n            }\n            if (this.hasActor()) {\n                flag |= ((_b = this.actor) === null || _b === void 0 ? void 0 : _b.flags.entity) || 0;\n            }\n        }\n        return flag;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n            this.flags.cell &= ~Flags.Cell.STABLE_SNAPSHOT;\n            this.map.needsRedraw = true;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision() {\n        return this.tiles.some((t) => t && t.blocksVision());\n    }\n    blocksPathing() {\n        return this.tiles.some((t) => t && t.blocksPathing());\n    }\n    blocksMove() {\n        return this.tiles.some((t) => t && t.blocksMove());\n    }\n    blocksEffects() {\n        return this.tiles.some((t) => t && t.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isNull() {\n        return this.tiles.every((t) => !t || t === TILE.tiles.NULL);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    // hasKey(): boolean {\n    //     return this._entities.some(\n    //         (e) => !!e.key && e.key.matches(this.x, this.y)\n    //     );\n    // }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile, opts = {}) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (this.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && this.hasItem())\n            return false;\n        if (opts.blockedByActors && this.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && this.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = this.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === TILE.tiles.NULL) {\n                this.tiles[0] = TILE.get(tile.groundTile);\n            }\n        }\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            this.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            this.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            this.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.needsRedraw = true;\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.snapshot.blackOut();\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    tileWithEffect(name) {\n        return this.tiles.find((t) => t === null || t === void 0 ? void 0 : t.hasEffect(name)) || null;\n    }\n    fireEvent(event, ctx = {}) {\n        // ctx.cell = this;\n        let didSomething = false;\n        // console.log('fire event - %s', event);\n        for (const tile of this.tiles) {\n            if (!tile || !tile.effects)\n                continue;\n            const ev = tile.effects[event];\n            if (ev) {\n                const r = this._activate(ev, ctx);\n                if (r) {\n                    didSomething = true;\n                }\n            }\n        }\n        return didSomething;\n    }\n    _activate(effect, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.installedEffects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = effect.trigger(this, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this.map.itemAt(this.x, this.y);\n    }\n    canAddItem(_item) {\n        return true;\n    }\n    canRemoveItem(_item) {\n        return true;\n    }\n    _addItem(_item) {\n        this.setCellFlag(Flags.Cell.HAS_ITEM);\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    _removeItem(item) {\n        let hasItems = false;\n        let foundIndex = -1;\n        this.map.items.forEach((obj, index) => {\n            if (obj === item) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasItems = true;\n            }\n        });\n        if (!hasItems) {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this.map.actorAt(this.x, this.y);\n    }\n    canAddActor(_actor) {\n        return true;\n    }\n    canRemoveActor(_actor) {\n        return true;\n    }\n    _addActor(actor) {\n        this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        if (actor.isPlayer()) {\n            this.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    _removeActor(actor) {\n        let hasActor = false;\n        let foundIndex = -1;\n        this.map.actors.forEach((obj, index) => {\n            if (obj === actor) {\n                foundIndex = index;\n            }\n            else if (obj.x === this.x && obj.y === this.y) {\n                hasActor = true;\n            }\n        });\n        if (!hasActor) {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        if (foundIndex < 0)\n            return false;\n        this.needsRedraw = true;\n        // this.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        return true;\n    }\n    hasFx() {\n        return !!(this.flags.cell & Flags.Cell.HAS_FX);\n    }\n    get fx() {\n        return this.map.fxAt(this.x, this.y);\n    }\n    _addFx(_fx) {\n        this.setCellFlag(Flags.Cell.HAS_FX);\n        this.needsRedraw = true;\n    }\n    _removeFx(_fx) {\n        if (!this.fx) {\n            this.clearCellFlag(Flags.Cell.HAS_FX);\n        }\n        this.needsRedraw = true;\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        if (this.hasActor()) {\n            const actor = this.map.actorAt(this.x, this.y);\n            if (actor && actor.sprite.ch)\n                return actor.sprite.ch;\n        }\n        if (this.hasItem()) {\n            const item = this.map.itemAt(this.x, this.y);\n            if (item && item.sprite.ch)\n                return item.sprite.ch;\n        }\n        if (this.hasTileFlag(Flags.Tile.T_BRIDGE)) {\n            return '=';\n        }\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n    drawStatus(buffer, bounds) {\n        const lines = buffer.wrapText(bounds.x + 1, bounds.y, bounds.width - 1, this.getName(), 'cellStatusName');\n        return lines;\n    }\n    toString() {\n        return `Cell @ ${this.x},${this.y}`;\n    }\n}\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile, _opts) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n}\n","import { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts) {\n        const cell = this.map.cell(x, y);\n        return cell.setTile(tile, opts);\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // // Bookkeeping for fire, pressure plates and key-activated tiles.\n        // for (let x = 0; x < this.map.width; ++x) {\n        //     for (let y = 0; y < this.map.height; ++y) {\n        //         const cell = this.map.cell(x, y);\n        //         if (\n        //             !cell.hasCellFlag(\n        //                 Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM\n        //             ) &&\n        //             cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)\n        //         ) {\n        //             cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n        //         }\n        //     }\n        // }\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            cell.fireEvent(event, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nexport class BasicDrawer {\n    isAnyKindOfVisible(_cell) {\n        return true;\n    }\n    drawInto(dest, map, opts = {}) {\n        const buffer = dest instanceof GWU.buffer.Buffer ? dest : dest.buffer;\n        const offsetX = opts.offsetX || 0;\n        const offsetY = opts.offsetY || 0;\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                if (map.hasXY(x + offsetX, y + offsetY)) {\n                    const cell = map.cell(x + offsetX, y + offsetY);\n                    this.drawCell(mixer, cell, opts.fov);\n                    buffer.drawSprite(x, y, mixer);\n                }\n            }\n        }\n    }\n    drawCell(dest, cell, fov) {\n        dest.blackOut();\n        // const isVisible = fov ? fov.isAnyKindOfVisible(cell.x, cell.y) : true;\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (cell.needsRedraw || needSnapshot) {\n            this.getAppearance(dest, cell);\n            cell.putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            cell.getSnapshot(dest);\n        }\n        this.applyLight(dest, cell, fov);\n        if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT |\n            Flags.Entity.L_LIST_IN_SIDEBAR, true)) {\n            [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n        }\n        return true;\n    }\n    // getCellAppearance(cell: CellType, dest: GWU.sprite.Mixer) {\n    //     dest.blackOut();\n    //     const isVisible = true; // this.fov.isAnyKindOfVisible(x, y);\n    //     const isRevealed = true; // this.fov.isRevealed(x, y);\n    //     const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     if (needSnapshot || (cell.needsRedraw && isVisible)) {\n    //         this.layers.forEach((layer) => layer.putAppearance(dest, cell));\n    //         if (dest.dances) {\n    //             cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n    //         } else {\n    //             cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n    //         }\n    //         dest.bake();\n    //         cell.putSnapshot(dest);\n    //         cell.needsRedraw = false;\n    //         cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n    //     } else {\n    //         cell.getSnapshot(dest);\n    //     }\n    //     if (isVisible) {\n    //         const light = this.light.getLight(cell.x, cell.y);\n    //         dest.multiply(light);\n    //     } else if (isRevealed) {\n    //         dest.scale(50);\n    //     } else {\n    //         dest.blackOut();\n    //     }\n    //     if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n    //         [dest.fg, dest.bg] = GWU.color.separate(dest.fg, dest.bg);\n    //     }\n    // }\n    getAppearance(dest, cell) {\n        const ground = cell.tiles[Flags.Depth.GROUND];\n        const surface = cell.tiles[Flags.Depth.SURFACE];\n        const liquid = cell.tiles[Flags.Depth.LIQUID];\n        const gas = cell.tiles[Flags.Depth.GAS]; // How to get volume!?!?!?!\n        dest.drawSprite(ground.sprite);\n        if (surface) {\n            dest.drawSprite(surface.sprite);\n        }\n        if (liquid) {\n            dest.drawSprite(liquid.sprite);\n        }\n        if (cell.hasItem()) {\n            const item = cell.map.itemAt(cell.x, cell.y);\n            if (item)\n                item.drawInto(dest);\n        }\n        if (cell.hasActor()) {\n            const actor = cell.map.actorAt(cell.x, cell.y);\n            if (actor)\n                actor.drawInto(dest);\n        }\n        if (gas) {\n            const opacity = GWU.rng.cosmetic.number(50) + 25;\n            dest.drawSprite(gas.sprite, opacity);\n        }\n        if (cell.hasFx()) {\n            const fx = cell.map.fxAt(cell.x, cell.y);\n            if (fx)\n                dest.drawSprite(fx.sprite);\n        }\n        if (dest.dances) {\n            cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        else {\n            cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n        }\n        dest.bake();\n    }\n    applyLight(dest, cell, fov) {\n        const isVisible = !fov || fov.isAnyKindOfVisible(cell.x, cell.y);\n        const isRevealed = !fov || fov.isRevealed(cell.x, cell.y);\n        const light = cell.map.light.getLight(cell.x, cell.y);\n        dest.multiply(light);\n        // TODO - is Clairy\n        // TODO - is Telepathy\n        if (fov && fov.isCursor(cell.x, cell.y)) {\n            dest.invert();\n        }\n        else if (!isVisible) {\n            if (isRevealed) {\n                dest.scale(50);\n            }\n            else {\n                dest.blackOut();\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\n// import { CellMemory } from './cellMemory';\nimport * as Effect from '../effect';\nimport { BasicDrawer } from '../draw/basic';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        // _memory: GWU.grid.Grid<CellMemory>;\n        // machineCount = 0;\n        // _seed = 0;\n        this.rng = GWU.rng.random;\n        // id = 'MAP';\n        this.actors = [];\n        this.items = [];\n        this.fx = [];\n        this._animations = [];\n        this.events = new GWU.events.EventEmitter();\n        this.flags = { map: 0 };\n        this.layers = [];\n        this.properties = { seed: 0, machineCount: 0 };\n        if (opts.id) {\n            this.properties.id = opts.id;\n        }\n        this.drawer = opts.drawer || new BasicDrawer();\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        // this._memory = GWU.grid.make(\n        //     width,\n        //     height,\n        //     (x, y) => new CellMemory(this, x, y)\n        // );\n        if (opts.seed) {\n            this.properties.seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        // this.fov = new GWU.fov.FovSystem(this, opts);\n        this.initLayers();\n    }\n    get seed() {\n        return this.properties.seed;\n    }\n    set seed(v) {\n        this.properties.seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    get width() {\n        return this.cells.width;\n    }\n    get height() {\n        return this.cells.height;\n    }\n    // memory(x: number, y: number): CellMemory {\n    //     return this._memory[x][y];\n    // }\n    // knowledge(x: number, y: number): CellInfoType {\n    //     if (this.fov.isAnyKindOfVisible(x, y)) return this.cell(x,y);\n    //     return this._memory[x][y];\n    // }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    _cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // items\n    hasItem(x, y) {\n        return this.cell(x, y).hasItem();\n    }\n    itemAt(x, y) {\n        return this.items.find((i) => i.isAt(x, y)) || null;\n    }\n    eachItem(cb) {\n        this.items.forEach(cb);\n    }\n    addItem(x, y, item, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this._cell(x, y);\n        // if (!cell.canAddItem(item)) return false;\n        if (cell._addItem(item)) {\n            const index = this.items.indexOf(item);\n            if (index < 0) {\n                this.items.push(item);\n            }\n            item.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireAddItemEffects(item, cell);\n            }\n            if (index < 0) {\n                this.events.emit('item', this, item, true);\n            }\n            return true;\n        }\n        return false;\n    }\n    _fireAddItemEffects(item, cell) {\n        if (item.key &&\n            item.key.matches(cell.x, cell.y) &&\n            cell.hasEffect('key')) {\n            cell.fireEvent('key', {\n                key: item,\n                item,\n            });\n        }\n        else if (cell.hasEffect('add_item')) {\n            cell.fireEvent('add_item', {\n                key: item,\n                item,\n            });\n        }\n    }\n    addItemNear(x, y, item, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this._cell(i, j);\n            if (cell.hasItem())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (item.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        return this.addItem(loc[0], loc[1], item, fireEffects);\n    }\n    removeItem(item, fireEffects = false) {\n        const cell = this._cell(item.x, item.y);\n        // if (!cell.canRemoveItem(item)) return false;\n        if (cell._removeItem(item)) {\n            if (fireEffects) {\n                this._fireRemoveItemEffects(item, cell);\n            }\n            GWU.arrayDelete(this.items, item);\n            item.removeFromMap();\n            this.events.emit('item', this, item, false);\n            return true;\n        }\n        return false;\n    }\n    _fireRemoveItemEffects(item, cell) {\n        if (item.isKey(cell.x, cell.y) && cell.hasEffect('no_key')) {\n            cell.fireEvent('no_key', {\n                key: item,\n                item,\n            });\n        }\n        else if (cell.hasEffect('remove_item')) {\n            cell.fireEvent('remove_item', {\n                key: item,\n                item,\n            });\n        }\n    }\n    moveItem(item, x, y, fireEffects = false) {\n        if (item.map !== this)\n            throw new Error('Actor not on this map!');\n        const currentCell = this._cell(item.x, item.y);\n        const newCell = this._cell(x, y);\n        // if (!currentCell.canRemoveItem(item)) return false;\n        // if (!newCell.canAddItem(item)) return false;\n        currentCell._removeItem(item);\n        if (newCell._addItem(item)) {\n            if (fireEffects) {\n                this._fireRemoveItemEffects(item, currentCell);\n                this._fireAddItemEffects(item, newCell);\n            }\n            item.addToMap(this, x, y);\n        }\n        return true;\n    }\n    //  moveItem(item: Item, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = item.x;\n    //     const oldY = item.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[item.depth] as Layer.ItemLayer;\n    //     if (!( layer.removeItem(item))) return false;\n    //     if (!( this.addItem(x, y, item))) {\n    //         layer.forceItem(item.x, item.y, item);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (item.lastSeen) {\n    //     //         this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n    //     //         this.clearCellFlag(\n    //     //             item.lastSeen.x,\n    //     //             item.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         item.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.item = item;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     item.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.actors.find((a) => a.isAt(x, y)) || null;\n    }\n    eachActor(cb) {\n        this.actors.forEach(cb);\n    }\n    addActor(x, y, actor, fireEffects = false) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this._cell(x, y);\n        if (!cell.canAddActor(actor))\n            return false;\n        if (cell._addActor(actor)) {\n            const index = this.actors.indexOf(actor);\n            if (index < 0) {\n                this.actors.push(actor);\n            }\n            actor.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireAddActorEffects(actor, cell);\n            }\n            if (index < 0) {\n                this.events.emit('actor', this, actor, true);\n            }\n            return true;\n        }\n        return false;\n    }\n    _fireAddActorEffects(actor, cell) {\n        if (actor.isKey(cell.x, cell.y) && cell.hasEffect('key')) {\n            cell.fireEvent('key', {\n                key: actor,\n                actor,\n            });\n        }\n        else if (actor.isPlayer() && cell.hasEffect('add_player')) {\n            cell.fireEvent('add_player', {\n                player: actor,\n                actor,\n            });\n        }\n        else if (cell.hasEffect('add_actor')) {\n            cell.fireEvent('add_actor', {\n                actor,\n            });\n        }\n    }\n    addActorNear(x, y, actor, fireEffects = false) {\n        const loc = this.rng.matchingLocNear(x, y, (i, j) => {\n            if (!this.hasXY(i, j))\n                return false;\n            const cell = this.cell(i, j);\n            if (cell.hasActor())\n                return false;\n            if (cell.blocksMove())\n                return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            return true;\n        });\n        if (!loc || loc[0] < 0)\n            return false;\n        return this.addActor(loc[0], loc[1], actor, fireEffects);\n    }\n    removeActor(actor, fireEffects = false) {\n        const cell = this._cell(actor.x, actor.y);\n        if (!cell.canRemoveActor(actor))\n            return false;\n        if (cell._removeActor(actor)) {\n            if (fireEffects) {\n                this._fireRemoveActorEffects(actor, cell);\n            }\n            actor.removeFromMap();\n            GWU.arrayDelete(this.actors, actor);\n            this.events.emit('actor', this, actor, false);\n            return true;\n        }\n        return false;\n    }\n    _fireRemoveActorEffects(actor, cell) {\n        if (actor.isKey(actor.x, actor.y) && cell.hasEffect('no_key')) {\n            cell.fireEvent('no_key', {\n                key: actor,\n                actor,\n            });\n        }\n        else if (actor.isPlayer() && cell.hasEffect('remove_player')) {\n            cell.fireEvent('remove_player', {\n                actor,\n                player: actor,\n            });\n        }\n        else if (cell.hasEffect('remove_actor')) {\n            cell.fireEvent('remove_actor', {\n                actor,\n            });\n        }\n    }\n    moveActor(actor, x, y, fireEffects = false) {\n        if (actor.map !== this)\n            throw new Error('Actor not on this map!');\n        const currentCell = this._cell(actor.x, actor.y);\n        const newCell = this._cell(x, y);\n        // if (!currentCell.canRemoveActor(actor)) return false;\n        // if (!newCell.canAddActor(actor)) return false;\n        currentCell._removeActor(actor);\n        if (newCell._addActor(actor)) {\n            actor.addToMap(this, x, y);\n            if (fireEffects) {\n                this._fireRemoveActorEffects(actor, currentCell);\n                this._fireAddActorEffects(actor, newCell);\n            }\n        }\n        return true;\n    }\n    //  moveActor(actor: Actor, dir: GWU.xy.Loc | number): boolean {\n    //     if (typeof dir === 'number') {\n    //         dir = GWU.xy.DIRS[dir];\n    //     }\n    //     const oldX = actor.x;\n    //     const oldY = actor.y;\n    //     const x = oldX + dir[0];\n    //     const y = oldY + dir[1];\n    //     if (!this.hasXY(x, y)) return false;\n    //     const layer = this.layers[actor.depth] as Layer.ActorLayer;\n    //     if (!( layer.removeActor(actor))) return false;\n    //     if (!( layer.addActor(x, y, actor))) {\n    //         layer.forceActor(actor.x, actor.y, actor);\n    //         return false;\n    //     }\n    //     // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n    //     // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n    //     // if (isVisible && !wasVisible) {\n    //     //     if (actor.lastSeen) {\n    //     //         this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(\n    //     //             actor\n    //     //         );\n    //     //         this.clearCellFlag(\n    //     //             actor.lastSeen.x,\n    //     //             actor.lastSeen.y,\n    //     //             Flags.Cell.STABLE_SNAPSHOT\n    //     //         );\n    //     //         actor.lastSeen = null;\n    //     //     }\n    //     // } else if (wasVisible && !isVisible) {\n    //     //     const mem = this._memory[x][y];\n    //     //     mem.actor = actor;\n    //     //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n    //     //     actor.lastSeen = this.cell(x, y);\n    //     // }\n    //     return true;\n    // }\n    fxAt(x, y) {\n        return this.fx.find((i) => i.isAt(x, y)) || null;\n    }\n    eachFx(cb) {\n        this.fx.forEach(cb);\n    }\n    addFx(x, y, fx) {\n        const cell = this.get(x, y);\n        if (!cell)\n            return false;\n        fx.x = x;\n        fx.y = y;\n        cell._addFx(fx);\n        this.fx.push(fx);\n        this.events.emit('fx', this, fx, true);\n        return true;\n    }\n    moveFx(fx, x, y) {\n        const current = this.get(fx.x, fx.y);\n        const updated = this.get(x, y);\n        if (!updated)\n            return false;\n        current._removeFx(fx);\n        fx.x = x;\n        fx.y = y;\n        updated._addFx(fx);\n        return true;\n    }\n    removeFx(fx) {\n        const cell = this.get(fx.x, fx.y);\n        GWU.arrayDelete(this.fx, fx);\n        if (cell) {\n            cell._removeFx(fx);\n        }\n        this.events.emit('fx', this, fx, false);\n        return true;\n    }\n    // Information\n    // isVisible(x: number, y: number): boolean {\n    //     return this.fov.isAnyKindOfVisible(x, y);\n    // }\n    hasKey(x, y) {\n        const actor = this.actorAt(x, y);\n        if (actor && actor.isKey(x, y))\n            return true;\n        const item = this.itemAt(x, y);\n        if (item && item.isKey(x, y))\n            return true;\n        return false;\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const getCh = (cell) => {\n            return cell.dump();\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    get needsRedraw() {\n        return this.hasMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v)\n            this.setMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n        else\n            this.clearMapFlag(Flags.Map.MAP_NEEDS_REDRAW);\n    }\n    hasCellFlag(x, y, flag) {\n        return this.cell(x, y).hasCellFlag(flag);\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    hasEntityFlag(x, y, flag) {\n        return this.cell(x, y).hasEntityFlag(flag);\n    }\n    hasTileFlag(x, y, flag) {\n        return this.cell(x, y).hasTileFlag(flag);\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        // this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile\n    // useMemory = false\n    ) {\n        return this.cell(x, y).hasTile(tile);\n        // if (!useMemory) return this.cell(x, y).hasTile(tile);\n        // return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            const name = tile;\n            tile = TILE.get(name);\n            if (!tile)\n                throw new Error('Failed to find tile: ' + name);\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clearTiles(tile);\n    }\n    tick(dt) {\n        let didSomething = false;\n        this._animations.forEach((a) => {\n            didSomething = a.tick(dt) || didSomething;\n        });\n        this._animations = this._animations.filter((a) => a.isRunning());\n        didSomething = this.fireAll('tick') || didSomething;\n        for (let layer of this.layers) {\n            if (layer && layer.tick(dt)) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cell(x, y));\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.actors = src.actors.slice();\n        this.items = src.items.slice();\n        this.flags.map = src.flags.map;\n        // this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.fireEvent(event, ctx);\n    }\n    fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        willFire.forEach((w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    cell.fireEvent(event, {\n                        force: true,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        cell.fireEvent('machine', ctx) || didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    // DRAW\n    drawInto(dest, opts) {\n        this.drawer.drawInto(dest, this, opts);\n    }\n    getAppearanceAt(x, y, dest) {\n        const cell = this.cell(x, y);\n        return this.drawer.drawCell(dest, cell);\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n    // redrawCell(x: number, y: number): void {\n    //     // if (clearMemory) {\n    //     //     this.clearMemory(x, y);\n    //     // }\n    //     this.cell(x, y).needsRedraw = true;\n    // }\n    // Animator\n    addAnimation(a) {\n        this._animations.push(a);\n    }\n    removeAnimation(a) {\n        GWU.arrayDelete(this._animations, a);\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Map } from '../map/map';\nimport * as Flags from '../flags';\nexport class Memory extends Map {\n    constructor(map) {\n        super(map.width, map.height);\n        // this.actor = actor;\n        this.source = map;\n        this.cells.forEach((c) => c.setCellFlag(Flags.Cell.STABLE_MEMORY));\n    }\n    cell(x, y) {\n        let cell = this.cells[x][y];\n        if (!cell.hasCellFlag(Flags.Cell.STABLE_MEMORY)) {\n            cell = this.source.cell(x, y);\n        }\n        return cell;\n    }\n    memory(x, y) {\n        return this.cells[x][y];\n    }\n    isMemory(x, y) {\n        return this.cells[x][y].hasCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    setTile() {\n        throw new Error('Cannot set tiles on memory.');\n    }\n    addItem() {\n        throw new Error('Cannot add Items to memory!');\n    }\n    removeItem() {\n        throw new Error('Cannot remove Items from memory!');\n    }\n    //  moveItem(): boolean {\n    //     throw new Error('Cannot move Items on memory!');\n    // }\n    eachItem(cb) {\n        this.source.eachItem((i) => {\n            if (!this.isMemory(i.x, i.y)) {\n                cb(i);\n                const i2 = this.items.find((other) => other.id == i.id);\n                if (i2) {\n                    const mem = this.cell(i2.x, i2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ITEM | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.items, i2);\n                }\n            }\n        });\n        this.items.forEach(cb);\n    }\n    addActor() {\n        throw new Error('Cannot add Actors to memory!');\n    }\n    removeActor() {\n        throw new Error('Cannot remove Actors from memory!');\n    }\n    //  moveActor(): boolean {\n    //     throw new Error('Cannot move Actors on memory!');\n    // }\n    eachActor(cb) {\n        this.source.eachActor((a) => {\n            if (!this.isMemory(a.x, a.y)) {\n                cb(a);\n                const a2 = this.actors.find((other) => other.id == a.id);\n                if (a2) {\n                    const mem = this.cell(a2.x, a2.y);\n                    mem.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.STABLE_SNAPSHOT);\n                    GWU.arrayDelete(this.actors, a2);\n                }\n            }\n        });\n        this.actors.forEach(cb);\n    }\n    storeMemory(x, y) {\n        const mem = this.cells[x][y];\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        const cell = this.source.cell(x, y);\n        mem.copy(cell);\n        mem.setCellFlag(Flags.Cell.STABLE_MEMORY);\n        mem.map = this; // so that drawing this cell results in using the right map\n        let newList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR);\n        // add any current items+actors\n        if (cell.hasItem()) {\n            const item = this.source.itemAt(x, y);\n            if (item) {\n                const copy = item.clone();\n                copy._map = this; // memory is map\n                this.items.push(copy);\n                if (copy.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (cell.hasActor()) {\n            const actor = this.source.actorAt(x, y);\n            if (actor) {\n                const copy = actor.clone();\n                copy._map = this; // memory is map\n                this.actors.push(copy);\n                if (copy.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n                    newList = true;\n                }\n            }\n        }\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        this.light.setLight(x, y, this.source.light.getLight(x, y));\n    }\n    forget(x, y) {\n        const mem = this.memory(x, y);\n        const currentList = mem.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        // cleanup any old items+actors\n        if (mem.hasItem()) {\n            this.items = this.items.filter((i) => i.x !== x || i.y !== y);\n        }\n        if (mem.hasActor()) {\n            this.actors = this.actors.filter((a) => a.x !== x || a.y !== y);\n        }\n        mem.clearCellFlag(Flags.Cell.STABLE_MEMORY);\n        let newList = this.source\n            .cell(x, y)\n            .hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR, true);\n        if (currentList != newList) {\n            this.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n    }\n    onFovChange(x, y, isVisible) {\n        if (!isVisible) {\n            this.storeMemory(x, y);\n        }\n        else {\n            this.forget(x, y);\n        }\n    }\n}\n","import { Memory } from './memory';\nconst cache = {};\nexport function store(actor, map, memory) {\n    let actorMemory = cache[actor.id];\n    if (!actorMemory) {\n        cache[actor.id] = actorMemory = {};\n    }\n    actorMemory[map.properties.id] = memory;\n}\nexport function get(actor, map) {\n    let actorMemory = cache[actor.id];\n    if (actorMemory) {\n        const memory = actorMemory[map.properties.id];\n        if (memory)\n            return memory;\n    }\n    return new Memory(map);\n}\n","export const ais = {};\nexport function install(name, fn) {\n    ais[name] = fn;\n}\nexport function make(opts) {\n    if (typeof opts === 'string') {\n        opts = { fn: opts };\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    if (typeof opts.fn === 'string') {\n        opts.fn = ais[opts.fn];\n    }\n    if (!opts.fn) {\n        opts.fn = ais.default;\n    }\n    return opts;\n}\n","import * as GWU from 'gw-utils';\nimport { getAction } from '../actor/action';\nimport * as AI from './ai';\nimport { wander } from './wander';\nexport class AICtx {\n    constructor(game, actor, target) {\n        this.item = null;\n        this.count = 0;\n        this.game = game;\n        this.actor = actor;\n        this.target = target || null;\n        this.distanceMap = GWU.grid.alloc(game.map.width, game.map.height);\n        if (target) {\n            const costMap = actor.costMap();\n            GWU.path.calculateDistances(this.distanceMap, target.x, target.y, costMap);\n        }\n    }\n    start() {\n        ++this.count;\n        return this;\n    }\n    done(result) {\n        --this.count;\n        if (this.count == 0) {\n            GWU.grid.free(this.distanceMap);\n        }\n        return result;\n    }\n}\n/*\nhttp://roguebasin.com/index.php/Roguelike_Intelligence_-_Stateless_AIs\n-- Typical AI\n*/\nexport async function typical(game, actor) {\n    if (actor.isDead())\n        return -1;\n    const map = actor.map;\n    if (!map)\n        return -1; // actor not on map ?!?!\n    const target = game.player;\n    const tryAttack = actor.canSee(target) && actor.willAttack(target);\n    if (tryAttack) {\n        const damagePct = 100 - actor.stats.getPct('health');\n        const morale = actor.stats.get('morale');\n        const chargeChance = 100;\n        const retreatChance = 0;\n        const ctx = new AICtx(game, actor, target).start();\n        let result = 0;\n        if (damagePct > morale) {\n            if (canRunAwayFrom(game, actor, target, ctx)) {\n                result = await runAwayFrom(game, actor, target, ctx);\n            }\n            else if (canAttack(game, actor, target, ctx)) {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (tooFarFrom(game, actor, target, ctx) &&\n            canAttack(game, actor, target, ctx) &&\n            canMoveToward(game, actor, target, ctx)) {\n            if (GWU.random.chance(chargeChance)) {\n                result = await moveToward(game, actor, target, ctx);\n            }\n            else {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (tooCloseTo(game, actor, target, ctx) &&\n            canAttack(game, actor, target, ctx) &&\n            canMoveAwayFrom(game, actor, target, ctx)) {\n            if (GWU.random.chance(retreatChance)) {\n                result = await moveAwayFrom(game, actor, target, ctx);\n            }\n            else {\n                result = await attack(game, actor, target, ctx);\n            }\n            return ctx.done(result);\n        }\n        if (canAttack(game, actor, target, ctx)) {\n            result = await attack(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n        if (tooFarFrom(game, actor, target, ctx) &&\n            canMoveToward(game, actor, target, ctx)) {\n            result = await moveToward(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n        if (tooCloseTo(game, actor, target, ctx) &&\n            canMoveAwayFrom(game, actor, target, ctx)) {\n            result = await moveAwayFrom(game, actor, target, ctx);\n            return ctx.done(result);\n        }\n    }\n    // TODO - Use scent, menory, other teammates info, ...\n    const wanderOpt = GWU.object.firstOpt('wander', actor.ai, actor.kind.ai, false);\n    if (wanderOpt) {\n        if (actor.goalMap || // we have a current goal\n            typeof wanderOpt !== 'number' || // wander: true\n            GWU.random.chance(wanderOpt) // chance\n        ) {\n            const result = wander(game, actor);\n            if (result)\n                return result;\n        }\n        else {\n            const idle = getAction('idle');\n            if (idle) {\n                return idle(game, actor);\n            }\n        }\n    }\n    const standStill = getAction('standStill');\n    if (!standStill)\n        throw new Error('No standStill action found for actors!');\n    return standStill(game, actor);\n}\nAI.install('typical', typical);\nAI.install('default', typical);\nexport function canMoveToward(game, actor, target, ctx) {\n    // can move?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    const distanceMap = ctx.distanceMap;\n    const canMoveDiagonal = false;\n    // look for distance > current around me\n    let center = distanceMap[actor.x][actor.y];\n    let count = 0;\n    GWU.xy.eachNeighbor(actor.x, actor.y, (x, y) => {\n        if (distanceMap[x][y] < center) {\n            ++count;\n        }\n    }, canMoveDiagonal);\n    return ctx.done(count > 0);\n}\nexport async function moveToward(game, actor, target, ctx) {\n    // pathfinding?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    // distanceMap.dump();\n    const map = game.map;\n    const step = GWU.path.nextStep(ctx.distanceMap, actor.x, actor.y, (x, y) => {\n        const cell = map.cell(x, y);\n        if (!cell)\n            return true;\n        if (cell.hasActor() && cell.actor !== target)\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    });\n    let result = 0;\n    if (!step || (step[0] == 0 && step[1] == 0)) {\n        const standStill = getAction('standStill');\n        if (!standStill)\n            throw new Error('No standStill action found for actors!');\n        result = await standStill(game, actor);\n        return ctx.done(result);\n    }\n    const moveDir = getAction('moveDir');\n    if (!moveDir)\n        throw new Error('No moveDir action found for Actors!');\n    result = await moveDir(game, actor, { dir: step });\n    return ctx.done(result);\n}\nexport function canMoveAwayFrom(game, actor, target, ctx) {\n    // can move?\n    ctx = (ctx || new AICtx(game, actor, target)).start();\n    const distanceMap = ctx.distanceMap;\n    const canMoveDiagonal = false;\n    // look for distance > current around me\n    let center = distanceMap[actor.x][actor.y];\n    let count = 0;\n    GWU.xy.eachNeighbor(actor.x, actor.y, (x, y) => {\n        const d = distanceMap[x][y];\n        if (d >= GWU.path.NO_PATH)\n            return;\n        if (distanceMap[x][y] > center) {\n            ++count;\n        }\n    }, canMoveDiagonal);\n    return ctx.done(count > 0);\n}\nexport async function moveAwayFrom(_game, actor, _target, _ctx) {\n    // safety/strategy?\n    // always move using safety map?\n    return actor.moveSpeed();\n}\nexport function canRunAwayFrom(_game, _actor, _target, _ctx) {\n    // can move?\n    return false;\n}\nexport async function runAwayFrom(_game, actor, _target, _ctx) {\n    // move toward loop if away from player\n    return actor.moveSpeed();\n}\nexport function canAttack(_game, actor, target, _ctx) {\n    // has attack?\n    // attack affects player?\n    // cooldown?\n    return GWU.xy.distanceFromTo(actor, target) <= 1;\n}\nexport async function attack(game, actor, target, _ctx) {\n    console.log('attack!', actor.id, target.id);\n    let attack = actor.getAction('attack');\n    if (!attack)\n        return 0;\n    return attack(game, actor);\n}\nexport function tooFarFrom(_game, actor, target, _ctx) {\n    // diagonal?\n    return GWU.xy.distanceFromTo(actor, target) > 1;\n}\nexport function tooCloseTo(_game, actor, target, _ctx) {\n    return GWU.xy.distanceFromTo(actor, target) < 1;\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { getAction } from '../actor/action';\nexport async function wander(game, actor) {\n    // Do we have a wander target?\n    let goalMap = actor.goalMap;\n    if (!goalMap) {\n        //      pick new wander target\n        const costMap = actor.costMap();\n        const loc = GWU.random.matchingLoc(costMap.width, costMap.height, (x, y) => {\n            return costMap[x][y] > 0 && costMap[x][y] !== GWU.path.NO_PATH;\n        });\n        if (!loc || loc[0] < 0 || loc[1] < 0) {\n            console.log('No wander location found!');\n            return 0;\n        }\n        //      build distance map to target\n        goalMap = actor.setGoal(loc[0], loc[1]);\n    }\n    // take the next step to the target\n    const step = GWU.path.nextStep(goalMap, actor.x, actor.y, (x, y) => {\n        if (!game.map.hasActor(x, y))\n            return false;\n        const other = game.map.actorAt(x, y);\n        if (!other) {\n            console.log(`Cell @ ${x},${y} has actor flag, but no actor.`);\n            game.map.cell(x, y).clearCellFlag(Flags.Cell.HAS_ACTOR);\n            return false;\n        }\n        return !actor.canPass(other);\n    });\n    if (!step) {\n        actor.clearGoal();\n        return 0;\n    }\n    let result = 0;\n    if (!step || (step[0] == 0 && step[1] == 0)) {\n        return 0; // did nothing\n    }\n    const moveDir = getAction('moveDir');\n    if (!moveDir)\n        throw new Error('No moveDir action found for Actors!');\n    result = await moveDir(game, actor, { dir: step });\n    return result;\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nexport function fillSafetyMap(safetyMap, actor, target) {\n    const costGrid = GWU.grid.alloc(actor.costMap());\n    GWU.path.calculateDistances(safetyMap, target.x, target.y, costGrid, true);\n    safetyMap.update((v) => v * -1); // Can set factor to be < -1 e.g. -1.2\n    actor.map.actors.forEach((a) => {\n        if (a.willAttack(actor)) {\n            costGrid[a.x][a.y] = GWU.path.FORBIDDEN; // This is why we allocate a copy\n        }\n    });\n    actor.map.eachCell((c, x, y) => {\n        if (c.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n            safetyMap[x][y] -= GWU.path.AVOIDED; // loop cells are extra good\n        }\n    });\n    GWU.path.rescan(safetyMap, costGrid, true);\n    safetyMap.update((v) => (v <= -30000 ? 30000 : v));\n    GWU.grid.free(costGrid);\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Actor } from './actor';\nimport * as Memory from '../memory';\nimport * as AI from '../ai';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n        this.flags = {\n            actor: Flags.Actor.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.vision = {};\n        this.actions = {};\n        this.bump = ['attack'];\n        this.moveSpeed = 100;\n        if (opts.flags) {\n            this.flags.actor = GWU.flag.from(Flags.Actor, this.flags.actor, opts.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, opts.flags);\n        }\n        if (opts.vision) {\n            this.vision.normal = opts.vision;\n        }\n        this.stats = Object.assign({ health: 1, morale: 100 }, opts.stats);\n        if (opts.actions) {\n            Object.assign(this.actions, opts.actions);\n        }\n        if (opts.moveSpeed) {\n            this.moveSpeed = opts.moveSpeed;\n        }\n        this.ai = AI.make(opts.ai || 'default');\n        if (opts.bump) {\n            if (typeof opts.bump === 'string') {\n                opts.bump = opts.bump.split(/[|,]/g).map((t) => t.trim());\n            }\n            if (typeof opts.bump === 'function') {\n                opts.bump = [opts.bump];\n            }\n            if (Array.isArray(opts.bump)) {\n                this.bump = opts.bump.slice();\n            }\n        }\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n        Object.assign(actor.flags, this.flags);\n        if (options.fov) {\n            actor.fov = options.fov;\n        }\n        if (options.memory) {\n            actor.memory = options.memory;\n        }\n        if (this.vision.normal) {\n            actor.visionDistance = this.vision.normal;\n        }\n        actor.stats.init(this.stats);\n    }\n    addToMap(actor, map) {\n        super.addToMap(actor, map);\n        if (this.hasActorFlag(Flags.Actor.HAS_MEMORY)) {\n            actor.memory = Memory.get(actor, map);\n        }\n        if (this.hasActorFlag(Flags.Actor.USES_FOV)) {\n            actor.fov = new GWU.fov.FovSystem(map);\n            actor.fov.follow = actor;\n            if (actor.memory) {\n                actor.fov.callback = actor.memory;\n            }\n        }\n    }\n    removeFromMap(actor) {\n        super.removeFromMap(actor);\n        if (actor._map && actor.memory) {\n            Memory.store(actor, actor._map, actor.memory);\n        }\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    canSeeEntity(_actor, _entity) {\n        return true;\n    }\n    isAbleToSee(_actor, _entity) {\n        return true;\n    }\n    isAbleToSense(_actor, _entity) {\n        return true;\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { installAction } from '../action';\n// BUMP\n//\n// prefixes:\n// @ = only for player\n// + = only for ally\n// - = only for opposed\n// = = only for same kind\n// $ = use my action (if used with one of the above, this comes last)\n//\nexport async function bump(game, actor, ctx = {}) {\n    const other = ctx.actor;\n    if (other) {\n        const bumpActions = other.getBumpActions();\n        for (let action of bumpActions) {\n            if (typeof action === 'string') {\n                if (action.startsWith('$')) {\n                    const selfName = action.substring(1);\n                    let selfAction = other.getAction(selfName);\n                    if (selfAction === false) {\n                        throw new Error('Cannot have bump action for self action that actor cannot do: ' +\n                            action);\n                    }\n                    const ctx2 = Object.assign({}, ctx, { actor });\n                    const result = await selfAction(game, other, ctx2);\n                    if (result)\n                        return result;\n                }\n                else {\n                    const config = actor.getAction(action);\n                    if (config === false) {\n                        throw new Error('Cannot configure actor with bump action they cannot do: ' +\n                            action);\n                    }\n                    else {\n                        action = config;\n                    }\n                    const result = await action(game, actor, ctx);\n                    if (result)\n                        return result;\n                }\n            }\n            else {\n                const result = await action(game, actor, ctx);\n                if (result)\n                    return result;\n            }\n        }\n    }\n    const item = ctx.item;\n    if (item) {\n        // TODO - Item Actions\n    }\n    return 0;\n}\ninstallAction('bump', bump);\n","import { installAction } from '../action';\nexport async function standStill(_game, actor, _ctx) {\n    return actor.endTurn();\n}\ninstallAction('standStill', standStill);\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\n// export class SpriteFX extends FX {\n//     sprite: GWU.sprite.SpriteConfig;\n//     stepCount: number;\n//     x: number;\n//     y: number;\n//     constructor(\n//         map: MapType,\n//         sprite: string | GWU.sprite.SpriteConfig,\n//         x: number,\n//         y: number,\n//         opts: SpriteFxOptions = {}\n//     ) {\n//         const count = opts.blink || 1;\n//         const duration = opts.duration || 1000;\n//         opts.speed = opts.speed || duration / (2 * count - 1);\n//         super(map, opts);\n//         if (typeof sprite === 'string') {\n//             const name = sprite;\n//             sprite = GWU.sprite.sprites[sprite];\n//             if (!sprite) throw new Error('Cannot find sprite! ' + name);\n//         }\n//         this.sprite = sprite;\n//         this.x = x || 0;\n//         this.y = y || 0;\n//         this.stepCount = 2 * count - 1;\n//     }\n//     start() {\n//         this.map.addFx(this.x, this.y, this.sprite);\n//         return super.start();\n//     }\n//     step() {\n//         --this.stepCount;\n//         if (this.stepCount <= 0) return this.stop();\n//         if (this.stepCount % 2 == 0) {\n//             this.map.removeFx(this);\n//         } else {\n//             this.map.addFx(this.x, this.y, this);\n//         }\n//     }\n//     stop(result?: any) {\n//         this.map.removeFx(this);\n//         return super.stop(result);\n//     }\n//     moveDir(dx: number, dy: number) {\n//         return this.moveTo(this.x + dx, this.y + dy);\n//     }\n//     moveTo(x: number, y: number) {\n//         this.map.moveFx(x, y, this);\n//         return true;\n//     }\n// }\nexport async function flashSprite(map, x, y, sprite, duration = 100, count = 1, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ visible: true })\n        .to({ visible: false })\n        .repeat(count)\n        .repeatDelay(duration)\n        .duration(duration)\n        .onUpdate((obj) => {\n        if (obj.visible) {\n            map.addFx(x, y, entity);\n        }\n        else {\n            map.removeFx(entity);\n        }\n    });\n    // realTime\n    animator = animator || GWU.io.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nGWU.sprite.install('bump', 'white', 50);\nexport async function hit(map, target, sprite, duration, animator) {\n    sprite = sprite || 'hit';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('hit', 'red', 50);\nexport async function miss(map, target, sprite, duration, animator) {\n    sprite = sprite || 'miss';\n    duration = duration || 200;\n    await flashSprite(map, target.x, target.y, sprite, duration, 1, animator);\n}\nGWU.sprite.install('miss', 'green', 50);\nexport async function fadeInOut(map, x, y, sprite, duration = 100, animator) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite).clone();\n    }\n    else {\n        sprite = GWU.sprite.make(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    map.addFx(x, y, entity);\n    const tween = GWU.tween\n        .make({ opacity: 0 })\n        .to({ opacity: 100 })\n        .repeat(2)\n        .yoyo(true)\n        .duration(Math.floor(duration / 2))\n        .onUpdate((obj) => {\n        entity.sprite.opacity = obj.opacity;\n        map.cell(x, y).needsRedraw = true; // we changed the sprite so redraw\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n    });\n    // realTime\n    animator = animator || GWU.io.loop;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport async function moveSprite(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const entity = Entity.make({ name: 'FX', sprite });\n    const from = { x: GWU.xy.x(source), y: GWU.xy.y(source) };\n    map.addFx(from.x, from.y, entity);\n    let duration = opts.duration ||\n        Math.ceil(16 * (GWU.xy.maxAxisFromTo(source, target) / (opts.speed || 8)));\n    if (GWU.xy.isLoc(target)) {\n        target = { x: target[0], y: target[1] };\n    }\n    const tween = GWU.tween\n        .make(from)\n        .to(target)\n        .duration(duration)\n        .onUpdate((vals) => {\n        // tweens dont update every step, so...\n        // draw line from current pos to vals pos\n        // check each step for blocking...\n        // end at either vals or last blocking spot\n        const dest = { x: entity.x, y: entity.y };\n        const ok = GWU.xy.forLineBetween(dest.x, dest.y, vals.x, vals.y, (x, y) => {\n            if (opts.stepFn) {\n                if (opts.stepFn(x, y)) {\n                    if (!opts.stopBeforeWalls) {\n                        dest.x = x;\n                        dest.y = y;\n                    }\n                    return false;\n                }\n            }\n            else if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (!opts.stopBeforeWalls) {\n                    dest.x = x;\n                    dest.y = y;\n                }\n                return false;\n            }\n            dest.x = x;\n            dest.y = y;\n        });\n        map.moveFx(entity, dest.x, dest.y);\n        if (!ok) {\n            tween.stop();\n        }\n    })\n        .onFinish(() => {\n        map.removeFx(entity);\n        return entity;\n    });\n    const animator = opts.animator || map;\n    animator.addAnimation(tween);\n    return tween.start();\n}\nexport function bolt(map, source, target, sprite, opts = {}) {\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport async function projectile(map, source, target, sprite, opts = {}) {\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    if (sprite.ch && sprite.ch.length == 4) {\n        const dir = GWU.xy.dirFromTo(source, target);\n        let index = 0;\n        if (dir[0] && dir[1]) {\n            index = 2;\n            if (dir[0] != dir[1]) {\n                // remember up is -y\n                index = 3;\n            }\n        }\n        else if (dir[0]) {\n            index = 1;\n        }\n        const ch = sprite.ch[index];\n        sprite = GWU.sprite.make(ch, sprite.fg, sprite.bg);\n    }\n    else if (sprite.ch && sprite.ch.length !== 1) {\n        throw new Error('projectile requires 4 chars - vert,horiz,diag-left,diag-right (e.g: \"|-\\\\/\")');\n    }\n    return moveSprite(map, source, target, sprite, opts);\n}\nexport function beam(map, from, to, sprite, opts = {}) {\n    opts.fade = opts.fade || 100;\n    if (opts.stopAtWalls === undefined)\n        opts.stopAtWalls = true;\n    const line = [];\n    GWU.xy.forLineFromTo(from, to, (x, y) => {\n        if (!map.hasXY(x, y))\n            return false;\n        if (opts.stepFn && opts.stepFn(x, y))\n            return false;\n        if (opts.stopAtWalls || opts.stopBeforeWalls) {\n            if (map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE)) {\n                if (opts.stopBeforeWalls)\n                    return false;\n                line.push([x, y]);\n                return false;\n            }\n        }\n        line.push([x, y]);\n        return true;\n    });\n    const duration = opts.duration || Math.ceil(16 * (line.length / (opts.speed || 8)));\n    const animator = opts.animator || map;\n    const promises = [];\n    let lastIndex = -1;\n    const tween = GWU.tween\n        .make({ index: 0 })\n        .to({ index: line.length - 1 })\n        .duration(duration)\n        .onUpdate((vals) => {\n        while (lastIndex < vals.index) {\n            ++lastIndex;\n            const loc = line[lastIndex] || [-1, -1];\n            promises.push(fadeInOut(map, loc[0], loc[1], sprite, opts.fade, animator));\n        }\n    })\n        .onFinish(async () => {\n        await Promise.all(promises);\n        const loc = line[line.length - 1];\n        return { x: loc[0], y: loc[1] };\n    });\n    animator.addAnimation(tween);\n    return tween.start();\n}\nfunction isInShape(shape, cx, cy, allowCenter, x, y) {\n    const sx = Math.abs(x - cx);\n    const sy = Math.abs(y - cy);\n    if (sx == 0 && sy == 0 && !allowCenter)\n        return false;\n    switch (shape) {\n        case '+':\n            return sx == 0 || sy == 0;\n        case 'x':\n        case 'X':\n            return sx == sy;\n        case '*':\n            return sx == 0 || sy == 0 || sx == sy;\n        default:\n            return true;\n    }\n}\nfunction checkExplosionOpts(opts) {\n    opts.speed = opts.speed || 2;\n    opts.fade = opts.fade || 100;\n    opts.shape = opts.shape || 'o';\n    if (opts.center === undefined) {\n        opts.center = true;\n    }\n}\nexport function explosion(map, x, y, radius, sprite, opts = {}) {\n    checkExplosionOpts(opts);\n    opts.animator = opts.animator || map;\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    if (typeof sprite === 'string') {\n        sprite = GWU.sprite.from(sprite);\n    }\n    const grid = GWU.grid.alloc(map.width, map.height);\n    const fov = new GWU.fov.FOV({\n        isBlocked(x, y) {\n            return map.hasEntityFlag(x, y, Flags.Entity.L_BLOCKS_MOVE);\n        },\n        hasXY(x, y) {\n            return map.hasXY(x, y);\n        },\n    });\n    fov.calculate(x, y, radius, (x1, y1) => {\n        grid[x1][y1] = 1;\n    });\n    const duration = opts.duration || 32 * (radius / opts.speed);\n    const promises = [];\n    const tween = GWU.tween\n        .make({ r: 0 })\n        .to({ r: radius })\n        .duration(duration)\n        .onUpdate((vals) => {\n        const minX = Math.max(0, x - vals.r);\n        const minY = Math.max(0, y - vals.r);\n        const maxX = Math.min(map.width - 1, x + vals.r);\n        const maxY = Math.min(map.height - 1, y + vals.r);\n        for (let x1 = minX; x1 <= maxX; ++x1) {\n            for (let y1 = minY; y1 <= maxY; ++y1) {\n                if (grid[x1][y1] &&\n                    GWU.xy.distanceBetween(x, y, x1, y1) <= vals.r) {\n                    grid[x1][y1] = 0;\n                    if (isInShape(opts.shape, x, y, opts.center, x1, y1)) {\n                        promises.push(fadeInOut(map, x1, y1, sprite, opts.fade, opts.animator));\n                    }\n                }\n            }\n        }\n    })\n        .onFinish(async (_obj, success) => {\n        GWU.grid.free(grid);\n        await Promise.all(promises);\n        return success;\n    });\n    opts.animator.addAnimation(tween);\n    return tween.start();\n}\n/*\nexport function explosionFor(\n    map: MapType,\n    grid: GWU.grid.NumGrid,\n    x: number,\n    y: number,\n    radius: number,\n    sprite: string | GWU.sprite.SpriteConfig,\n    opts: ExplosionOptions = {}\n) {\n    checkExplosionOpts(opts);\n    // opts.stepFn = opts.stepFn || ((x, y) => !map.isObstruction(x, y));\n    const animation = new ExplosionFX(\n        map,\n        grid,\n        x,\n        y,\n        radius,\n        sprite,\n        opts.speed,\n        opts.fade,\n        opts.shape,\n        opts.center,\n        opts.stepFn\n    );\n    return opts.playFn!(animation);\n}\n*/\n","import { installAction } from '../action';\nimport { bump } from './bump';\nimport { standStill } from './standStill';\nimport * as FX from '../../fx';\nexport async function moveDir(game, actor, ctx = {}) {\n    //\n    const step = ctx.dir;\n    if (!step)\n        throw new Error('moveDir called with no direction!');\n    const newX = actor.x + step[0];\n    const newY = actor.y + step[1];\n    const map = game.map;\n    const currentCell = map.cell(actor.x, actor.y);\n    const newCell = map.cell(newX, newY);\n    let result = 0;\n    if (newCell.blocksMove()) {\n        if (ctx.try)\n            return 0;\n        FX.hit(map, newCell, 'hit', 100);\n        return actor.endTurn();\n    }\n    // can we leave?\n    if (!currentCell.canRemoveActor(actor)) {\n        if (ctx.try)\n            return 0;\n        // canActorLeave must add appropriate message\n        return actor.endTurn();\n    }\n    // is there an actor there?\n    if (newCell.hasActor() || newCell.hasItem()) {\n        if (ctx.try)\n            return 0;\n        const ctx2 = { actor: newCell.actor, item: newCell.item };\n        result = await bump(game, actor, ctx2);\n        if (result)\n            return result;\n    }\n    // can we enter?\n    if (!newCell.canAddActor(actor)) {\n        if (ctx.try)\n            return 0;\n        return actor.endTurn();\n    }\n    if (!map.moveActor(actor, newX, newY)) {\n        result = await standStill(game, actor, ctx);\n        return result;\n    }\n    result = actor.endTurn();\n    return result;\n}\ninstallAction('moveDir', moveDir);\n","import * as GWU from 'gw-utils';\nimport { installAction } from '../action';\nimport { moveDir } from './moveDir';\nexport async function idle(game, actor, _ctx) {\n    if (GWU.random.chance(50)) {\n        // do nothing\n        return actor.endTurn();\n    }\n    // try to step in a random direction\n    const dirIndex = GWU.random.number(4);\n    const dir = GWU.xy.DIRS[dirIndex];\n    const result = await moveDir(game, actor, { dir, try: true });\n    if (result)\n        return result;\n    // stand still\n    return actor.endTurn();\n}\ninstallAction('idle', idle);\n","import * as GWU from 'gw-utils';\nimport { installAction } from '../action';\nexport async function pickup(game, actor, ctx = {}) {\n    const map = actor.map;\n    if (!map)\n        throw new Error('Actor not on map!');\n    const item = actor.map.itemAt(actor.x, actor.y);\n    if (!item) {\n        if (!ctx.quiet) {\n            GWU.message.addAt(actor.x, actor.y, 'Nothing to pickup.');\n        }\n        return 0;\n    }\n    if (actor.avoidsItem(item))\n        return 0;\n    const itemAction = item.getAction('pickup');\n    if (itemAction === false) {\n        if (!ctx.quiet) {\n            GWU.message.addAt(actor.x, actor.y, 'You cannot pickup %{the.item}.', {\n                item,\n            });\n        }\n        return 0;\n    }\n    else if (typeof itemAction === 'function') {\n        // You have to do everything\n        const result = await itemAction(game, actor, item);\n        if (result)\n            return result; // handled\n    }\n    // logs error messages\n    if (!actor.canAddItem(item)) {\n        return 0;\n    }\n    if (!actor.map.removeItem(item)) {\n        return 0;\n    }\n    actor.addItem(item);\n    if (!ctx.quiet) {\n        GWU.message.addAt(actor.x, actor.y, 'You pickup %{the:item}.', {\n            item,\n        });\n    }\n    return actor.endTurn();\n}\ninstallAction('pickup', pickup);\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    copy(other) {\n        super.copy(other);\n        this.quantity = other.quantity;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n    getAction(name) {\n        const action = this.kind.actions[name];\n        return action;\n    }\n    getBumpActions() {\n        return this.kind.bump;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n        this.flags = {\n            item: Flags.Item.DEFAULT,\n            entity: Flags.Entity.DEFAULT_ACTOR,\n        };\n        this.actions = {};\n        this.bump = [];\n        if (config.flags) {\n            this.flags.item = GWU.flag.from(Flags.Item, this.flags.item, config.flags);\n            this.flags.entity = GWU.flag.from(Flags.Entity, this.flags.entity, config.flags);\n        }\n        if (config.actions) {\n            Object.entries(config.actions).forEach(([key, value]) => {\n                this.actions[key] = value;\n            });\n        }\n        if (config.bump) {\n            if (typeof config.bump === 'string' ||\n                typeof config.bump === 'function') {\n                config.bump = [config.bump];\n            }\n            if (Array.isArray(config.bump)) {\n                this.bump = config.bump.slice();\n            }\n        }\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n        Object.assign(item.flags, this.flags);\n        item.quantity = options.quantity || 1;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        // fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        // if (this.map.fov.changed) {\n        //     this.fovVersion = this.version;\n        //     this.map.fov.changed = false;\n        // }\n        // if (snap.version !== this.fovVersion) {\n        //     snap.map.fov.copy(this.map.fov);\n        // }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        // if (snap.version < this.fovVersion || this.map.fov.changed) {\n        //     this.map.fov.copy(snap.map.fov);\n        //     this.fovVersion = snap.version;\n        // }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import * as GWU from 'gw-utils';\nexport function getCellPathCost(map, x, y) {\n    const cell = map.cell(x, y);\n    if (cell.blocksMove())\n        return GWU.path.OBSTRUCTION;\n    if (cell.blocksPathing())\n        return GWU.path.FORBIDDEN;\n    if (cell.hasActor())\n        return 10;\n    return 1;\n}\nexport function fillCostMap(map, costMap) {\n    costMap.update((_v, x, y) => getCellPathCost(map, x, y));\n}\nexport function getPathBetween(map, x0, y0, x1, y1, options = {}) {\n    const distanceMap = GWU.grid.alloc(map.width, map.height);\n    const costMap = GWU.grid.alloc(map.width, map.height);\n    fillCostMap(map, costMap);\n    GWU.path.calculateDistances(distanceMap, x0, y0, costMap, options.eightWays, GWU.xy.straightDistanceBetween(x0, y0, x1, y1) + 1);\n    const path = GWU.path.getPath(distanceMap, x1, y1, (x, y) => map.cell(x, y).blocksMove(), options.eightWays);\n    GWU.grid.free(costMap);\n    GWU.grid.free(distanceMap);\n    return path;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    spawn(map, x = -1, y = -1, opts = {}) {\n        var _a;\n        opts.canSpawn = opts.canSpawn || GWU.TRUE;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_a = opts.machine) !== null && _a !== void 0 ? _a : 0;\n        const leader = this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addLeader(leader, map, x, y, opts)) {\n            return null;\n        }\n        return leader;\n    }\n    _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        entries.forEach(([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                this._spawnMember(kindId, map, leader, opts);\n            }\n        });\n        return count;\n    }\n    _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1, -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!this._addMember(member, map, x, y, leader, opts)) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canSpawn(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n","export const actions = {};\nexport function installCommand(name, fn) {\n    actions[name] = fn;\n}\nexport function getCommand(name) {\n    return actions[name];\n}\n","import { installCommand } from './command';\nimport * as Actor from '../actor';\n// COMMANDS\n// this === GAME\nexport async function moveDir(actor, e) {\n    const dir = e.dir;\n    if (!actor.map || !dir)\n        return -1;\n    return Actor.actions.moveDir(this, actor, e);\n}\ninstallCommand('moveDir', moveDir);\n","import * as GWU from 'gw-utils';\nimport { installCommand } from './command';\nexport async function pickup(actor, _ev) {\n    if (!actor.map)\n        return -1;\n    const playerAction = actor.getAction('pickup');\n    if (!playerAction) {\n        GWU.message.addAt(actor.x, actor.y, 'You cannot pickup items.');\n        return actor.endTurn();\n    }\n    else {\n        // You have to do everything\n        const result = await playerAction(this, actor);\n        if (result)\n            return result; // handled\n    }\n    // Should never get here, but...\n    const standStill = actor.getAction('standStill');\n    if (!standStill)\n        throw new Error('Actor cannot stand still.');\n    return standStill(this, actor);\n}\ninstallCommand('pickup', pickup);\n","/*\n    Attributes\n    ========================\n\n    To configure attributes, set the defaults:\n\n    Attribute.install(')\n\n    const attr = new Attributes(10);\n\n    attr.set('str', 10);\n    attr.set('dex', 10);\n    ...\n    attr.set('chr', 10);\n\n    // to get the current value\n    attr.get('str');\n\n    // To raise an attribute permanently\n    attr.gain('chr', 1);\n\n    // To raise an attribute temporarily\n    attr.gain('chr', 1, false);\n\n    // To lower an attribute permanently\n    attr.drain('chr', 1, true);\n\n    // to lower an attribute temporarily\n    attr.drain('chr', 1);\n\n    // to restore (remove) all temporary changes\n    attr.restore();\n\n    // to add a temporary change that can be removed by itself\n    attr.addBonus('str', 1);\n\n    // to remove the bonus\n    attr.clearBonus('str', 1);\n\n    // adjustments (bonuses) are also possible via:\n    attr.adjust('str', { bonus: 1 });\n\n    // But adjustments can also set the\n    attr.adjust('str', { fixed: 14 });      // temporarily sets base\n    attr.adjust('str', { base: 21 });       // resets the base\n    attr.adjust('str', { restore: true });  // removes all bonuses/penalties\n    attr.adjust('str', { min: 10 });        // limits value\n    attr.adjust('str', { max: 30 });        // limits value\n    attr.adjust('str', { sustain: true });  // turns off lowering values\n*/\nexport class Attributes {\n    constructor(baseValues) {\n        this._base = {};\n        this._max = {};\n        this._bonus = {};\n        this._sustain = {};\n        this._value = {};\n        this.changed = null;\n        this.init(baseValues);\n    }\n    init(baseValues) {\n        for (let k in attributes) {\n            const v = typeof baseValues === 'number' ? baseValues : attributes[k];\n            this.set(k, v);\n        }\n        if (typeof baseValues !== 'number') {\n            for (let k in baseValues) {\n                this.set(k, baseValues[k]);\n            }\n        }\n    }\n    forEach(fn) {\n        Object.keys(attributes).forEach((k) => fn(this.get(k)));\n    }\n    // modifier(name: string) {\n    //     return Math.floor((this.get(name) - 10) / 2);\n    // }\n    get(name) {\n        return this._value[name] || 0;\n    }\n    set(name, value = 0) {\n        this._value[name] = value;\n        this._base[name] = value;\n        this._max[name] = value;\n        this._bonus[name] = [];\n        return value;\n    }\n    base(name) {\n        return this._base[name] || 0;\n    }\n    max(name) {\n        return this._max[name] || 0;\n    }\n    sustain(name) {\n        return this._sustain[name] || false;\n    }\n    gain(name, delta, raiseMax = true) {\n        if (delta < 0 && this._sustain[name])\n            return 0;\n        this._base[name] += delta;\n        if (raiseMax && this._base[name] > this._max[name]) {\n            this._max[name] = this._base[name];\n        }\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    drain(name, loss, lowerMax = false) {\n        if (loss < 0)\n            loss = -loss;\n        const changed = this.gain(name, -loss, false);\n        if (changed && lowerMax) {\n            this._max[name] = this._base[name];\n        }\n        return changed;\n    }\n    restore(name) {\n        this._base[name] = this._max[name];\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    addBonus(name, bonus) {\n        return this._addBonus(name, { bonus });\n    }\n    _addBonus(name, bonus) {\n        if (typeof bonus === 'number')\n            bonus = { bonus };\n        if (this._value[name] === undefined) {\n            this.set(name, 0);\n        }\n        this._bonus[name].push(bonus);\n        let old = this.get(name);\n        return this._calcValue(name) - old;\n    }\n    clearBonus(name, bonus) {\n        return this._clearBonus(name, { bonus });\n    }\n    _clearBonus(name, bonus) {\n        if (typeof bonus === 'number')\n            bonus = { bonus };\n        let arr = this._bonus[name] || [];\n        let key = JSON.stringify(bonus);\n        let index = arr.findIndex((o) => {\n            return JSON.stringify(o) == key;\n        });\n        if (index > -1) {\n            arr.splice(index, 1);\n            let old = this.get(name);\n            return this._calcValue(name) - old;\n        }\n        return 0;\n    }\n    _calcValue(name) {\n        let allAdjustments = {};\n        this._bonus[name].forEach((adj) => this._applyAdjustment(allAdjustments, adj));\n        this._sustain[name] = allAdjustments.sustain || false;\n        let value = this._base[name] || 0;\n        if (allAdjustments.fixed !== undefined) {\n            value = allAdjustments.fixed;\n        }\n        else {\n            value += allAdjustments.bonus || 0;\n            if (allAdjustments.min !== undefined) {\n                value = Math.max(allAdjustments.min, value);\n            }\n            if (allAdjustments.max !== undefined) {\n                value = Math.min(allAdjustments.max, value);\n            }\n        }\n        return (this._value[name] = value);\n    }\n    adjust(name, adj) {\n        let delta = undefined;\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        if (adj.base) {\n            delta = this.gain(name, adj.base);\n        }\n        else if (adj.restore) {\n            delta = this.restore(name);\n            if (delta == 0)\n                delta = undefined;\n        }\n        else {\n            delta = this._addBonus(name, adj);\n        }\n        if (this.changed && delta !== undefined)\n            this.changed(this, name);\n        return delta;\n    }\n    clearAdjustment(name, adj) {\n        let delta = undefined;\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        if (adj.base) {\n            delta = this.drain(name, adj.base, true);\n        }\n        else if (adj.restore) {\n            // do nothing...\n        }\n        else {\n            delta = this._clearBonus(name, adj);\n        }\n        if (this.changed && delta !== undefined)\n            this.changed(this, name);\n        return delta;\n    }\n    _applyAdjustment(total, opts) {\n        if (opts.bonus) {\n            total.bonus = (total.bonus || 0) + opts.bonus;\n        }\n        if (opts.fixed !== undefined) {\n            total.fixed = Math.max(total.fixed || 0, opts.fixed);\n        }\n        if (opts.min !== undefined) {\n            total.min = Math.max(total.min || 0, opts.min);\n        }\n        if (opts.max !== undefined) {\n            total.max = Math.max(total.max || 0, opts.max);\n        }\n        if (opts.sustain !== undefined) {\n            total.sustain = opts.sustain;\n        }\n    }\n}\nexport const attributes = {};\nexport function installAttribute(attr) {\n    if (typeof attr === 'string') {\n        attributes[attr] = 0;\n        return;\n    }\n    // clear existing\n    Object.keys(attributes).forEach((k) => {\n        delete attributes[k];\n    });\n    Object.assign(attributes, attr);\n}\nexport function makeAttributes(defaults) {\n    return new Attributes(defaults);\n}\n/*\nfunction adjust(being, ...args) {\n    let adj;\n    if (args.length == 1 && typeof args[0] == 'number') {\n        adj = RUT.Attributes.map((key) => {\n            return { name: key, bonus: args[0] };\n        });\n    } else {\n        adj = normalize_adjustment(args);\n    }\n\n    let results = adj.reduce((out, a) => {\n        let delta = undefined;\n        if (a.base) {\n            delta = being.attributes.addBase(a.name, a.base);\n        } else if (a.restore) {\n            delta = being.attributes.restoreBase(a.name);\n            if (delta == 0) delta = undefined;\n        } else {\n            delta = being.attributes.addBonus(a.name, a);\n        }\n        if (delta !== undefined) {\n            out[a.name] = delta;\n        }\n        return out;\n    }, {});\n    being.changed({ attributes: results });\n\n    return results;\n};\n\n function clearAdjustment(being, ...args) {\n    let adj;\n    if (args.length == 1 && typeof args[0] == 'number') {\n        adj = RUT.Attributes.map((key) => {\n            return { name: key, bonus: args[0] };\n        });\n    } else {\n        adj = normalize_adjustment(args);\n    }\n\n    let results = adj.reduce((out, a) => {\n        let delta = 0;\n        delta += being.attributes.clearBonus(a.name, a);\n\n        out[a.name] = delta;\n        return out;\n    }, {});\n    being.changed({ attributes: results });\n    return results;\n};\n\nRUT.Attribute.rollAttributes = function (opts = {}) {\n    let dice = [];\n    let total = 0;\n\n    if (RUT.Calc.isValue(opts)) opts = { value: opts };\n    Object.defaults(opts, RUT.Config.Attribute.rollAttributes);\n\n    let attributes = RUT.Config.Attributes;\n\n    let min_average = Math.max(opts.min_average - 5, 0);\n    let max_average = Math.min(opts.max_average - 5, RUT.Config.ATTRIBUTE_MAX);\n\n    let min_total = min_average * attributes.length;\n    let max_total = max_average * attributes.length;\n\n    do {\n        total = 0;\n        dice = [];\n        for (let i = 0; i < 18; ++i) {\n            dice.push(RUT.RNG.rollDie(3 + (i % 3)));\n            total += dice[i];\n        }\n    } while (total <= min_total || total > max_total);\n\n    let values = attributes.reduce((out, name, i) => {\n        let index = 3 * i;\n        let value = 5 + dice[index] + dice[index + 1] + dice[index + 2];\n        if (opts.value) {\n            value = RUT.Calc.calc(opts.value);\n        } else if (opts[name]) {\n            value = RUT.Calc.calc(opts[name]);\n        }\n        out[name] = value;\n        return out;\n    }, {});\n    return values;\n};\nRUT.Config.Attribute.rollAttributes = { min_average: 11, max_average: 14 };\n*/\n/*\nexport function normalize_adjustment(args: ) {\n    if (args.length == 3) {\n        let opts = args[2];\n        if (RUT.Calc.isValue(opts)) {\n            opts = { bonus: opts };\n        }\n        let name = `${args[0]}.${args[1]}`;\n        return [Object.assign({ name }, opts)];\n    }\n    if (args.length == 2) {\n        let opts = args[1];\n        if (opts === true || opts === false) {\n            opts = { has: opts };\n        } else if (RUT.Calc.isValue(opts)) {\n            opts = { bonus: opts };\n        }\n        return [Object.assign({ name: args[0] }, opts)];\n    }\n\n    let opts = args[0];\n    if (opts.name) {\n        return [opts];\n    }\n    if (opts.attribute) {\n        opts.name = opts.attribute;\n        return [opts];\n    }\n    if (opts.restore) {\n        if (opts.restore == 'all') {\n            return RUT.Attributes.map((a) => {\n                return { name: a, restore: true };\n            });\n        }\n        return [{ name: opts.restore, restore: true }];\n    }\n    if (opts.skill) {\n        opts.name = opts.skill;\n        return [opts];\n    }\n    if (opts.stat) {\n        opts.name = opts.stat;\n        return [opts];\n    }\n    if (opts.save) {\n        opts.name = opts.save;\n        return [opts];\n    }\n    // if (opts.saves) {\n    //   opts.name = opts.saves;\n    //   return [opts];\n    // }\n    if (opts.ability) {\n        opts.name = opts.ability;\n        return [opts];\n    }\n\n    // now we assume that each key is for a separate skill...\n    return Object.keys(opts).reduce((out, key) => {\n        let opt = opts[key];\n        if (key == 'reset' || key == 'restore') {\n            if (typeof opt == 'string') opt = [opt];\n            opt.forEach((a) => {\n                out.push({ name: a, restore: true });\n            });\n        } else {\n            if (typeof opt == 'number' || Array.isArray(opt)) {\n                opt = { bonus: opt };\n            } else if (opt === true || opt === false) {\n                opt = { has: opt };\n            } else if (opt == 'reset' || opt == 'restore') {\n                opt = { restore: true };\n            } else if (opt == 'sustain') {\n                opt = { sustain: true };\n            }\n            out.push(Object.assign({ name: key }, opt));\n        }\n        return out;\n    }, []);\n}\n*/\n","/*\nSkills\n\nSkills generally fall into 2 categories - binary and progressive.\n\n\n// Create a skills object\nconst skills = new Skills();\n\n// set skills\nskills.set('diving', true); // = { has: true, level: 0 }\nskills.set('diving', 10); // = { has: true, level: 10 }\n\nskills.remove('diving'); // {}\n\n// adjustments\nskills.adjust('diving', { bonus: 1 });\nskills.adjust('diving', { disadvantage: true });\nskills.adjust('diving', { advantage: 3 });\nskills.adjust('diving', { fixed: 10 });\nskills.adjust('diving', { critical: 5 });\n\n\n\n\n\n*/\nclass Skill {\n    constructor(name) {\n        this.name = name;\n    }\n    get has() {\n        return this._bool('_has');\n    }\n    get level() {\n        return this._int('_level');\n    }\n    get disadvantage() {\n        return this._bool('_disadvantage');\n    }\n    get advantage() {\n        return this._bool('_advantage');\n    }\n    get fixed() {\n        return this._int('_fixed');\n    }\n    get bonus() {\n        const b = this._int('_bonus') || 0;\n        if (!this._parent)\n            return b;\n        return b + this._parent.bonus;\n    }\n    get succeed() {\n        return this._bool('_succeed');\n    }\n    get fail() {\n        return this._bool('_fail');\n    }\n    set(value) {\n        if (value === false) {\n            this._has = false;\n            this._level = 0;\n        }\n        else {\n            this._has = true;\n            this._level = value === true ? 0 : value;\n        }\n    }\n    _value(name) {\n        if (this[name] !== undefined) {\n            // @ts-ignore\n            return this[name];\n        }\n        if (this._parent) {\n            // @ts-ignore\n            return this._parent._value(name);\n        }\n        return undefined;\n    }\n    _bool(name) {\n        return !!this._value(name);\n    }\n    _int(name) {\n        return this._value(name);\n    }\n    adjust(adj) {\n        Object.entries(adj).forEach(([key, value]) => {\n            key = '_' + key;\n            if (value === undefined)\n                return;\n            if (key === '_fixed') {\n                if (typeof value !== 'number') {\n                    throw new Error('fixed skill adjustment must be a number.');\n                }\n                value = Math.max(value, this._fixed || 0);\n            }\n            else if (key === '_bonus') {\n                if (typeof value !== 'number') {\n                    throw new Error('fixed skill adjustment must be a number.');\n                }\n                value = value + (this._bonus || 0);\n            }\n            // @ts-ignore\n            this[key] = value;\n        });\n    }\n    clear(adj) {\n        Object.keys(adj).forEach((key) => {\n            key = '_' + key;\n            // @ts-ignore\n            if (this[key] !== undefined) {\n                // @ts-ignore\n                this[key] = undefined;\n            }\n        });\n    }\n}\nexport class Skills {\n    constructor(vals = {}) {\n        this._skills = {};\n        Object.entries(vals).forEach(([key, value]) => {\n            this.set(key, value);\n        });\n    }\n    set(name, value) {\n        const s = this.get(name);\n        s.set(value);\n        return s;\n    }\n    get(name) {\n        let s = this._skills[name];\n        if (s)\n            return s;\n        s = this._skills[name] = new Skill(name);\n        const index = name.lastIndexOf('.');\n        if (index > 0) {\n            s._parent = this.get(name.substring(0, index));\n        }\n        else {\n            s.set(false);\n        }\n        return s;\n    }\n    adjust(name, adj) {\n        if (typeof adj === 'number') {\n            adj = { bonus: adj };\n        }\n        let s = this.get(name);\n        s.adjust(adj);\n        return s;\n    }\n}\n","// import * as GWM from 'gw-map';\nimport { Actor } from '../actor';\nexport class Player extends Actor {\n    constructor(kind) {\n        super(kind);\n    }\n}\nPlayer.default = {\n    ch: '@',\n    fg: 'white',\n    name: 'You',\n};\n","import * as Actor from '../actor';\nimport * as Skills from './skill';\nimport * as Attributes from './attribute';\nimport { Player } from './player';\nimport * as Flags from '../flags';\nexport class PlayerKind extends Actor.ActorKind {\n    constructor(opts = {}) {\n        super((() => {\n            if (!opts.sprite) {\n                opts.ch = opts.ch || Player.default.ch;\n                opts.fg = opts.fg || Player.default.fg;\n            }\n            if (!opts.name) {\n                opts.name = Player.default.name;\n            }\n            return opts;\n        })());\n        this.flags.actor |= Flags.Actor.IS_PLAYER;\n        this.attributes = new Attributes.Attributes(opts.attributes || {});\n        this.skills = new Skills.Skills(opts.skills || {});\n    }\n    make(options) {\n        const actor = new Player(this);\n        this.init(actor, options);\n        return actor;\n    }\n}\n","import { PlayerKind } from './kind';\nimport * as Actor from '../actor';\nexport function make(id, makeOptions) {\n    let kind;\n    if (typeof id === 'string') {\n        // @ts-ignore\n        kind = Actor.get(id);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + id);\n        if (!(kind instanceof PlayerKind))\n            throw new Error('Not a player kind.');\n    }\n    else if (id instanceof PlayerKind) {\n        kind = id;\n    }\n    else {\n        kind = makeKind(id);\n    }\n    return kind.make(makeOptions);\n}\nexport function install(id, kind) {\n    if (kind instanceof PlayerKind) {\n        Actor.kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    Actor.kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof PlayerKind)\n        return id;\n    const k = Actor.kinds[id];\n    if (k && !(k instanceof PlayerKind)) {\n        throw new Error('No a player kind.');\n    }\n    return k;\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new PlayerKind(config);\n}\n","import * as GWU from 'gw-utils';\nimport * as Command from '../command';\nexport class Game {\n    constructor(opts) {\n        this.result = undefined;\n        this.running = false;\n        this.keymap = {};\n        this.ui = opts.ui || new GWU.ui.UI(opts);\n        this._makeMap = opts.makeMap;\n        this._makePlayer = opts.makePlayer;\n        this._startMap = opts.startMap;\n        if (opts.keymap) {\n            Object.assign(this.keymap, opts.keymap);\n        }\n    }\n    async start() {\n        this.layer = new GWU.ui.Layer(this.ui);\n        this.buffer = this.layer.buffer;\n        this.io = this.layer.io;\n        this.running = true;\n        this.scheduler = new GWU.scheduler.Scheduler();\n        this.player = this._makePlayer();\n        this.map = this._makeMap(0);\n        this._startMap(this.map, this.player);\n        this.map.actors.forEach((a) => {\n            this.scheduler.push(a, a.moveSpeed());\n        });\n        this.draw();\n        while (this.running) {\n            await this.animate();\n            await this.runTurn();\n        }\n        return this.result;\n    }\n    draw() {\n        if (this.map && this.map.needsRedraw) {\n            this.map.drawInto(this.buffer);\n            this.buffer.render();\n        }\n    }\n    finish(result) {\n        this.running = false;\n        this.layer.finish();\n        this.result = result;\n    }\n    async runTurn() {\n        const actor = this.scheduler.pop();\n        if (!actor) {\n            this.finish();\n            return;\n        }\n        let nextTime = 0;\n        while (nextTime === 0) {\n            if (actor === this.player) {\n                nextTime = await this.playerTurn(actor);\n            }\n            else if ('act' in actor) {\n                nextTime = await actor.act(this); // dt === 100 -- TODO\n            }\n            else if ('tick' in actor) {\n                nextTime = await actor.tick();\n            }\n            this.draw();\n        }\n        if (nextTime >= 0) {\n            this.scheduler.push(actor, nextTime);\n        }\n    }\n    async animate() {\n        if (!this.layer.io._tweens.length)\n            return;\n        const timer = setInterval(() => {\n            const tick = GWU.io.makeTickEvent(16);\n            this.layer.io.enqueue(tick);\n        }, 16);\n        while (this.layer.io._tweens.length) {\n            const ev = await this.layer.io.nextTick();\n            if (ev && ev.dt) {\n                this.layer.io._tweens.forEach((a) => a && a.tick(ev.dt));\n                this.layer.io._tweens = this.layer.io._tweens.filter((a) => a && a.isRunning());\n            }\n            this.draw();\n        }\n        clearInterval(timer);\n    }\n    async playerTurn(player) {\n        let done = 0;\n        const timer = setInterval(() => {\n            const tick = GWU.io.makeTickEvent(16);\n            this.layer.io.enqueue(tick);\n        }, 16);\n        while (!done && this.running) {\n            const ev = await this.layer.io.nextEvent(-1);\n            if (ev) {\n                if (ev.type === GWU.io.KEYPRESS) {\n                    const handler = GWU.io.handlerFor(ev, this.keymap);\n                    if (handler) {\n                        if (typeof handler === 'string') {\n                            const action = Command.getCommand(handler);\n                            if (action) {\n                                done = await action.call(this, player, ev);\n                            }\n                        }\n                        else if (typeof handler === 'function') {\n                            done = await handler.call(this, player, ev);\n                        }\n                    }\n                }\n                else if (ev.type === GWU.io.TICK) {\n                    this.layer.tick(ev); // timeouts\n                }\n            }\n        }\n        clearInterval(timer);\n        return done;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Tile from './tile';\nimport '../effect/handlers';\nimport '../effect/types';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([30, 30, 30]).rand(20, 0, 0, 0),\n    bg: GWU.color.from([2, 2, 10]).rand(0, 2, 2, 0),\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: 'TILE:DOOR_OPEN',\n        open: 'TILE:DOOR_OPEN_ALWAYS',\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            effects: 'TILE:DOOR~!',\n        },\n        enter: null,\n        open: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: 'TILE:DOOR~!',\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: 'EMIT:UP_STAIRS',\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: 'EMIT:DOWN_STAIRS',\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: GWU.color.from([7, 7, 7]).rand(0, 3, 3, 3),\n    bg: GWU.color.from([40, 40, 40]).rand(10, 10, 0, 5),\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: GWU.color.from([5, 8, 20]).dance(10, 0, 4, 15),\n    bg: GWU.color.from([10, 15, 41]).dance(6, 5, 5, 5),\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: GWU.color.from([5, 8, 10]).dance(10, 0, 4, 15),\n    bg: GWU.color.from([10, 30, 30]).dance(6, 0, 10, 10),\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    flags: 'T_SHALLOW_WATER',\n    // depth: 'LIQUID', // 'SURFACE'?\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '\\u2630',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_LIST_IN_SIDEBAR","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","T_IS_DEEP_LIQUID","T_SHALLOW_WATER","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_SAFE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","lastId","kind","_map","key","machineHome","depth","light","flags","entity","next","id","map","setEntityFlag","Flags.Entity","L_ON_MAP","addToMap","clearEntityFlag","removeFromMap","sprite","isDestroyed","hasEntityFlag","L_DESTROYED","other","constructor","copy","Object","assign","canBeSeen","tag","tags","includes","matches","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","buffer","bounds","drawStatus","dest","_observer","drawSprite","name","EntityKind","config","requiredTileTags","flavor","description","make","split","t","trim","slice","init","_entity","length","hasAllTileTags","hasAnyTileTag","_opts","mixer","Mixer","getAppearanceAt","wrapText","width","makeOpts","PainMessages","msgs","_msgs","forEach","m","add","msg","push","pct","singular","index","clamp","Math","floor","_format","replace","painMessages","Stats","_max","_rate","_value","max","round","get","set","v","range","value","amount","allowOver","min","raiseValue","gain","lowerValue","drain","turns","count","r","elapsed","undefined","type","from","c","Error","Status","_set","_time","_count","_done","changed","clearTime","clearCount","setOff","_update","done","_addDone","current","delta","status","cleared","noticed","removeTime","rec","was","doneFn","installedActions","installAction","fn","toLowerCase","getAction","Entity.Entity","super","ai","leader","items","fov","memory","visionDistance","data","_costMap","_goalMap","actor","Flags.Depth","ACTOR","stats","grid","free","hasActorFlag","Flags.Actor","IS_PLAYER","action","actions","bump","isDirectlyVisible","canSee","isAbleToSee","xy","distanceBetween","forLineBetween","i","j","blocksVision","canSeeOrSense","isAbleToSense","isAnyKindOfVisible","game","moveSpeed","_other","_item","item","pickupItem","dropItem","mapChanged","clearActorFlag","STABLE_COST_MAP","staleMap","alloc","height","update","_v","path","OBSTRUCTION","FORBIDDEN","AVOIDED","OK","setActorFlag","goalMap","calculateDistances","costMap","handlers","installHandler","handler","effectTypes","installType","startsWith","endPos","indexOf","tile","substring","effects","Array","isArray","effect","entries","JSON","stringify","typeName","shift","makeFn","e","parts","installedEffects","trigger","bind","install","obj","clone","_a","_b","_c","_d","dissipate","priority","groundTile","article","tileMech","hasEffect","Flags.Tile","T_IS_FLAMMABLE","arraysIntersect","every","blocksMove","hasTileFlag","T_PATHING_BLOCKER","arg","color","result","fg","toString","options","_e","_f","base","extends","tiles","text","search","Number","parseInt","makeEffect","message","Flags.TileMech","ch","bg","opacity","all","args","BasicEffect","chance","seen","Flags.Effect","loc","ctx","force","rng","random","didSomething","eff","nextAlways","E_NEXT_ALWAYS","makeBasicEffect","makeSpreadEffect","SpreadEffect","grow","decrement","matchTile","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","spawnMap","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","E_NEXT_EVERYWHERE","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","cellIsOk","isStart","hasXY","hasCellFlag","Flags.Cell","EVENT_PROTECTED","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","hasTile","dir","x2","y2","madeChange","startProb","probDec","fill","DIRS","clearAll","clear","clearDepth","GAS","LIQUID","SURFACE","GROUND","blockingMap","eachActor","a","matchingLocNear","removeActor","addActor","eachItem","removeItem","addItem","makeEmitHandler","emitEffect","events","emit","makeMessageHandler","src","info","messageEffect","aware","addAt","makeActivateMachine","activateMachine","machine","machineId","makeTileHandler","superpriority","blockedByActors","blockedByItems","tileEffect","setTile","makeClearHandler","layers","reduce","out","ALL_LAYERS","clearEffect","_ctx","makeFeatureHandler","featureEffect","feat","Effect.installedEffects","makeNourishEffect","nourishEffect","actorAt","adjust","n","default","pukeMsg","makeStatEffect","stat","statEffect","values","chokeCount","TILE.tiles","NULL","snapshot","makeMixer","TILE.get","hasStableSnapshot","STABLE_SNAPSHOT","hasStableMemory","getSnapshot","checkEntities","some","hasItem","hasActor","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","withEntities","needsRedraw","CHANGED","TILE.Tile","highestPriorityTile","cb","find","blocksPathing","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","blocksLayer","blockedByOtherLayers","highestPriority","ground","depthTile","glowLightChanged","setMapFlag","Flags.Map","MAP_SIDEBAR_TILES_CHANGED","setCellFlag","CAUGHT_FIRE_THIS_TURN","blackOut","tileFlag","tileMechFlag","hasTileMechFlag","event","ev","_activate","itemAt","hasItems","foundIndex","clearCellFlag","_actor","isPlayer","actors","HAS_FX","fx","fxAt","_fx","T_BRIDGE","MapLayer","properties","_x","_y","_tile","_dt","TileLayer","GasLayer","volume","startingVolume","spread","d","clearTile","total","highestVolume","startingTile","highestTile","updateCellVolume","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","fire","TM_EXPLOSIVE_PROMOTE","x0","y0","fireEvent","BasicDrawer","_cell","Buffer","offsetX","offsetY","drawCell","needSnapshot","getAppearance","putSnapshot","applyLight","L_VISUALLY_DISTINCT","separate","surface","liquid","gas","drawInto","cosmetic","number","hasFx","dances","COLORS_DANCE","bake","isVisible","isRevealed","getLight","multiply","isCursor","invert","scale","_animations","EventEmitter","seed","machineCount","drawer","cells","LightSystem","initLayers","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","layer","isAt","fireEffects","_addItem","_fireAddItemEffects","_removeItem","_fireRemoveItemEffects","arrayDelete","isKey","currentCell","newCell","hasPlayer","canAddActor","_addActor","_fireAddActorEffects","player","canRemoveActor","_removeActor","_fireRemoveActorEffects","_addFx","updated","_removeFx","fmt","log","console","dump","hasMapFlag","MAP_NEEDS_REDRAW","clearMapFlag","l","boundary","isBoundaryXY","clearTiles","dt","tick","filter","isRunning","fireAll","willFire","EVENT_FIRED_THIS_TURN","promoteChance","w","originX","originY","eachGlowLight","_cb","isDark","h","Memory","source","isMemory","i2","a2","mem","currentList","newList","setLight","forget","storeMemory","cache","store","actorMemory","ais","AICtx","target","distanceMap","async","typical","isDead","willAttack","damagePct","getPct","morale","chargeChance","retreatChance","start","canAttack","attack","tooFarFrom","canMoveToward","moveToward","tooCloseTo","canMoveAwayFrom","moveAwayFrom","wanderOpt","object","firstOpt","matchingLoc","NO_PATH","setGoal","step","nextStep","canPass","clearGoal","moveDir","wander","idle","standStill","center","_game","_target","distanceFromTo","safetyMap","costGrid","eachCell","rescan","ActorKind","Entity.EntityKind","DEFAULT","DEFAULT_ACTOR","vision","normal","health","AI.make","HAS_MEMORY","Memory.get","USES_FOV","FovSystem","follow","callback","Memory.store","list","remove","makeOptions","makeKind","kinds","randomKind","match","forbidTags","k","bumpActions","getBumpActions","selfName","selfAction","ctx2","endTurn","flashSprite","duration","animator","Entity.make","addFx","tween","visible","to","repeat","repeatDelay","onUpdate","removeFx","io","loop","addAnimation","hit","fadeInOut","yoyo","onFinish","moveSprite","ceil","maxAxisFromTo","speed","isLoc","vals","stepFn","stopBeforeWalls","moveFx","stop","isInShape","shape","cx","cy","allowCenter","sx","abs","sy","dirFromTo","fade","stopAtWalls","line","forLineFromTo","promises","lastIndex","Promise","radius","checkExplosionOpts","FOV","isBlocked","calculate","x1","y1","minX","minY","maxX","maxY","_obj","success","newX","newY","try","FX.hit","moveActor","dirIndex","pickup","quiet","avoidsItem","itemAction","canAddItem","pain","made","quantity","ITEM","ItemKind","Flags.Item","updateChokepoints","updateCounts","passMap","passableArcCount","oldX","CLOCK_DIRS","oldY","cellCount","floodFillCount","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","prefab","charToTile","isStringArray","len","updateChokeCounts","layerVersion","lightVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","getCellPathCost","fillCostMap","eightWays","straightDistanceBetween","getPath","members","horde","frequency","Flags","canSpawn","TRUE","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted","installCommand","getCommand","Actor.actions.moveDir","_ev","playerAction","Attributes","baseValues","_base","_bonus","_sustain","attributes","keys","raiseMax","old","_calcValue","loss","lowerMax","bonus","_addBonus","_clearBonus","arr","findIndex","o","splice","allAdjustments","adj","_applyAdjustment","sustain","fixed","restore","Skill","has","_bool","level","_int","disadvantage","advantage","b","_parent","succeed","fail","_has","_level","_fixed","Skills","_skills","s","lastIndexOf","Player","PlayerKind","Actor.ActorKind","Attributes.Attributes","skills","Skills.Skills","attr","defaults","Actor.kinds","running","keymap","ui","UI","_makeMap","makeMap","_makePlayer","makePlayer","_startMap","startMap","Layer","scheduler","Scheduler","draw","animate","runTurn","render","finish","nextTime","playerTurn","act","_tweens","timer","setInterval","makeTickEvent","enqueue","nextTick","clearInterval","nextEvent","KEYPRESS","handlerFor","Command.getCommand","call","TICK","rand","enter","open","close","dance"],"mappings":"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"}