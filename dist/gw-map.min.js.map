{"version":3,"file":"gw-map.min.js","sources":["../js/flags/depth.js","../js/flags/entity.js","../js/flags/actor.js","../js/flags/item.js","../js/flags/tile.js","../js/flags/tileMech.js","../js/flags/cell.js","../js/flags/map.js","../js/flags/effect.js","../js/flags/horde.js","../js/entity/key.js","../js/entity/entity.js","../js/entity/kind.js","../js/actor/actor.js","../js/actor/kind.js","../js/actor/make.js","../js/item/item.js","../js/item/kind.js","../js/item/make.js","../js/effect/handler.js","../js/effect/make.js","../js/tile/tile.js","../js/tile/tiles.js","../js/tile/index.js","../js/layer/mapLayer.js","../js/layer/tileLayer.js","../js/layer/actorLayer.js","../js/layer/itemLayer.js","../js/layer/gasLayer.js","../js/effect/fire.js","../js/effect/handlers/emit.js","../js/effect/handlers/fn.js","../js/effect/handlers/message.js","../js/effect/handlers/activateMachine.js","../js/effect/handlers/effect.js","../js/effect/handlers/tile.js","../js/layer/fireLayer.js","../js/map/cell.js","../js/map/map.js","../js/map/analyze.js","../js/map/snapshot.js","../js/map/utils.js","../js/path.js","../js/horde/horde.js","../js/horde/make.js","../js/memory/memory.js","../js/memory/system.js"],"sourcesContent":["export var Depth;\n(function (Depth) {\n    Depth[Depth[\"ALL_LAYERS\"] = -1] = \"ALL_LAYERS\";\n    Depth[Depth[\"GROUND\"] = 0] = \"GROUND\";\n    Depth[Depth[\"SURFACE\"] = 1] = \"SURFACE\";\n    Depth[Depth[\"ITEM\"] = 2] = \"ITEM\";\n    Depth[Depth[\"ACTOR\"] = 3] = \"ACTOR\";\n    Depth[Depth[\"LIQUID\"] = 4] = \"LIQUID\";\n    Depth[Depth[\"GAS\"] = 5] = \"GAS\";\n    Depth[Depth[\"FX\"] = 6] = \"FX\";\n    Depth[Depth[\"UI\"] = 7] = \"UI\";\n})(Depth || (Depth = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Entity;\n(function (Entity) {\n    // L_DYNAMIC = Fl(0), // for movable things like actors or items\n    Entity[Entity[\"L_DESTROYED\"] = Fl(1)] = \"L_DESTROYED\";\n    Entity[Entity[\"L_SECRETLY_PASSABLE\"] = Fl(2)] = \"L_SECRETLY_PASSABLE\";\n    Entity[Entity[\"L_BLOCKS_MOVE\"] = Fl(3)] = \"L_BLOCKS_MOVE\";\n    Entity[Entity[\"L_BLOCKS_VISION\"] = Fl(4)] = \"L_BLOCKS_VISION\";\n    Entity[Entity[\"L_BLOCKS_SURFACE\"] = Fl(6)] = \"L_BLOCKS_SURFACE\";\n    Entity[Entity[\"L_BLOCKS_LIQUID\"] = Fl(8)] = \"L_BLOCKS_LIQUID\";\n    Entity[Entity[\"L_BLOCKS_GAS\"] = Fl(7)] = \"L_BLOCKS_GAS\";\n    Entity[Entity[\"L_BLOCKS_ITEMS\"] = Fl(5)] = \"L_BLOCKS_ITEMS\";\n    Entity[Entity[\"L_BLOCKS_ACTORS\"] = Fl(11)] = \"L_BLOCKS_ACTORS\";\n    Entity[Entity[\"L_BLOCKS_EFFECTS\"] = Fl(9)] = \"L_BLOCKS_EFFECTS\";\n    Entity[Entity[\"L_BLOCKS_DIAGONAL\"] = Fl(10)] = \"L_BLOCKS_DIAGONAL\";\n    Entity[Entity[\"L_INTERRUPT_WHEN_SEEN\"] = Fl(12)] = \"L_INTERRUPT_WHEN_SEEN\";\n    Entity[Entity[\"L_LIST_IN_SIDEBAR\"] = Fl(13)] = \"L_LIST_IN_SIDEBAR\";\n    Entity[Entity[\"L_VISUALLY_DISTINCT\"] = Fl(14)] = \"L_VISUALLY_DISTINCT\";\n    Entity[Entity[\"L_BRIGHT_MEMORY\"] = Fl(15)] = \"L_BRIGHT_MEMORY\";\n    Entity[Entity[\"L_INVERT_WHEN_HIGHLIGHTED\"] = Fl(16)] = \"L_INVERT_WHEN_HIGHLIGHTED\";\n    Entity[Entity[\"L_BLOCKED_BY_STAIRS\"] = Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_SURFACE |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_ACTORS] = \"L_BLOCKED_BY_STAIRS\";\n    Entity[Entity[\"L_BLOCKS_SCENT\"] = Entity.L_BLOCKS_MOVE | Entity.L_BLOCKS_VISION] = \"L_BLOCKS_SCENT\";\n    Entity[Entity[\"L_DIVIDES_LEVEL\"] = Entity.L_BLOCKS_MOVE] = \"L_DIVIDES_LEVEL\";\n    Entity[Entity[\"L_WAYPOINT_BLOCKER\"] = Entity.L_BLOCKS_MOVE] = \"L_WAYPOINT_BLOCKER\";\n    Entity[Entity[\"L_WALL_FLAGS\"] = Entity.L_BLOCKS_MOVE |\n        Entity.L_BLOCKS_VISION |\n        Entity.L_BLOCKS_LIQUID |\n        Entity.L_BLOCKS_GAS |\n        Entity.L_BLOCKS_EFFECTS |\n        Entity.L_BLOCKS_DIAGONAL] = \"L_WALL_FLAGS\";\n    Entity[Entity[\"L_BLOCKS_EVERYTHING\"] = Entity.L_WALL_FLAGS |\n        Entity.L_BLOCKS_ITEMS |\n        Entity.L_BLOCKS_ACTORS |\n        Entity.L_BLOCKS_SURFACE] = \"L_BLOCKS_EVERYTHING\";\n})(Entity || (Entity = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Actor;\n(function (Actor) {\n    Actor[Actor[\"IS_PLAYER\"] = Fl(0)] = \"IS_PLAYER\";\n})(Actor || (Actor = {}));\n","export var Item;\n(function (Item) {\n})(Item || (Item = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE\nexport var Tile;\n(function (Tile) {\n    Tile[Tile[\"T_BRIDGE\"] = Fl(0)] = \"T_BRIDGE\";\n    Tile[Tile[\"T_AUTO_DESCENT\"] = Fl(1)] = \"T_AUTO_DESCENT\";\n    Tile[Tile[\"T_LAVA\"] = Fl(2)] = \"T_LAVA\";\n    Tile[Tile[\"T_DEEP_WATER\"] = Fl(3)] = \"T_DEEP_WATER\";\n    Tile[Tile[\"T_IS_FLAMMABLE\"] = Fl(5)] = \"T_IS_FLAMMABLE\";\n    Tile[Tile[\"T_SPONTANEOUSLY_IGNITES\"] = Fl(6)] = \"T_SPONTANEOUSLY_IGNITES\";\n    Tile[Tile[\"T_IS_FIRE\"] = Fl(7)] = \"T_IS_FIRE\";\n    Tile[Tile[\"T_EXTINGUISHES_FIRE\"] = Fl(8)] = \"T_EXTINGUISHES_FIRE\";\n    Tile[Tile[\"T_IS_SECRET\"] = Fl(9)] = \"T_IS_SECRET\";\n    Tile[Tile[\"T_IS_TRAP\"] = Fl(10)] = \"T_IS_TRAP\";\n    Tile[Tile[\"T_SACRED\"] = Fl(11)] = \"T_SACRED\";\n    Tile[Tile[\"T_UP_STAIRS\"] = Fl(12)] = \"T_UP_STAIRS\";\n    Tile[Tile[\"T_DOWN_STAIRS\"] = Fl(13)] = \"T_DOWN_STAIRS\";\n    Tile[Tile[\"T_PORTAL\"] = Fl(14)] = \"T_PORTAL\";\n    Tile[Tile[\"T_IS_DOOR\"] = Fl(15)] = \"T_IS_DOOR\";\n    Tile[Tile[\"T_ALLOWS_SUBMERGING\"] = Fl(16)] = \"T_ALLOWS_SUBMERGING\";\n    Tile[Tile[\"T_ENTANGLES\"] = Fl(17)] = \"T_ENTANGLES\";\n    Tile[Tile[\"T_REFLECTS\"] = Fl(18)] = \"T_REFLECTS\";\n    Tile[Tile[\"T_STAND_IN_TILE\"] = Fl(19)] = \"T_STAND_IN_TILE\";\n    Tile[Tile[\"T_CONNECTS_LEVEL\"] = Fl(20)] = \"T_CONNECTS_LEVEL\";\n    Tile[Tile[\"T_BLOCKS_OTHER_LAYERS\"] = Fl(21)] = \"T_BLOCKS_OTHER_LAYERS\";\n    Tile[Tile[\"T_HAS_STAIRS\"] = Tile.T_UP_STAIRS | Tile.T_DOWN_STAIRS | Tile.T_PORTAL] = \"T_HAS_STAIRS\";\n    Tile[Tile[\"T_OBSTRUCTS_SCENT\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_HAS_STAIRS] = \"T_OBSTRUCTS_SCENT\";\n    Tile[Tile[\"T_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_IS_FIRE |\n        Tile.T_SPONTANEOUSLY_IGNITES |\n        Tile.T_ENTANGLES] = \"T_PATHING_BLOCKER\";\n    Tile[Tile[\"T_LAKE_PATHING_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_LAKE_PATHING_BLOCKER\";\n    Tile[Tile[\"T_WAYPOINT_BLOCKER\"] = Tile.T_AUTO_DESCENT |\n        Tile.T_IS_TRAP |\n        Tile.T_LAVA |\n        Tile.T_DEEP_WATER |\n        Tile.T_SPONTANEOUSLY_IGNITES] = \"T_WAYPOINT_BLOCKER\";\n    Tile[Tile[\"T_DIVIDES_LEVEL\"] = Tile.T_AUTO_DESCENT | Tile.T_IS_TRAP | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_DIVIDES_LEVEL\";\n    Tile[Tile[\"T_MOVES_ITEMS\"] = Tile.T_DEEP_WATER | Tile.T_LAVA] = \"T_MOVES_ITEMS\";\n    Tile[Tile[\"T_CAN_BE_BRIDGED\"] = Tile.T_AUTO_DESCENT | Tile.T_LAVA | Tile.T_DEEP_WATER] = \"T_CAN_BE_BRIDGED\";\n    // T_HARMFUL_TERRAIN = T_CAUSES_POISON |\n    //   T_IS_FIRE |\n    //   T_CAUSES_DAMAGE |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_EXPLOSIVE_DAMAGE,\n    // T_RESPIRATION_IMMUNITIES = T_CAUSES_DAMAGE |\n    //   T_CAUSES_CONFUSION |\n    //   T_CAUSES_PARALYSIS |\n    //   T_CAUSES_NAUSEA,\n    Tile[Tile[\"T_IS_DEEP_LIQUID\"] = Tile.T_LAVA | Tile.T_AUTO_DESCENT | Tile.T_DEEP_WATER] = \"T_IS_DEEP_LIQUID\";\n})(Tile || (Tile = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE MECH\nexport var TileMech;\n(function (TileMech) {\n    // TM_PROMOTES_WITH_KEY = Fl(1), // promotes if the key is present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_WITHOUT_KEY = Fl(2), // promotes if the key is NOT present on the tile (in your pack, carried by monster, or lying on the ground)\n    // TM_PROMOTES_ON_STEP = Fl(3), // promotes when a creature, player or item is on the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ITEM_REMOVE = Fl(4), // promotes when an item is lifted from the tile (primarily for altars)\n    // TM_PROMOTES_ON_PLAYER_ENTRY = Fl(5), // promotes when the player enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_SACRIFICE_ENTRY = Fl(6), // promotes when the sacrifice target enters the tile (whether or not levitating)\n    // TM_PROMOTES_ON_ELECTRICITY = Fl(7), // promotes when hit by a lightning bolt\n    // T_CAUSES_POISON = Fl(18), // any non-levitating creature gets 10 poison\n    // T_CAUSES_DAMAGE = Fl(19), // anything on the tile takes max(1-2, 10%) damage per turn\n    // T_CAUSES_NAUSEA = Fl(20), // any creature on the tile becomes nauseous\n    // T_CAUSES_PARALYSIS = Fl(21), // anything caught on this tile is paralyzed\n    // T_CAUSES_CONFUSION = Fl(22), // causes creatures on this tile to become confused\n    // T_CAUSES_HEALING = Fl(23), // heals 20% max HP per turn for any player or non-inanimate monsters\n    // T_CAUSES_EXPLOSIVE_DAMAGE = Fl(25), // is an explosion; deals higher of 15-20 or 50% damage instantly, but not again for five turns\n    TileMech[TileMech[\"TM_IS_WIRED\"] = Fl(9)] = \"TM_IS_WIRED\";\n    TileMech[TileMech[\"TM_IS_CIRCUIT_BREAKER\"] = Fl(10)] = \"TM_IS_CIRCUIT_BREAKER\";\n    TileMech[TileMech[\"TM_VANISHES_UPON_PROMOTION\"] = Fl(15)] = \"TM_VANISHES_UPON_PROMOTION\";\n    TileMech[TileMech[\"TM_EXPLOSIVE_PROMOTE\"] = Fl(21)] = \"TM_EXPLOSIVE_PROMOTE\";\n    TileMech[TileMech[\"TM_SWAP_ENCHANTS_ACTIVATION\"] = Fl(25)] = \"TM_SWAP_ENCHANTS_ACTIVATION\";\n    // TM_PROMOTES = TM_PROMOTES_WITH_KEY |\n    //   TM_PROMOTES_WITHOUT_KEY |\n    //   TM_PROMOTES_ON_STEP |\n    //   TM_PROMOTES_ON_ITEM_REMOVE |\n    //   TM_PROMOTES_ON_SACRIFICE_ENTRY |\n    //   TM_PROMOTES_ON_ELECTRICITY |\n    //   TM_PROMOTES_ON_PLAYER_ENTRY,\n})(TileMech || (TileMech = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// CELL\nexport var Cell;\n(function (Cell) {\n    Cell[Cell[\"SEARCHED_FROM_HERE\"] = Fl(0)] = \"SEARCHED_FROM_HERE\";\n    Cell[Cell[\"PRESSURE_PLATE_DEPRESSED\"] = Fl(1)] = \"PRESSURE_PLATE_DEPRESSED\";\n    Cell[Cell[\"KNOWN_TO_BE_TRAP_FREE\"] = Fl(2)] = \"KNOWN_TO_BE_TRAP_FREE\";\n    Cell[Cell[\"CAUGHT_FIRE_THIS_TURN\"] = Fl(3)] = \"CAUGHT_FIRE_THIS_TURN\";\n    Cell[Cell[\"EVENT_FIRED_THIS_TURN\"] = Fl(4)] = \"EVENT_FIRED_THIS_TURN\";\n    Cell[Cell[\"EVENT_PROTECTED\"] = Fl(5)] = \"EVENT_PROTECTED\";\n    Cell[Cell[\"IS_IN_LOOP\"] = Fl(6)] = \"IS_IN_LOOP\";\n    Cell[Cell[\"IS_CHOKEPOINT\"] = Fl(7)] = \"IS_CHOKEPOINT\";\n    Cell[Cell[\"IS_GATE_SITE\"] = Fl(8)] = \"IS_GATE_SITE\";\n    Cell[Cell[\"IS_IN_ROOM_MACHINE\"] = Fl(9)] = \"IS_IN_ROOM_MACHINE\";\n    Cell[Cell[\"IS_IN_AREA_MACHINE\"] = Fl(10)] = \"IS_IN_AREA_MACHINE\";\n    Cell[Cell[\"IMPREGNABLE\"] = Fl(11)] = \"IMPREGNABLE\";\n    Cell[Cell[\"NEEDS_REDRAW\"] = Fl(13)] = \"NEEDS_REDRAW\";\n    Cell[Cell[\"STABLE_MEMORY\"] = Fl(14)] = \"STABLE_MEMORY\";\n    Cell[Cell[\"STABLE_SNAPSHOT\"] = Fl(15)] = \"STABLE_SNAPSHOT\";\n    // These are to help memory\n    Cell[Cell[\"HAS_SURFACE\"] = Fl(16)] = \"HAS_SURFACE\";\n    Cell[Cell[\"HAS_LIQUID\"] = Fl(17)] = \"HAS_LIQUID\";\n    Cell[Cell[\"HAS_GAS\"] = Fl(18)] = \"HAS_GAS\";\n    Cell[Cell[\"HAS_PLAYER\"] = Fl(19)] = \"HAS_PLAYER\";\n    Cell[Cell[\"HAS_ACTOR\"] = Fl(20)] = \"HAS_ACTOR\";\n    Cell[Cell[\"HAS_DORMANT_MONSTER\"] = Fl(21)] = \"HAS_DORMANT_MONSTER\";\n    Cell[Cell[\"HAS_ITEM\"] = Fl(22)] = \"HAS_ITEM\";\n    Cell[Cell[\"IS_IN_PATH\"] = Fl(23)] = \"IS_IN_PATH\";\n    Cell[Cell[\"IS_CURSOR\"] = Fl(24)] = \"IS_CURSOR\";\n    Cell[Cell[\"IS_WIRED\"] = Fl(26)] = \"IS_WIRED\";\n    Cell[Cell[\"IS_CIRCUIT_BREAKER\"] = Fl(27)] = \"IS_CIRCUIT_BREAKER\";\n    Cell[Cell[\"IS_POWERED\"] = Fl(28)] = \"IS_POWERED\";\n    Cell[Cell[\"COLORS_DANCE\"] = Fl(30)] = \"COLORS_DANCE\";\n    Cell[Cell[\"CHANGED\"] = Cell.NEEDS_REDRAW] = \"CHANGED\";\n    Cell[Cell[\"IS_IN_MACHINE\"] = Cell.IS_IN_ROOM_MACHINE | Cell.IS_IN_AREA_MACHINE] = \"IS_IN_MACHINE\";\n    Cell[Cell[\"PERMANENT_CELL_FLAGS\"] = Cell.HAS_ITEM |\n        Cell.HAS_DORMANT_MONSTER |\n        Cell.STABLE_MEMORY |\n        Cell.SEARCHED_FROM_HERE |\n        Cell.PRESSURE_PLATE_DEPRESSED |\n        Cell.KNOWN_TO_BE_TRAP_FREE |\n        Cell.IS_IN_LOOP |\n        Cell.IS_CHOKEPOINT |\n        Cell.IS_GATE_SITE |\n        Cell.IS_IN_MACHINE |\n        Cell.IMPREGNABLE] = \"PERMANENT_CELL_FLAGS\";\n    Cell[Cell[\"HAS_ANY_ACTOR\"] = Cell.HAS_PLAYER | Cell.HAS_ACTOR] = \"HAS_ANY_ACTOR\";\n    Cell[Cell[\"HAS_ANY_OBJECT\"] = Cell.HAS_ITEM | Cell.HAS_ANY_ACTOR] = \"HAS_ANY_OBJECT\";\n    Cell[Cell[\"CELL_DEFAULT\"] = Cell.NEEDS_REDRAW] = \"CELL_DEFAULT\";\n})(Cell || (Cell = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// MAP\nexport var Map;\n(function (Map) {\n    Map[Map[\"MAP_CHANGED\"] = Fl(0)] = \"MAP_CHANGED\";\n    Map[Map[\"MAP_ALWAYS_LIT\"] = Fl(3)] = \"MAP_ALWAYS_LIT\";\n    Map[Map[\"MAP_SAW_WELCOME\"] = Fl(4)] = \"MAP_SAW_WELCOME\";\n    Map[Map[\"MAP_NO_LIQUID\"] = Fl(5)] = \"MAP_NO_LIQUID\";\n    Map[Map[\"MAP_NO_GAS\"] = Fl(6)] = \"MAP_NO_GAS\";\n    Map[Map[\"MAP_CALC_FOV\"] = Fl(7)] = \"MAP_CALC_FOV\";\n    Map[Map[\"MAP_FOV_CHANGED\"] = Fl(8)] = \"MAP_FOV_CHANGED\";\n    Map[Map[\"MAP_DANCES\"] = Fl(9)] = \"MAP_DANCES\";\n    Map[Map[\"MAP_SIDEBAR_TILES_CHANGED\"] = Fl(10)] = \"MAP_SIDEBAR_TILES_CHANGED\";\n    Map[Map[\"MAP_DEFAULT\"] = 0] = \"MAP_DEFAULT\";\n})(Map || (Map = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\n///////////////////////////////////////////////////////\n// TILE EVENT\nexport var Effect;\n(function (Effect) {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    Effect[Effect[\"E_NEXT_ALWAYS\"] = Fl(0)] = \"E_NEXT_ALWAYS\";\n    Effect[Effect[\"E_NEXT_EVERYWHERE\"] = Fl(1)] = \"E_NEXT_EVERYWHERE\";\n    Effect[Effect[\"E_FIRED\"] = Fl(2)] = \"E_FIRED\";\n    Effect[Effect[\"E_NO_MARK_FIRED\"] = Fl(3)] = \"E_NO_MARK_FIRED\";\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    Effect[Effect[\"E_PROTECTED\"] = Fl(4)] = \"E_PROTECTED\";\n    // E_NO_REDRAW_CELL = Fl(),\n    Effect[Effect[\"E_TREAT_AS_BLOCKING\"] = Fl(5)] = \"E_TREAT_AS_BLOCKING\";\n    Effect[Effect[\"E_PERMIT_BLOCKING\"] = Fl(6)] = \"E_PERMIT_BLOCKING\";\n    Effect[Effect[\"E_ABORT_IF_BLOCKS_MAP\"] = Fl(7)] = \"E_ABORT_IF_BLOCKS_MAP\";\n    Effect[Effect[\"E_BLOCKED_BY_ITEMS\"] = Fl(8)] = \"E_BLOCKED_BY_ITEMS\";\n    Effect[Effect[\"E_BLOCKED_BY_ACTORS\"] = Fl(9)] = \"E_BLOCKED_BY_ACTORS\";\n    Effect[Effect[\"E_BLOCKED_BY_OTHER_LAYERS\"] = Fl(10)] = \"E_BLOCKED_BY_OTHER_LAYERS\";\n    Effect[Effect[\"E_SUPERPRIORITY\"] = Fl(11)] = \"E_SUPERPRIORITY\";\n    Effect[Effect[\"E_SPREAD_CIRCLE\"] = Fl(13)] = \"E_SPREAD_CIRCLE\";\n    Effect[Effect[\"E_SPREAD_LINE\"] = Fl(14)] = \"E_SPREAD_LINE\";\n    Effect[Effect[\"E_EVACUATE_CREATURES\"] = Fl(15)] = \"E_EVACUATE_CREATURES\";\n    Effect[Effect[\"E_EVACUATE_ITEMS\"] = Fl(16)] = \"E_EVACUATE_ITEMS\";\n    Effect[Effect[\"E_BUILD_IN_WALLS\"] = Fl(17)] = \"E_BUILD_IN_WALLS\";\n    Effect[Effect[\"E_MUST_TOUCH_WALLS\"] = Fl(18)] = \"E_MUST_TOUCH_WALLS\";\n    Effect[Effect[\"E_NO_TOUCH_WALLS\"] = Fl(19)] = \"E_NO_TOUCH_WALLS\";\n    Effect[Effect[\"E_CLEAR_GROUND\"] = Fl(21)] = \"E_CLEAR_GROUND\";\n    Effect[Effect[\"E_CLEAR_SURFACE\"] = Fl(22)] = \"E_CLEAR_SURFACE\";\n    Effect[Effect[\"E_CLEAR_LIQUID\"] = Fl(23)] = \"E_CLEAR_LIQUID\";\n    Effect[Effect[\"E_CLEAR_GAS\"] = Fl(24)] = \"E_CLEAR_GAS\";\n    Effect[Effect[\"E_CLEAR_TILE\"] = Fl(25)] = \"E_CLEAR_TILE\";\n    Effect[Effect[\"E_CLEAR_CELL\"] = Effect.E_CLEAR_GROUND |\n        Effect.E_CLEAR_SURFACE |\n        Effect.E_CLEAR_LIQUID |\n        Effect.E_CLEAR_GAS] = \"E_CLEAR_CELL\";\n    Effect[Effect[\"E_ONLY_IF_EMPTY\"] = Effect.E_BLOCKED_BY_ITEMS | Effect.E_BLOCKED_BY_ACTORS] = \"E_ONLY_IF_EMPTY\";\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n    // These should be effect types\n    Effect[Effect[\"E_ACTIVATE_DORMANT_MONSTER\"] = Fl(27)] = \"E_ACTIVATE_DORMANT_MONSTER\";\n    Effect[Effect[\"E_AGGRAVATES_MONSTERS\"] = Fl(28)] = \"E_AGGRAVATES_MONSTERS\";\n    Effect[Effect[\"E_RESURRECT_ALLY\"] = Fl(29)] = \"E_RESURRECT_ALLY\";\n})(Effect || (Effect = {}));\n","import * as GWU from 'gw-utils';\nconst Fl = GWU.flag.fl;\nexport var Horde;\n(function (Horde) {\n    Horde[Horde[\"HORDE_DIES_ON_LEADER_DEATH\"] = Fl(0)] = \"HORDE_DIES_ON_LEADER_DEATH\";\n    Horde[Horde[\"HORDE_IS_SUMMONED\"] = Fl(1)] = \"HORDE_IS_SUMMONED\";\n    Horde[Horde[\"HORDE_SUMMONED_AT_DISTANCE\"] = Fl(2)] = \"HORDE_SUMMONED_AT_DISTANCE\";\n    Horde[Horde[\"HORDE_NO_PERIODIC_SPAWN\"] = Fl(4)] = \"HORDE_NO_PERIODIC_SPAWN\";\n    Horde[Horde[\"HORDE_ALLIED_WITH_PLAYER\"] = Fl(5)] = \"HORDE_ALLIED_WITH_PLAYER\";\n    Horde[Horde[\"HORDE_NEVER_OOD\"] = Fl(15)] = \"HORDE_NEVER_OOD\";\n    // Move all these to tags?\n    // HORDE_LEADER_CAPTIVE = Fl(3), // the leader is in chains and the followers are guards\n    // HORDE_MACHINE_BOSS = Fl(6), // used in machines for a boss challenge\n    // HORDE_MACHINE_WATER_MONSTER = Fl(7), // used in machines where the room floods with shallow water\n    // HORDE_MACHINE_CAPTIVE = Fl(8), // powerful captive monsters without any captors\n    // HORDE_MACHINE_STATUE = Fl(9), // the kinds of monsters that make sense in a statue\n    // HORDE_MACHINE_TURRET = Fl(10), // turrets, for hiding in walls\n    // HORDE_MACHINE_MUD = Fl(11), // bog monsters, for hiding in mud\n    // HORDE_MACHINE_KENNEL = Fl(12), // monsters that can appear in cages in kennels\n    // HORDE_VAMPIRE_FODDER = Fl(13), // monsters that are prone to capture and farming by vampires\n    // HORDE_MACHINE_LEGENDARY_ALLY = Fl(14), // legendary allies\n    // HORDE_MACHINE_THIEF = Fl(16), // monsters that can be generated in the key thief area machines\n    // HORDE_MACHINE_GOBLIN_WARREN = Fl(17), // can spawn in goblin warrens\n    // HORDE_SACRIFICE_TARGET = Fl(18), // can be the target of an assassination challenge; leader will get scary light.\n    // HORDE_MACHINE_ONLY = HORDE_MACHINE_BOSS |\n    //     HORDE_MACHINE_WATER_MONSTER |\n    //     HORDE_MACHINE_CAPTIVE |\n    //     HORDE_MACHINE_STATUE |\n    //     HORDE_MACHINE_TURRET |\n    //     HORDE_MACHINE_MUD |\n    //     HORDE_MACHINE_KENNEL |\n    //     HORDE_VAMPIRE_FODDER |\n    //     HORDE_MACHINE_LEGENDARY_ALLY |\n    //     HORDE_MACHINE_THIEF |\n    //     HORDE_MACHINE_GOBLIN_WARREN |\n    //     HORDE_SACRIFICE_TARGET,\n})(Horde || (Horde = {}));\n","// TODO - Do we need the machine?\nexport class KeyInfo {\n    constructor(x, y, disposable) {\n        this.x = x;\n        this.y = y;\n        this.disposable = disposable;\n    }\n    matches(x, y) {\n        return this.x === x && this.y === y;\n    }\n}\nexport function makeKeyInfo(x, y, disposable) {\n    return new KeyInfo(x, y, disposable);\n}\n","import * as Flags from '../flags/entity';\nlet lastId = 0;\nexport class Entity {\n    constructor(kind) {\n        this.map = null;\n        this.key = null;\n        this.machineHome = 0;\n        this.depth = 1; // default - TODO - enum/const\n        this.light = null;\n        this.flags = { entity: 0 };\n        this.next = null;\n        this.x = -1;\n        this.y = -1;\n        this.kind = kind;\n        this.id = '' + ++lastId;\n    }\n    get sprite() {\n        return this.kind.sprite;\n    }\n    get isDestroyed() {\n        return this.hasEntityFlag(Flags.Entity.L_DESTROYED);\n    }\n    canBeSeen() {\n        return this.kind.canBeSeen(this);\n    }\n    destroy() {\n        this.flags.entity |= Flags.Entity.L_DESTROYED;\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasAllEntityFlags(flags) {\n        return (this.flags.entity & flags) === flags;\n    }\n    hasTag(tag) {\n        return this.kind.tags.includes(tag);\n    }\n    blocksMove() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksVision() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksPathing() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksEffects() {\n        return this.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    forbidsCell(cell) {\n        return this.kind.forbidsCell(cell, this);\n    }\n    avoidsCell(cell) {\n        return this.kind.avoidsCell(cell, this);\n    }\n    getName(opts) {\n        return this.kind.getName(this, opts);\n    }\n    getDescription(opts) {\n        return this.kind.getDescription(this, opts);\n    }\n    getFlavor(opts) {\n        return this.kind.getFlavor(this, opts);\n    }\n    getVerb(verb) {\n        return this.kind.getVerb(this, verb);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Entity } from './entity';\nexport class EntityKind {\n    constructor(config) {\n        this.tags = [];\n        this.requiredTileTags = [];\n        this.id = config.id || config.name;\n        this.name = config.name;\n        this.flavor = config.flavor || this.name;\n        this.description = config.description || this.flavor;\n        this.sprite = GWU.sprite.make(config);\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        if (config.requiredTileTags) {\n            if (typeof config.requiredTileTags === 'string') {\n                this.requiredTileTags = config.requiredTileTags\n                    .split(/[,|]/)\n                    .map((t) => t.trim());\n            }\n            else {\n                this.requiredTileTags = config.requiredTileTags\n                    .slice()\n                    .map((t) => t.trim());\n            }\n        }\n    }\n    make(opts) {\n        const entity = new Entity(this);\n        this.init(entity, opts);\n        return entity;\n    }\n    init(entity, opts = {}) {\n        if (opts.machineHome) {\n            entity.machineHome = opts.machineHome;\n        }\n    }\n    canBeSeen(_entity) {\n        return true;\n    }\n    forbidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAllTileTags(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    avoidsCell(cell, _entity) {\n        if (this.requiredTileTags.length &&\n            !cell.hasAnyTileTag(this.requiredTileTags))\n            return true;\n        return false;\n    }\n    getName(_entity, _opts) {\n        return this.name;\n    }\n    getDescription(_entity, _opts) {\n        return this.description;\n    }\n    getFlavor(_entity, _opts) {\n        return this.flavor;\n    }\n    getVerb(_entity, verb) {\n        return verb;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport * as Flags from '../flags';\nexport class Actor extends Entity.Entity {\n    constructor(kind) {\n        super(kind);\n        this.next = null;\n        this.leader = null;\n        this.items = null;\n        this.fov = null;\n        // @ts-ignore - initialized in Entity\n        this.flags.actor = 0;\n        this.depth = Flags.Depth.ACTOR;\n        this.kind = kind;\n    }\n    hasActorFlag(flag) {\n        return !!(this.flags.actor & flag);\n    }\n    hasAllActorFlags(flags) {\n        return (this.flags.actor & flags) === flags;\n    }\n    actorFlags() {\n        return this.flags.actor;\n    }\n    isPlayer() {\n        return this.hasActorFlag(Flags.Actor.IS_PLAYER);\n    }\n    canSee(x, y) {\n        if (x instanceof Entity.Entity) {\n            return this.canSee(x.x, x.y) && this.kind.isAbleToSee(this, x);\n        }\n        if (this.fov) {\n            return this.fov.isDirectlyVisible(x, y);\n        }\n        else if (this.map) {\n            return GWU.xy.forLineBetween(this.x, this.y, x, y, (i, j) => !this.map.cell(i, j).blocksVision());\n        }\n        else {\n            return false; // need a map or an fov\n        }\n    }\n    canSeeOrSense(x, y) {\n        if (x instanceof Entity.Entity) {\n            return (this.canSeeOrSense(x.x, x.y) &&\n                (this.kind.isAbleToSee(this, x) ||\n                    this.kind.isAbleToSense(this, x)));\n        }\n        if (this.fov) {\n            return this.fov.isAnyKindOfVisible(x, y);\n        }\n        return this.canSee(x, y);\n    }\n    isAbleToSee(entity) {\n        return this.kind.isAbleToSee(this, entity);\n    }\n    isAbleToSense(entity) {\n        return this.kind.isAbleToSense(this, entity);\n    }\n    ////////////////// INVENTORY\n    async pickupItem(item, opts) {\n        return this.kind.pickupItem(this, item, opts);\n    }\n    async dropItem(item, opts) {\n        return this.kind.dropItem(this, item, opts);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport { Actor } from './actor';\nexport class ActorKind extends Entity.EntityKind {\n    constructor(opts) {\n        super(opts);\n    }\n    make(options) {\n        const actor = new Actor(this);\n        this.init(actor, options);\n        return actor;\n    }\n    init(actor, options = {}) {\n        super.init(actor, options);\n        actor.fov = options.fov || null;\n    }\n    canSeeEntity(_actor, _entity) {\n        return true;\n    }\n    isAbleToSee(_actor, _entity) {\n        return true;\n    }\n    isAbleToSense(_actor, _entity) {\n        return true;\n    }\n    forbidsCell(cell, actor) {\n        if (super.forbidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        return false;\n    }\n    avoidsCell(cell, actor) {\n        if (super.avoidsCell(cell, actor))\n            return true;\n        if (cell.blocksMove())\n            return true;\n        if (cell.blocksPathing())\n            return true;\n        return false;\n    }\n    getFlavor(actor, opts) {\n        const flavor = actor.isPlayer() ? 'yourself' : this.flavor;\n        if (opts && opts.action) {\n            return flavor + ' standing';\n        }\n        return flavor;\n    }\n    async pickupItem(actor, item, _opts) {\n        if (!GWU.list.push(actor, 'items', item))\n            return false;\n        // TODO - Pickup effects\n        return true;\n    }\n    async dropItem(actor, item, _opts) {\n        if (!GWU.list.remove(actor, 'items', item))\n            return false;\n        // TODO - Drop effects\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ActorKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ActorKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ActorKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ActorKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ActorKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","import { Entity } from '../entity';\nimport { Depth } from '../flags';\nexport class Item extends Entity {\n    constructor(kind) {\n        super(kind);\n        this.quantity = 1;\n        this.next = null;\n        // @ts-ignore - initialized in constructor\n        this.flags.item = 0;\n        this.depth = Depth.ITEM;\n        this.kind = kind;\n    }\n    itemFlags() {\n        return this.flags.item;\n    }\n    hasItemFlag(flag) {\n        return !!(this.flags.item & flag);\n    }\n    hasAllItemFlags(flags) {\n        return (this.flags.item & flags) === flags;\n    }\n}\n","// import * as GWU from 'gw-utils';\nimport * as Entity from '../entity';\nimport { Item } from './item';\nexport class ItemKind extends Entity.EntityKind {\n    constructor(config) {\n        super(config);\n    }\n    make(options) {\n        const item = new Item(this);\n        this.init(item, options);\n        return item;\n    }\n    init(item, options = {}) {\n        super.init(item, options);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { ItemKind } from './kind';\nexport function make(id, makeOptions) {\n    const kind = get(id);\n    if (!kind)\n        throw new Error('Failed to find item kind - ' + id);\n    return kind.make(makeOptions);\n}\nexport function makeRandom(opts, makeOptions) {\n    const kind = randomKind(opts);\n    if (!kind)\n        throw new Error('Failed to find item kind matching - ' + JSON.stringify(opts));\n    return kind.make(makeOptions);\n}\nexport function from(info, makeOptions) {\n    let kind;\n    if (typeof info === 'string') {\n        // @ts-ignore\n        kind = get(info);\n        if (!kind)\n            throw new Error('Failed to find item kind - ' + info);\n    }\n    else if (info instanceof ItemKind) {\n        kind = info;\n    }\n    else {\n        kind = makeKind(info);\n    }\n    return kind.make(makeOptions);\n}\nexport const kinds = {};\nexport function install(id, kind) {\n    if (kind instanceof ItemKind) {\n        kinds[id] = kind;\n        return kind;\n    }\n    const made = makeKind(kind);\n    made.id = id;\n    kinds[id] = made;\n    return made;\n}\nexport function get(id) {\n    if (id instanceof ItemKind)\n        return id;\n    return kinds[id];\n}\nexport function makeKind(info) {\n    const config = Object.assign({}, info);\n    return new ItemKind(config);\n}\nexport function randomKind(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    const matches = Object.values(kinds).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        return true;\n    });\n    const rng = opts.rng || GWU.rng.random;\n    return rng.item(matches) || null;\n}\n","// @ts-nocheck\nexport class Handler {\n    make(src, dest) {\n        return true;\n    }\n    fire(config, map, x, y, ctx) {\n        return false;\n    }\n}\nexport const handlers = {};\nexport function installHandler(id, handler) {\n    handlers[id] = handler;\n}\n","import * as GWU from 'gw-utils';\nimport { handlers } from './handler';\nimport { Effect as Flags } from '../flags';\nexport function make(opts) {\n    var _a;\n    if (!opts)\n        throw new Error('opts required to make effect.');\n    if (typeof opts === 'string') {\n        throw new Error('Cannot make effect from string: ' + opts);\n    }\n    if (typeof opts === 'function') {\n        opts = { fn: opts };\n    }\n    // now make base effect stuff\n    const info = {\n        flags: GWU.flag.from(Flags, opts.flags),\n        chance: (_a = opts.chance) !== null && _a !== void 0 ? _a : 0,\n        next: null,\n        id: opts.id || 'n/a',\n    };\n    if (opts.next) {\n        if (typeof opts.next === 'string') {\n            info.next = opts.next;\n        }\n        else {\n            info.next = make(opts.next);\n        }\n    }\n    // and all the handlers\n    Object.values(handlers).forEach((v) => v.make(opts, info));\n    return info;\n}\nexport function from(opts) {\n    if (!opts)\n        throw new Error('Cannot make effect from null | undefined');\n    if (typeof opts === 'string') {\n        const effect = effects[opts];\n        if (effect)\n            return effect;\n        throw new Error('Unknown effect - ' + opts);\n    }\n    return make(opts);\n}\n// resetMessageDisplayed\nexport function reset(effect) {\n    effect.flags &= ~Flags.E_FIRED;\n}\nexport function resetAll() {\n    Object.values(effects).forEach((e) => reset(e));\n}\nexport const effects = {};\nexport function install(id, config) {\n    const effect = make(config);\n    effects[id] = effect;\n    effect.id = id;\n    return effect;\n}\nexport function installAll(effects) {\n    Object.entries(effects).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as GWU from 'gw-utils';\nimport { make as makeEffect } from '../effect/make';\nimport * as Flags from '../flags';\nexport class Tile {\n    constructor(config) {\n        var _a, _b, _c, _d;\n        this.index = -1;\n        this.dissipate = 20 * 100; // 0%\n        this.effects = {};\n        this.priority = 50;\n        this.depth = 0;\n        this.light = null;\n        this.groundTile = null;\n        this.tags = [];\n        this.id = config.id || 'n/a';\n        this.dissipate = (_a = config.dissipate) !== null && _a !== void 0 ? _a : this.dissipate;\n        this.priority = (_b = config.priority) !== null && _b !== void 0 ? _b : this.priority;\n        this.depth = (_c = config.depth) !== null && _c !== void 0 ? _c : this.depth;\n        this.light = config.light || null;\n        this.groundTile = config.groundTile || null;\n        this.sprite = GWU.sprite.make(config);\n        this.name = config.name || 'tile';\n        this.description = config.description || this.name;\n        this.flavor = config.flavor || this.name;\n        this.article = (_d = config.article) !== null && _d !== void 0 ? _d : null;\n        this.flags = config.flags || { entity: 0, tile: 0, tileMech: 0 };\n        if (config.effects) {\n            Object.assign(this.effects, config.effects);\n        }\n        if (this.hasEffect('fire')) {\n            this.flags.tile |= Flags.Tile.T_IS_FLAMMABLE;\n        }\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                config.tags\n                    .split(/[,|]/)\n                    .map((t) => t.trim())\n                    .forEach((t) => {\n                    this.tags.push(t);\n                });\n            }\n            else {\n                this.tags = config.tags.slice().map((t) => t.trim());\n            }\n        }\n    }\n    hasTag(tag) {\n        return this.tags.includes(tag);\n    }\n    hasAnyTag(tags) {\n        return GWU.arraysIntersect(this.tags, tags);\n    }\n    hasAllTags(tags) {\n        return tags.every((t) => this.tags.includes(t));\n    }\n    hasEntityFlag(flag) {\n        return !!(this.flags.entity & flag);\n    }\n    hasTileFlag(flag) {\n        return !!(this.flags.tile & flag);\n    }\n    hasTileMechFlag(flag) {\n        return !!(this.flags.tileMech & flag);\n    }\n    hasAllEntityFlags(flag) {\n        return (this.flags.entity & flag) === flag;\n    }\n    hasAllTileFlags(flag) {\n        return (this.flags.tile & flag) === flag;\n    }\n    hasAllTileMechFlags(flag) {\n        return (this.flags.tileMech & flag) === flag;\n    }\n    blocksVision() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_VISION);\n    }\n    blocksMove() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_MOVE);\n    }\n    blocksPathing() {\n        return (this.blocksMove() || this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    blocksEffects() {\n        return !!(this.flags.entity & Flags.Entity.L_BLOCKS_EFFECTS);\n    }\n    hasEffect(name) {\n        return name in this.effects;\n    }\n    getName(arg) {\n        let opts = {};\n        if (typeof arg === 'boolean') {\n            opts.article = arg;\n        }\n        else if (typeof arg === 'string') {\n            opts.article = arg;\n        }\n        else if (arg) {\n            opts = arg;\n        }\n        if (!opts.article && !opts.color)\n            return this.name;\n        let result = this.name;\n        if (opts.color) {\n            let color = opts.color;\n            if (opts.color === true) {\n                color = this.sprite.fg || 'white';\n            }\n            if (typeof color !== 'string') {\n                color = GWU.color.from(color).toString();\n            }\n            result = `Ω${color}Ω${this.name}∆`;\n        }\n        if (opts.article) {\n            let article = typeof opts.article === 'string'\n                ? opts.article\n                : this.article || 'a';\n            result = article + ' ' + result;\n        }\n        return result;\n    }\n    getDescription(opts) {\n        return this.description || this.getName(opts);\n    }\n    getFlavor(opts) {\n        return this.flavor || this.getName(opts);\n    }\n}\nexport function make(options) {\n    var _a, _b, _c, _d, _e, _f;\n    let base = { effects: {}, flags: {}, sprite: {}, priority: 50 };\n    if (options.extends) {\n        base = tiles[options.extends];\n        if (!base)\n            throw new Error('Failed to find base tile: ' + options.extends);\n    }\n    let priority = base.priority;\n    if (typeof options.priority === 'string') {\n        let text = options.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            priority = base.priority + Number.parseInt(text);\n        }\n        else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = tiles[text];\n                if (!tile)\n                    throw new Error('Failed to find tile for priority - ' + text + '.');\n                priority = tile.priority;\n            }\n            else {\n                priority = Number.parseInt(text);\n            }\n        }\n        else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = tiles[id];\n            if (!tile)\n                throw new Error('Failed to find tile for priority - ' + id + '.');\n            priority = tile.priority + delta;\n        }\n    }\n    else if (options.priority !== undefined) {\n        priority = options.priority;\n    }\n    const effects = {};\n    Object.assign(effects, base.effects);\n    if (options.effects) {\n        Object.entries(options.effects).forEach(([key, value]) => {\n            if (value === null) {\n                delete effects[key];\n                return;\n            }\n            if (typeof value === 'string') {\n                effects[key] = value;\n                return;\n            }\n            effects[key] = makeEffect(value);\n        });\n    }\n    const flags = {\n        entity: GWU.flag.from(Flags.Entity, base.flags.entity, options.flags),\n        tile: GWU.flag.from(Flags.Tile, base.flags.tile, options.flags),\n        tileMech: GWU.flag.from(Flags.TileMech, base.flags.tileMech, options.flags),\n    };\n    let depth = base.depth || 0;\n    if (options.depth) {\n        if (typeof options.depth === 'string') {\n            depth = Flags.Depth[options.depth];\n        }\n        else {\n            depth = options.depth;\n        }\n    }\n    let light = base.light;\n    if (options.light) {\n        light = GWU.light.make(options.light);\n    }\n    else if (options.light === null) {\n        light = null;\n    }\n    const config = {\n        id: options.id,\n        flags,\n        dissipate: (_a = options.dissipate) !== null && _a !== void 0 ? _a : base.dissipate,\n        effects,\n        priority,\n        depth: depth,\n        light,\n        groundTile: options.groundTile || null,\n        ch: (_b = options.ch) !== null && _b !== void 0 ? _b : base.sprite.ch,\n        fg: (_c = options.fg) !== null && _c !== void 0 ? _c : base.sprite.fg,\n        bg: (_d = options.bg) !== null && _d !== void 0 ? _d : base.sprite.bg,\n        opacity: (_e = options.opacity) !== null && _e !== void 0 ? _e : base.sprite.opacity,\n        name: options.name || base.name,\n        description: options.description || base.description,\n        flavor: options.flavor || base.flavor,\n        article: (_f = options.article) !== null && _f !== void 0 ? _f : base.article,\n        tags: options.tags || null,\n    };\n    const tile = new Tile(config);\n    return tile;\n}\nexport const tiles = {};\nexport const all = [];\nexport function get(id) {\n    if (id instanceof Tile)\n        return id;\n    if (typeof id === 'string')\n        return tiles[id] || null;\n    return all[id] || null;\n}\nexport function install(id, ...args) {\n    let options = args[0];\n    if (args.length == 2) {\n        options = args[1];\n        options.extends = args[0];\n    }\n    options.id = id;\n    const tile = make(options);\n    tile.index = all.length;\n    all.push(tile);\n    tiles[id] = tile;\n    return tile;\n}\nexport function installAll(tiles) {\n    Object.entries(tiles).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\n","import * as Tile from './tile';\n// These are the minimal set of tiles to make the diggers work\nTile.install('NULL', {\n    ch: '\\u2205',\n    fg: 'white',\n    bg: 'black',\n    flags: 'L_BLOCKS_MOVE',\n    name: 'eerie nothingness',\n    article: 'an',\n    priority: 0,\n});\nTile.install('FLOOR', {\n    ch: '\\u00b7',\n    fg: [30, 30, 30, 20, 0, 0, 0],\n    bg: [2, 2, 10, 0, 2, 2, 0],\n    priority: 10,\n    article: 'the',\n    flavor: 'the stone floor',\n});\nTile.install('DOOR', {\n    ch: '+',\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 30,\n    flags: 'T_IS_DOOR, L_BLOCKS_EFFECTS, L_BLOCKS_ITEMS, L_BLOCKS_VISION, L_VISUALLY_DISTINCT',\n    article: 'a',\n    effects: {\n        enter: { tile: 'DOOR_OPEN' },\n        open: { tile: 'DOOR_OPEN_ALWAYS' },\n    },\n    flavor: 'a closed door',\n});\nTile.install('DOOR_OPEN', 'DOOR', {\n    ch: \"'\",\n    fg: [100, 40, 40],\n    bg: [30, 60, 60],\n    priority: 40,\n    flags: '!L_BLOCKS_ITEMS, !L_BLOCKS_VISION',\n    name: 'open door',\n    article: 'an',\n    effects: {\n        tick: {\n            chance: 100 * 100,\n            tile: 'DOOR',\n            flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY',\n        },\n        enter: null,\n        open: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n    flavor: 'an open door',\n});\nTile.install('DOOR_OPEN_ALWAYS', 'DOOR_OPEN', {\n    effects: {\n        tick: null,\n        close: { tile: 'DOOR', flags: 'E_SUPERPRIORITY, E_ONLY_IF_EMPTY' },\n    },\n    flavor: 'an open door',\n});\nTile.install('UP_STAIRS', {\n    ch: '<',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_UP_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'upward staircase',\n    article: 'an',\n    effects: {\n        player: { emit: 'UP_STAIRS' },\n    },\n    flavor: 'stairs leading upwards',\n});\nTile.install('DOWN_STAIRS', {\n    ch: '>',\n    fg: [100, 50, 50],\n    bg: [40, 20, 20],\n    priority: 200,\n    flags: 'T_DOWN_STAIRS, L_BLOCKED_BY_STAIRS, L_VISUALLY_DISTINCT, L_LIST_IN_SIDEBAR',\n    name: 'downward staircase',\n    article: 'a',\n    effects: {\n        player: { emit: 'DOWN_STAIRS' },\n    },\n    flavor: 'downward leading stairs',\n});\nTile.install('WALL', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS',\n    article: 'a',\n    name: 'stone wall',\n    description: 'A wall made from rough cut stone.',\n    flavor: 'a rough stone wall',\n});\nTile.install('IMPREGNABLE', {\n    ch: '#',\n    fg: [7, 7, 7, 0, 3, 3, 3],\n    bg: [40, 40, 40, 10, 10, 0, 5],\n    priority: 100,\n    flags: 'L_WALL_FLAGS, IMPREGNABLE',\n    article: 'a',\n    name: 'impregnable wall',\n    description: 'A wall made from very hard stone.',\n    flavor: 'a very hard wall',\n});\nTile.install('LAKE', {\n    ch: '~',\n    fg: [5, 8, 20, 10, 0, 4, 15, true],\n    bg: [10, 15, 41, 6, 5, 5, 5, true],\n    priority: 50,\n    flags: 'T_DEEP_WATER',\n    name: 'deep water',\n    article: 'the',\n    flavor: 'some deep water',\n});\nTile.install('SHALLOW', {\n    ch: '\\u00b7',\n    fg: [5, 8, 10, 10, 0, 4, 15, true],\n    bg: [10, 30, 30, 6, 0, 10, 10, true],\n    priority: 20,\n    name: 'shallow water',\n    article: 'the',\n    depth: 'SURFACE',\n    flavor: 'some shallow water',\n});\nTile.install('BRIDGE', {\n    ch: '=',\n    fg: [100, 40, 40],\n    priority: 40,\n    depth: 'SURFACE',\n    flags: 'T_BRIDGE, L_VISUALLY_DISTINCT',\n    article: 'a',\n    groundTile: 'LAKE',\n    flavor: 'a bridge',\n});\n","import { Tile, TileMech } from '../flags';\nexport const flags = { Tile, TileMech };\nexport * from './types';\nexport * from './tile';\nimport './tiles';\n","export class MapLayer {\n    constructor(map, name = 'layer') {\n        this.changed = false;\n        this.map = map;\n        this.depth = -1;\n        this.properties = {};\n        this.name = name;\n    }\n    copy(_other) { }\n    clear() { }\n    setTile(_x, _y, _tile) {\n        return false;\n    }\n    clearTile(_x, _y) {\n        return false;\n    }\n    addActor(_x, _y, _actor) {\n        return false;\n    }\n    forceActor(_x, _y, _actor) {\n        return false;\n    }\n    removeActor(_actor) {\n        return false;\n    }\n    addItem(_x, _y, _item) {\n        return false;\n    }\n    forceItem(_x, _y, _item) {\n        return false;\n    }\n    removeItem(_item) {\n        return false;\n    }\n    // Time based changes to the layer (e.g. dissipate gasses)\n    tick(_dt) {\n        return false;\n    }\n    putAppearance(_dest, _cell) { }\n}\n","import * as Tile from '../tile';\nimport * as Flags from '../flags';\nimport { MapLayer } from './mapLayer';\nexport class TileLayer extends MapLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    setTile(x, y, tile, opts = {}) {\n        const cell = this.map.cell(x, y);\n        const current = cell.depthTile(tile.depth) || Tile.tiles.NULL;\n        if (!opts.superpriority) {\n            // if (current !== tile) {\n            //     this.gasVolume = 0;\n            //     this.liquidVolume = 0;\n            // }\n            // Check priority, etc...\n            if (current.priority > tile.priority) {\n                return false;\n            }\n        }\n        if (cell.blocksLayer(tile.depth))\n            return false;\n        if (opts.blockedByItems && cell.hasItem())\n            return false;\n        if (opts.blockedByActors && cell.hasActor())\n            return false;\n        if (opts.blockedByOtherLayers && cell.highestPriority() > tile.priority)\n            return false;\n        // TODO - Are we blocked by other layer (L_BLOCKS_SURFACE on an already present tile)?\n        if (tile.depth > Flags.Depth.GROUND && tile.groundTile) {\n            const ground = cell.depthTile(Flags.Depth.GROUND);\n            if (!ground || ground === Tile.tiles.NULL) {\n                this.setTile(x, y, Tile.get(tile.groundTile));\n            }\n        }\n        // if nothing changed... return false\n        if (!cell.setTile(tile))\n            return false;\n        if (tile.hasEntityFlag(Flags.Entity.L_BLOCKS_SURFACE)) {\n            cell.clearDepth(Flags.Depth.SURFACE);\n        }\n        if (opts.machine) {\n            cell.machineId = opts.machine;\n        }\n        if (current.light !== tile.light) {\n            this.map.light.glowLightChanged = true;\n        }\n        if (current.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR) !==\n            tile.hasEntityFlag(Flags.Entity.L_LIST_IN_SIDEBAR)) {\n            this.map.setMapFlag(Flags.Map.MAP_SIDEBAR_TILES_CHANGED);\n        }\n        // if (this.map.fov.isAnyKindOfVisible(x, y)) {\n        //     cell.clearCellFlag(\n        //         Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT\n        //     );\n        // }\n        if (tile.hasTileFlag(Flags.Tile.T_IS_FIRE)) {\n            cell.setCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN);\n        }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clear() {\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearDepth(this.depth);\n            }\n        }\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        return cell.clearDepth(this.depth);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire, pressure plates and key-activated tiles.\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (!cell.hasCellFlag(Flags.Cell.HAS_ANY_ACTOR | Flags.Cell.HAS_ITEM) &&\n                    cell.hasCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED)) {\n                    cell.clearCellFlag(Flags.Cell.PRESSURE_PLATE_DEPRESSED);\n                }\n                if (cell.hasEffect('noKey') && !this.map.hasKey(x, y)) {\n                    await cell.fire('noKey', this.map, x, y);\n                }\n            }\n        }\n        return true;\n    }\n    putAppearance(dest, cell) {\n        const tile = cell.depthTile(this.depth);\n        if (tile) {\n            dest.drawSprite(tile.sprite);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { MapLayer } from './mapLayer';\nexport class ActorLayer extends MapLayer {\n    constructor(map, name = 'actor') {\n        super(map, name);\n    }\n    clear() {\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.actor = null;\n            }\n        }\n    }\n    async addActor(x, y, obj, _opts) {\n        const actor = obj;\n        if (actor.isDestroyed)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (actor.forbidsCell(cell))\n            return false;\n        if (!GWU.list.push(cell, 'actor', obj))\n            return false;\n        if (obj.isPlayer()) {\n            cell.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        obj.x = x;\n        obj.y = y;\n        obj.map = this.map;\n        if (obj.key && obj.key.matches(x, y) && cell.hasEffect('key')) {\n            await cell.fire('key', this.map, x, y);\n        }\n        cell.needsRedraw = true;\n        // if (this.map.fov.isAnyKindOfVisible(x, y)) {\n        //     cell.clearCellFlag(\n        //         Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT\n        //     );\n        // }\n        return true;\n    }\n    forceActor(x, y, actor, _opts) {\n        if (actor.isDestroyed)\n            return false;\n        if (this.map.hasXY(actor.x, actor.y)) {\n            const oldCell = this.map.cell(actor.x, actor.y);\n            oldCell.removeActor(actor);\n        }\n        const cell = this.map.cell(x, y);\n        if (!GWU.list.push(cell, 'actor', actor))\n            return false;\n        if (actor.isPlayer()) {\n            cell.setCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        actor.x = x;\n        actor.y = y;\n        actor.map = this.map;\n        cell.needsRedraw = true;\n        // if (this.map.fov.isAnyKindOfVisible(x, y)) {\n        //     cell.clearCellFlag(\n        //         Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT\n        //     );\n        // }\n        return true;\n    }\n    async removeActor(actor) {\n        const x = actor.x;\n        const y = actor.y;\n        const cell = this.map.cell(x, y);\n        if (!GWU.list.remove(cell, 'actor', actor))\n            return false;\n        if (actor.isPlayer()) {\n            cell.clearCellFlag(Flags.Cell.HAS_PLAYER);\n        }\n        if (actor.key && actor.key.matches(x, y) && cell.hasEffect('nokey')) {\n            await cell.fire('nokey', this.map, x, y);\n        }\n        cell.needsRedraw = true;\n        // if (this.map.fov.isAnyKindOfVisible(x, y)) {\n        //     cell.clearCellFlag(\n        //         Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT\n        //     );\n        // }\n        return true;\n    }\n    putAppearance(dest, cell) {\n        if (!cell.actor)\n            return;\n        dest.drawSprite(cell.actor.sprite);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { MapLayer } from './mapLayer';\n// import * as Flags from '../flags';\nexport class ItemLayer extends MapLayer {\n    constructor(map, name = 'item') {\n        super(map, name);\n    }\n    clear() {\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.item = null;\n            }\n        }\n    }\n    async addItem(x, y, obj, _opts) {\n        const item = obj;\n        if (item.isDestroyed)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (item.forbidsCell(cell))\n            return false;\n        if (obj.key && obj.key.matches(x, y) && cell.hasEffect('key')) {\n            await cell.fire('key', this.map, x, y);\n            if (obj.key.disposable) {\n                obj.destroy();\n                return true; // ??? didSomething?\n            }\n        }\n        if (!GWU.list.push(cell, 'item', obj))\n            return false;\n        obj.x = x;\n        obj.y = y;\n        obj.depth = this.depth;\n        obj.map = this.map;\n        if (cell.hasEffect('addItem')) {\n            await cell.fire('addItem', this.map, x, y, { item });\n        }\n        cell.needsRedraw = true;\n        // if (this.map.fov.isAnyKindOfVisible(x, y)) {\n        //     cell.clearCellFlag(\n        //         Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT\n        //     );\n        // }\n        return true;\n    }\n    forceItem(x, y, obj, _opts) {\n        if (!this.map.hasXY(x, y))\n            return false;\n        if (this.map.hasXY(obj.x, obj.y)) {\n            const oldCell = this.map.cell(obj.x, obj.y);\n            GWU.list.remove(oldCell, 'item', obj);\n            obj.x = -1;\n            obj.y = -1;\n        }\n        const cell = this.map.cell(x, y);\n        if (!GWU.list.push(cell, 'item', obj))\n            return false;\n        obj.x = x;\n        obj.y = y;\n        obj.depth = this.depth;\n        obj.map = this.map;\n        cell.needsRedraw = true;\n        // if (this.map.fov.isAnyKindOfVisible(x, y)) {\n        //     cell.clearCellFlag(\n        //         Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT\n        //     );\n        // }\n        return true;\n    }\n    async removeItem(obj) {\n        const x = obj.x;\n        const y = obj.y;\n        const cell = this.map.cell(x, y);\n        if (!GWU.list.remove(cell, 'item', obj))\n            return false;\n        if (obj.key && obj.key.matches(x, y) && cell.hasEffect('nokey')) {\n            await cell.fire('nokey', this.map, x, y);\n        }\n        else if (cell.hasEffect('removeItem')) {\n            await cell.fire('removeItem', this.map, x, y);\n        }\n        cell.needsRedraw = true;\n        // if (this.map.fov.isAnyKindOfVisible(x, y)) {\n        //     cell.clearCellFlag(\n        //         Flags.Cell.STABLE_MEMORY | Flags.Cell.STABLE_SNAPSHOT\n        //     );\n        // }\n        return true;\n    }\n    putAppearance(dest, cell) {\n        if (!cell.item)\n            return;\n        dest.drawSprite(cell.item.sprite);\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nexport class GasLayer extends TileLayer {\n    constructor(map, name = 'gas') {\n        super(map, name);\n        this.volume = GWU.grid.alloc(map.width, map.height, 0);\n    }\n    clear() {\n        this.volume.fill(0);\n    }\n    setTile(x, y, tile, opts = {}) {\n        if (!opts.volume)\n            return false;\n        const cell = this.map.cell(x, y);\n        if (cell.depthTile(tile.depth) === tile) {\n            this.volume[x][y] += opts.volume;\n            return true;\n        }\n        if (!super.setTile(x, y, tile, opts)) {\n            return false;\n        }\n        this.volume[x][y] = opts.volume;\n        this.changed = true;\n        return true;\n    }\n    clearTile(x, y) {\n        const cell = this.map.cell(x, y);\n        if (cell.clearDepth(this.depth)) {\n            this.volume[x][y] = 0;\n            return true;\n        }\n        return false;\n    }\n    copy(other) {\n        this.volume.copy(other.volume);\n        this.changed = other.changed;\n    }\n    async tick(_dt) {\n        if (!this.changed)\n            return false;\n        this.changed = false;\n        const startingVolume = this.volume;\n        this.volume = GWU.grid.alloc(this.map.width, this.map.height);\n        // dissipate the gas...\n        this.dissipate(startingVolume);\n        // spread the gas...\n        this.spread(startingVolume);\n        GWU.grid.free(startingVolume);\n        return true;\n    }\n    dissipate(volume) {\n        volume.update((v, x, y) => {\n            if (!v)\n                return 0;\n            const tile = this.map.cell(x, y).depthTile(this.depth);\n            if (tile && tile.dissipate) {\n                let d = Math.max(0.5, (v * tile.dissipate) / 10000); // 1000 = 10%\n                v = Math.max(0, v - d);\n            }\n            if (v) {\n                this.changed = true;\n            }\n            else {\n                this.clearTile(x, y);\n            }\n            return v;\n        });\n    }\n    calcOpacity(volume) {\n        return Math.floor(Math.min(volume, 10) * 10);\n    }\n    updateCellVolume(x, y, startingVolume) {\n        let total = 0;\n        let count = 0;\n        let highestVolume = 0;\n        const cell = this.map.cell(x, y);\n        let startingTile = cell.depthTile(this.depth);\n        let highestTile = startingTile;\n        if (cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n            this.volume[x][y] = 0;\n            if (startingVolume[x][y]) {\n                this.clearTile(x, y);\n            }\n            return;\n        }\n        for (let i = Math.max(0, x - 1); i < Math.min(x + 2, startingVolume.width); ++i) {\n            for (let j = Math.max(0, y - 1); j < Math.min(y + 2, startingVolume.height); ++j) {\n                const v = startingVolume[i][j];\n                if (!cell.hasEntityFlag(Flags.Entity.L_BLOCKS_GAS)) {\n                    ++count;\n                    if (v > highestVolume) {\n                        highestVolume = v;\n                        highestTile = this.map.cell(i, j).depthTile(this.depth);\n                    }\n                }\n                total += v;\n            }\n        }\n        const v = Math.floor((total * 10) / count) / 10;\n        this.volume[x][y] = v;\n        if (v > 0 && highestTile) {\n            if (!startingTile || startingTile !== highestTile) {\n                cell.setTile(highestTile);\n            }\n        }\n        if (v > 0) {\n            cell.needsRedraw = true;\n        }\n    }\n    spread(startingVolume) {\n        for (let x = 0; x < startingVolume.width; ++x) {\n            for (let y = 0; y < startingVolume.height; ++y) {\n                this.updateCellVolume(x, y, startingVolume);\n            }\n        }\n    }\n    putAppearance(dest, cell) {\n        const volume = this.volume[cell.x][cell.y];\n        if (!volume)\n            return;\n        const tile = cell.depthTile(this.depth);\n        if (tile) {\n            const opacity = this.calcOpacity(volume);\n            dest.drawSprite(tile.sprite, opacity);\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Effect as Flags } from '../flags';\nimport { from } from './make';\nimport { handlers } from './handler';\nexport async function fire(effect, map, x, y, ctx_ = {}) {\n    if (!effect)\n        return false;\n    if (typeof effect === 'string') {\n        const name = effect;\n        effect = from(name);\n        if (!effect)\n            throw new Error('Failed to find effect: ' + name);\n    }\n    const ctx = ctx_;\n    if (!ctx.force && effect.chance && !map.rng.chance(effect.chance, 10000))\n        return false;\n    const grid = (ctx.grid = GWU.grid.alloc(map.width, map.height));\n    let didSomething = false;\n    const allHandlers = Object.values(handlers);\n    for (let h of allHandlers) {\n        if (await h.fire(effect, map, x, y, ctx)) {\n            didSomething = true;\n        }\n    }\n    // do the next effect - if applicable\n    if (effect.next &&\n        (didSomething || effect.flags & Flags.E_NEXT_ALWAYS) &&\n        !GWU.data.gameHasEnded) {\n        const nextInfo = typeof effect.next === 'string' ? from(effect.next) : effect.next;\n        if (effect.flags & Flags.E_NEXT_EVERYWHERE) {\n            await grid.forEachAsync(async (v, i, j) => {\n                if (!v)\n                    return;\n                didSomething =\n                    (await fire(nextInfo, map, i, j, ctx)) || didSomething;\n            });\n        }\n        else {\n            didSomething =\n                (await fire(nextInfo, map, x, y, ctx)) || didSomething;\n        }\n    }\n    // bookkeeping\n    if (didSomething &&\n        // map.isVisible(x, y) &&\n        !(effect.flags & Flags.E_NO_MARK_FIRED)) {\n        effect.flags |= Flags.E_FIRED;\n    }\n    GWU.grid.free(grid);\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// EMIT\nexport class EmitEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.emit)\n            return true;\n        if (typeof src.emit !== 'string') {\n            throw new Error('emit effects must be string name to emit: { emit: \"EVENT\" }');\n        }\n        dest.emit = src.emit;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (config.emit) {\n            await GWU.events.emit(config.emit, x, y, ctx);\n            return true;\n        }\n        return false;\n    }\n}\ninstallHandler('emit', new EmitEffect());\n","import { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// FN\nexport class FnEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.fn)\n            return true;\n        if (typeof src.fn !== 'function') {\n            throw new Error('fn effects must be functions.');\n        }\n        dest.fn = src.fn;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.fn) {\n            return await config.fn(config, map, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('fn', new FnEffect());\n","import * as GWU from 'gw-utils';\nimport { Handler, installHandler } from '../handler';\nimport { Effect as Flags } from '../../flags';\n//////////////////////////////////////////////\n// MESSAGE\nexport class MessageEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.message)\n            return true;\n        if (typeof src.message !== 'string') {\n            throw new Error('Emit must be configured with name of event to emit');\n        }\n        dest.message = src.message;\n        return true;\n    }\n    async fire(config, _map, x, y, ctx) {\n        if (!config.message)\n            return false;\n        const fired = !!(config.flags & Flags.E_FIRED);\n        if (config.message &&\n            config.message.length &&\n            !fired\n        // && map.isVisible(x, y)\n        ) {\n            GWU.message.addAt(x, y, config.message, ctx);\n            return true;\n        }\n        return false;\n    }\n}\ninstallHandler('message', new MessageEffect());\n","import { Handler, installHandler } from '../handler';\n//////////////////////////////////////////////\n// ActivateMachine\nexport class ActivateMachineEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.activateMachine)\n            return true;\n        dest.activateMachine = true;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.activateMachine) {\n            const cell = map.cell(x, y);\n            const machine = cell.machineId;\n            if (!machine)\n                return false;\n            return await map.activateMachine(machine, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('activateMachine', new ActivateMachineEffect());\n","import { Handler, installHandler } from '../handler';\nimport * as FIRE from '../fire';\n//////////////////////////////////////////////\n// EMIT\nexport class EffectEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.effect)\n            return true;\n        dest.effect = src.effect;\n        return true;\n    }\n    async fire(config, map, x, y, ctx) {\n        if (config.effect) {\n            return await FIRE.fire(config.effect, map, x, y, ctx);\n        }\n        return false;\n    }\n}\ninstallHandler('effect', new EffectEffect());\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../../flags';\nimport * as Tile from '../../tile';\nimport { Handler, installHandler } from '../handler';\nimport { Actor } from '../../actor';\nimport { Item } from '../../item';\nexport class SpawnEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!src.tile)\n            return true; // no error\n        let config = src.tile;\n        if (typeof config === 'string') {\n            const parts = config.split(/[,|]/).map((p) => p.trim());\n            config = {\n                tile: parts[0],\n                grow: Number.parseInt(parts[1] || '0'),\n                decrement: Number.parseInt(parts[2] || '0'),\n            };\n        }\n        const info = {\n            grow: (_b = (_a = config.grow) !== null && _a !== void 0 ? _a : config.spread) !== null && _b !== void 0 ? _b : 0,\n            decrement: (_c = config.decrement) !== null && _c !== void 0 ? _c : 0,\n            flags: GWU.flag.from(Flags.Effect, config.flags),\n            volume: (_d = config.volume) !== null && _d !== void 0 ? _d : 0,\n            next: (_e = config.next) !== null && _e !== void 0 ? _e : null,\n        };\n        const id = (_f = config.tile) !== null && _f !== void 0 ? _f : config.id;\n        if (typeof id === 'string') {\n            info.tile = id;\n        }\n        else {\n            throw new Error('Invalid tile spawn config: ' + id);\n        }\n        if (!info.tile) {\n            throw new Error('Must have tile.');\n        }\n        const match = (_g = config.matchTile) !== null && _g !== void 0 ? _g : config.match;\n        if (typeof match === 'string') {\n            info.matchTile = match;\n        }\n        else if (match) {\n            throw new Error('Invalid tile spawn match tile: ' + config.matchTile);\n        }\n        dest.tile = info;\n        return true;\n    }\n    fire(effect, map, x, y, ctx) {\n        if (!effect.tile)\n            return false; // did nothing\n        const id = effect.tile.tile;\n        const tile = Tile.tiles[id] || null;\n        if (!tile) {\n            throw new Error('Failed to find tile for effect: ' + id);\n        }\n        const abortIfBlocking = !!(effect.flags & Flags.Effect.E_ABORT_IF_BLOCKS_MAP);\n        const isBlocking = !!(abortIfBlocking &&\n            !(effect.flags & Flags.Effect.E_PERMIT_BLOCKING) &&\n            (tile.blocksPathing() ||\n                effect.flags & Flags.Effect.E_TREAT_AS_BLOCKING));\n        let didSomething = false;\n        didSomething = computeSpawnMap(effect, map, x, y, ctx);\n        if (!didSomething) {\n            return false;\n        }\n        if (abortIfBlocking &&\n            isBlocking &&\n            this.mapDisruptedBy(map, ctx.grid)) {\n            // GWU.grid.free(spawnMap);\n            return false;\n        }\n        if (effect.flags & Flags.Effect.E_EVACUATE_CREATURES) {\n            // first, evacuate creatures, so that they do not re-trigger the tile.\n            if (evacuateCreatures(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Flags.Effect.E_EVACUATE_ITEMS) {\n            // first, evacuate items, so that they do not re-trigger the tile.\n            if (evacuateItems(map, ctx.grid)) {\n                didSomething = true;\n            }\n        }\n        if (effect.flags & Flags.Effect.E_CLEAR_CELL) {\n            // first, clear other tiles (not base/ground)\n            if (clearCells(map, ctx.grid, effect.flags)) {\n                didSomething = true;\n            }\n        }\n        const spawned = spawnTiles(effect.flags, ctx.grid, map, tile, effect.tile.volume, ctx.machine);\n        return spawned;\n    }\n    mapDisruptedBy(map, blockingGrid, blockingToMapX = 0, blockingToMapY = 0) {\n        const walkableGrid = GWU.grid.alloc(map.width, map.height);\n        let disrupts = false;\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(map.width, map.height, (i, j) => {\n            const lakeX = i + blockingToMapX;\n            const lakeY = j + blockingToMapY;\n            if (blockingGrid.get(lakeX, lakeY)) {\n                if (map.cell(i, j).isStairs()) {\n                    disrupts = true;\n                }\n            }\n            else if (!map.cell(i, j).blocksMove()) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    }\n                    else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n        // console.log('WALKABLE GRID');\n        // walkableGWU.grid.dump();\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\ninstallHandler('tile', new SpawnEffect());\n// tick\n// Spawn\nexport function spawnTiles(flags, spawnMap, map, tile, volume = 0, machine) {\n    let i, j;\n    let accomplishedSomething;\n    accomplishedSomething = false;\n    const blockedByOtherLayers = !!(flags & Flags.Effect.E_BLOCKED_BY_OTHER_LAYERS);\n    const superpriority = !!(flags & Flags.Effect.E_SUPERPRIORITY);\n    const blockedByActors = !!(flags & Flags.Effect.E_BLOCKED_BY_ACTORS);\n    const blockedByItems = !!(flags & Flags.Effect.E_BLOCKED_BY_ITEMS);\n    // const applyEffects = ctx.refreshCell;\n    volume = volume || 0; // (tile ? tile.volume : 0);\n    for (i = 0; i < spawnMap.width; i++) {\n        for (j = 0; j < spawnMap.height; j++) {\n            if (!spawnMap[i][j])\n                continue; // If it's not flagged for building in the spawn map,\n            // const isRoot = spawnMap[i][j] === 1;\n            spawnMap[i][j] = 0; // so that the spawnmap reflects what actually got built\n            const cell = map.cell(i, j);\n            if (cell.hasTile(tile)) {\n                // If the new cell already contains the fill terrain,\n                // if (tile.depth == Flags.Depth.GAS) {\n                //     spawnMap[i][j] = 1;\n                //     cell.gasVolume += volume;\n                // } else if (tile.depth == Flags.Depth.LIQUID) {\n                //     spawnMap[i][j] = 1;\n                //     cell.liquidVolume += volume;\n                // }\n            }\n            else if (map.setTile(i, j, tile, {\n                volume,\n                superpriority,\n                blockedByOtherLayers,\n                blockedByActors,\n                blockedByItems,\n                machine,\n            })) {\n                // if the fill won't violate the priority of the most important terrain in this cell:\n                spawnMap[i][j] = 1; // so that the spawnmap reflects what actually got built\n                // map.redrawCell(cell);\n                // if (volume && cell.gas) {\n                //     cell.volume += (feat.volume || 0);\n                // }\n                cell.flags.cell |= Flags.Cell.EVENT_FIRED_THIS_TURN;\n                if (flags & Flags.Effect.E_PROTECTED) {\n                    cell.flags.cell |= Flags.Cell.EVENT_PROTECTED;\n                }\n                accomplishedSomething = true;\n                // debug('- tile', i, j, 'tile=', tile.id);\n            }\n        }\n    }\n    if (accomplishedSomething) {\n        map.setMapFlag(Flags.Map.MAP_CHANGED);\n    }\n    return accomplishedSomething;\n}\n// Spread\nfunction cellIsOk(effect, map, x, y, isStart) {\n    if (!map.hasXY(x, y))\n        return false;\n    const cell = map.cell(x, y);\n    if (cell.hasCellFlag(Flags.Cell.EVENT_PROTECTED))\n        return false;\n    if (cell.blocksEffects() && !effect.tile.matchTile && !isStart) {\n        return false;\n    }\n    if (effect.flags & Flags.Effect.E_BUILD_IN_WALLS) {\n        if (!map.cell(x, y).isWall())\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = true;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    else if (effect.flags & Flags.Effect.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.cell(x, y).isWall())\n            return false; // or on wall\n        GWU.xy.eachNeighbor(x, y, (i, j) => {\n            if (map.cell(i, j).isWall()) {\n                ok = false;\n            }\n        }, true);\n        if (!ok)\n            return false;\n    }\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.tile.matchTile &&\n        !isStart &&\n        !cell.hasTile(effect.tile.matchTile)) {\n        return false;\n    }\n    return true;\n}\nexport function computeSpawnMap(effect, map, x, y, ctx) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n    const config = effect.tile;\n    let startProb = config.grow || 0;\n    let probDec = config.decrement || 0;\n    const spawnMap = ctx.grid;\n    spawnMap.fill(0);\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n    return count > 0;\n}\n// export function spreadCircle(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     let radius = 0;\n//     startProb = startProb || 100;\n//     if (startProb >= 100) {\n//         probDec = probDec || 100;\n//     }\n//     while (map.rng.chance(startProb)) {\n//         startProb -= probDec;\n//         ++radius;\n//     }\n//     // startProb = 100;\n//     // probDec = 0;\n//     spawnMap.updateCircle(x, y, radius, (_v, i, j) => {\n//         if (!cellIsOk(this, i, j, ctx)) return 0;\n//         // const dist = Math.floor(GWU.utils.distanceBetween(x, y, i, j));\n//         // const prob = startProb - dist * probDec;\n//         // if (!map.rng.chance(prob)) return 0;\n//         return 1;\n//     });\n//     // spawnMap[x][y] = 1;\n//     // if (!isOk(flags, x, y, ctx)) {\n//     //     spawnMap[x][y] = 0;\n//     // }\n//     return true;\n// }\n// export function spreadLine(\n//     this: any,\n//     ctx: Effect.EffectCtx,\n//     spawnMap: GWU.grid.NumGrid\n// ) {\n//     let x2, y2;\n//     let madeChange;\n//     const x = ctx.x;\n//     const y = ctx.y;\n//     let startProb = this.spread || 0;\n//     let probDec = this.decrement || 0;\n//     spawnMap.fill(0);\n//     spawnMap[x][y] = 1; // incremented before anything else happens\n//     if (startProb) {\n//         madeChange = true;\n//         if (startProb >= 100) {\n//             probDec = probDec || 100;\n//         }\n//         x2 = x;\n//         y2 = y;\n//         const dir = GWU.xy.DIRS[map.rng.number(4)];\n//         while (madeChange) {\n//             madeChange = false;\n//             x2 = x2 + dir[0];\n//             y2 = y2 + dir[1];\n//             if (\n//                 spawnMap.hasXY(x2, y2) &&\n//                 !spawnMap[x2][y2] &&\n//                 cellIsOk(this, x2, y2, ctx) &&\n//                 map.rng.chance(startProb)\n//             ) {\n//                 spawnMap[x2][y2] = 1;\n//                 madeChange = true;\n//                 startProb -= probDec;\n//             }\n//         }\n//     }\n//     if (!cellIsOk(this, x, y, ctx)) {\n//         spawnMap[x][y] = 0;\n//     }\n//     return true;\n// }\nexport function clearCells(map, spawnMap, flags = 0) {\n    let didSomething = false;\n    const clearAll = (flags & Flags.Effect.E_CLEAR_CELL) === Flags.Effect.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (clearAll) {\n            cell.clear();\n        }\n        else {\n            if (flags & Flags.Effect.E_CLEAR_GAS) {\n                cell.clearDepth(Flags.Depth.GAS);\n            }\n            if (flags & Flags.Effect.E_CLEAR_LIQUID) {\n                cell.clearDepth(Flags.Depth.LIQUID);\n            }\n            if (flags & Flags.Effect.E_CLEAR_SURFACE) {\n                cell.clearDepth(Flags.Depth.SURFACE);\n            }\n            if (flags & Flags.Effect.E_CLEAR_GROUND) {\n                cell.clearDepth(Flags.Depth.GROUND);\n            }\n        }\n        didSomething = true;\n    });\n    return didSomething;\n}\nexport function evacuateCreatures(map, blockingMap) {\n    let i = 0, j = 0;\n    let didSomething = false;\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            if (!blockingMap[i][j])\n                continue;\n            const cell = map.cell(i, j);\n            if (!cell.hasActor())\n                continue;\n            GWU.list.forEach(cell.actor, (obj) => {\n                if (!(obj instanceof Actor))\n                    return;\n                const monst = obj;\n                const loc = map.rng.matchingLocNear(i, j, (x, y) => {\n                    if (!map.hasXY(x, y))\n                        return false;\n                    if (blockingMap[x][y])\n                        return false;\n                    const c = map.cell(x, y);\n                    return !monst.forbidsCell(c);\n                });\n                if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                    map.forceActor(loc[0], loc[1], monst);\n                    // map.redrawXY(loc[0], loc[1]);\n                    didSomething = true;\n                }\n            });\n        }\n    }\n    return didSomething;\n}\nexport function evacuateItems(map, blockingMap) {\n    let didSomething = false;\n    blockingMap.forEach((v, i, j) => {\n        if (!v)\n            return;\n        const cell = map.cell(i, j);\n        if (!cell.hasItem())\n            return;\n        GWU.list.forEach(cell.item, (obj) => {\n            if (!(obj instanceof Item))\n                return;\n            const item = obj;\n            const loc = map.rng.matchingLocNear(i, j, (x, y) => {\n                if (!map.hasXY(x, y))\n                    return false;\n                if (blockingMap[x][y])\n                    return false;\n                const dest = map.cell(x, y);\n                return !item.forbidsCell(dest);\n            });\n            if (loc && loc[0] >= 0 && loc[1] >= 0) {\n                map.forceItem(loc[0], loc[1], item);\n                // map.redrawXY(loc[0], loc[1]);\n                didSomething = true;\n            }\n        });\n    });\n    return didSomething;\n}\nclass ClearTileEffect extends Handler {\n    constructor() {\n        super();\n    }\n    make(src, dest) {\n        if (!src.clear)\n            return true;\n        let config = src.clear;\n        let layers = 0;\n        if (typeof config === 'string') {\n            config = config.split(/[,|]/).map((t) => t.trim());\n        }\n        if (config === true) {\n            layers = Flags.Depth.ALL_LAYERS;\n        }\n        else if (typeof config === 'number') {\n            layers = config;\n        }\n        else if (Array.isArray(config)) {\n            layers = config.reduce((out, v) => {\n                if (typeof v === 'number')\n                    return out | v;\n                const depth = Flags.Depth[v] || 0;\n                return out | depth;\n            }, 0);\n        }\n        else {\n            throw new Error('clear effect must have number or string config.');\n        }\n        dest.clear = layers;\n        return layers > 0;\n    }\n    async fire(config, map, x, y, ctx) {\n        return this.fireSync(config, map, x, y, ctx);\n    }\n    fireSync(config, map, x, y, _ctx) {\n        if (!config.clear)\n            return false;\n        if (!map)\n            return false;\n        const cell = map.cell(x, y);\n        return cell.clearDepth(config.clear);\n    }\n}\ninstallHandler('clear', new ClearTileEffect());\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { TileLayer } from './tileLayer';\nimport * as Effect from '../effect';\nconst Depth = Flags.Depth;\nconst ObjectFlags = Flags.Entity;\nconst TileFlags = Flags.Tile;\nconst TileMechFlags = Flags.TileMech;\nconst CellFlags = Flags.Cell;\nexport class FireLayer extends TileLayer {\n    constructor(map, name = 'tile') {\n        super(map, name);\n    }\n    async tick(_dt) {\n        // Run any tick effects\n        // Bookkeeping for fire\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                cell.clearCellFlag(CellFlags.CAUGHT_FIRE_THIS_TURN);\n            }\n        }\n        // now spread the fire...\n        for (let x = 0; x < this.map.width; ++x) {\n            for (let y = 0; y < this.map.height; ++y) {\n                const cell = this.map.cell(x, y);\n                if (cell.hasTileFlag(TileFlags.T_IS_FIRE) &&\n                    !(cell.flags.cell & CellFlags.CAUGHT_FIRE_THIS_TURN)) {\n                    await this.exposeToFire(x, y, false);\n                    for (let d = 0; d < 4; ++d) {\n                        const dir = GWU.xy.DIRS[d];\n                        await this.exposeToFire(x + dir[0], y + dir[1]);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    async exposeToFire(x, y, alwaysIgnite = false) {\n        let ignitionChance = 0, bestExtinguishingPriority = 0, explosiveNeighborCount = 0;\n        let fireIgnited = false, explosivePromotion = false;\n        const cell = this.map.cell(x, y);\n        if (!cell.hasTileFlag(TileFlags.T_IS_FLAMMABLE)) {\n            return false;\n        }\n        // Pick the extinguishing layer with the best priority.\n        cell.eachTile((tile) => {\n            if (tile.hasTileFlag(TileFlags.T_EXTINGUISHES_FIRE) &&\n                tile.priority > bestExtinguishingPriority) {\n                bestExtinguishingPriority = tile.priority;\n            }\n        });\n        // Pick the fire type of the most flammable layer that is either gas or equal-or-better priority than the best extinguishing layer.\n        cell.eachTile((tile) => {\n            if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE &&\n                (tile.depth === Depth.GAS ||\n                    tile.priority >= bestExtinguishingPriority)) {\n                const effect = Effect.from(tile.effects.fire);\n                if (effect && effect.chance > ignitionChance) {\n                    ignitionChance = effect.chance;\n                }\n            }\n        });\n        if (alwaysIgnite ||\n            (ignitionChance && this.map.rng.chance(ignitionChance, 10000))) {\n            // If it ignites...\n            fireIgnited = true;\n            // Count explosive neighbors.\n            if (cell.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                GWU.xy.eachNeighbor(x, y, (x0, y0) => {\n                    const n = this.map.cell(x0, y0);\n                    if (n.hasEntityFlag(ObjectFlags.L_BLOCKS_GAS) ||\n                        n.hasTileFlag(TileFlags.T_IS_FIRE) ||\n                        n.hasTileMechFlag(TileMechFlags.TM_EXPLOSIVE_PROMOTE)) {\n                        ++explosiveNeighborCount;\n                    }\n                });\n                if (explosiveNeighborCount >= 8) {\n                    explosivePromotion = true;\n                }\n            }\n            let event = 'fire';\n            if (explosivePromotion && cell.hasEffect('explode')) {\n                event = 'explode';\n            }\n            // cell.eachTile( (tile) => {\n            //     if (tile.flags.tile & TileFlags.T_IS_FLAMMABLE) {\n            //         if (tile.depth === Depth.GAS) {\n            //             cell.gasVolume = 0;\n            //         } else if (tile.depth === Depth.LIQUID) {\n            //             cell.liquidVolume = 0;\n            //         }\n            //     }\n            // });\n            await cell.fire(event, this.map, x, y, {\n                force: true,\n            });\n            cell.needsRedraw = true;\n        }\n        return fireIgnited;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport * as TILE from '../tile';\nimport * as Effect from '../effect';\nclass CellEntities {\n    constructor(cell) {\n        this.cell = cell;\n    }\n    eachItem(cb) {\n        let object = this.cell._item;\n        while (object) {\n            cb(object);\n            object = object.next;\n        }\n    }\n    eachActor(cb) {\n        let object = this.cell._actor;\n        while (object) {\n            cb(object);\n            object = object.next;\n        }\n    }\n    forEach(cb) {\n        this.eachItem(cb);\n        this.eachActor(cb);\n    }\n    some(cb) {\n        let object = this.cell._item;\n        while (object) {\n            if (cb(object))\n                return true;\n            object = object.next;\n        }\n        object = this.cell._actor;\n        while (object) {\n            if (cb(object))\n                return true;\n            object = object.next;\n        }\n        return false;\n    }\n    reduce(cb, start) {\n        let object = this.cell._item;\n        while (object) {\n            if (start === undefined) {\n                start = object;\n            }\n            else {\n                start = cb(start, object);\n            }\n            object = object.next;\n        }\n        object = this.cell._actor;\n        while (object) {\n            if (start === undefined) {\n                start = object;\n            }\n            else {\n                start = cb(start, object);\n            }\n            object = object.next;\n        }\n        return start;\n    }\n}\nexport class Cell {\n    constructor(map, x, y, groundTile) {\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this._actor = null;\n        this._item = null;\n        this.x = -1;\n        this.y = -1;\n        this._entities = new CellEntities(this);\n        this.flags = { cell: Flags.Cell.NEEDS_REDRAW };\n        this.tiles = [TILE.tiles.NULL];\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.snapshot = GWU.sprite.makeMixer();\n        if (groundTile) {\n            const tile = TILE.get(groundTile);\n            this.setTile(tile);\n        }\n    }\n    getSnapshot(dest) {\n        dest.copy(this.snapshot);\n    }\n    putSnapshot(src) {\n        this.snapshot.copy(src);\n    }\n    copy(other) {\n        Object.assign(this.flags, other.flags);\n        this.chokeCount = other.chokeCount;\n        this.tiles.length = other.tiles.length;\n        for (let i = 0; i < this.tiles.length; ++i) {\n            this.tiles[i] = other.tiles[i];\n        }\n        this.machineId = other.machineId;\n        this._actor = other.actor;\n        this._item = other.item;\n        this.map = other.map;\n        this.x = other.x;\n        this.y = other.y;\n        other.getSnapshot(this.snapshot);\n    }\n    hasCellFlag(flag) {\n        return !!(this.flags.cell & flag);\n    }\n    setCellFlag(flag) {\n        this.flags.cell |= flag;\n    }\n    clearCellFlag(flag) {\n        this.flags.cell &= ~flag;\n    }\n    hasEntityFlag(flag, withEntities = false) {\n        if (this.tiles.some((t) => t && t.flags.entity & flag))\n            return true;\n        return (withEntities &&\n            this._entities.some((o) => !!(o.flags.entity & flag)));\n    }\n    hasAllEntityFlags(flags) {\n        return (this.entityFlags() & flags) == flags;\n    }\n    hasTileFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tile & flag);\n    }\n    hasAllTileFlags(flags) {\n        return (this.tileFlags() & flags) == flags;\n    }\n    hasTileMechFlag(flag) {\n        return this.tiles.some((t) => t && t.flags.tileMech & flag);\n    }\n    hasAllTileMechFlags(flags) {\n        return (this.tileMechFlags() & flags) == flags;\n    }\n    hasTileTag(tag) {\n        return this.tiles.some((tile) => tile && tile.hasTag(tag));\n    }\n    hasAllTileTags(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAllTags(tags);\n        });\n    }\n    hasAnyTileTag(tags) {\n        return this.tiles.some((tile) => {\n            return tile && tile.hasAnyTag(tags);\n        });\n    }\n    cellFlags() {\n        return this.flags.cell;\n    }\n    entityFlags(withEntities = false) {\n        let flags = this.tiles.reduce((out, t) => out | (t ? t.flags.entity : 0), 0);\n        if (withEntities) {\n            flags |= this._entities.reduce((out, o) => out | o.flags.entity, 0);\n        }\n        return flags;\n    }\n    tileFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tile : 0), 0);\n    }\n    tileMechFlags() {\n        return this.tiles.reduce((out, t) => out | (t ? t.flags.tileMech : 0), 0);\n    }\n    itemFlags() {\n        let flags = 0;\n        this._entities.eachItem((i) => {\n            flags |= i.flags.item;\n        });\n        return flags;\n    }\n    actorFlags() {\n        let flags = 0;\n        this._entities.eachActor((a) => {\n            flags |= a.flags.actor;\n        });\n        return flags;\n    }\n    get needsRedraw() {\n        return !!(this.flags.cell & Flags.Cell.NEEDS_REDRAW);\n    }\n    set needsRedraw(v) {\n        if (v) {\n            this.flags.cell |= Flags.Cell.NEEDS_REDRAW;\n        }\n        else {\n            this.flags.cell &= ~Flags.Cell.NEEDS_REDRAW;\n        }\n    }\n    get changed() {\n        return !!(this.flags.cell & Flags.Cell.CHANGED);\n    }\n    depthPriority(depth) {\n        const tile = this.tiles[depth];\n        return tile ? tile.priority : TILE.tiles.NULL.priority;\n    }\n    highestPriority() {\n        return this.tiles.reduce((out, t) => Math.max(out, t ? t.priority : 0), TILE.tiles.NULL.priority);\n    }\n    depthTile(depth) {\n        return this.tiles[depth] || null;\n    }\n    hasTile(tile) {\n        if (!tile)\n            return this.tiles.some((t) => t);\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n        }\n        return this.tiles.includes(tile);\n    }\n    hasDepthTile(depth) {\n        const t = this.tiles[depth];\n        return !!t && t !== TILE.tiles.NULL;\n    }\n    highestPriorityTile() {\n        return this.tiles.reduce((out, tile) => {\n            if (!tile)\n                return out;\n            if (tile.priority >= out.priority)\n                return tile; // higher depth will get picked with >=\n            return out;\n        }, TILE.tiles.NULL);\n    }\n    get tile() {\n        return this.highestPriorityTile();\n    }\n    eachTile(cb) {\n        this.tiles.forEach((t) => t && cb(t));\n    }\n    tileWithObjectFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.entity & flag) || null;\n    }\n    tileWithFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tile & flag) || null;\n    }\n    tileWithMechFlag(flag) {\n        return this.tiles.find((t) => t && t.flags.tileMech & flag) || null;\n    }\n    blocksVision(withEntities = false) {\n        if (this.tiles.some((t) => t && t.blocksVision()))\n            return true;\n        return withEntities && this._entities.some((o) => o.blocksVision());\n    }\n    blocksPathing(withEntities = false) {\n        if (this.tiles.some((t) => t && t.blocksPathing()))\n            return true;\n        return withEntities && this._entities.some((o) => o.blocksPathing());\n    }\n    blocksMove(withEntities = false) {\n        if (this.tiles.some((t) => t && t.blocksMove()))\n            return true;\n        return withEntities && this._entities.some((o) => o.blocksMove());\n    }\n    blocksEffects(withEntities = false) {\n        if (this.tiles.some((t) => t && t.blocksEffects()))\n            return true;\n        return withEntities && this._entities.some((o) => o.blocksEffects());\n    }\n    blocksLayer(depth) {\n        return this.tiles.some((t) => t &&\n            !!(t.flags.tile & TILE.flags.Tile.T_BLOCKS_OTHER_LAYERS) &&\n            t.depth != depth);\n    }\n    // Tests\n    isNull() {\n        return (this.tiles.every((t) => !t || t === TILE.tiles.NULL) &&\n            this._actor == null &&\n            this._item == null);\n    }\n    isPassable() {\n        return !this.blocksMove();\n    }\n    isWall() {\n        return this.hasAllEntityFlags(Flags.Entity.L_WALL_FLAGS);\n    }\n    isStairs() {\n        return this.hasTileFlag(Flags.Tile.T_HAS_STAIRS);\n    }\n    isFloor() {\n        // Floor tiles do not block anything...\n        return (!this.hasEntityFlag(Flags.Entity.L_BLOCKS_EVERYTHING) &&\n            !this.hasTileFlag(Flags.Tile.T_PATHING_BLOCKER));\n    }\n    isGateSite() {\n        return this.hasCellFlag(Flags.Cell.IS_GATE_SITE);\n    }\n    isSecretlyPassable() {\n        return this.hasEntityFlag(Flags.Entity.L_SECRETLY_PASSABLE);\n    }\n    hasKey() {\n        return this._entities.some((e) => !!e.key && e.key.matches(this.x, this.y));\n    }\n    // @returns - whether or not the change results in a change to the cell tiles.\n    //          - If there is a change to cell lighting, the cell will have the\n    //          - LIGHT_CHANGED flag set.\n    setTile(tile) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        const current = this.tiles[tile.depth] || TILE.tiles.NULL;\n        if (current === tile)\n            return false;\n        this.tiles[tile.depth] = tile;\n        this.needsRedraw = true;\n        // if (current.light !== tile.light) {\n        //     this.setCellFlag(Flags.Cell.LIGHT_CHANGED);\n        // }\n        // if (current.blocksVision() !== tile.blocksVision()) {\n        //     this.setCellFlag(Flags.Cell.FOV_CHANGED);\n        // }\n        // if (volume) {\n        //     if (tile.depth === Depth.GAS) {\n        //         this.gasVolume = volume;\n        //     }\n        //     if (tile.depth === Depth.LIQUID) {\n        //         this.liquidVolume = volume;\n        //     }\n        // }\n        return true;\n    }\n    clearTiles(tile) {\n        this.tiles[0] = TILE.tiles.NULL;\n        for (let i = 1; i < this.tiles.length; ++i) {\n            this.tiles[i] = null;\n        }\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.needsRedraw = true;\n    }\n    clear(tile) {\n        this.tiles = [TILE.tiles.NULL];\n        this.flags.cell = 0;\n        this.needsRedraw = true;\n        this.chokeCount = 0;\n        this.machineId = 0;\n        this._actor = null;\n        this._item = null;\n        if (tile) {\n            this.setTile(tile);\n        }\n        this.snapshot.blackOut();\n    }\n    clearDepth(depth) {\n        if (depth == 0) {\n            this.tiles[0] = TILE.tiles.NULL;\n            this.needsRedraw = true;\n            return true;\n        }\n        else if (this.tiles[depth] !== null) {\n            this.tiles[depth] = null;\n            this.needsRedraw = true;\n            return true;\n        }\n        return false;\n    }\n    clearDepthsWithFlags(tileFlag, tileMechFlag = 0) {\n        for (let i = 0; i < this.tiles.length; ++i) {\n            const tile = this.tiles[i];\n            if (!tile)\n                continue;\n            if (!tile.hasTileFlag(tileFlag))\n                continue;\n            if (tileMechFlag && !tile.hasTileMechFlag(tileMechFlag))\n                continue;\n            this.clearDepth(i);\n        }\n    }\n    // Lights\n    eachGlowLight(cb) {\n        this.tiles.forEach((tile) => {\n            if (tile && tile.light)\n                cb(tile.light);\n        });\n    }\n    // Effects\n    async fire(event, map, x, y, ctx = {}) {\n        ctx.cell = this;\n        let didSomething = false;\n        if (ctx.depth !== undefined) {\n            const tile = (ctx.tile = this.depthTile(ctx.depth));\n            if (tile && tile.effects) {\n                const ev = tile.effects[event];\n                didSomething = await this._activate(ev, map, x, y, ctx);\n            }\n        }\n        else {\n            // console.log('fire event - %s', event);\n            for (ctx.tile of this.tiles) {\n                if (!ctx.tile || !ctx.tile.effects)\n                    continue;\n                const ev = ctx.tile.effects[event];\n                // console.log(' - ', ev);\n                if (await this._activate(ev, map, x, y, ctx)) {\n                    didSomething = true;\n                    break;\n                }\n                // }\n            }\n        }\n        return didSomething;\n    }\n    async _activate(effect, map, x, y, ctx) {\n        if (typeof effect === 'string') {\n            effect = Effect.effects[effect];\n        }\n        let didSomething = false;\n        if (effect) {\n            // console.log(' - spawn event @%d,%d - %s', x, y, name);\n            didSomething = await Effect.fire(effect, map, x, y, ctx);\n            // cell.debug(\" - spawned\");\n        }\n        return didSomething;\n    }\n    hasEffect(name) {\n        for (let tile of this.tiles) {\n            if (tile && tile.hasEffect(name))\n                return true;\n        }\n        return false;\n    }\n    // // Items\n    hasItem() {\n        return this.hasCellFlag(Flags.Cell.HAS_ITEM);\n    }\n    get item() {\n        return this._item;\n    }\n    set item(val) {\n        this._item = val;\n        if (val) {\n            this.setCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        else {\n            this.clearCellFlag(Flags.Cell.HAS_ITEM);\n        }\n        this.needsRedraw = true;\n    }\n    removeItem(item) {\n        return GWU.list.remove(this, 'item', item);\n    }\n    // // Actors\n    hasActor() {\n        return this.hasCellFlag(Flags.Cell.HAS_ACTOR);\n    }\n    hasPlayer() {\n        return this.hasCellFlag(Flags.Cell.HAS_PLAYER);\n    }\n    get actor() {\n        return this._actor;\n    }\n    set actor(val) {\n        this._actor = val;\n        if (val) {\n            this.setCellFlag(Flags.Cell.HAS_ACTOR);\n        }\n        else {\n            this.clearCellFlag(Flags.Cell.HAS_ACTOR | Flags.Cell.HAS_PLAYER);\n        }\n        this.needsRedraw = true;\n    }\n    removeActor(actor) {\n        return GWU.list.remove(this, 'actor', actor);\n    }\n    getDescription() {\n        return this.highestPriorityTile().description;\n    }\n    getFlavor() {\n        return this.highestPriorityTile().flavor;\n    }\n    getName(opts = {}) {\n        return this.highestPriorityTile().getName(opts);\n    }\n    dump() {\n        var _a, _b, _c, _d;\n        if ((_b = (_a = this._actor) === null || _a === void 0 ? void 0 : _a.sprite) === null || _b === void 0 ? void 0 : _b.ch)\n            return this._actor.sprite.ch;\n        if ((_d = (_c = this._item) === null || _c === void 0 ? void 0 : _c.sprite) === null || _d === void 0 ? void 0 : _d.ch)\n            return this._item.sprite.ch;\n        return this.highestPriorityTile().sprite.ch || ' ';\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as Flags from '../flags';\nimport { Cell } from './cell';\nimport * as TILE from '../tile';\nimport * as Layer from '../layer';\n// import { CellMemory } from './cellMemory';\nimport * as Effect from '../effect';\nexport class Map {\n    constructor(width, height, opts = {}) {\n        // _memory: GWU.grid.Grid<CellMemory>;\n        this.machineCount = 0;\n        this._seed = 0;\n        this.rng = GWU.rng.random;\n        this.id = 'MAP';\n        this.width = width;\n        this.height = height;\n        this.flags = { map: 0 };\n        this.layers = [];\n        if (opts.id) {\n            this.id = opts.id;\n        }\n        this.cells = GWU.grid.make(width, height, (x, y) => new Cell(this, x, y));\n        // this._memory = GWU.grid.make(\n        //     width,\n        //     height,\n        //     (x, y) => new CellMemory(this, x, y)\n        // );\n        if (opts.seed) {\n            this._seed = opts.seed;\n            this.rng = GWU.rng.make(opts.seed);\n        }\n        this.light = new GWU.light.LightSystem(this, opts);\n        // this.fov = new GWU.fov.FovSystem(this, opts);\n        this.properties = {};\n        this.initLayers();\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(v) {\n        this._seed = v;\n        this.rng = GWU.rng.make(v);\n    }\n    // memory(x: number, y: number): CellMemory {\n    //     return this._memory[x][y];\n    // }\n    // knowledge(x: number, y: number): CellInfoType {\n    //     if (this.fov.isAnyKindOfVisible(x, y)) return this.cell(x,y);\n    //     return this._memory[x][y];\n    // }\n    // LAYERS\n    initLayers() {\n        this.addLayer(Flags.Depth.GROUND, new Layer.TileLayer(this, 'ground'));\n        this.addLayer(Flags.Depth.SURFACE, new Layer.FireLayer(this, 'surface'));\n        this.addLayer(Flags.Depth.GAS, new Layer.GasLayer(this, 'gas'));\n        this.addLayer(Flags.Depth.ITEM, new Layer.ItemLayer(this, 'item'));\n        this.addLayer(Flags.Depth.ACTOR, new Layer.ActorLayer(this, 'actor'));\n    }\n    addLayer(depth, layer) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        layer.depth = depth;\n        this.layers[depth] = layer;\n    }\n    removeLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        if (!depth)\n            throw new Error('Cannot remove layer with depth=0.');\n        delete this.layers[depth];\n    }\n    getLayer(depth) {\n        if (typeof depth !== 'number') {\n            depth = Flags.Depth[depth];\n        }\n        return this.layers[depth] || null;\n    }\n    hasXY(x, y) {\n        return this.cells.hasXY(x, y);\n    }\n    isBoundaryXY(x, y) {\n        return x == 0 || y == 0 || x == this.width - 1 || y == this.height - 1;\n    }\n    cell(x, y) {\n        return this.cells[x][y];\n    }\n    get(x, y) {\n        return this.cells.get(x, y);\n    }\n    eachCell(cb) {\n        this.cells.forEach((cell, x, y) => cb(cell, x, y, this));\n    }\n    // items\n    hasItem(x, y) {\n        return this.cell(x, y).hasItem();\n    }\n    itemAt(x, y) {\n        return this.cell(x, y).item;\n    }\n    eachItem(cb) {\n        this.cells.forEach((cell) => {\n            GWU.list.forEach(cell.item, cb);\n        });\n    }\n    async addItem(x, y, item) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && (await layer.addItem(x, y, item))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    forceItem(x, y, item) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && layer.forceItem(x, y, item)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async removeItem(item) {\n        const layer = this.layers[item.depth];\n        return layer.removeItem(item);\n    }\n    async moveItem(item, dir) {\n        if (typeof dir === 'number') {\n            dir = GWU.xy.DIRS[dir];\n        }\n        const oldX = item.x;\n        const oldY = item.y;\n        const x = oldX + dir[0];\n        const y = oldY + dir[1];\n        if (!this.hasXY(x, y))\n            return false;\n        const layer = this.layers[item.depth];\n        if (!(await layer.removeItem(item)))\n            return false;\n        if (!(await this.addItem(x, y, item))) {\n            layer.forceItem(item.x, item.y, item);\n            return false;\n        }\n        // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n        // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n        // if (isVisible && !wasVisible) {\n        //     if (item.lastSeen) {\n        //         this._memory[item.lastSeen.x][item.lastSeen.y].removeItem(item);\n        //         this.clearCellFlag(\n        //             item.lastSeen.x,\n        //             item.lastSeen.y,\n        //             Flags.Cell.STABLE_SNAPSHOT\n        //         );\n        //         item.lastSeen = null;\n        //     }\n        // } else if (wasVisible && !isVisible) {\n        //     const mem = this._memory[x][y];\n        //     mem.item = item;\n        //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n        //     item.lastSeen = this.cell(x, y);\n        // }\n        return true;\n    }\n    // Actors\n    hasPlayer(x, y) {\n        return this.cell(x, y).hasPlayer();\n    }\n    actorAt(x, y) {\n        return this.cell(x, y).actor;\n    }\n    eachActor(cb) {\n        this.cells.forEach((cell) => {\n            GWU.list.forEach(cell.actor, cb);\n        });\n    }\n    async addActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && (await layer.addActor(x, y, actor))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    forceActor(x, y, actor) {\n        if (!this.hasXY(x, y))\n            return false;\n        for (let layer of this.layers) {\n            if (layer && layer.forceActor(x, y, actor)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async removeActor(actor) {\n        const layer = this.layers[actor.depth];\n        return layer.removeActor(actor);\n    }\n    async moveActor(actor, dir) {\n        if (typeof dir === 'number') {\n            dir = GWU.xy.DIRS[dir];\n        }\n        const oldX = actor.x;\n        const oldY = actor.y;\n        const x = oldX + dir[0];\n        const y = oldY + dir[1];\n        if (!this.hasXY(x, y))\n            return false;\n        const layer = this.layers[actor.depth];\n        if (!(await layer.removeActor(actor)))\n            return false;\n        if (!(await layer.addActor(x, y, actor))) {\n            layer.forceActor(actor.x, actor.y, actor);\n            return false;\n        }\n        // const wasVisible = this.fov.isAnyKindOfVisible(oldX, oldY);\n        // const isVisible = this.fov.isAnyKindOfVisible(x, y);\n        // if (isVisible && !wasVisible) {\n        //     if (actor.lastSeen) {\n        //         this._memory[actor.lastSeen.x][actor.lastSeen.y].removeActor(\n        //             actor\n        //         );\n        //         this.clearCellFlag(\n        //             actor.lastSeen.x,\n        //             actor.lastSeen.y,\n        //             Flags.Cell.STABLE_SNAPSHOT\n        //         );\n        //         actor.lastSeen = null;\n        //     }\n        // } else if (wasVisible && !isVisible) {\n        //     const mem = this._memory[x][y];\n        //     mem.actor = actor;\n        //     this.clearCellFlag(x, y, Flags.Cell.STABLE_SNAPSHOT);\n        //     actor.lastSeen = this.cell(x, y);\n        // }\n        return true;\n    }\n    // Information\n    // isVisible(x: number, y: number): boolean {\n    //     return this.fov.isAnyKindOfVisible(x, y);\n    // }\n    hasKey(x, y) {\n        if (!this.hasXY(x, y))\n            return false;\n        const cell = this.cell(x, y);\n        return cell.hasKey();\n    }\n    count(cb) {\n        return this.cells.count((cell, x, y) => cb(cell, x, y, this));\n    }\n    dump(fmt, log = console.log) {\n        const mixer = new GWU.sprite.Mixer();\n        const getCh = (_cell, x, y) => {\n            this.getAppearanceAt(x, y, mixer);\n            if (mixer.ch < 0)\n                return ' ';\n            return mixer.ch;\n        };\n        this.cells.dump(fmt || getCh, log);\n    }\n    // flags\n    hasMapFlag(flag) {\n        return !!(this.flags.map & flag);\n    }\n    setMapFlag(flag) {\n        this.flags.map |= flag;\n    }\n    clearMapFlag(flag) {\n        this.flags.map &= ~flag;\n    }\n    setCellFlag(x, y, flag) {\n        this.cell(x, y).setCellFlag(flag);\n    }\n    clearCellFlag(x, y, flag) {\n        this.cell(x, y).clearCellFlag(flag);\n    }\n    clear() {\n        this.light.glowLightChanged = true;\n        // this.fov.needsUpdate = true;\n        this.layers.forEach((l) => l.clear());\n    }\n    clearCell(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clear(tile);\n    }\n    // Skips all the logic checks and just forces a clean cell with the given tile\n    fill(tile, boundary) {\n        tile = TILE.get(tile);\n        boundary = TILE.get(boundary || tile);\n        let i, j;\n        for (i = 0; i < this.width; ++i) {\n            for (j = 0; j < this.height; ++j) {\n                const cell = this.cells[i][j];\n                cell.clear(this.isBoundaryXY(i, j) ? boundary : tile);\n            }\n        }\n    }\n    hasTile(x, y, tile\n    // useMemory = false\n    ) {\n        return this.cell(x, y).hasTile(tile);\n        // if (!useMemory) return this.cell(x, y).hasTile(tile);\n        // return this.memory(x, y).hasTile(tile);\n    }\n    forceTile(x, y, tile) {\n        return this.setTile(x, y, tile, { superpriority: true });\n    }\n    setTile(x, y, tile, opts) {\n        if (!(tile instanceof TILE.Tile)) {\n            tile = TILE.get(tile);\n            if (!tile)\n                return false;\n        }\n        if (opts === true) {\n            opts = { superpriority: true };\n        }\n        const depth = tile.depth || 0;\n        const layer = this.layers[depth] || this.layers[0];\n        if (!(layer instanceof Layer.TileLayer))\n            return false;\n        return layer.setTile(x, y, tile, opts);\n    }\n    clearTiles(x, y, tile) {\n        const cell = this.cell(x, y);\n        cell.clearTiles(tile);\n    }\n    async tick(dt) {\n        let didSomething = await this.fireAll('tick');\n        for (let layer of this.layers) {\n            if (layer && (await layer.tick(dt))) {\n                didSomething = true;\n            }\n        }\n        return didSomething;\n    }\n    copy(src) {\n        if (this.constructor !== src.constructor)\n            throw new Error('Maps must be same type to copy.');\n        if (this.width !== src.width || this.height !== src.height)\n            throw new Error('Maps must be same size to copy');\n        this.cells.forEach((c, x, y) => {\n            c.copy(src.cell(x, y));\n        });\n        this.layers.forEach((l, depth) => {\n            l.copy(src.layers[depth]);\n        });\n        this.flags.map = src.flags.map;\n        // this.fov.needsUpdate = true;\n        this.light.copy(src.light);\n        this.rng = src.rng;\n        this.machineCount = src.machineCount;\n        this._seed = src._seed;\n        this.properties = Object.assign({}, src.properties);\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    async fire(event, x, y, ctx = {}) {\n        const cell = this.cell(x, y);\n        return cell.fire(event, this, x, y, ctx);\n    }\n    async fireAll(event, ctx = {}) {\n        let didSomething = false;\n        const willFire = GWU.grid.alloc(this.width, this.height);\n        // Figure out which tiles will fire - before we change everything...\n        this.cells.forEach((cell, x, y) => {\n            cell.clearCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN | Flags.Cell.EVENT_PROTECTED);\n            cell.eachTile((tile) => {\n                const ev = tile.effects[event];\n                if (!ev)\n                    return;\n                const effect = Effect.from(ev);\n                if (!effect)\n                    return;\n                let promoteChance = 0;\n                // < 0 means try to fire my neighbors...\n                if (effect.chance < 0) {\n                    promoteChance = 0;\n                    GWU.xy.eachNeighbor(x, y, (i, j) => {\n                        const n = this.cell(i, j);\n                        if (!n.hasEntityFlag(Flags.Entity.L_BLOCKS_EFFECTS) &&\n                            n.depthTile(tile.depth) !=\n                                cell.depthTile(tile.depth) &&\n                            !n.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN)) {\n                            // TODO - Should this break from the loop after doing this once or keep going?\n                            promoteChance += -1 * effect.chance;\n                        }\n                    }, true);\n                }\n                else {\n                    promoteChance = effect.chance || 100 * 100; // 100%\n                }\n                if (!cell.hasCellFlag(Flags.Cell.CAUGHT_FIRE_THIS_TURN) &&\n                    this.rng.chance(promoteChance, 10000)) {\n                    willFire[x][y] |= GWU.flag.fl(tile.depth);\n                    // cell.flags.cellMech |= Cell.MechFlags.EVENT_FIRED_THIS_TURN;\n                }\n            });\n        });\n        // Then activate them - so that we don't activate the next generation as part of the forEach\n        ctx.force = true;\n        await willFire.forEachAsync(async (w, x, y) => {\n            if (!w)\n                return;\n            const cell = this.cell(x, y);\n            if (cell.hasCellFlag(Flags.Cell.EVENT_FIRED_THIS_TURN))\n                return;\n            for (let depth = 0; depth <= Flags.Depth.GAS; ++depth) {\n                if (w & GWU.flag.fl(depth)) {\n                    await cell.fire(event, this, x, y, {\n                        force: true,\n                        depth,\n                    });\n                }\n            }\n        });\n        GWU.grid.free(willFire);\n        return didSomething;\n    }\n    async activateMachine(machineId, originX, originY, ctx = {}) {\n        let didSomething = false;\n        ctx.originX = originX;\n        ctx.originY = originY;\n        for (let x = 0; x < this.width; ++x) {\n            for (let y = 0; y < this.height; ++y) {\n                const cell = this.cell(x, y);\n                if (cell.machineId !== machineId)\n                    continue;\n                if (cell.hasEffect('machine')) {\n                    didSomething =\n                        (await cell.fire('machine', this, x, y, ctx)) ||\n                            didSomething;\n                }\n            }\n        }\n        return didSomething;\n    }\n    // DRAW\n    drawInto(dest, opts = {}) {\n        const buffer = dest instanceof GWU.canvas.Canvas ? dest.buffer : dest;\n        if (typeof opts === 'boolean')\n            opts = { force: opts };\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < buffer.width; ++x) {\n            for (let y = 0; y < buffer.height; ++y) {\n                this.getAppearanceAt(x, y, mixer);\n                buffer.drawSprite(x, y, mixer);\n            }\n        }\n    }\n    getCellAppearance(cell, dest) {\n        dest.blackOut();\n        const isVisible = true; // this.fov.isAnyKindOfVisible(x, y);\n        const isRevealed = true; // this.fov.isRevealed(x, y);\n        const needSnapshot = !cell.hasCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        if (needSnapshot || (cell.needsRedraw && isVisible)) {\n            this.layers.forEach((layer) => layer.putAppearance(dest, cell));\n            if (dest.dances) {\n                cell.setCellFlag(Flags.Cell.COLORS_DANCE);\n            }\n            else {\n                cell.clearCellFlag(Flags.Cell.COLORS_DANCE);\n            }\n            dest.bake();\n            cell.putSnapshot(dest);\n            cell.needsRedraw = false;\n            cell.setCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        else {\n            cell.getSnapshot(dest);\n        }\n        if (isVisible) {\n            const light = this.light.getLight(cell.x, cell.y);\n            dest.multiply(light);\n        }\n        else if (isRevealed) {\n            dest.scale(50);\n        }\n        else {\n            dest.blackOut();\n        }\n        if (cell.hasEntityFlag(Flags.Entity.L_VISUALLY_DISTINCT)) {\n            GWU.color.separate(dest.fg, dest.bg);\n        }\n    }\n    getAppearanceAt(x, y, dest) {\n        const cell = this.cell(x, y);\n        return this.getCellAppearance(cell, dest);\n    }\n    // // LightSystemSite\n    hasActor(x, y) {\n        return this.cell(x, y).hasActor();\n    }\n    eachGlowLight(cb) {\n        this.cells.forEach((cell, x, y) => {\n            cell.eachGlowLight((light) => cb(x, y, light));\n            // cell.clearCellFlag(Flags.Cell.LIGHT_CHANGED);\n        });\n    }\n    eachDynamicLight(_cb) { }\n    // FOV System Site\n    eachViewport(_cb) {\n        // TODO !!\n    }\n    lightingChanged() {\n        return this.light.changed;\n    }\n    hasVisibleLight(x, y) {\n        return !this.light.isDark(x, y);\n    }\n    blocksVision(x, y) {\n        return this.cell(x, y).blocksVision();\n    }\n    onCellRevealed(_x, _y) {\n        // if (DATA.automationActive) {\n        // if (cell.item) {\n        //     const theItem: GW.types.ItemType = cell.item;\n        //     if (\n        //         theItem.hasObjectFlag(ObjectFlags.L_INTERRUPT_WHEN_SEEN)\n        //     ) {\n        //         GW.message.add(\n        //             '§you§ §see§ ΩitemMessageColorΩ§item§∆.',\n        //             {\n        //                 item: theItem,\n        //                 actor: DATA.player,\n        //             }\n        //         );\n        //     }\n        // }\n        // if (\n        //     !(this.fov.isMagicMapped(x, y)) &&\n        //     this.site.hasObjectFlag(\n        //         x,\n        //         y,\n        //         ObjectFlags.L_INTERRUPT_WHEN_SEEN\n        //     )\n        // ) {\n        //     const tile = cell.tileWithLayerFlag(\n        //         ObjectFlags.L_INTERRUPT_WHEN_SEEN\n        //     );\n        //     if (tile) {\n        //         GW.message.add(\n        //             '§you§ §see§ ΩbackgroundMessageColorΩ§item§∆.',\n        //             {\n        //                 actor: DATA.player,\n        //                 item: tile.name,\n        //             }\n        //         );\n        //     }\n        // }\n    }\n    redrawCell(x, y) {\n        // if (clearMemory) {\n        //     this.clearMemory(x, y);\n        // }\n        this.cell(x, y).needsRedraw = true;\n    }\n}\nexport function make(w, h, opts = {}, boundary) {\n    if (typeof opts === 'string') {\n        opts = { tile: opts };\n    }\n    if (boundary) {\n        opts.boundary = boundary;\n    }\n    if (opts.tile === true) {\n        opts.tile = 'FLOOR';\n    }\n    if (opts.boundary === true) {\n        opts.boundary = 'WALL';\n    }\n    const map = new Map(w, h, opts);\n    if (opts.tile) {\n        map.fill(opts.tile, opts.boundary);\n        map.light.update();\n    }\n    // if (!DATA.map) {\n    //     DATA.map = map;\n    // }\n    // // In case we reveal the map or make it all visible we need our memory set correctly\n    // map.cells.forEach((_c, x, y) => {\n    //     if (map.fov.isRevealed(x, y)) {\n    //         map.storeMemory(x, y, true); // with snapshot\n    //     }\n    // });\n    return map;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isStringArray(value) {\n    return Array.isArray(value) && typeof value[0] === 'string';\n}\nexport function from(prefab, charToTile, opts = {}) {\n    let height = 0;\n    let width = 0;\n    let map;\n    if (isString(prefab)) {\n        prefab = prefab.split('\\n');\n    }\n    if (isStringArray(prefab)) {\n        height = prefab.length;\n        width = prefab.reduce((len, line) => Math.max(len, line.length), 0);\n        map = make(width, height, opts);\n        prefab.forEach((line, y) => {\n            for (let x = 0; x < width; ++x) {\n                const ch = line[x] || '.';\n                const tile = charToTile[ch] || 'FLOOR';\n                map.setTile(x, y, tile);\n            }\n        });\n    }\n    else {\n        height = prefab.height;\n        width = prefab.width;\n        map = make(width, height, opts);\n        prefab.forEach((v, x, y) => {\n            const tile = charToTile[v] || 'FLOOR';\n            map.setTile(x, y, tile);\n        });\n    }\n    map.light.update();\n    return map;\n}\n","import * as GWU from 'gw-utils';\nimport { Entity as ObjectFlags } from '../flags/entity';\nimport * as Flags from '../flags';\nexport function analyze(map, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\nexport function updateChokepoints(map, updateCounts) {\n    const passMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            const cell = map.cell(i, j);\n            if ((cell.blocksPathing() || cell.blocksMove()) &&\n                !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 0;\n            }\n            else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                passMap[i][j] = 1;\n            }\n        }\n    }\n    let passableArcCount;\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < passMap.width - 1; i++) {\n        for (let j = 1; j < passMap.height - 1; j++) {\n            map.cell(i, j).flags.cell &= ~Flags.Cell.IS_CHOKEPOINT;\n            if (passMap[i][j] &&\n                !(map.cell(i, j).flags.cell & Flags.Cell.IS_IN_LOOP)) {\n                passableArcCount = 0;\n                for (let dir = 0; dir < 8; dir++) {\n                    const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                    const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                    const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if ((map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                        passMap[newX][newY]) !=\n                        (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                            passMap[oldX][oldY])) {\n                        if (++passableArcCount > 2) {\n                            if ((!passMap[i - 1][j] && !passMap[i + 1][j]) ||\n                                (!passMap[i][j - 1] && !passMap[i][j + 1])) {\n                                map.cell(i, j).flags.cell |=\n                                    Flags.Cell.IS_CHOKEPOINT;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.cell(i, j).chokeCount = 30000;\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n        // Scan through and find a chokepoint next to an open point.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                const cell = map.cell(i, j);\n                if (passMap[i][j] &&\n                    cell.flags.cell & Flags.Cell.IS_CHOKEPOINT) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            passMap[newX][newY] &&\n                            !(map.cell(newX, newY).flags.cell &\n                                Flags.Cell.IS_CHOKEPOINT)) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            passMap[i][j] = 0;\n                            let cellCount = floodFillCount(map, grid, passMap, newX, newY);\n                            passMap[i][j] = 1;\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (grid[i2][j2] &&\n                                            cellCount <\n                                                map.cell(i2, j2).chokeCount) {\n                                            map.cell(i2, j2).chokeCount = cellCount;\n                                            map.cell(i2, j2).flags.cell &= ~Flags.Cell\n                                                .IS_GATE_SITE;\n                                        }\n                                    }\n                                }\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < cell.chokeCount) {\n                                    cell.chokeCount = cellCount;\n                                    cell.flags.cell |= Flags.Cell.IS_GATE_SITE;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    GWU.grid.free(passMap);\n    GWU.grid.free(grid);\n}\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(map, results, passMap, startX, startY) {\n    function getCount(x, y) {\n        let count = passMap[x][y] == 2 ? 5000 : 1;\n        if (map.cell(x, y).flags.cell & Flags.Cell.IS_IN_AREA_MACHINE) {\n            count = 10000;\n        }\n        return count;\n    }\n    let count = 0;\n    const todo = [[startX, startY]];\n    const free = [];\n    while (todo.length) {\n        const item = todo.pop();\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y])\n            continue;\n        results[x][y] = 1;\n        count += getCount(x, y);\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n            if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                passMap[newX][newY] &&\n                !results[newX][newY]) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n    return Math.min(count, 10000);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n// TODO = Move loopiness to Map\nexport function updateLoopiness(map) {\n    map.eachCell(resetLoopiness);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\nexport function resetLoopiness(cell, _x, _y, _map) {\n    if ((cell.blocksPathing() || cell.blocksMove()) &&\n        !cell.hasEntityFlag(ObjectFlags.L_SECRETLY_PASSABLE)) {\n        cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = false;\n    }\n    else {\n        cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n        // passMap[i][j] = true;\n    }\n}\nexport function checkLoopiness(map) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v)\n                return;\n            const cell = map.cell(x, y);\n            todo[x][y] = 0;\n            if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                return;\n            }\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const cell = map.cell(newX, newY);\n                if (!cell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY))\n                    continue;\n                const newCell = map.cell(newX, newY);\n                if (newCell.hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                }\n                else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) &&\n                        map.cell(newX, newY).hasCellFlag(Flags.Cell.IS_IN_LOOP)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\nexport function fillInnerLoopGrid(map, grid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            const cell = map.cell(x, y);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                grid[x][y] = 1;\n            }\n            else if (x > 0 && y > 0) {\n                const up = map.cell(x, y - 1);\n                const left = map.cell(x - 1, y);\n                if (up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    left.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\nexport function cleanLoopiness(map) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            const cell = map.cell(i, j);\n            if (cell.flags.cell & Flags.Cell.IS_IN_LOOP) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !(map.cell(newX, newY).flags.cell &\n                            Flags.Cell.IS_IN_LOOP)) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport { Map } from './map';\nexport class Snapshot {\n    constructor(map) {\n        this.map = new Map(map.width, map.height);\n        this.version = 0;\n    }\n}\nexport class SnapshotManager {\n    constructor(map) {\n        this.version = 0;\n        this.layerVersion = [];\n        this.lightVersion = 0;\n        // fovVersion = 0;\n        this.free = [];\n        this.map = map;\n        this.cellVersion = GWU.grid.make(map.width, map.height);\n        this.layerVersion = map.layers.map(() => 1);\n    }\n    takeNew() {\n        ++this.version;\n        const snap = this.free.length\n            ? this.free.pop()\n            : new Snapshot(this.map);\n        snap.map.flags.map = this.map.flags.map;\n        this.cellVersion.update((v, x, y) => {\n            const srcCell = this.map.cell(x, y);\n            if (srcCell.changed) {\n                v = this.version;\n            }\n            if (v !== snap.version) {\n                const destCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n            }\n            return v;\n        });\n        // systems\n        if (this.map.light.changed) {\n            this.lightVersion = this.version;\n            this.map.light.changed = false;\n        }\n        if (snap.version !== this.lightVersion) {\n            snap.map.light.copy(this.map.light);\n        }\n        // if (this.map.fov.changed) {\n        //     this.fovVersion = this.version;\n        //     this.map.fov.changed = false;\n        // }\n        // if (snap.version !== this.fovVersion) {\n        //     snap.map.fov.copy(this.map.fov);\n        // }\n        // layers\n        this.map.layers.forEach((layer, index) => {\n            const snapLayer = snap.map.layers[index];\n            if (layer.changed) {\n                this.layerVersion[index] = this.version;\n            }\n            if (this.layerVersion[index] !== snap.version) {\n                snapLayer.copy(layer);\n            }\n        });\n        snap.version = this.version;\n        return snap;\n    }\n    revertMapTo(snap) {\n        this.cellVersion.update((v, x, y) => {\n            if (v < snap.version)\n                return v;\n            const destCell = this.map.cell(x, y);\n            if (v > snap.version || destCell.changed) {\n                const srcCell = snap.map.cell(x, y);\n                destCell.copy(srcCell);\n                return snap.version;\n            }\n            return v;\n        });\n        // systems\n        if (snap.version < this.lightVersion || this.map.light.changed) {\n            this.map.light.copy(snap.map.light);\n            this.lightVersion = snap.version;\n        }\n        // if (snap.version < this.fovVersion || this.map.fov.changed) {\n        //     this.map.fov.copy(snap.map.fov);\n        //     this.fovVersion = snap.version;\n        // }\n        // layers\n        this.layerVersion.forEach((v, index) => {\n            if (v < snap.version)\n                return;\n            const destLayer = this.map.layers[index];\n            if (v > snap.version || destLayer.changed) {\n                const srcLayer = snap.map.layers[index];\n                destLayer.copy(srcLayer);\n                this.layerVersion[index] = snap.version;\n            }\n        });\n        this.version = snap.version;\n    }\n    release(snap) {\n        this.free.push(snap);\n    }\n}\n","import * as GWU from 'gw-utils';\nexport function isHallway(map, x, y) {\n    return (GWU.xy.arcCount(x, y, (i, j) => {\n        return map.cell(i, j).isPassable();\n    }) > 1);\n}\n","import * as GWU from 'gw-utils';\nexport function getCellPathCost(map, x, y) {\n    const cell = map.cell(x, y);\n    if (cell.blocksMove())\n        return GWU.path.OBSTRUCTION;\n    if (cell.blocksPathing())\n        return GWU.path.FORBIDDEN;\n    if (cell.hasActor())\n        return 10;\n    return 1;\n}\nexport function fillCostMap(map, costMap) {\n    costMap.update((_v, x, y) => getCellPathCost(map, x, y));\n}\nexport function getPathBetween(map, x0, y0, x1, y1, options = {}) {\n    const distanceMap = GWU.grid.alloc(map.width, map.height);\n    const costMap = GWU.grid.alloc(map.width, map.height);\n    fillCostMap(map, costMap);\n    GWU.path.calculateDistances(distanceMap, x0, y0, costMap, options.eightWays, GWU.xy.straightDistanceBetween(x0, y0, x1, y1) + 1);\n    const path = GWU.path.getPath(distanceMap, x1, y1, (x, y) => map.cell(x, y).blocksMove(), options.eightWays);\n    GWU.grid.free(costMap);\n    GWU.grid.free(distanceMap);\n    return path;\n}\n","import * as GWU from 'gw-utils';\nimport { Horde as Flags } from '../flags/horde';\nimport * as Map from '../map';\nimport * as Actor from '../actor';\nexport class Horde {\n    // requiredTile: string | null = null;\n    constructor(config) {\n        this.tags = [];\n        this.members = {};\n        // blueprintId: string | null = null;\n        this.flags = { horde: 0 };\n        if (config.tags) {\n            if (typeof config.tags === 'string') {\n                this.tags = config.tags.split(/[,|]/).map((t) => t.trim());\n            }\n            else {\n                this.tags = config.tags.slice();\n            }\n        }\n        this.leader = config.leader;\n        if (config.members) {\n            Object.entries(config.members).forEach(([id, range]) => {\n                this.members[id] = GWU.range.make(range);\n            });\n        }\n        this.frequency = GWU.frequency.make(config.frequency || 100);\n        // this.blueprintId = config.blueprintId || null;\n        this.flags.horde = GWU.flag.from(Flags, config.flags);\n        // if (config.requiredTile) this.requiredTile = config.requiredTile;\n    }\n    async spawn(map, x = -1, y = -1, opts = {}) {\n        var _a;\n        opts.canSpawn = opts.canSpawn || GWU.TRUE;\n        opts.rng = opts.rng || map.rng;\n        opts.machine = (_a = opts.machine) !== null && _a !== void 0 ? _a : 0;\n        const leader = await this._spawnLeader(map, x, y, opts);\n        if (!leader)\n            return null;\n        await this._spawnMembers(leader, map, opts);\n        return leader;\n    }\n    async _spawnLeader(map, x, y, opts) {\n        const leaderKind = Actor.get(this.leader);\n        if (!leaderKind) {\n            throw new Error('Failed to find leader kind = ' + this.leader);\n        }\n        if (x >= 0 && y >= 0) {\n            if (leaderKind.avoidsCell(map.cell(x, y)))\n                return null;\n        }\n        const leader = Actor.make(leaderKind, { machineHome: opts.machine });\n        if (!leader)\n            throw new Error('Failed to make horde leader - ' + this.leader);\n        if (x < 0 || y < 0) {\n            [x, y] = this._pickLeaderLoc(leader, map, opts) || [-1, -1];\n            if (x < 0 || y < 0) {\n                return null;\n            }\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!(await this._addLeader(leader, map, x, y, opts))) {\n            return null;\n        }\n        return leader;\n    }\n    async _addLeader(leader, map, x, y, _opts) {\n        return map.addActor(x, y, leader);\n    }\n    async _addMember(member, map, x, y, leader, _opts) {\n        member.leader = leader;\n        return map.addActor(x, y, member);\n    }\n    async _spawnMembers(leader, map, opts) {\n        const entries = Object.entries(this.members);\n        if (entries.length == 0)\n            return 0;\n        let count = 0;\n        await Promise.all(entries.map(async ([kindId, countRange]) => {\n            const count = countRange.value(opts.rng);\n            for (let i = 0; i < count; ++i) {\n                await this._spawnMember(kindId, map, leader, opts);\n            }\n        }));\n        return count;\n    }\n    async _spawnMember(kindId, map, leader, opts) {\n        const kind = Actor.get(kindId);\n        if (!kind) {\n            throw new Error('Failed to find member kind = ' + kindId);\n        }\n        const member = Actor.make(kind, { machineHome: opts.machine });\n        if (!member)\n            throw new Error('Failed to make horde member - ' + kindId);\n        const [x, y] = this._pickMemberLoc(member, map, leader, opts) || [\n            -1,\n            -1,\n        ];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n        // pre-placement stuff?  machine? effect?\n        if (!(await this._addMember(member, map, x, y, leader, opts))) {\n            return null;\n        }\n        return member;\n    }\n    _pickLeaderLoc(leader, map, opts) {\n        let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            if (!opts.canSpawn(x, y))\n                return false;\n            if (leader.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n    _pickMemberLoc(actor, map, leader, opts) {\n        let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n            if (!map.hasXY(x, y))\n                return false;\n            const cell = map.cell(x, y);\n            if (cell.hasActor())\n                return false; // Brogue kills existing actors, but lets do this instead\n            // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n            if (actor.avoidsCell(cell))\n                return false;\n            if (Map.isHallway(map, x, y)) {\n                return false;\n            }\n            return true;\n        });\n        return loc;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport { Horde } from './horde';\nimport { Horde as Flags } from '../flags/horde';\nexport const hordes = {};\nexport function install(id, horde) {\n    if (typeof horde === 'string') {\n        horde = { leader: horde };\n    }\n    if (!(horde instanceof Horde)) {\n        horde = new Horde(horde);\n    }\n    hordes[id] = horde;\n    return horde;\n}\nexport function installAll(hordes) {\n    Object.entries(hordes).forEach(([id, config]) => {\n        install(id, config);\n    });\n}\nexport function from(id) {\n    if (id instanceof Horde) {\n        return id;\n    }\n    if (typeof id === 'string') {\n        return hordes[id];\n    }\n    return new Horde(id);\n}\nexport function random(opts = {}) {\n    const match = {\n        tags: [],\n        forbidTags: [],\n        flags: 0,\n        forbidFlags: 0,\n        depth: 0,\n    };\n    if (typeof opts === 'string') {\n        opts = {\n            tags: opts,\n        };\n    }\n    const rng = opts.rng || GWU.rng.random;\n    if (typeof opts.tags === 'string') {\n        opts.tags\n            .split(/[,|&]/)\n            .map((t) => t.trim())\n            .forEach((t) => {\n            if (t.startsWith('!')) {\n                match.forbidTags.push(t.substring(1).trim());\n            }\n            else {\n                match.tags.push(t);\n            }\n        });\n    }\n    else if (Array.isArray(opts.tags)) {\n        match.tags = opts.tags.slice();\n    }\n    if (typeof opts.forbidTags === 'string') {\n        match.forbidTags = opts.forbidTags.split(/[,|&]/).map((t) => t.trim());\n    }\n    else if (Array.isArray(opts.forbidTags)) {\n        match.forbidTags = opts.forbidTags.slice();\n    }\n    if (opts.flags) {\n        if (typeof opts.flags === 'string') {\n            opts.flags\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .forEach((flag) => {\n                if (flag.startsWith('!')) {\n                    const key = flag.substring(1);\n                    match.forbidFlags |= Flags[key];\n                }\n                else {\n                    match.flags |= Flags[flag];\n                }\n            });\n        }\n    }\n    if (opts.forbidFlags) {\n        match.forbidFlags = GWU.flag.from(Flags, opts.forbidFlags);\n    }\n    if (opts.depth) {\n        match.depth = opts.depth;\n    }\n    if (match.depth && opts.oodChance) {\n        while (rng.chance(opts.oodChance)) {\n            match.depth += 1;\n        }\n        match.forbidFlags |= Flags.HORDE_NEVER_OOD;\n    }\n    const matches = Object.values(hordes).filter((k) => {\n        if (match.tags.length && !GWU.arraysIntersect(match.tags, k.tags))\n            return false;\n        if (match.forbidTags && GWU.arraysIntersect(match.forbidTags, k.tags))\n            return false;\n        if (match.flags && !(k.flags.horde & match.flags)) {\n            return false;\n        }\n        if (match.forbidFlags && k.flags.horde & match.forbidFlags) {\n            return false;\n        }\n        return true;\n    });\n    if (match.depth) {\n        return rng.item(matches) || null;\n    }\n    const depth = match.depth;\n    const weights = matches.map((h) => h.frequency(depth));\n    const index = rng.weighted(weights);\n    if (index < 0)\n        return null;\n    return matches[index];\n}\n","import { Map } from '../map/map';\nimport * as Flags from '../flags';\nexport class Memory extends Map {\n    constructor(map) {\n        super(map.width, map.height);\n        // this.actor = actor;\n        this.source = map;\n        this.cells.forEach((c) => c.setCellFlag(Flags.Cell.STABLE_MEMORY));\n    }\n    cell(x, y) {\n        let cell = this.cells[x][y];\n        if (!cell.hasCellFlag(Flags.Cell.STABLE_MEMORY)) {\n            cell = this.source.cell(x, y);\n        }\n        return cell;\n    }\n    memory(x, y) {\n        return this.cells[x][y];\n    }\n    storeMemory(x, y) {\n        const mem = this.memory(x, y);\n        const cell = this.source.cell(x, y);\n        mem.copy(cell);\n        // we do not track actors -- too hard to figure out\n        if (cell.actor) {\n            mem.actor = null;\n            mem.clearCellFlag(Flags.Cell.STABLE_SNAPSHOT);\n        }\n        mem.setCellFlag(Flags.Cell.STABLE_MEMORY);\n    }\n    forget(x, y) {\n        const mem = this.memory(x, y);\n        mem.clear();\n    }\n    onFovChange(x, y, isVisible) {\n        if (!isVisible) {\n            this.storeMemory(x, y);\n        }\n        else {\n            this.memory(x, y).clearCellFlag(Flags.Cell.STABLE_MEMORY);\n        }\n    }\n}\n","import { Memory } from './memory';\nconst cache = {};\nexport function store(actor, map, memory) {\n    let actorMemory = cache[actor.id];\n    if (!actorMemory) {\n        cache[actor.id] = actorMemory = {};\n    }\n    actorMemory[map.id] = memory;\n}\nexport function get(actor, map) {\n    let actorMemory = cache[actor.id];\n    if (actorMemory) {\n        const memory = actorMemory[map.id];\n        if (memory)\n            return memory;\n    }\n    return new Memory(map);\n}\n"],"names":["Depth","Fl","GWU","flag","fl","Entity","L_BLOCKS_ITEMS","L_BLOCKS_SURFACE","L_BLOCKS_GAS","L_BLOCKS_LIQUID","L_BLOCKS_EFFECTS","L_BLOCKS_ACTORS","L_BLOCKS_MOVE","L_BLOCKS_VISION","L_BLOCKS_DIAGONAL","L_WALL_FLAGS","Actor","Item","Tile","T_UP_STAIRS","T_DOWN_STAIRS","T_PORTAL","T_AUTO_DESCENT","T_LAVA","T_DEEP_WATER","T_SPONTANEOUSLY_IGNITES","T_HAS_STAIRS","T_IS_TRAP","T_IS_FIRE","T_ENTANGLES","TileMech","Cell","NEEDS_REDRAW","IS_IN_ROOM_MACHINE","IS_IN_AREA_MACHINE","HAS_ITEM","HAS_DORMANT_MONSTER","STABLE_MEMORY","SEARCHED_FROM_HERE","PRESSURE_PLATE_DEPRESSED","KNOWN_TO_BE_TRAP_FREE","IS_IN_LOOP","IS_CHOKEPOINT","IS_GATE_SITE","IS_IN_MACHINE","IMPREGNABLE","HAS_PLAYER","HAS_ACTOR","HAS_ANY_ACTOR","Map","Effect","E_CLEAR_GROUND","E_CLEAR_SURFACE","E_CLEAR_LIQUID","E_CLEAR_GAS","E_BLOCKED_BY_ITEMS","E_BLOCKED_BY_ACTORS","Horde","KeyInfo","[object Object]","x","y","disposable","this","lastId","kind","map","key","machineHome","depth","light","flags","entity","next","id","sprite","isDestroyed","hasEntityFlag","Flags.Entity","L_DESTROYED","canBeSeen","tag","tags","includes","cell","forbidsCell","avoidsCell","opts","getName","getDescription","getFlavor","verb","getVerb","EntityKind","config","requiredTileTags","name","flavor","description","make","split","t","trim","slice","init","_entity","length","hasAllTileTags","hasAnyTileTag","_opts","Entity.Entity","super","leader","items","fov","actor","Flags.Depth","ACTOR","hasActorFlag","Flags.Actor","IS_PLAYER","canSee","isAbleToSee","isDirectlyVisible","xy","forLineBetween","i","j","blocksVision","canSeeOrSense","isAbleToSense","isAnyKindOfVisible","item","pickupItem","dropItem","ActorKind","Entity.EntityKind","options","_actor","blocksMove","blocksPathing","isPlayer","action","list","push","remove","makeOptions","get","Error","kinds","makeKind","info","Object","assign","randomKind","match","forbidTags","forEach","startsWith","substring","Array","isArray","matches","values","filter","k","arraysIntersect","rng","random","JSON","stringify","made","quantity","ITEM","ItemKind","Handler","src","dest","ctx","handlers","installHandler","handler","_a","fn","from","Flags","chance","v","effect","effects","reset","E_FIRED","install","_b","_c","_d","index","dissipate","priority","groundTile","article","tile","tileMech","hasEffect","Flags.Tile","T_IS_FLAMMABLE","every","hasTileFlag","T_PATHING_BLOCKER","arg","color","result","fg","toString","_e","_f","base","extends","tiles","text","replace","search","Number","parseInt","delta","undefined","entries","value","makeEffect","Flags.TileMech","ch","bg","opacity","all","args","enter","open","tick","close","player","emit","MapLayer","changed","properties","_other","_x","_y","_tile","_item","_dt","_dest","_cell","TileLayer","current","depthTile","Tile.tiles","NULL","superpriority","blocksLayer","blockedByItems","hasItem","blockedByActors","hasActor","blockedByOtherLayers","highestPriority","GROUND","ground","setTile","Tile.get","clearDepth","SURFACE","machine","machineId","glowLightChanged","L_LIST_IN_SIDEBAR","setMapFlag","Flags.Map","MAP_SIDEBAR_TILES_CHANGED","setCellFlag","Flags.Cell","CAUGHT_FIRE_THIS_TURN","width","height","hasCellFlag","clearCellFlag","hasKey","fire","drawSprite","ActorLayer","obj","needsRedraw","hasXY","removeActor","ItemLayer","destroy","oldCell","GasLayer","volume","grid","alloc","fill","other","copy","startingVolume","spread","free","update","d","Math","max","clearTile","floor","min","total","count","highestVolume","startingTile","highestTile","updateCellVolume","calcOpacity","async","ctx_","force","didSomething","allHandlers","h","E_NEXT_ALWAYS","data","gameHasEnded","nextInfo","E_NEXT_EVERYWHERE","forEachAsync","E_NO_MARK_FIRED","EmitEffect","_map","events","FnEffect","MessageEffect","message","fired","addAt","ActivateMachineEffect","activateMachine","EffectEffect","FIRE.fire","SpawnEffect","_g","parts","p","grow","decrement","Flags.Effect","matchTile","abortIfBlocking","E_ABORT_IF_BLOCKS_MAP","isBlocking","E_PERMIT_BLOCKING","E_TREAT_AS_BLOCKING","computeSpawnMap","mapDisruptedBy","E_EVACUATE_CREATURES","evacuateCreatures","E_EVACUATE_ITEMS","evacuateItems","E_CLEAR_CELL","clearCells","spawnTiles","blockingGrid","blockingToMapX","blockingToMapY","walkableGrid","disrupts","forRect","lakeX","lakeY","isStairs","first","floodFill","spawnMap","accomplishedSomething","E_BLOCKED_BY_OTHER_LAYERS","E_SUPERPRIORITY","hasTile","EVENT_FIRED_THIS_TURN","E_PROTECTED","EVENT_PROTECTED","MAP_CHANGED","cellIsOk","isStart","blocksEffects","E_BUILD_IN_WALLS","isWall","E_MUST_TOUCH_WALLS","ok","eachNeighbor","E_NO_TOUCH_WALLS","dir","x2","y2","madeChange","startProb","probDec","DIRS","clearAll","clear","GAS","LIQUID","blockingMap","monst","loc","matchingLocNear","c","forceActor","forceItem","layers","ALL_LAYERS","reduce","out","fireSync","_ctx","e","ObjectFlags","TileFlags","TileMechFlags","CellFlags","FireLayer","exposeToFire","alwaysIgnite","ignitionChance","bestExtinguishingPriority","explosiveNeighborCount","fireIgnited","explosivePromotion","eachTile","T_EXTINGUISHES_FIRE","Effect.from","hasTileMechFlag","TM_EXPLOSIVE_PROMOTE","x0","y0","n","event","CellEntities","cb","object","eachItem","eachActor","start","chokeCount","_entities","TILE.tiles","snapshot","makeMixer","TILE.get","getSnapshot","withEntities","some","o","entityFlags","tileFlags","tileMechFlags","hasTag","hasAllTags","hasAnyTag","a","CHANGED","TILE.Tile","highestPriorityTile","find","TILE.flags","T_BLOCKS_OTHER_LAYERS","hasAllEntityFlags","L_BLOCKS_EVERYTHING","L_SECRETLY_PASSABLE","blackOut","tileFlag","tileMechFlag","ev","_activate","Effect.effects","Effect.fire","val","machineCount","_seed","cells","seed","LightSystem","initLayers","addLayer","Layer.TileLayer","Layer.FireLayer","Layer.GasLayer","Layer.ItemLayer","Layer.ActorLayer","layer","addItem","removeItem","oldX","oldY","hasPlayer","addActor","fmt","log","console","mixer","Mixer","dump","getAppearanceAt","l","boundary","isBoundaryXY","clearTiles","dt","fireAll","constructor","willFire","promoteChance","w","originX","originY","buffer","canvas","Canvas","STABLE_SNAPSHOT","putAppearance","dances","COLORS_DANCE","bake","putSnapshot","getLight","multiply","L_VISUALLY_DISTINCT","separate","getCellAppearance","eachGlowLight","_cb","isDark","updateChokepoints","updateCounts","passMap","passableArcCount","CLOCK_DIRS","newX","newY","cellCount","floodFillCount","i2","j2","results","startX","startY","getCount","todo","pop","updateLoopiness","eachCell","resetLoopiness","checkLoopiness","cleanLoopiness","inString","sdir","numStrings","maxStringLength","currentStringLength","tryAgain","fillInnerLoopGrid","up","left","designationSurvives","Snapshot","version","isHallway","arcCount","isPassable","prefab","charToTile","isStringArray","len","line","updateChokeCounts","layerVersion","lightVersion","cellVersion","snap","srcCell","snapLayer","destCell","destLayer","srcLayer","getCellPathCost","path","OBSTRUCTION","FORBIDDEN","fillCostMap","costMap","_v","x1","y1","distanceMap","calculateDistances","eightWays","straightDistanceBetween","getPath","members","horde","range","frequency","canSpawn","TRUE","_spawnLeader","_spawnMembers","leaderKind","Actor.get","Actor.make","_pickLeaderLoc","_addLeader","member","Promise","kindId","countRange","_spawnMember","_pickMemberLoc","_addMember","matchingLoc","Map.isHallway","hordes","forbidFlags","oodChance","HORDE_NEVER_OOD","weights","weighted","Memory","source","mem","memory","isVisible","storeMemory","cache","actorMemory"],"mappings":"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"}